version: 2
jobs:
  build:
    machine:
      enabled: true
    steps:
      - checkout
      - run:
          name: Create network
          command: 'docker network create -d bridge circleci'
      - run:
          name: Set namespace
          command: |
            if [ ${CIRCLE_BRANCH} == "master" ];
            then echo 'export NAMESPACE="demo"' >> $BASH_ENV ;
            else echo 'export NAMESPACE="dev"' >> $BASH_ENV ;
            fi
      - run:
          name: Build client
          command: 'cd ./client && docker build -t ${GOOGLE_GCR_HANDLE}/${GOOGLE_PROJECT_ID}/reactive-analytics-client:${NAMESPACE}-${CIRCLE_BUILD_NUM} --build-arg ANALYTICS_SERVER_HOST=${NAMESPACE}-reactive-analytics.adaptivecluster.com .'
      - run:
          name: Build server
          command: 'cd ./server && docker build -t ${GOOGLE_GCR_HANDLE}/${GOOGLE_PROJECT_ID}/reactive-analytics-server:${NAMESPACE}-${CIRCLE_BUILD_NUM} .'
      - run:
          name: List containers
          command: 'docker ps'
      - run:
          name: Authenticate with gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials ${GOOGLE_GKE_CLUSTER}
      - run:
          name: Push images to GCR
          command: |
            gcloud docker -- push ${GOOGLE_GCR_HANDLE}/${GOOGLE_PROJECT_ID}/reactive-analytics-client:${NAMESPACE}-${CIRCLE_BUILD_NUM} &&
            gcloud docker -- push ${GOOGLE_GCR_HANDLE}/${GOOGLE_PROJECT_ID}/reactive-analytics-server:${NAMESPACE}-${CIRCLE_BUILD_NUM}
      - run:
          name: Store build number
          command: |
            mkdir -p envs
            echo "export BUILD_NUM=${CIRCLE_BUILD_NUM}" >> envs/env_build_num
      - persist_to_workspace:
          root: envs
          paths:
            - env_build_num

  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: 'Install required OS dependencies'
          command: |
            apt-get install gettext -qy
      - attach_workspace:
          at: /envs
      - run:
          name: Restore build number
          command: cat /envs/env_build_num >> $BASH_ENV;
      - run:
          name: Authenticate with gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials ${GOOGLE_GKE_CLUSTER}
      - run:
          name: Set namespace
          command: declare -A envs=( ["develop"]="dev" ["master"]="demo"); echo "export NAMESPACE='${envs[$CIRCLE_BRANCH]}'" >> $BASH_ENV;
      - run:
          name: Create or update secrets
          command: |
            # The commands to create the secrets use a combination of create and apply. This means the secrets will be created
            # the first time they are run against the cluster or updated on all subsequent runs.
            # The way they work is:
            # 1. kubectl create is run as a dry-run with the output set to yaml
            # 2. The ouput is piped to kubectl apply using the "-f" and "-" flags to set it to read from a file and
            #    read the file from stdin
            # The result is the same a creating a yaml file with the secret set but all kept in memory
            kubectl create --namespace=${NAMESPACE}-reactive-analytics secret generic iex-cloud-version --from-literal=iex-cloud-version-value=${TEST_IEX_CLOUD_API_VERSION} --dry-run -o yaml | kubectl apply -f -
            kubectl create --namespace=${NAMESPACE}-reactive-analytics secret generic iex-cloud-public-key --from-literal=iex-cloud-public-key-value=${TEST_IEX_CLOUD_PUBLIC_KEY} --dry-run -o yaml | kubectl apply -f -
      - run:
          name: Update all kuberenetes definitions
          command: |
            for f in ./kubernetes/*.yml; do
              cat $f | /usr/bin/envsubst | kubectl --namespace=${NAMESPACE}-reactive-analytics apply -f -
            done

workflows:
  version: 2
  main:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop
