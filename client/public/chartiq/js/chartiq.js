/**
 *	Version m-2016-12-01.4.1
 *	Generation date: 2018-08-02T19:38:23.097Z
 *	Client name: adaptive
 *	License type: annual
 *	Expiration date: "2019/07/31"
 *	Domain lock: ["127.0.0.1","localhost","adaptiveconsulting.github.io"]
 *	iFrame lock: true
 */

/* Copyright 2014-2018 ChartIQ LLC */

/***************************************************************************/
/* Please note that manually changing the domain list or expiration dates  */
/*                                                                         */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WILL NOT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
/*                                                                         */
/*   modify the library locking mechanism. Any changes must be requested   */
/*                          directly from chartIQ.                         */
/***************************************************************************/

;(function() {
  var trialExpiration = undefined
  var licenseExpiration = '2019/07/31'
  var domains = ['127.0.0.1', 'localhost', 'adaptiveconsulting.github.io']
  var filesystem = false
  var expiration

  if (trialExpiration) expiration = new Date(trialExpiration).getTime()
  else if (licenseExpiration) expiration = new Date(licenseExpiration).getTime()

  if (expiration) {
    var now = new Date().getTime()

    if (expiration <= now) {
      if (trialExpiration) alert('This license has expired!')
      console.error('This license has expired!')
    } else if (trialExpiration) {
      var diffDays = Math.round((expiration - now) / (1000 * 60 * 60 * 24))

      if (diffDays < 3) {
        alert('This trial license expires in ' + diffDays + ' days!')
        console.log('WARNING: This trial license expires in ' + diffDays + ' days!')
      }
    }
  }
  if (filesystem === true && document.location.protocol == 'file:') {
    return // valid environment, skip domain check
  }
  if (domains && domains.length > 0) {
    var href = document.location.href
    var found = false

    for (var i = 0; i < domains.length; i++) {
      if (href.indexOf(domains[i]) > -1) {
        found = true
        break
      }
    }

    if (!found) {
      alert('ERROR: Not licensed for domain ' + href)
      console.error('ERROR: Not licensed for domain ' + href)
    }
  }
})()
;(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory)
  } else if (typeof exports === 'object') {
    module.exports = factory()
  } else {
    factory(root)
  }
})(this, function(_exports) {
  var __js_drawing_ =
    // -------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc
    // -------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ
      timezoneJS = _exports.timezoneJS

      /**
       * Base class for Drawing Tools. Use ciqInheritsFrom() to build a subclass for custom drawing tools.
       * The name of the subclass should be CIQ.Drawing.yourname. Whenever CIQ.ChartEngine.vectorType==yourname, then
       * your drawing tool will be the one that is enabled when the user begins a drawing. Capitalization of yourname
       * must be an exact match otherwise ther kernel will not be able to find your drawing tool.
       *
       * Each of the CIQ.Drawing prototype functions may be overridden. To create a functioning drawing tool
       * you must override the functions below that create alerts.
       *
       * Drawing clicks are always delivered in *adjusted price*. That is, if a stock has experienced splits then
       * the drawing will not display correctly on an unadjusted price chart unless this is considered during the rendering
       * process. Follow the templates to assure correct rendering under both circumstances.
       *
       * If no color is specified when building a drawing then color will be set to "auto" and the chart will automatically display
       * white or black depending on the background.
       *
       * **Permanent drawings:**<br>
       * To make a drawing permanent set its `permanent` property to `true` once created.
       * <br>Example: <br>
       * ```drawingObject.permanent=true;```
       *
       * See {@tutorial Custom Drawing Tools} for more details.
       *
       * @name  CIQ.Drawing
       * @constructor
       */
      CIQ.Drawing = function() {
        this.chartsOnly = false // Set this to true to restrict drawing to panels containing charts (as opposed to studies)
        this.penDown = false // Set to true when in the midst of creating the object
      }

      /**
       * Set to true when need to hold mouse down to draw; set to false for click on/off draw
       * @memberOf CIQ.Drawing
       * @example
       * CIQ.Drawing.prototype.dragToDraw=true;
       */
      CIQ.Drawing.prototype.dragToDraw = false

      /**
       * Is called to tell a drawing to abort itself. It should clean up any rendered objects such as DOM elements or toggle states. It
       * does not need to clean up anything that it drew on the canvas.
       * @param  {boolean} forceClear Indicates that the user explicitly has deleted the drawing (advanced usage)
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.abort = function(forceClear) {}

      /**
       * Should call this.stx.setMeasure() with the measurements of the drawing if supported
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.measure = function() {}

      /**
       * Initializes the drawing
       * @param  {object} stx   The chart object
       * @param  {object} panel The panel reference
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.construct = function(stx, panel) {
        this.stx = stx
        this.panelName = panel.name
      }

      /**
       * Called to render the drawing
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.render = function(context) {
        alert('must implement render function!')
      }

      /**
       * Called when a user clicks while drawing.
       * @param  {object} context               The canvas context
       * @param  {number} tick                  The tick in the dataSet
       * @param  {number} value - The value (price) of the click
       * @return {boolean}                       Return true if the drawing is complete. Otherwise the kernel will continue accepting clicks.
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.click = function(context, tick, value) {
        alert('must implement click function!')
      }

      /**
       * Called when the user moves while creating a drawing.
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.move = function(context, tick, value) {
        alert('must implement move function!')
      }

      /**
       * Called when the user attempts to reposition a drawing. The repositioner is the object provided by {@link CIQ.Drawing.intersected}
       * and can be used to determine which aspect of the drawing is being repositioned. For instance, this object may indicate
       * which point on the drawing was selected by the user. It might also contain the original coordinates of the point or anything else
       * that is useful to render the drawing.
       * @param  {object} context      The canvas context
       * @param  {object} repositioner The repositioner object
       * @param  {number} tick         Current tick in the dataSet for the mouse cursor
       * @param  {number} value        Current value in the datSet for the mouse cursor
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.reposition = function(context, repositioner, tick, value) {}
      /**
       * Called to determine whether the drawing is intersected by either the tick/value (pointer location) or box (small box surrounding the pointer).
       * For line based drawings, box should be checked. For area drawings (rectangles, circles) the point should be checked
       * @param  {number} tick               The tick in the dataSet representing the cursor point
       * @param  {number} value              The value (price) representing the cursor point
       * @param  {object} box				   x0,y0,x1,y1 representing an area around the cursor
       * @return {object}                    An object that contains information about the intersection.
       *                                     This object is passed back to {@link CIQ.Drawing.reposition} when repositioning the drawing.
       *                                     Return false or null if not intersected. Simply returning true will highlight the drawing.
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.intersected = function(tick, value, box) {
        alert('must implement intersected function!')
      }

      /**
       * Reconstruct this drawing type from a serialization object
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.reconstruct = function(stx, obj) {
        alert('must implement reconstruct function!')
      }

      /**
       * Serialize a drawing into an object.
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.serialize = function() {
        alert('must implement serialize function!')
      }

      /**
       * Called whenever periodicity changes so that drawings can adjust their rendering.
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.adjust = function() {
        alert('must implement adjust function!')
      }

      /**
       * Returns the highlighted state. Set this.highlighted to the highlight state.
       * For simple drawings the highlighted state is just true or false. For complex drawings
       * with pivot points for instance, the highlighted state may have more than two states.
       * Whenever the highlighted state changes a draw() event will be triggered.
       * @param {Boolean} highlighted True to highlight the drawing, false to unhighlight
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.prototype.highlight = function(highlighted) {
        if (highlighted && !this.highlighted) {
          this.highlighted = highlighted
        } else if (!highlighted && this.highlighted) {
          this.highlighted = highlighted
        }
        return this.highlighted
      }

      CIQ.Drawing.prototype.littleCircleRadius = function() {
        var radius = 6 //Math.max(12, this.layout.candleWidth)/2;
        return radius
      }

      CIQ.Drawing.prototype.littleCircle = function(ctx, x, y, fill) {
        var strokeColor = this.stx.defaultColor
        var fillColor = CIQ.chooseForegroundColor(strokeColor)
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.arc(x, y, this.littleCircleRadius(), 0, 2 * Math.PI, false)
        if (fill) ctx.fillStyle = strokeColor
        else ctx.fillStyle = fillColor
        ctx.strokeStyle = strokeColor
        ctx.fill()
        ctx.stroke()
        ctx.closePath()
      }

      CIQ.Drawing.prototype.rotator = function(ctx, x, y, on) {
        var circleSize = this.littleCircleRadius()
        var strokeColor = this.stx.defaultColor
        ctx.beginPath()
        ctx.lineWidth = 2
        if (!on) ctx.globalAlpha = 0.5
        var radius = 4 + circleSize
        ctx.arc(x, y, radius, 0, (3 * Math.PI) / 2, false)
        ctx.moveTo(x + 2 + radius, y + 2)
        ctx.lineTo(x + radius, y)
        ctx.lineTo(x - 2 + radius, y + 2)
        ctx.moveTo(x - 2, y + 2 - radius)
        ctx.lineTo(x, y - radius)
        ctx.lineTo(x - 2, y - 2 - radius)
        ctx.strokeStyle = strokeColor
        ctx.stroke()
        ctx.closePath()
        ctx.globalAlpha = 1
      }

      CIQ.Drawing.prototype.mover = function(ctx, x, y, on) {
        var circleSize = this.littleCircleRadius()
        var strokeColor = this.stx.defaultColor
        var length = 5
        var start = circleSize + 1
        ctx.save()
        ctx.lineWidth = 2
        ctx.strokeStyle = strokeColor
        ctx.translate(x, y)
        if (!on) ctx.globalAlpha = 0.5
        for (var i = 0; i < 4; i++) {
          ctx.rotate(Math.PI / 2)
          ctx.beginPath()
          ctx.moveTo(0, start)
          ctx.lineTo(0, start + length)
          ctx.moveTo(-2, start + length - 2)
          ctx.lineTo(0, start + length)
          ctx.lineTo(2, start + length - 2)
          ctx.closePath()
          ctx.stroke()
        }
        ctx.globalAlpha = 1
        ctx.restore()
      }

      CIQ.Drawing.prototype.resizer = function(ctx, x, y, on) {
        var circleSize = this.littleCircleRadius()
        var strokeColor = this.stx.defaultColor
        var length = 5 * Math.sqrt(2)
        var start = circleSize + 1
        ctx.save()
        ctx.lineWidth = 2
        ctx.strokeStyle = strokeColor
        ctx.translate(x, y)
        ctx.rotate(-Math.PI / 4)
        if (!on) ctx.globalAlpha = 0.5
        for (var i = 0; i < 2; i++) {
          ctx.rotate(Math.PI)
          ctx.beginPath()
          ctx.moveTo(0, start)
          ctx.lineTo(0, start + length)
          ctx.moveTo(-2, start + length - 2)
          ctx.lineTo(0, start + length)
          ctx.lineTo(2, start + length - 2)
          ctx.closePath()
          ctx.stroke()
        }
        ctx.globalAlpha = 1
        ctx.restore()
      }

      /**
       * Returns true if the tick and value are inside the box
       * @param  {number} tick  The tick
       * @param  {number} value The value
       * @param  {object} box   The box
       * @return {boolean}       True if the tick and value are within the box
       * @memberOf CIQ.Drawing
       */
      CIQ.Drawing.prototype.pointIntersection = function(tick, value, box) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return false
        if (tick >= box.x0 && tick <= box.x1 && value >= box.y1 && value <= box.y0) return true
        return false
      }

      /**
       * Sets the internal properties of the drawing points where x is a tick or a date and y is a value.
       * @param  {number} point    index to point to be converted (0,1)
       * @param  {number|string} x    index of bar in dataSet (tick) or date of tick (string form)
       * @param  {number} y    price
       * @param  {CIQ.Chart} [chart] Optional chart object
       * @memberOf CIQ.Drawing.BaseTwoPoint
       * @since 04-2015
       */
      CIQ.Drawing.prototype.setPoint = function(point, x, y, chart) {
        var tick = null
        var date = null
        if (typeof x == 'number') tick = x
        else if (x.length >= 8) date = x
        else tick = Number(x)

        if (y || y === 0) this['v' + point] = y
        var d
        if (tick !== null) {
          d = this.stx.dateFromTick(tick, chart, true)
          this['tzo' + point] = d.getTimezoneOffset()
          this['d' + point] = CIQ.yyyymmddhhmmssmmm(d)
          this['p' + point] = [tick, y]
        } else if (date !== null) {
          d = CIQ.strToDateTime(date)
          if (!this['tzo' + point] && this['tzo' + point] !== 0) this['tzo' + point] = d.getTimezoneOffset()
          this['d' + point] = date
          var adj = this['tzo' + point] - d.getTimezoneOffset()
          d.setMinutes(d.getMinutes() + adj)
          this['p' + point] = [this.stx.tickFromDate(CIQ.yyyymmddhhmmssmmm(d), chart), y]
        }
      }

      /**
       * Base class for drawings that require two mouse clicks. Override as required.
       * @constructor
       * @name  CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.BaseTwoPoint = function() {
        this.p0 = null
        this.p1 = null
        this.color = ''
      }

      CIQ.Drawing.BaseTwoPoint.ciqInheritsFrom(CIQ.Drawing)

      /**
       * Override this function to copy all of the config necessary to render your drawing
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.BaseTwoPoint.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
      }

      /**
       * Intersection is based on a hypothetical box that follows a user's mouse or finger around
       * An intersection occurs when either the box crosses over the drawing.The type should be "segment", "ray" or "line" depending on whether
       * the drawing extends infinitely in any or both directions. radius determines the size of the box in pixels and is
       * determined by the kernel depending on the user interface (mouse, touch, etc)
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */

      CIQ.Drawing.BaseTwoPoint.prototype.lineIntersection = function(tick, value, box, type) {
        if (!this.p0 || !this.p1) return false
        if (this.stx.layout.semiLog || this.stx.layout.chartScale == 'log') {
          return CIQ.boxIntersects(
            box.x0,
            CIQ.log10(box.y0),
            box.x1,
            CIQ.log10(box.y1),
            this.p0[0],
            CIQ.log10(this.p0[1]),
            this.p1[0],
            CIQ.log10(this.p1[1]),
            type,
          )
        } else {
          return CIQ.boxIntersects(box.x0, box.y0, box.x1, box.y1, this.p0[0], this.p0[1], this.p1[0], this.p1[1], type)
        }
      }

      /**
       * Determine whether the tick/value lie within the theoretical box outlined by this drawing's two points
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.BaseTwoPoint.prototype.boxIntersection = function(tick, value) {
        if (!this.p0 || !this.p1) return false
        if (tick > Math.max(this.p0[0], this.p1[0]) || tick < Math.min(this.p0[0], this.p1[0])) return false
        if (value > Math.max(this.p0[1], this.p1[1]) || value < Math.min(this.p0[1], this.p1[1])) return false
        return true
      }

      /**
       * Any two-point drawing that results in a drawing that is less than 10 pixels
       * can safely be assumed to be an accidental click. Such drawings are so small
       * that they are difficult to highlight and delete, so we won't allow them.
       *
       * <b>Note:</b> it is very important to use pixelFromValueAdjusted() rather than pixelFromPrice(). This will
       * ensure that saved drawings always render correctly when a chart is adjusted or transformed for display
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.BaseTwoPoint.prototype.accidentalClick = function(tick, value) {
        var panel = this.stx.panels[this.panelName]
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(tick, panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, tick, value)
        var h = Math.abs(x1 - x0)
        var v = Math.abs(y1 - y0)
        var length = Math.sqrt(h * h + v * v)
        if (length < 10) {
          this.penDown = false
          if (this.dragToDraw) this.stx.undo()
          return true
        }
      }

      /**
       * Value will be the actual underlying, unadjusted value for the drawing. Any adjustments or transformations
       * are reversed out by the kernel. Internally, drawings should store their raw data (date and value) so that
       * they can be rendered on charts with different layouts, axis, etc
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.BaseTwoPoint.prototype.click = function(context, tick, value) {
        this.copyConfig()
        var panel = this.stx.panels[this.panelName]
        if (!this.penDown) {
          this.setPoint(0, tick, value, panel.chart)
          this.penDown = true
          return false
        }
        if (this.accidentalClick(tick, value)) return this.dragToDraw

        this.setPoint(1, tick, value, panel.chart)
        this.penDown = false
        return true // kernel will call render after this
      }

      /**
       * Default adjust function for BaseTwoPoint drawings
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.BaseTwoPoint.prototype.adjust = function() {
        // If the drawing's panel doesn't exist then we'll check to see
        // whether the panel has been added. If not then there's no way to adjust
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.setPoint(1, this.d1, this.v1, panel.chart)
      }

      /**
       * Default move function for BaseTwoPoint drawings
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.BaseTwoPoint.prototype.move = function(context, tick, value) {
        if (!this.penDown) return

        this.copyConfig()
        this.p1 = [tick, value]
        this.render(context)
      }

      /**
       * Default measure function for BaseTwoPoint drawings
       * @memberOf CIQ.Drawing.BaseTwoPoint
       */
      CIQ.Drawing.BaseTwoPoint.prototype.measure = function() {
        this.stx.setMeasure(this.p0[1], this.p1[1], this.p0[0], this.p1[0], true)
      }

      CIQ.Drawing.BaseTwoPoint.prototype.reposition = function(context, repositioner, tick, value) {
        if (!repositioner) return
        var panel = this.stx.panels[this.panelName]
        var tickDiff = repositioner.tick - tick
        var valueDiff = repositioner.value - value
        if (repositioner.action == 'move') {
          this.setPoint(0, repositioner.p0[0] - tickDiff, repositioner.p0[1] - valueDiff, panel.chart)
          this.setPoint(1, repositioner.p1[0] - tickDiff, repositioner.p1[1] - valueDiff, panel.chart)
          this.render(context)
        } else if (repositioner.action == 'drag') {
          this[repositioner.point] = [tick, value]
          this.setPoint(0, this.p0[0], this.p0[1], panel.chart)
          this.setPoint(1, this.p1[0], this.p1[1], panel.chart)
          this.render(context)
        }
      }
      /**
       * Annotation drawing tool. An annotation is a simple text tool. It uses the class stx_annotation
       * to determine the font style and color for the annotation. Class stx_annotation_highlight_bg is used to
       * determine the background color when highlighted.
       *
       * The controls controls.annotationSave and controls.annotationCancel are used to create HTMLElements for
       * saving and canceling the annotation while editing. A textarea is created dynamically. The annotation tool
       * attempts to draw the annotations at the same size and position as the textarea so that the effect is wysiwig.
       * @constructor
       * @name  CIQ.Drawing.annotation
       * @see {@link CIQ.Drawing.BaseTwoPoint}
       */
      CIQ.Drawing.annotation = function() {
        this.name = 'annotation'
        this.arr = []
        this.w = 0
        this.h = 0
        this.padding = 4
        this.text = ''
        this.ta = null
        this.fontSize = 0
        this.font = {}
      }
      CIQ.Drawing.annotation.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint)

      CIQ.Drawing.annotation.prototype.getFontString = function() {
        this.fontDef = {
          style: null,
          weight: null,
          size: '12px',
          family: null,
        }
        var css = this.stx.canvasStyle('stx_annotation')
        if (css) {
          if (css.fontStyle) this.fontDef.style = css.fontStyle
          if (css.fontWeight) this.fontDef.weight = css.fontWeight
          if (css.fontSize) this.fontDef.size = css.fontSize
          if (css.fontFamily) this.fontDef.family = css.fontFamily
        }
        if (this.font.style) this.fontDef.style = this.font.style
        if (this.font.weight) this.fontDef.weight = this.font.weight
        if (this.font.size) this.fontDef.size = this.font.size
        if (this.font.family) this.fontDef.family = this.font.family
        this.fontString = ''
        var first = false
        for (var n in this.fontDef) {
          if (this.fontDef[n]) {
            if (!first) {
              this.fontString += ' '
            } else {
              first = true
            }
            this.fontString += this.fontDef[n]
          }
        }
      }

      CIQ.Drawing.annotation.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.font = CIQ.clone(this.stx.currentVectorParameters.annotation.font)
      }

      CIQ.Drawing.annotation.prototype.measure = function() {}

      CIQ.Drawing.annotation.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])

        context.font = this.fontString
        context.textBaseline = 'top'
        var x = x0
        var y = y0
        var w = this.w
        var h = this.h
        var color = this.color
        if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
        if (this.highlighted) color = this.stx.getCanvasColor('stx_highlight_vector')
        if (this.stem) {
          var sx0, sx1, sy0, sy1
          if (this.stem.d) {
            // absolute positioning of stem
            sx0 = this.stx.pixelFromTick(this.stem.t) // bottom of stem
            sy0 = this.stx.pixelFromValueAdjusted(panel, this.stem.t, this.stem.v)
            sx1 = x + w / 2 // center of text
            sy1 = y + h / 2
          } else if (this.stem.x) {
            // stem with relative offset positioning
            sx0 = x
            sy0 = y
            x += this.stem.x
            y += this.stem.y
            sx1 = x + w / 2
            sy1 = y + h / 2
          }

          context.beginPath()
          if (this.borderColor) context.strokeStyle = this.borderColor
          else context.strokeStyle = color
          context.moveTo(sx0, sy0)
          context.lineTo(sx1, sy1)
          context.stroke()
        }
        if (this.highlighted) {
          this.stx.canvasColor('stx_annotation_highlight_bg', context)
          context.fillRect(x, y, w, h)
        } else {
          if (this.fillColor) {
            context.fillStyle = this.fillColor
            context.fillRect(x, y, w, h)
          } else if (this.stem) {
            // If there's a stem then use the container color otherwise the stem will show through
            context.fillStyle = this.stx.containerColor
            context.fillRect(x, y, w, h)
          }
        }
        if (this.borderColor) {
          context.beginPath()
          context.strokeStyle = this.borderColor
          context.rect(x, y, w, h)
          context.stroke()
        }
        //this.stx.canvasFont("stx_annotation");
        if (this.highlighted) {
          this.stx.canvasColor('stx_annotation_highlight', context)
        } else {
          context.fillStyle = color
        }
        y += this.padding
        for (var i = 0; i < this.arr.length; i++) {
          context.fillText(this.arr[i], x + this.padding, y)
          y += this.fontSize
        }
        context.textBaseline = 'alphabetic'
      }

      CIQ.Drawing.annotation.prototype.onChange = function(e) {
        //no operation. Override if you want to capture the change.
      }

      CIQ.Drawing.annotation.prototype.edit = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        // When mouse events are attached to the container then any dom objects on top
        // of the container will intercept those events. In particular, the textarea for
        // annotations gets in the way, so here we capture the mouseup that fires on the textarea
        // and pass it along to the kernel if necessary
        function handleTAMouseUp(stx) {
          return function(e) {
            if (stx.manageTouchAndMouse && CIQ.ChartEngine.drawingLine) {
              stx.mouseup(e)
            }
          }
        }

        function cancelAnnotation(self) {
          return function() {
            self.stx.undo()
            self.stx.cancelTouchSingleClick = true
          }
        }
        function saveAnnotation(self) {
          return function() {
            if (self.ta.value === '') return
            self.text = self.ta.value
            self.adjust()

            self.stx.addDrawing(self)
            self.stx.changeOccurred('vector')
            self.stx.undo()
            self.stx.cancelTouchSingleClick = true
          }
        }

        function resizeAnnotation(self) {
          return function(e) {
            if (e) {
              var key = window.event ? event.keyCode : e.keyCode
              switch (key) {
                case 27:
                  self.stx.undo()
                  return
              }
            }
            var stx = self.stx
            var ta = self.ta
            var save = stx.controls.annotationSave
            var cancel = stx.controls.annotationCancel
            var arr = ta.value.split('\n')
            var w = 0
            //stx.canvasFont("stx_annotation");
            stx.chart.context.font = self.fontString
            for (var i = 0; i < arr.length; i++) {
              var m = stx.chart.context.measureText(arr[i]).width
              if (m > w) w = m
            }
            var h = (arr.length + 1) * (self.fontSize + 3)
            if (w < 50) w = 50
            ta.style.width = w + 30 + 'px' // Leave room for scroll bar
            ta.style.height = h + 'px'
            var y = parseInt(CIQ.stripPX(ta.style.top), 10)
            var x = CIQ.stripPX(ta.style.left)
            w = ta.clientWidth
            h = ta.clientHeight
            if (x + w + 100 < self.stx.chart.canvasWidth) {
              save.style.top = y + 'px'
              cancel.style.top = y + 'px'
              save.style.left = x + w + 10 + 'px'
              cancel.style.left = x + w + 60 + 'px'
            } else if (y + h + 30 < self.stx.chart.canvasHeight) {
              save.style.top = y + h + 10 + 'px'
              cancel.style.top = y + h + 10 + 'px'
              save.style.left = x + 'px'
              cancel.style.left = x + 50 + 'px'
            } else {
              save.style.top = y - 35 + 'px'
              cancel.style.top = y - 35 + 'px'
              save.style.left = x + 'px'
              cancel.style.left = x + 50 + 'px'
            }
          }
        }

        this.stx.undisplayCrosshairs()
        this.stx.editingAnnotation = true
        this.stx.openDialog = 'annotation'
        if (!this.ta) {
          this.ta = document.createElement('TEXTAREA')
          this.ta.className = 'stx_annotation'
          this.ta.onkeyup = resizeAnnotation(this)
          this.ta.onmouseup = handleTAMouseUp(this.stx)
          this.ta.setAttribute('wrap', 'hard')
          if (CIQ.isIOS7or8) this.ta.setAttribute('placeholder', 'Enter Text')
          this.stx.chart.container.appendChild(this.ta)
          this.ta.style.position = 'absolute'
          this.ta.style.width = '100px'
          this.ta.style.height = '20px'
          if (CIQ.ipad) {
            this.ta.ontouchstart = function(e) {
              e.stopPropagation()
            }
            /*var ta=this.ta;
				CIQ.safeClickTouch(this.ta, function(e){
					if(document.activeElement===ta){
							window.focus();
							CIQ.focus(ta, true);
					}
				});*/
          }
        }
        var self = this
        this.ta.oninput = function(e) {
          self.onChange(e)
        }
        this.ta.style.font = this.fontString
        if (this.color) {
          if (this.color == 'transparent' || this.color == 'auto') {
            var styles = getComputedStyle(this.ta)
            if (styles && CIQ.isTransparent(styles.backgroundColor)) {
              this.ta.style.color = this.stx.defaultColor
            } else {
              this.ta.style.color = '#000' // text area always has white background
            }
          } else {
            this.ta.style.color = this.color
          }
        }
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        //if the right edge of the ta is off of the screen, scootch it to the left.
        this.ta.style.left = x0 + 140 < this.stx.chart.canvasRight ? x0 + 'px' : this.stx.chart.canvasRight - 200 + 'px'
        //don't let user annotate on the x-axis
        this.ta.style.top = y0 + 60 < this.stx.chart.canvasHeight ? y0 + 'px' : y0 - 60 + 'px'
        if (this.name == 'callout') {
          this.ta.style.left = x0 - (!isNaN(this.w) ? this.w / 2 : this.defaultWidth) + 'px'
          this.ta.style.top = y0 - (!isNaN(this.h) ? this.h / 2 : this.defaultHeight) + 'px'
        }

        this.stx.controls.annotationSave.style.display = 'inline-block'
        this.stx.controls.annotationCancel.style.display = 'inline-block'
        CIQ.safeClickTouch(this.stx.controls.annotationSave, saveAnnotation(this))
        CIQ.safeClickTouch(this.stx.controls.annotationCancel, cancelAnnotation(this))
        resizeAnnotation(this)()

        /*var timeout=0;
		if(CIQ.ipad) timeout=400;
		if(!CIQ.isIOS7or8){
			CIQ.focus(this.ta,timeout);
		}*/
        this.ta.focus()

        if (CIQ.isAndroid) {
          // Android soft keyboard will cover up the lower half of the browser so if our
          // annotation is in that area we temporarily scroll the chart container upwards
          // The style.bottom of the chart container is reset in abort()
          this.priorBottom = this.stx.chart.container.style.bottom
          var keyboardHeight = 400 // hard coded. We could get this by measuring the change in innerHeight but timing is awkward because the keyboard scrolls
          var screenLocation = this.stx.resolveY(y0) + 100 // figure 100 pixels of height for text
          if (screenLocation > CIQ.pageHeight() - keyboardHeight) {
            var pixelsFromBottomOfScreen = CIQ.pageHeight() - screenLocation
            var scrolledBottom = keyboardHeight - pixelsFromBottomOfScreen
            this.stx.chart.container.style.bottom = scrolledBottom + 'px'
          }
        }
      }

      CIQ.Drawing.annotation.prototype.click = function(context, tick, value) {
        //don't allow user to add annotation on the axis.
        if (this.stx.overXAxis || this.stx.overYAxis) return
        var panel = this.stx.panels[this.panelName]
        this.copyConfig()
        this.getFontString()
        this.setPoint(0, tick, value, panel.chart)
        this.adjust()

        this.edit(context)
        return false
      }

      CIQ.Drawing.annotation.prototype.reposition = function(context, repositioner, tick, value) {
        var panel = this.stx.panels[this.panelName]
        var tickDiff = repositioner.tick - tick
        var valueDiff = repositioner.value - value
        this.setPoint(0, repositioner.p0[0] - tickDiff, repositioner.p0[1] - valueDiff, panel.chart)
        this.render(context)
      }

      CIQ.Drawing.annotation.prototype.intersected = function(tick, value, box) {
        var panel = this.stx.panels[this.panelName]
        if (!this.p0) return null // in case invalid drawing (such as from panel that no longer exists)
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var x1 = x0 + this.w
        var y1 = y0 + this.h
        if (this.stem && this.stem.x) {
          x0 += this.stem.x
          x1 += this.stem.x
          y0 += this.stem.y
          y1 += this.stem.y
        }
        var x = this.stx.pixelFromTick(tick, panel.chart)
        var y = this.stx.pixelFromValueAdjusted(panel, tick, value)

        if (x >= x0 && x <= x1 && y >= y0 && y <= y1)
          return {
            p0: CIQ.clone(this.p0),
            tick: tick,
            value: value,
          }
        return false
        //return this.boxIntersection(tick, value);
      }

      CIQ.Drawing.annotation.prototype.abort = function() {
        this.stx.controls.annotationSave.style.display = 'none'
        this.stx.controls.annotationCancel.style.display = 'none'
        if (this.ta) this.stx.chart.container.removeChild(this.ta)
        this.ta = null
        this.stx.openDialog = ''
        this.stx.showCrosshairs()
        //document.body.style.cursor="crosshair"; //Was interfering with undisplayCrosshairs().
        this.stx.editingAnnotation = false
        CIQ.clearCanvas(this.stx.chart.tempCanvas, this.stx)
        if (CIQ.isAndroid) {
          this.stx.chart.container.style.bottom = this.priorBottom
        }
        CIQ.fixScreen()
      }

      /**
       * Reconstruct an annotation
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object}[obj] A drawing descriptor
       * @param {string} [obj.col] The text color for the annotation
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.d0] String form date or date time
       * @param {number} [obj.v0] The value at which to position the annotation
       * @param {string} [obj.text] The annotation text (escaped using escape())
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {string} [obj.bc] Border color
       * @param {string} [obj.bg] Background color
       * @param {string} [obj.lw] Line width
       * @param {string} [obj.ptrn] Line pattern
       * @param {object} [obj.fnt] Font
       * @param {object} [obj.fnt.st] Font style
       * @param {object} [obj.fnt.sz] Font size
       * @param {object} [obj.fnt.wt] Font weight
       * @param {object} [obj.fnt.fl] Font family
       * @memberOf CIQ.Drawing.annotation
       */
      CIQ.Drawing.annotation.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.panelName = obj.pnl
        this.d0 = obj.d0
        this.tzo0 = obj.tzo0
        this.v0 = obj.v0
        this.text = unescape(obj.text)
        this.stem = obj.stem
        this.borderColor = obj.bc
        this.fillColor = obj.bg
        this.lineWidth = obj.lw
        this.pattern = obj.ptrn
        this.font = CIQ.replaceFields(obj.fnt, { st: 'style', sz: 'size', wt: 'weight', fl: 'family' })
        if (!this.font) this.font = {}
        this.adjust()
      }

      CIQ.Drawing.annotation.prototype.serialize = function() {
        var obj = {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          d0: this.d0,
          tzo0: this.tzo0,
          v0: this.v0,
          text: escape(this.text),
        }
        if (this.font) {
          var fnt = CIQ.removeNullValues(
            CIQ.replaceFields(this.font, { style: 'st', size: 'sz', weight: 'wt', family: 'fl' }),
          )
          if (!CIQ.isEmpty(fnt)) obj.fnt = fnt
        }
        if (this.stem) {
          obj.stem = {
            d: this.stem.d,
            v: this.stem.v,
            x: this.stem.x,
            y: this.stem.y,
          }
        }
        if (this.borderColor) obj.bc = this.borderColor
        if (this.fillColor) obj.bg = this.fillColor
        if (this.lineWidth) obj.lw = this.lineWidth
        if (this.pattern) obj.ptrn = this.pattern

        return obj
      }

      CIQ.Drawing.annotation.prototype.adjust = function() {
        this.getFontString()
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.arr = this.text.split('\n')
        var w = 0
        this.stx.chart.context.font = this.fontString
        //this.stx.canvasFont("stx_annotation");
        for (var i = 0; i < this.arr.length; i++) {
          var m = this.stx.chart.context.measureText(this.arr[i]).width
          if (m > w) w = m
        }
        if (w === 0) w = 2 * this.defaultWidth
        //this.fontSize=this.stx.getCanvasFontSize("stx_annotation");
        this.fontSize = CIQ.stripPX(this.fontDef.size)
        var h = this.arr.length * this.fontSize
        if (CIQ.touchDevice) h += 5
        this.w = w + this.padding * 2
        this.h = h + this.padding * 2
        var x1 = this.stx.pixelFromTick(this.p0[0], panel.chart) + w
        var y1 = this.stx.pixelFromPrice(this.p0[1], panel) + h
        this.p1 = [this.stx.tickFromPixel(x1, panel.chart), this.stx.valueFromPixel(y1, panel)]
        if (this.stem && this.stem.d) {
          this.stem.t = this.stx.tickFromDate(this.stem.d, panel.chart)
        }
      }

      /**
       * segment is an implementation of a {@link CIQ.Drawing.BaseTwoPoint} drawing.
       * @name CIQ.Drawing.segment
       * @constructor
       */
      CIQ.Drawing.segment = function() {
        this.name = 'segment'
      }

      CIQ.Drawing.segment.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint)

      CIQ.Drawing.segment.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])

        var color = this.color
        if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
        var width = this.lineWidth
        if (this.highlighted) {
          color = this.stx.getCanvasColor('stx_highlight_vector')
        }

        var parameters = {
          pattern: this.pattern,
          lineWidth: width,
        }
        this.stx.plotLine(x0, x1, y0, y1, color, this.name, context, panel, parameters)

        if (this.axisLabel && !this.highlighted) {
          if (this.name == 'horizontal') {
            this.stx.endClip()
            var txt = this.p0[1]
            if (panel.chart.transformFunc) txt = panel.chart.transformFunc(this.stx, panel.chart, txt)
            if (panel.yAxis.priceFormatter) txt = panel.yAxis.priceFormatter(this.stx, panel, txt)
            else txt = this.stx.formatYAxisPrice(txt, panel)
            this.stx.createYAxisLabel(panel, txt, y0, color)
            this.stx.startClip(panel.name)
          } else if (this.name == 'vertical' && !CIQ.ChartEngine.hideDates()) {
            var dt, newDT
            dt = this.stx.dateFromTick(this.p0[0], panel.chart, true)
            if (!this.stx.isDailyInterval(this.stx.layout.interval)) {
              var milli = dt.getSeconds() * 1000 + dt.getMilliseconds()
              if (this.stx.dataZone) {
                // this creates a date in the right quote feed date
                newDT = new timezoneJS.Date(
                  dt.getFullYear(),
                  dt.getMonth(),
                  dt.getDate(),
                  dt.getHours(),
                  dt.getMinutes(),
                  this.stx.dataZone,
                )
                dt = new Date(newDT.getTime() + milli)
              }
              if (this.stx.displayZone) {
                // this converts from the quote feed timezone to the chart specified time zone
                newDT = new timezoneJS.Date(dt.getTime(), this.stx.displayZone)
                dt = new Date(
                  newDT.getFullYear(),
                  newDT.getMonth(),
                  newDT.getDate(),
                  newDT.getHours(),
                  newDT.getMinutes(),
                )
                dt = new Date(dt.getTime() + milli)
              }
            }
            var myDate = CIQ.mmddhhmm(CIQ.yyyymmddhhmm(dt))

            if (panel.chart.xAxis.formatter) {
              myDate = panel.chart.xAxis.formatter(dt)
            } else if (this.stx.internationalizer) {
              var str
              if (dt.getHours() !== 0 || dt.getMinutes() !== 0) {
                str = this.stx.internationalizer.monthDay.format(dt)
                str += ' ' + this.stx.internationalizer.hourMinute.format(dt)
              } else {
                str = this.stx.internationalizer.yearMonthDay.format(dt)
              }
              myDate = str
            }

            this.stx.endClip()
            this.stx.createXAxisLabel(panel, myDate, x0, color, null, true)
            this.stx.startClip(panel.name)
          }
        }
        if (this.highlighted && this.name != 'horizontal' && this.name != 'vertical') {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          this.littleCircle(context, x0, y0, p0Fill)
          this.littleCircle(context, x1, y1, p1Fill)
        }
      }

      CIQ.Drawing.segment.prototype.abort = function() {
        this.stx.setMeasure(null, null, null, null, false)
      }

      CIQ.Drawing.segment.prototype.intersected = function(tick, value, box) {
        if (!this.p0 || !this.p1) return null // in case invalid drawing (such as from panel that no longer exists)
        if (this.name != 'horizontal' && this.name != 'vertical' && this.name != 'gartley') {
          if (this.pointIntersection(this.p0[0], this.p0[1], box)) {
            this.highlighted = 'p0'
            return {
              action: 'drag',
              point: 'p0',
            }
          } else if (this.pointIntersection(this.p1[0], this.p1[1], box)) {
            this.highlighted = 'p1'
            return {
              action: 'drag',
              point: 'p1',
            }
          }
        }
        var isIntersected = this.lineIntersection(tick, value, box, this.name)
        if (isIntersected) {
          this.highlighted = true
          // This object will be used for repositioning
          return {
            action: 'move',
            p0: CIQ.clone(this.p0),
            p1: CIQ.clone(this.p1),
            tick: tick, // save original tick
            value: value, // save original value
          }
        } else {
          return null
        }
      }

      CIQ.Drawing.segment.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.pattern = this.stx.currentVectorParameters.pattern
        if (this.pattern == 'none') this.pattern = 'solid'
      }

      /**
       * Reconstruct a segment
       * @memberOf CIQ.Drawing.segment
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The line color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.v1] Value (price) for the second point
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {number} [obj.d1] Date (string form) for the second point
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
       */
      CIQ.Drawing.segment.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.d0 = obj.d0
        this.d1 = obj.d1
        this.tzo0 = obj.tzo0
        this.tzo1 = obj.tzo1
        this.v0 = obj.v0
        this.v1 = obj.v1
        this.adjust()
      }

      CIQ.Drawing.segment.prototype.serialize = function() {
        return {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          ptrn: this.pattern,
          lw: this.lineWidth,
          d0: this.d0,
          d1: this.d1,
          tzo0: this.tzo0,
          tzo1: this.tzo1,
          v0: this.v0,
          v1: this.v1,
        }
      }

      /**
       * Continuous line drawing tool. Creates a series of connected line segments, each one completed with a user click.
       *
       * It inherits its properties from {@link CIQ.Drawing.segment}.
       * @constructor
       * @name  CIQ.Drawing.continuous
       */
      CIQ.Drawing.continuous = function() {
        this.name = 'continuous'
        this.dragToDraw = false
        this.maxSegments = null
      }

      CIQ.Drawing.continuous.ciqInheritsFrom(CIQ.Drawing.segment)

      CIQ.Drawing.continuous.prototype.click = function(context, tick, value) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.copyConfig()
        if (!this.penDown) {
          this.setPoint(0, tick, value, panel.chart)
          this.penDown = true
          return false
        }
        if (this.accidentalClick(tick, value)) {
          this.stx.undo() //abort
          return true
        }

        this.setPoint(1, tick, value, panel.chart)

        // render a segment
        var Segment = CIQ.Drawing.segment
        var segment = new Segment()
        var obj = this.serialize(this.stx)
        segment.reconstruct(this.stx, obj)
        this.stx.addDrawing(segment)
        this.stx.changeOccurred('vector')
        this.stx.draw()
        this.segment++

        if (this.maxSegments && this.segment > this.maxSegments) return true
        this.setPoint(0, tick, value, panel.chart) // reset initial point for next segment, copy by value
        return false
      }

      /**
       * Line drawing tool. A line is a vector defined by two points that is infinite in both directions.
       *
       * It inherits its properties from {@link CIQ.Drawing.segment}.
       * @constructor
       * @name  CIQ.Drawing.line
       */
      CIQ.Drawing.line = function() {
        this.name = 'line'
      }

      CIQ.Drawing.line.prototype.dragToDraw = false

      CIQ.Drawing.line.ciqInheritsFrom(CIQ.Drawing.segment)

      CIQ.Drawing.line.prototype.calculateOuterSet = function(panel) {
        if (
          this.p0[0] == this.p1[0] ||
          this.p0[1] == this.p1[1] ||
          this.stx.isDailyInterval(this.stx.layout.interval)
        ) {
          return
        }

        var vector = {
          x0: this.p0[0],
          y0: this.p0[1],
          x1: this.p1[0],
          y1: this.p1[1],
        }
        if (vector.x0 > vector.x1) {
          vector = {
            x0: this.p1[0],
            y0: this.p1[1],
            x1: this.p0[0],
            y1: this.p0[1],
          }
        }

        var earlier = vector.x0 - 1000
        var later = vector.x1 + 1000

        this.v0B = CIQ.yIntersection(vector, earlier)
        this.v1B = CIQ.yIntersection(vector, later)
        this.d0B = this.stx.dateFromTick(earlier, panel.chart)
        this.d1B = this.stx.dateFromTick(later, panel.chart)
      }

      CIQ.Drawing.line.prototype.click = function(context, tick, value) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.copyConfig()
        if (!this.penDown) {
          this.setPoint(0, tick, value, panel.chart)
          this.penDown = true
          return false
        }
        this.setPoint(1, tick, value, panel.chart)
        this.calculateOuterSet(panel)
        this.penDown = false
        return true // kernel will call render after this
      }

      /**
       * Reconstruct a line
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The line color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.v1] Value (price) for the second point
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {number} [obj.d1] Date (string form) for the second point
       * @param {number} [obj.v0B] Computed outer Value (price) for the first point if original drawing was on intraday but now displaying on daily
       * @param {number} [obj.v1B] Computed outer Value (price) for the second point if original drawing was on intraday but now displaying on daily
       * @param {number} [obj.d0B] Computed outer Date (string form) for the first point if original drawing was on intraday but now displaying on daily
       * @param {number} [obj.d1B] Computed outer Date (string form) for the second point if original drawing was on intraday but now displaying on daily
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
       * @memberOf CIQ.Drawing.line
       */
      CIQ.Drawing.line.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.v0 = obj.v0
        this.v1 = obj.v1
        this.d0 = obj.d0
        this.d1 = obj.d1
        this.tzo0 = obj.tzo0
        this.tzo1 = obj.tzo1
        if (obj.d0B) {
          this.d0B = obj.d0B
          this.d1B = obj.d1B
          this.v0B = obj.v0B
          this.v1B = obj.v1B
        }
        this.adjust()
      }

      CIQ.Drawing.line.prototype.serialize = function() {
        var obj = {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          ptrn: this.pattern,
          lw: this.lineWidth,
          d0: this.d0,
          d1: this.d1,
          tzo0: this.tzo0,
          tzo1: this.tzo1,
          v0: this.v0,
          v1: this.v1,
        }
        if (this.d0B) {
          obj.d0B = this.d0B
          obj.d1B = this.d1B
          obj.v0B = this.v0B
          obj.v1B = this.v1B
        }
        return obj
      }

      CIQ.Drawing.line.prototype.adjust = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.setPoint(1, this.d1, this.v1, panel.chart)
        // Use outer set if original drawing was on intraday but now displaying on daily
        if (this.stx.isDailyInterval(this.stx.layout.interval) && this.d0B) {
          this.setPoint(0, this.d0B, this.v0B, panel.chart)
          this.setPoint(1, this.d1B, this.v1B, panel.chart)
        }
      }

      /**
       * Ray drawing tool. A ray is defined by two points. It travels infinitely past the second point.
       *
       * It inherits its properties from {@link CIQ.Drawing.line}.
       * @constructor
       * @name  CIQ.Drawing.ray
       */
      CIQ.Drawing.ray = function() {
        this.name = 'ray'
      }

      CIQ.Drawing.ray.ciqInheritsFrom(CIQ.Drawing.line)

      CIQ.Drawing.ray.prototype.calculateOuterSet = function(panel) {
        if (
          this.p0[0] == this.p1[0] ||
          this.p0[1] == this.p1[1] ||
          this.stx.isDailyInterval(this.stx.layout.interval)
        ) {
          return
        }

        var vector = {
          x0: this.p0[0],
          y0: this.p0[1],
          x1: this.p1[0],
          y1: this.p1[1],
        }

        var endOfRay = vector.x1 + 1000
        if (vector.x0 > vector.x1) {
          endOfRay = vector.x1 - 1000
        }

        this.v0B = this.v0
        this.v1B = CIQ.yIntersection(vector, endOfRay)
        this.d0B = this.d0
        this.d1B = this.stx.dateFromTick(endOfRay, panel.chart)
      }

      CIQ.Drawing.ray.prototype.adjust = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.setPoint(1, this.d1, this.v1, panel.chart)
        // Use outer set if original drawing was on intraday but now displaying on daily
        if (this.stx.isDailyInterval(this.stx.layout.interval) && this.d0B) {
          this.setPoint(1, this.d1B, this.v1B, panel.chart)
        }
      }

      /**
       * Horizontal line drawing tool. The horizontal line extends infinitely in both directions.
       *
       * It inherits its properties from {@link CIQ.Drawing.segment}
       * @constructor
       * @name  CIQ.Drawing.horizontal
       */
      CIQ.Drawing.horizontal = function() {
        this.name = 'horizontal'
      }

      CIQ.Drawing.horizontal.prototype.dragToDraw = false

      CIQ.Drawing.horizontal.ciqInheritsFrom(CIQ.Drawing.segment)
      CIQ.Drawing.horizontal.prototype.measure = function() {}

      CIQ.Drawing.horizontal.prototype.click = function(context, tick, value) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.copyConfig()
        this.setPoint(0, tick, value, panel.chart)
        return true // kernel will call render after this
      }

      /**
       * Reconstruct a horizontal
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The line color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {boolean} [obj.al] True to include an axis label
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @memberOf CIQ.Drawing.horizontal
       */
      CIQ.Drawing.horizontal.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.v0 = obj.v0
        this.d0 = obj.d0
        this.tzo0 = obj.tzo0
        this.axisLabel = obj.al
        this.adjust()
      }

      CIQ.Drawing.horizontal.prototype.serialize = function() {
        var obj = {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          ptrn: this.pattern,
          lw: this.lineWidth,
          v0: this.v0,
          d0: this.d0,
          tzo0: this.tzo0,
          al: this.axisLabel,
        }

        return obj
      }

      CIQ.Drawing.horizontal.prototype.adjust = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.p1 = [this.p0[0] + 100, this.p0[1]]
      }

      CIQ.Drawing.horizontal.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.pattern = this.stx.currentVectorParameters.pattern
        this.axisLabel = this.stx.currentVectorParameters.axisLabel
      }

      /**
       * Vertical line drawing tool. The vertical line extends infinitely in both directions.
       *
       * It inherits its properties from {@link CIQ.Drawing.horizontal}.
       * @constructor
       * @name  CIQ.Drawing.vertical
       */
      CIQ.Drawing.vertical = function() {
        this.name = 'vertical'
      }

      CIQ.Drawing.vertical.ciqInheritsFrom(CIQ.Drawing.horizontal)
      CIQ.Drawing.vertical.prototype.measure = function() {}

      CIQ.Drawing.vertical.prototype.adjust = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.p1 = [this.p0[0], this.p0[1] + 1]
      }

      /**
       * Measure tool.
       * It inherits its properties from {@link CIQ.Drawing.segment}.
       * @constructor
       * @name  CIQ.Drawing.measure
       */
      CIQ.Drawing.measure = function() {
        this.name = 'measure'
      }

      CIQ.Drawing.measure.ciqInheritsFrom(CIQ.Drawing.segment)

      CIQ.Drawing.measure.prototype.click = function(context, tick, value) {
        this.copyConfig()
        if (!this.penDown) {
          this.p0 = [tick, value]
          this.penDown = true

          return false
        }
        this.stx.undo()
        this.penDown = false
        return true
      }

      /**
       * rectangle is an implementation of a {@link CIQ.Drawing.BaseTwoPoint} drawing
       * @constructor
       * @name  CIQ.Drawing.rectangle
       */
      CIQ.Drawing.rectangle = function() {
        this.name = 'rectangle'
      }

      CIQ.Drawing.rectangle.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint)

      CIQ.Drawing.rectangle.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])

        var x = Math.round(Math.min(x0, x1)) + 0.5
        var y = Math.min(y0, y1)
        var width = Math.max(x0, x1) - x
        var height = Math.max(y0, y1) - y
        var edgeColor = this.color
        if (this.highlighted) {
          edgeColor = this.stx.getCanvasColor('stx_highlight_vector')
        }

        var fillColor = this.fillColor
        if (fillColor && !CIQ.isTransparent(fillColor) && fillColor != 'auto') {
          context.beginPath()
          context.rect(x, y, width, height)
          context.fillStyle = fillColor
          context.globalAlpha = 0.2
          context.fill()
          context.closePath()
          context.globalAlpha = 1
        }

        var parameters = {
          pattern: this.pattern,
          lineWidth: this.lineWidth,
        }
        if (this.highlighted && parameters.pattern == 'none') {
          parameters.pattern = 'solid'
          if (parameters.lineWidth == 0.1) parameters.lineWidth = 1
        }

        // We extend the vertical lines by .5 to account for displacement of the horizontal lines
        // HTML5 Canvas exists *between* pixels, not on pixels, so draw on .5 to get crisp lines
        this.stx.plotLine(x0, x1, y0, y0, edgeColor, 'segment', context, panel, parameters)
        this.stx.plotLine(x1, x1, y0 - 0.5, y1 + 0.5, edgeColor, 'segment', context, panel, parameters)
        this.stx.plotLine(x1, x0, y1, y1, edgeColor, 'segment', context, panel, parameters)
        this.stx.plotLine(x0, x0, y1 + 0.5, y0 - 0.5, edgeColor, 'segment', context, panel, parameters)
        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          this.littleCircle(context, x0, y0, p0Fill)
          this.littleCircle(context, x1, y1, p1Fill)
        }
      }

      CIQ.Drawing.rectangle.prototype.intersected = function(tick, value, box) {
        if (!this.p0 || !this.p1) return null // in case invalid drawing (such as from panel that no longer exists)
        if (this.pointIntersection(this.p0[0], this.p0[1], box)) {
          this.highlighted = 'p0'
          return {
            action: 'drag',
            point: 'p0',
          }
        } else if (this.pointIntersection(this.p1[0], this.p1[1], box)) {
          this.highlighted = 'p1'
          return {
            action: 'drag',
            point: 'p1',
          }
        }
        if (this.boxIntersection(tick, value)) {
          this.highlighted = true
          return {
            action: 'move',
            p0: CIQ.clone(this.p0),
            p1: CIQ.clone(this.p1),
            tick: tick,
            value: value,
          }
        }
        return null
      }

      CIQ.Drawing.rectangle.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.fillColor = this.stx.currentVectorParameters.fillColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.pattern = this.stx.currentVectorParameters.pattern
      }

      /**
       * Reconstruct an rectangle
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The border color
       * @param {string} [obj.fc] The fill color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.v1] Value (price) for the second point
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {number} [obj.d1] Date (string form) for the second point
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
       * @memberOf CIQ.Drawing.rectangle
       */
      CIQ.Drawing.rectangle.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.fillColor = obj.fc
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.d0 = obj.d0
        this.d1 = obj.d1
        this.tzo0 = obj.tzo0
        this.tzo1 = obj.tzo1
        this.v0 = obj.v0
        this.v1 = obj.v1
        this.adjust()
      }

      CIQ.Drawing.rectangle.prototype.serialize = function() {
        return {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          fc: this.fillColor,
          ptrn: this.pattern,
          lw: this.lineWidth,
          d0: this.d0,
          d1: this.d1,
          tzo0: this.tzo0,
          tzo1: this.tzo1,
          v0: this.v0,
          v1: this.v1,
        }
      }

      /**
       * Ellipse drawing tool.
       *
       * It inherits its properties from {@link CIQ.Drawing.BaseTwoPoint}.
       * @constructor
       * @name  CIQ.Drawing.ellipse
       */
      CIQ.Drawing.ellipse = function() {
        this.name = 'ellipse'
      }

      CIQ.Drawing.ellipse.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint)

      CIQ.Drawing.ellipse.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])

        var left = x0 - (x1 - x0)
        var right = x1
        var middle = y0
        var bottom = y1
        var top = y0 - (y1 - y0)
        var weight = (bottom - top) / 6
        var lineWidth = this.lineWidth
        if (!lineWidth) lineWidth = 1.1
        var edgeColor = this.color
        if (edgeColor == 'auto' || CIQ.isTransparent(edgeColor)) edgeColor = this.stx.defaultColor
        if (this.highlighted) {
          edgeColor = this.stx.getCanvasColor('stx_highlight_vector')
          if (lineWidth == 0.1) lineWidth = 1.1
        }

        var fillColor = this.fillColor

        context.beginPath()
        context.moveTo(left, middle)
        context.bezierCurveTo(left, bottom + weight, right, bottom + weight, right, middle)
        context.bezierCurveTo(right, top - weight, left, top - weight, left, middle)

        if (fillColor && !CIQ.isTransparent(fillColor) && fillColor != 'auto') {
          context.fillStyle = fillColor
          context.globalAlpha = 0.2
          context.fill()
          context.globalAlpha = 1
        }

        if (edgeColor && this.pattern != 'none') {
          context.strokeStyle = edgeColor
          context.lineWidth = lineWidth
          if (context.setLineDash) {
            var lineDashArray = [] //array of dash, space, dash, space, etc
            if (this.pattern == 'dotted') lineDashArray = [lineWidth, lineWidth]
            else if (this.pattern == 'dashed') lineDashArray = [lineWidth * 5, lineWidth * 5]
            context.setLineDash(lineDashArray)
            context.lineDashOffset = 0 //start point in array
          }
          context.stroke()
        }
        context.closePath()
        if (this.highlighted) {
          var p1Fill = this.highlighted == 'p1' ? true : false
          this.littleCircle(context, x1, y1, p1Fill)
        }
      }

      CIQ.Drawing.ellipse.prototype.intersected = function(tick, value, box) {
        if (!this.p0 || !this.p1) return null // in case invalid drawing (such as from panel that no longer exists)
        if (this.pointIntersection(this.p1[0], this.p1[1], box)) {
          this.highlighted = 'p1'
          return {
            action: 'drag',
            point: 'p1',
          }
        }
        var left = this.p0[0] - (this.p1[0] - this.p0[0])
        var right = this.p1[0]
        var bottom = this.p1[1]
        var top = this.p0[1] - (this.p1[1] - this.p0[1])

        if (tick > Math.max(left, right) || tick < Math.min(left, right)) return false
        if (value > Math.max(top, bottom) || value < Math.min(top, bottom)) return false
        this.highlighted = true
        return {
          action: 'move',
          p0: CIQ.clone(this.p0),
          p1: CIQ.clone(this.p1),
          tick: tick,
          value: value,
        }
      }

      CIQ.Drawing.ellipse.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.fillColor = this.stx.currentVectorParameters.fillColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.pattern = this.stx.currentVectorParameters.pattern
      }

      /**
       * Reconstruct an ellipse
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The border color
       * @param {string} [obj.fc] The fill color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the center point
       * @param {number} [obj.v1] Value (price) for the outside point
       * @param {number} [obj.d0] Date (string form) for the center point
       * @param {number} [obj.d1] Date (string form) for the outside point
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
       * @memberOf CIQ.Drawing.ellipse
       */
      CIQ.Drawing.ellipse.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.fillColor = obj.fc
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.d0 = obj.d0
        this.d1 = obj.d1
        this.tzo0 = obj.tzo0
        this.tzo1 = obj.tzo1
        this.v0 = obj.v0
        this.v1 = obj.v1
        this.adjust()
      }

      CIQ.Drawing.ellipse.prototype.serialize = function() {
        return {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          fc: this.fillColor,
          ptrn: this.pattern,
          lw: this.lineWidth,
          d0: this.d0,
          d1: this.d1,
          tzo0: this.tzo0,
          tzo1: this.tzo1,
          v0: this.v0,
          v1: this.v1,
        }
      }

      /**
       * Fibonacci drawing tool.
       *
       * It inherits its properties from {@link CIQ.Drawing.BaseTwoPoint}
       * @constructor
       * @name  CIQ.Drawing.fibonacci
       */
      CIQ.Drawing.fibonacci = function() {
        this.name = 'fibonacci'
        this.configurator = 'fibonacci'
      }

      CIQ.Drawing.fibonacci.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint)

      CIQ.Drawing.fibonacci.mapping = {
        trend: 't',
        color: 'c',
        parameters: 'p',
        pattern: 'pt',
        opacity: 'o',
        lineWidth: 'lw',
        level: 'l',
        extendLeft: 'e',
        printLevels: 'pl',
        printValues: 'pv',
        timezone: 'tz',
      }

      CIQ.Drawing.fibonacci.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.fillColor = this.stx.currentVectorParameters.fillColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.parameters = this.stx.currentVectorParameters.fibonacci
      }
      /*
       * Calculate the outer points of the fib series, which are used to detect highlighting
       */
      CIQ.Drawing.fibonacci.prototype.setOuter = function() {
        this.outer = {
          p0: CIQ.clone(this.p0),
          p1: CIQ.clone(this.p1),
        }
        var y0 = this.p0[1]
        var y1 = this.p1[1]
        var x0 = this.p0[0]
        var x1 = this.p1[0]
        var top = Math.min(y1, y0)
        var bottom = Math.max(y1, y0)
        var height = bottom - top
        var isUpTrend = (y1 - y0) / (x1 - x0) > 0

        var min = 0
        var max = 1
        for (var i = 0; i < this.parameters.fibs.length; i++) {
          var fib = this.parameters.fibs[i]
          if (fib.level >= min && fib.level <= max) continue
          var val = isUpTrend ? bottom - height * fib.level : top + height * fib.level
          var x = CIQ.xIntersection({ x0: x0, x1: x1, y0: y0, y1: y1 }, val)
          if (fib.level < min) {
            min = fib.level
            if (isUpTrend) {
              this.outer.p0[1] = val
              this.outer.p0[0] = x
            } else {
              this.outer.p1[1] = val
              this.outer.p1[0] = x
            }
          } else if (fib.level > max) {
            max = fib.level
            if (isUpTrend) {
              this.outer.p1[1] = val
              this.outer.p1[0] = x
            } else {
              this.outer.p0[1] = val
              this.outer.p0[0] = x
            }
          }
        }
      }

      CIQ.Drawing.fibonacci.prototype.click = function(context, tick, value) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.copyConfig()
        if (!this.penDown) {
          this.setPoint(0, tick, value, panel.chart)
          this.penDown = true
          return false
        }
        if (this.accidentalClick(tick, value)) return this.dragToDraw

        this.setPoint(1, tick, value, panel.chart)
        this.setOuter()
        this.parameters = CIQ.clone(this.parameters) // separate from the global object
        this.penDown = false

        return true // kernel will call render after this
      }

      CIQ.Drawing.fibonacci.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var yAxis = panel.yAxis
        if (!this.p1) return
        var max = Math.max(this.p0[1], this.p1[1])
        var min = Math.min(this.p0[1], this.p1[1])
        var dist = max - min
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
        var top = Math.min(y1, y0)
        var bottom = Math.max(y1, y0)
        var height = bottom - top
        var isUpTrend = (y1 - y0) / (x1 - x0) > 0

        //old drawings missing parameters.trend
        var trend = { color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } }
        if (!this.parameters.trend) this.parameters.trend = trend
        var trendLineColor = this.parameters.trend.color
        if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
        if (this.highlighted) {
          trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
        }
        context.textBaseline = 'middle'
        this.stx.canvasFont('stx_yaxis', context) // match font from y axis so it looks cohesive
        var w = context.measureText('161.8%').width + 10 // give it extra space so it does not overlap with the price labels.
        var minX = Number.MAX_VALUE,
          minY = Number.MAX_VALUE,
          maxX = Number.MAX_VALUE * -1,
          maxY = Number.MAX_VALUE * -1
        var txtColor = this.color
        if (txtColor == 'auto' || CIQ.isTransparent(txtColor)) txtColor = this.stx.defaultColor
        for (var i = 0; i < this.parameters.fibs.length; i++) {
          context.textAlign = 'left'
          context.fillStyle = txtColor
          var fib = this.parameters.fibs[i]
          //var y=isUpTrend?bottom-height*fib.level:top+height*fib.level;
          var y = this.stx.pixelFromValueAdjusted(
            panel,
            this.p0[0],
            y1 < y0 ? max - dist * fib.level : min + dist * fib.level,
          )
          var x = CIQ.xIntersection({ x0: x0, x1: x1, y0: y0, y1: y1 }, y)
          var nearX = this.parameters.extendLeft ? 0 : x
          var farX = this.stx.chart.left + this.stx.chart.width
          if (this.parameters.printLevels) {
            var txt = Math.round(fib.level * 1000) / 10 + '%'
            farX -= w
            if (this.parameters.printValues) {
              context.fillStyle = txtColor // the price labels screw up the color and font size...so reset before rendering the text
              this.stx.canvasFont('stx_yaxis', context) // use the same context as the y axis so they match.
            }
            if (farX < nearX) context.textAlign = 'right'
            context.fillText(txt, farX, y)
            if (farX < nearX) farX += 5
            else farX -= 5
          }
          if (this.parameters.printValues) {
            if (x < this.stx.chart.width) {
              // just use the actual price that segment will render on regardless of 'isUpTrend' since the values must match the prices on the y axis, and can not be reversed.
              var price = this.stx.valueFromPixel(y, panel)
              if (yAxis.priceFormatter) {
                price = yAxis.priceFormatter(this.stx, panel, price)
              } else {
                price = this.stx.formatYAxisPrice(price, panel)
              }
              if (context == this.stx.chart.context) this.stx.endClip()
              this.stx.createYAxisLabel(panel, price, y, txtColor, null, context)
              if (context == this.stx.chart.context) this.stx.startClip(panel.name)
            }
          }
          var fibColor = fib.color
          if (fibColor == 'auto' || CIQ.isTransparent(fibColor)) fibColor = this.color
          if (fibColor == 'auto' || CIQ.isTransparent(fibColor)) fibColor = this.stx.defaultColor
          var fillColor = fib.color
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.fillColor
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor
          context.fillStyle = fillColor
          this.stx.plotLine(nearX, farX, y, y, fibColor, 'segment', context, panel, fib.parameters)
          context.globalAlpha = 0.05
          context.beginPath()
          context.moveTo(farX, y)
          context.lineTo(nearX, y)
          if (nearX) context.lineTo(Math.max(x0, x1), isUpTrend ? bottom : top)
          else context.lineTo(nearX, isUpTrend ? bottom : top)
          context.lineTo(farX, isUpTrend ? bottom : top)
          if (typeof fillColor != 'undefined') context.fill() // so legacy fibs continue to have no fill color.
          context.globalAlpha = 1
          if (y < minY) {
            minX = x
            minY = y
          }
          if (y > maxY) {
            maxX = x
            maxY = y
          }
        }
        // ensure we at least draw trend line from zero to 100
        for (var level in { 0: 0, 1: 1 }) {
          var yy = isUpTrend ? bottom - height * level : top + height * level
          yy = Math.round(yy)
          if (yy < minY) {
            minX = CIQ.xIntersection({ x0: x0, x1: x1, y0: y0, y1: y1 }, yy)
            minY = yy
          }
          if (yy > maxY) {
            maxX = CIQ.xIntersection({ x0: x0, x1: x1, y0: y0, y1: y1 }, yy)
            maxY = yy
          }
        }
        this.stx.plotLine(
          minX,
          maxX,
          minY,
          maxY,
          trendLineColor,
          'segment',
          context,
          panel,
          this.parameters.trend.parameters,
        )
        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          this.littleCircle(context, x0, y0, p0Fill)
          this.littleCircle(context, x1, y1, p1Fill)
        }
      }

      CIQ.Drawing.fibonacci.prototype.reposition = function(context, repositioner, tick, value) {
        CIQ.Drawing.BaseTwoPoint.prototype.reposition.apply(this, arguments)
        this.adjust()
      }

      CIQ.Drawing.fibonacci.prototype.intersected = function(tick, value, box) {
        //TODO, find some efficient way to allow an intersection across the entire trend line, not just between the two clicked points
        if (!this.p0 || !this.p1) return null // in case invalid drawing (such as from panel that no longer exists)
        if (
          CIQ.boxIntersects(
            box.x0,
            box.y0,
            box.x1,
            box.y1,
            this.outer.p0[0],
            this.outer.p0[1],
            this.outer.p1[0],
            this.outer.p1[1],
            'segment',
          )
        ) {
          if (this.pointIntersection(this.p0[0], this.p0[1], box)) {
            this.highlighted = 'p0'
            return {
              action: 'drag',
              point: 'p0',
            }
          } else if (this.pointIntersection(this.p1[0], this.p1[1], box)) {
            this.highlighted = 'p1'
            return {
              action: 'drag',
              point: 'p1',
            }
          }
          // This object will be used for repositioning
          this.highlighted = true
          return {
            action: 'move',
            p0: CIQ.clone(this.p0),
            p1: CIQ.clone(this.p1),
            tick: tick, // save original tick
            value: value, // save original value
          }
        }
        return null
      }

      /**
       * Reconstruct a fibonacci
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The border color
       * @param {string} [obj.fc] The fill color
       * @param {string} [obj.pnl] The panel name
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.v1] Value (price) for the second point
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {number} [obj.d1] Date (string form) for the second point
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
       * @param {object} [obj.parameters] Configuration parameters
       * @param {object} [obj.parameters.trend] Describes the trend line
       * @param {string} [obj.parameters.trend.color] The color for the trend line (Defaults to "auto")
       * @param {object} [obj.parameters.trend.parameters] Line description object (pattern, opacity, lineWidth)
       * @param {array} [obj.parameters.fibs] A fib description object for each fib (level, color, parameters)
       * @param {boolean} [obj.parameters.extendLeft] True to extend the fib lines to the left of the screen. Defaults to false.
       * @param {boolean} [obj.parameters.printLevels] True (default) to print text for each percentage level
       * @param {boolean} [obj.parameters.printValues] True to print text for each price level
       * @memberOf CIQ.Drawing.fibonacci
       */
      CIQ.Drawing.fibonacci.prototype.reconstruct = function(stx, obj) {
        obj = CIQ.replaceFields(obj, CIQ.reverseObject(CIQ.Drawing.fibonacci.mapping))
        this.stx = stx
        this.parameters = obj.parameters
        if (!this.parameters) this.parameters = CIQ.clone(this.stx.currentVectorParameters.fibonacci) // For legacy fibs that didn't include parameters
        this.color = obj.col
        this.fillColor = obj.fc
        this.panelName = obj.pnl
        this.d0 = obj.d0
        this.d1 = obj.d1
        this.tzo0 = obj.tzo0
        this.tzo1 = obj.tzo1
        this.v0 = obj.v0
        this.v1 = obj.v1
        this.adjust()
      }

      CIQ.Drawing.fibonacci.prototype.adjust = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.setPoint(1, this.d1, this.v1, panel.chart)
        this.setOuter()
      }

      CIQ.Drawing.fibonacci.prototype.serialize = function() {
        var obj = {
          name: this.name,
          parameters: this.parameters,
          pnl: this.panelName,
          col: this.color,
          fc: this.fillColor,
          d0: this.d0,
          d1: this.d1,
          tzo0: this.tzo0,
          tzo1: this.tzo1,
          v0: this.v0,
          v1: this.v1,
        }
        return CIQ.replaceFields(obj, CIQ.Drawing.fibonacci.mapping)
      }

      /**
       * Retracement drawing tool.
       *
       * It inherits its properties from {@link CIQ.Drawing.fibonacci}
       * @constructor
       * @name  CIQ.Drawing.retracement
       */
      CIQ.Drawing.retracement = function() {
        this.name = 'retracement'
      }

      CIQ.Drawing.retracement.ciqInheritsFrom(CIQ.Drawing.fibonacci)

      return _exports
    }

  var __js_i18n_ =
    // -------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc
    // -------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
       * Namespace for Internationalization API
       * @namespace
       * @name CIQ.I18N
       */

      CIQ.I18N = function() {}

      // Hack code to make a multi line string easy cut & paste from a spreadsheet
      CIQ.I18N.hereDoc = function(f) {
        return f
          .toString()
          .replace(/^[^\/]+\/\*!?/, '')
          .replace(/\*\/[^\/]+$/, '')
      }

      /**
       * Must be set to the desired lanuage. Defaults to english "en"
       * @memberOf CIQ.I18N
       * @type {string}
       */
      CIQ.I18N.language = 'en'

      /**
       * Sets the languages that that don't support shortening
       * Translation will print entire month from locale for these languages
       * @memberOf CIQ.I18N
       * @type {Object}
       */
      CIQ.I18N.longMonths = { zh: true, ja: true }

      /** Returns a word list containing unique words. Each word references an array of DOM
       *  nodes that contain that word. This can then be used for translation.
       *  Text nodes and placeholders which are found in the document tree will be wrapped by this function
       *  within a <translate> tag for easy translation back and forth.
       * @param  {HTMLElement} [root] Optional root for the TreeWalker.  If omitted, document.body assumed.
       * @return {object}      A word list containing unique words.
       *  @memberOf CIQ.I18N
       */
      CIQ.I18N.findAllTextNodes = function(root) {
        if (!root) root = document.body
        // Get all the words from the placeholders
        // We'll create text nodes for them and stash them in a hidden div so we can access them in the future
        if (root == document.body) {
          if (!$$('stashedTextNodes')) {
            var stashedTextNodes = document.createElement('div')
            stashedTextNodes.id = 'stashedTextNodes'
            stashedTextNodes.style.display = 'none'
            root.appendChild(stashedTextNodes)

            var fields = document.querySelectorAll('input,textarea,.editable_content')
            for (var f = 0; f < fields.length; f++) {
              var placeHolder = fields[f].getAttribute('placeholder')
              if (placeHolder) {
                var wrapper = stashedTextNodes.appendChild(document.createElement('translate'))
                wrapper.setAttribute('original', placeHolder)
                wrapper.placeholderFor = fields[f]
                wrapper.appendChild(document.createTextNode(placeHolder))
              }
            }
          }
        }

        var walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null, false)

        var node = walker.nextNode()
        var ws = new RegExp('^\\s*$')
        var wordList = {}
        var dontTranslate = {
          SCRIPT: true,
          STYLE: true,
        }

        while (node) {
          var key = node.nodeValue
          if (!ws.test(key)) {
            var parentNode = node.parentNode
            var parentTag = parentNode.tagName
            if (!dontTranslate[parentTag]) {
              if (parentTag != 'TRANSLATE') {
                var wrapper2 = parentNode.insertBefore(document.createElement('translate'), node)
                wrapper2.setAttribute('original', key) //must do getAttribute so it will clone
                wrapper2.appendChild(node)
              } else {
                key = parentNode.getAttribute('original')
              }
              if (!wordList[key]) wordList[key] = []
              wordList[key].push(node)
            }
          }
          node = walker.nextNode()
        }
        if (root == document.body) {
          // For missing word list collation only:
          // Get all the words from the study library that are used to populate the study dialogs.
          // These will have an empty array since they aren't associated with any nodes
          var studyLibrary = CIQ.Studies ? CIQ.Studies.studyLibrary : null
          if (studyLibrary) {
            for (var study in studyLibrary) {
              if (wordList[study] === null) wordList[study] = []
              var s = studyLibrary[study]
              if (s.inputs) {
                for (var input in s.inputs) {
                  if (!wordList[input]) wordList[input] = []
                }
              }
              if (s.outputs) {
                for (var output in s.outputs) {
                  if (!wordList[output]) wordList[output] = []
                }
              }
            }
          }
        }
        return wordList
      }

      /**
       * CIQ.I18N.missingWordList will scan the UI by walking all the text elements. It will determine which
       * text elements have not been translated for the given language and return those as a JSON object.
       * @param {string} [language] The language to search for missing words. Defaults to whatever language CIQ.I18N.language has set.
       * @memberOf CIQ.I18N
       */
      CIQ.I18N.missingWordList = function(language) {
        if (!language) language = CIQ.I18N.language
        var wordsInUI = CIQ.I18N.findAllTextNodes()
        var missingWords = {}
        var languageWordList = CIQ.I18N.wordLists[language]
        if (!languageWordList) languageWordList = {}
        for (var word in wordsInUI) {
          if (typeof languageWordList[word] == 'undefined') {
            missingWords[word] = ''
          }
        }
        return missingWords
      }

      /**
       * A convenient function for creating a human readable JSON object suitable for delivery to a translator.
       * @param {string} [language] Optional language. Defaults to CIQ.I18N.language.
       * @memberOf CIQ.I18N
       */
      CIQ.I18N.printableMissingWordList = function(language) {
        var missingWords = JSON.stringify(CIQ.I18N.missingWordList(language))
        missingWords = missingWords.replace(/\",\"/g, '",\n"')
        return missingWords
      }

      /**
       * Passes through the UI (DOM elements) and translates all of the text for the given language.
       * @param {string} [language] Optional language. Defaults to CIQ.I18N.language.
       * @param  {HTMLElement} [root] Optional root for the TreeWalker.  If omitted, document.body assumed.
       * @memberOf CIQ.I18N
       */
      CIQ.I18N.translateUI = function(language, root) {
        if (!CIQ.I18N.wordLists) return
        if (!language) language = CIQ.I18N.language
        var wordsInUI = CIQ.I18N.findAllTextNodes(root)
        var languageWordList = CIQ.I18N.wordLists[language]
        if (!languageWordList) return

        for (var word in wordsInUI) {
          var translation = languageWordList[word]
          var nodes = wordsInUI[word]
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i],
              parentNode = node.parentNode,
              originalText = parentNode.getAttribute('original')
            if (!translation) translation = originalText
            var elemWithPlaceholder = parentNode.placeholderFor
            if (elemWithPlaceholder) {
              elemWithPlaceholder.placeholder = translation
            } else {
              node.data = translation
            }
          }
        }
      }

      /**
       * Translates an individual word for a given language. Set stxx.translationCallback to this function
       * in order to automatically translate all textual elements on the chart itself.
       * @param {string} word The word to translate
       * @param {string} [language] Optional language. Defaults to CIQ.I18N.language.
       * @memberOf CIQ.I18N
       */
      CIQ.I18N.translate = function(word, language) {
        if (!language) language = CIQ.I18N.language
        if (!CIQ.I18N.wordLists) {
          console.log('Must include translations.js in order to use CIQ.I18N.translate()')
          return word
        }
        var languageWordList = CIQ.I18N.wordLists[language]
        var translation = null
        if (languageWordList) translation = languageWordList[word]
        return translation ? translation : word
      }

      /**
       * Converts a CSV array of translations into the required JSON format. You can output this to the console and paste back in if desired.
       * Assumes that the header row of the CSV is the language codes and that the first column is the key language (English). Assumes non-quoted words.
       * @param {array} [csv] Optional Translation spreadsheet in csv format. Make sure no leading tabs, trailing commas or spaces. Default is CIQ.I18N.csv
       * @memberOf CIQ.I18N
       */
      CIQ.I18N.convertCSV = function(csv) {
        var wordLists = CIQ.I18N.wordLists
        if (!csv) csv = CIQ.I18N.csv
        var lines = csv.split('\n')
        var headerRow = lines[0]
        var languages = headerRow.split(',')
        for (var j = 0; j < languages.length; j++) {
          var lang = languages[j]
          if (!wordLists[lang]) {
            wordLists[lang] = {}
          }
        }
        for (var i = 1; i < lines.length; i++) {
          var words = lines[i].split(',')
          var key = words[0]
          for (var k = 1; k < words.length; k++) {
            wordLists[languages[k]][key] = words[k]
          }
        }
      }

      /**
       * Convenience function to set up translation services for a chart and its surrounding GUI.
       * It automatically sets CIQ.I18N.language, loads all translations and translates the chart.
       * @param {object} stx A chart object
       * @param {string} language  For instance 'en'
       * @param {string} [translationCallback]  Function to perform Canvas Built-in word translations . Default is CIQ.I18N.translate
       * @param {array} [csv] Translation spreadsheet in csv format. Make sure no leading tabs, trailing commas or spaces. Default is CIQ.I18N.csv
       * @memberOf CIQ.I18N
       * @since 04-2015
       */
      CIQ.I18N.setLanguage = function(stx, language, translationCallback, csv) {
        CIQ.I18N.convertCSV(csv)
        CIQ.I18N.language = language
        CIQ.I18N.translateUI()
        if (!translationCallback) translationCallback = CIQ.I18N.translate
        stx.translationCallback = translationCallback
      }

      /**
       * This method will set the chart locale using Intl natively or for unsupported browsers dynamically loads the locale using JSONP.
       * Once the locale is loaded then the chart widget itself is updated for that locale. Use this function when a user can select a locale dynamically so as to avoid
       * having to include specific locale entries as `script` tags. The optional callback will be called when the locale
       * has been set. The Intl library includes JSONP for each locale. A zip of these locales can be requested and should
       * be placed in the locale-data directory of your server.
       * @param {object} stx A chart object
       * @param {string} locale A valid locale, for instance en-IN
       * @param {Function} [cb] Callback when locale has been loaded. This function will be passed an error message if it cannot be loaded.
       * @memberOf CIQ.I18N
       */
      CIQ.I18N.setLocale = function(stx, locale, cb) {
        if (!Intl.__addLocaleData) {
          // Intl built into browser
          stx.setLocale(locale)
          if (cb) cb(null)
          return
        }
        var localeFileURL = 'locale-data/jsonp/' + locale + '.js'
        var script = document.createElement('SCRIPT')
        script.async = true
        script.src = localeFileURL
        var s = document.getElementsByTagName('script')[0]
        s.parentNode.insertBefore(script, s.nextSibling)
        script.onload = function() {
          stx.setLocale(locale)
          if (cb) cb(null)
        }
        script.onerror = function() {
          if (cb) cb('cannot load script')
        }
      }

      /**
       * Extract the name of the month from the locale. We do this by creating a
       * localized date for the first date of each month. Then we extract the alphabetic characters.
       * MonthLetters then becomes the first letter of the month. Note that in the current Intl.js locale, chinese and
       * japanese months are implemented as 1月 through 12月 which causes this algorithm to fail. Hopefully real months
       * will be available when Intl becomes a browser standard, otherwise this method or the locale will need to
       * be modified for those or other special cases. The arrays are stored in stx.monthAbv and stx.monthLetters which
       * will then override the global arrays CIQ.monthAbv and CIQ.monthLetters.
       * @param  {object} stx       Chart object
       * @param  {object} formatter An Intl compatible date formatter
       * @param  {string} locale    A valid Intl locale, such as en-IN
       * @memberOf CIQ.I18N
       */
      CIQ.I18N.createMonthArrays = function(stx, formatter, locale) {
        stx.monthAbv = []
        stx.monthLetters = []
        var dt = new Date()
        var shortenMonth = true
        if (CIQ.I18N.longMonths && CIQ.I18N.longMonths[locale]) shortenMonth = false
        for (var i = 0; i < 12; i++) {
          dt.setDate(1)
          dt.setMonth(i)
          var str = formatter.format(dt)
          if (shortenMonth) {
            var month = ''
            for (var j = 0; j < str.length; j++) {
              var c = str.charAt(j)
              var cc = c.charCodeAt(0)
              if (cc < 65) continue
              month += c
            }
            stx.monthAbv[i] = month
            stx.monthLetters[i] = month[0]
          } else {
            stx.monthAbv[i] = str
            stx.monthLetters[i] = str
          }
        }
      }

      return _exports
    }

  var __js_intl_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function() {
      var global = typeof window !== 'undefined' ? window : self
      /*jshint proto:true, eqnull:true, boss:true, laxbreak:true, newcap:false, shadow:true, funcscope:true */
      var Intl =
        typeof global.Intl != 'undefined'
          ? global.Intl
          : (function(Intl) {
              /**
               * @license Copyright 2013 Andy Earnshaw, MIT License
               *
               * Implements the ECMAScript Internationalization API in ES5-compatible environments,
               * following the ECMA-402 specification as closely as possible
               *
               * ECMA-402: http://ecma-international.org/ecma-402/1.0/
               *
               * CLDR format locale data should be provided using Intl.__addLocaleData().
               */

              'use strict'
              var // We use this a lot (and need it for proto-less objects)
                hop = Object.prototype.hasOwnProperty,
                // Naive defineProperty for compatibility
                defineProperty =
                  (!window.isIE8 && Object.defineProperty) ||
                  function(obj, name, desc) {
                    if (desc.get && obj.__defineGetter__) obj.__defineGetter__(name, desc.get)
                    else if (desc.value || desc.get) obj[name] = desc.value || desc.get
                  },
                // Array.prototype.indexOf, as good as we need it to be
                arrIndexOf =
                  Array.prototype.indexOf ||
                  function(search) {
                    /*jshint validthis:true */
                    var t = this
                    if (!t.length) return -1

                    for (var i = arguments[1] || 0, max = t.length; i < max; i++) {
                      if (t[i] === search) return i
                    }
                  },
                // Create an object with the specified prototype (2nd arg required for Record)
                objCreate =
                  Object.create ||
                  function(proto, props) {
                    var obj

                    function F() {}
                    F.prototype = proto
                    obj = new F()

                    for (var k in props) {
                      if (hop.call(props, k)) defineProperty(obj, k, props[k])
                    }

                    return obj
                  },
                // Snapshot some (hopefully still) native built-ins
                arrSlice = Array.prototype.slice,
                arrConcat = Array.prototype.concat,
                arrPush = Array.prototype.push,
                arrJoin = Array.prototype.join,
                arrShift = Array.prototype.shift,
                // Naive Function.prototype.bind for compatibility
                fnBind =
                  Function.prototype.bind ||
                  function(thisObj) {
                    var fn = this,
                      args = arrSlice.call(arguments, 1)

                    return function() {
                      fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)))
                    }
                  },
                // Default locale is the first-added locale data for us
                defaultLocale,
                // Object housing internal properties for constructors
                internals = objCreate(null),
                // Keep internal properties internal
                secret = Math.random(),
                // An object map of date component keys, saves using a regex later
                dateWidths = objCreate(null, { narrow: {}, short: {}, long: {} }),
                // Each constructor prototype should be an instance of the constructor itself, but we
                // can't initialise them as such until some locale data has been added, so this is how
                // we keep track
                numberFormatProtoInitialised = false,
                dateTimeFormatProtoInitialised = false,
                // Some regular expressions we're using
                expInsertGroups = /(?=(?!^)(?:\d{3})+(?!\d))/g,
                expCurrencyCode = /^[A-Z]{3}$/,
                expUnicodeExSeq = /-u(?:-[0-9a-z]{2,8})+/gi, // See `extension` below
                expBCP47Syntax,
                expExtSequences,
                expVariantDupes,
                expSingletonDupes,
                // IANA Subtag Registry redundant tag and subtag maps
                redundantTags = {
                  tags: {
                    'art-lojban': 'jbo',
                    'i-ami': 'ami',
                    'i-bnn': 'bnn',
                    'i-hak': 'hak',
                    'i-klingon': 'tlh',
                    'i-lux': 'lb',
                    'i-navajo': 'nv',
                    'i-pwn': 'pwn',
                    'i-tao': 'tao',
                    'i-tay': 'tay',
                    'i-tsu': 'tsu',
                    'no-bok': 'nb',
                    'no-nyn': 'nn',
                    'sgn-BE-FR': 'sfb',
                    'sgn-BE-NL': 'vgt',
                    'sgn-CH-DE': 'sgg',
                    'zh-guoyu': 'cmn',
                    'zh-hakka': 'hak',
                    'zh-min-nan': 'nan',
                    'zh-xiang': 'hsn',
                    'sgn-BR': 'bzs',
                    'sgn-CO': 'csn',
                    'sgn-DE': 'gsg',
                    'sgn-DK': 'dsl',
                    'sgn-ES': 'ssp',
                    'sgn-FR': 'fsl',
                    'sgn-GB': 'bfi',
                    'sgn-GR': 'gss',
                    'sgn-IE': 'isg',
                    'sgn-IT': 'ise',
                    'sgn-JP': 'jsl',
                    'sgn-MX': 'mfs',
                    'sgn-NI': 'ncs',
                    'sgn-NL': 'dse',
                    'sgn-NO': 'nsl',
                    'sgn-PT': 'psr',
                    'sgn-SE': 'swl',
                    'sgn-US': 'ase',
                    'sgn-ZA': 'sfs',
                    'zh-cmn': 'cmn',
                    'zh-cmn-Hans': 'cmn-Hans',
                    'zh-cmn-Hant': 'cmn-Hant',
                    'zh-gan': 'gan',
                    'zh-wuu': 'wuu',
                    'zh-yue': 'yue',
                  },
                  subtags: {
                    BU: 'MM',
                    DD: 'DE',
                    FX: 'FR',
                    TP: 'TL',
                    YD: 'YE',
                    ZR: 'CD',
                    heploc: 'alalc97',
                    in: 'id',
                    iw: 'he',
                    ji: 'yi',
                    jw: 'jv',
                    mo: 'ro',
                    ayx: 'nun',
                    bjd: 'drl',
                    ccq: 'rki',
                    cjr: 'mom',
                    cka: 'cmr',
                    cmk: 'xch',
                    drh: 'khk',
                    drw: 'prs',
                    gav: 'dev',
                    hrr: 'jal',
                    ibi: 'opa',
                    kgh: 'kml',
                    lcq: 'ppr',
                    mst: 'mry',
                    myt: 'mry',
                    sca: 'hle',
                    tie: 'ras',
                    tkk: 'twm',
                    tlw: 'weo',
                    tnf: 'prs',
                    ybd: 'rki',
                    yma: 'lrr',
                  },
                  extLang: {
                    aao: ['aao', 'ar'],
                    abh: ['abh', 'ar'],
                    abv: ['abv', 'ar'],
                    acm: ['acm', 'ar'],
                    acq: ['acq', 'ar'],
                    acw: ['acw', 'ar'],
                    acx: ['acx', 'ar'],
                    acy: ['acy', 'ar'],
                    adf: ['adf', 'ar'],
                    ads: ['ads', 'sgn'],
                    aeb: ['aeb', 'ar'],
                    aec: ['aec', 'ar'],
                    aed: ['aed', 'sgn'],
                    aen: ['aen', 'sgn'],
                    afb: ['afb', 'ar'],
                    afg: ['afg', 'sgn'],
                    ajp: ['ajp', 'ar'],
                    apc: ['apc', 'ar'],
                    apd: ['apd', 'ar'],
                    arb: ['arb', 'ar'],
                    arq: ['arq', 'ar'],
                    ars: ['ars', 'ar'],
                    ary: ['ary', 'ar'],
                    arz: ['arz', 'ar'],
                    ase: ['ase', 'sgn'],
                    asf: ['asf', 'sgn'],
                    asp: ['asp', 'sgn'],
                    asq: ['asq', 'sgn'],
                    asw: ['asw', 'sgn'],
                    auz: ['auz', 'ar'],
                    avl: ['avl', 'ar'],
                    ayh: ['ayh', 'ar'],
                    ayl: ['ayl', 'ar'],
                    ayn: ['ayn', 'ar'],
                    ayp: ['ayp', 'ar'],
                    bbz: ['bbz', 'ar'],
                    bfi: ['bfi', 'sgn'],
                    bfk: ['bfk', 'sgn'],
                    bjn: ['bjn', 'ms'],
                    bog: ['bog', 'sgn'],
                    bqn: ['bqn', 'sgn'],
                    bqy: ['bqy', 'sgn'],
                    btj: ['btj', 'ms'],
                    bve: ['bve', 'ms'],
                    bvl: ['bvl', 'sgn'],
                    bvu: ['bvu', 'ms'],
                    bzs: ['bzs', 'sgn'],
                    cdo: ['cdo', 'zh'],
                    cds: ['cds', 'sgn'],
                    cjy: ['cjy', 'zh'],
                    cmn: ['cmn', 'zh'],
                    coa: ['coa', 'ms'],
                    cpx: ['cpx', 'zh'],
                    csc: ['csc', 'sgn'],
                    csd: ['csd', 'sgn'],
                    cse: ['cse', 'sgn'],
                    csf: ['csf', 'sgn'],
                    csg: ['csg', 'sgn'],
                    csl: ['csl', 'sgn'],
                    csn: ['csn', 'sgn'],
                    csq: ['csq', 'sgn'],
                    csr: ['csr', 'sgn'],
                    czh: ['czh', 'zh'],
                    czo: ['czo', 'zh'],
                    doq: ['doq', 'sgn'],
                    dse: ['dse', 'sgn'],
                    dsl: ['dsl', 'sgn'],
                    dup: ['dup', 'ms'],
                    ecs: ['ecs', 'sgn'],
                    esl: ['esl', 'sgn'],
                    esn: ['esn', 'sgn'],
                    eso: ['eso', 'sgn'],
                    eth: ['eth', 'sgn'],
                    fcs: ['fcs', 'sgn'],
                    fse: ['fse', 'sgn'],
                    fsl: ['fsl', 'sgn'],
                    fss: ['fss', 'sgn'],
                    gan: ['gan', 'zh'],
                    gds: ['gds', 'sgn'],
                    gom: ['gom', 'kok'],
                    gse: ['gse', 'sgn'],
                    gsg: ['gsg', 'sgn'],
                    gsm: ['gsm', 'sgn'],
                    gss: ['gss', 'sgn'],
                    gus: ['gus', 'sgn'],
                    hab: ['hab', 'sgn'],
                    haf: ['haf', 'sgn'],
                    hak: ['hak', 'zh'],
                    hds: ['hds', 'sgn'],
                    hji: ['hji', 'ms'],
                    hks: ['hks', 'sgn'],
                    hos: ['hos', 'sgn'],
                    hps: ['hps', 'sgn'],
                    hsh: ['hsh', 'sgn'],
                    hsl: ['hsl', 'sgn'],
                    hsn: ['hsn', 'zh'],
                    icl: ['icl', 'sgn'],
                    ils: ['ils', 'sgn'],
                    inl: ['inl', 'sgn'],
                    ins: ['ins', 'sgn'],
                    ise: ['ise', 'sgn'],
                    isg: ['isg', 'sgn'],
                    isr: ['isr', 'sgn'],
                    jak: ['jak', 'ms'],
                    jax: ['jax', 'ms'],
                    jcs: ['jcs', 'sgn'],
                    jhs: ['jhs', 'sgn'],
                    jls: ['jls', 'sgn'],
                    jos: ['jos', 'sgn'],
                    jsl: ['jsl', 'sgn'],
                    jus: ['jus', 'sgn'],
                    kgi: ['kgi', 'sgn'],
                    knn: ['knn', 'kok'],
                    kvb: ['kvb', 'ms'],
                    kvk: ['kvk', 'sgn'],
                    kvr: ['kvr', 'ms'],
                    kxd: ['kxd', 'ms'],
                    lbs: ['lbs', 'sgn'],
                    lce: ['lce', 'ms'],
                    lcf: ['lcf', 'ms'],
                    liw: ['liw', 'ms'],
                    lls: ['lls', 'sgn'],
                    lsg: ['lsg', 'sgn'],
                    lsl: ['lsl', 'sgn'],
                    lso: ['lso', 'sgn'],
                    lsp: ['lsp', 'sgn'],
                    lst: ['lst', 'sgn'],
                    lsy: ['lsy', 'sgn'],
                    ltg: ['ltg', 'lv'],
                    lvs: ['lvs', 'lv'],
                    lzh: ['lzh', 'zh'],
                    max: ['max', 'ms'],
                    mdl: ['mdl', 'sgn'],
                    meo: ['meo', 'ms'],
                    mfa: ['mfa', 'ms'],
                    mfb: ['mfb', 'ms'],
                    mfs: ['mfs', 'sgn'],
                    min: ['min', 'ms'],
                    mnp: ['mnp', 'zh'],
                    mqg: ['mqg', 'ms'],
                    mre: ['mre', 'sgn'],
                    msd: ['msd', 'sgn'],
                    msi: ['msi', 'ms'],
                    msr: ['msr', 'sgn'],
                    mui: ['mui', 'ms'],
                    mzc: ['mzc', 'sgn'],
                    mzg: ['mzg', 'sgn'],
                    mzy: ['mzy', 'sgn'],
                    nan: ['nan', 'zh'],
                    nbs: ['nbs', 'sgn'],
                    ncs: ['ncs', 'sgn'],
                    nsi: ['nsi', 'sgn'],
                    nsl: ['nsl', 'sgn'],
                    nsp: ['nsp', 'sgn'],
                    nsr: ['nsr', 'sgn'],
                    nzs: ['nzs', 'sgn'],
                    okl: ['okl', 'sgn'],
                    orn: ['orn', 'ms'],
                    ors: ['ors', 'ms'],
                    pel: ['pel', 'ms'],
                    pga: ['pga', 'ar'],
                    pks: ['pks', 'sgn'],
                    prl: ['prl', 'sgn'],
                    prz: ['prz', 'sgn'],
                    psc: ['psc', 'sgn'],
                    psd: ['psd', 'sgn'],
                    pse: ['pse', 'ms'],
                    psg: ['psg', 'sgn'],
                    psl: ['psl', 'sgn'],
                    pso: ['pso', 'sgn'],
                    psp: ['psp', 'sgn'],
                    psr: ['psr', 'sgn'],
                    pys: ['pys', 'sgn'],
                    rms: ['rms', 'sgn'],
                    rsi: ['rsi', 'sgn'],
                    rsl: ['rsl', 'sgn'],
                    sdl: ['sdl', 'sgn'],
                    sfb: ['sfb', 'sgn'],
                    sfs: ['sfs', 'sgn'],
                    sgg: ['sgg', 'sgn'],
                    sgx: ['sgx', 'sgn'],
                    shu: ['shu', 'ar'],
                    slf: ['slf', 'sgn'],
                    sls: ['sls', 'sgn'],
                    sqk: ['sqk', 'sgn'],
                    sqs: ['sqs', 'sgn'],
                    ssh: ['ssh', 'ar'],
                    ssp: ['ssp', 'sgn'],
                    ssr: ['ssr', 'sgn'],
                    svk: ['svk', 'sgn'],
                    swc: ['swc', 'sw'],
                    swh: ['swh', 'sw'],
                    swl: ['swl', 'sgn'],
                    syy: ['syy', 'sgn'],
                    tmw: ['tmw', 'ms'],
                    tse: ['tse', 'sgn'],
                    tsm: ['tsm', 'sgn'],
                    tsq: ['tsq', 'sgn'],
                    tss: ['tss', 'sgn'],
                    tsy: ['tsy', 'sgn'],
                    tza: ['tza', 'sgn'],
                    ugn: ['ugn', 'sgn'],
                    ugy: ['ugy', 'sgn'],
                    ukl: ['ukl', 'sgn'],
                    uks: ['uks', 'sgn'],
                    urk: ['urk', 'ms'],
                    uzn: ['uzn', 'uz'],
                    uzs: ['uzs', 'uz'],
                    vgt: ['vgt', 'sgn'],
                    vkk: ['vkk', 'ms'],
                    vkt: ['vkt', 'ms'],
                    vsi: ['vsi', 'sgn'],
                    vsl: ['vsl', 'sgn'],
                    vsv: ['vsv', 'sgn'],
                    wuu: ['wuu', 'zh'],
                    xki: ['xki', 'sgn'],
                    xml: ['xml', 'sgn'],
                    xmm: ['xmm', 'ms'],
                    xms: ['xms', 'sgn'],
                    yds: ['yds', 'sgn'],
                    ysl: ['ysl', 'sgn'],
                    yue: ['yue', 'zh'],
                    zib: ['zib', 'sgn'],
                    zlm: ['zlm', 'ms'],
                    zmi: ['zmi', 'ms'],
                    zsl: ['zsl', 'sgn'],
                    zsm: ['zsm', 'ms'],
                  },
                },
                // Currency minor units output from tools/getISO4217data.js, formatted
                currencyMinorUnits = {
                  BHD: 3,
                  BYR: 0,
                  XOF: 0,
                  BIF: 0,
                  XAF: 0,
                  CLF: 0,
                  CLP: 0,
                  KMF: 0,
                  DJF: 0,
                  XPF: 0,
                  GNF: 0,
                  ISK: 0,
                  IQD: 3,
                  JPY: 0,
                  JOD: 3,
                  KRW: 0,
                  KWD: 3,
                  LYD: 3,
                  OMR: 3,
                  PYG: 0,
                  RWF: 0,
                  TND: 3,
                  UGX: 0,
                  UYI: 0,
                  VUV: 0,
                  VND: 0,
                }

              /**
               * Defines regular expressions for various operations related to the BCP 47 syntax,
               * as defined at http://tools.ietf.org/html/bcp47#section-2.1
               */
              ;(function() {
                var // extlang		 = 3ALPHA			   ; selected ISO 639 codes
                  //				   *2("-" 3ALPHA)	   ; permanently reserved
                  extlang = '[a-z]{3}(?:-[a-z]{3}){0,2}',
                  // language		 = 2*3ALPHA			   ; shortest ISO 639 code
                  //				   ["-" extlang]	   ; sometimes followed by
                  //									   ; extended language subtags
                  //				 / 4ALPHA			   ; or reserved for future use
                  //				 / 5*8ALPHA			   ; or registered language subtag
                  language = '(?:[a-z]{2,3}(?:-' + extlang + ')?|[a-z]{4}|[a-z]{5,8})',
                  // script		 = 4ALPHA			   ; ISO 15924 code
                  script = '[a-z]{4}',
                  // region		 = 2ALPHA			   ; ISO 3166-1 code
                  //				 / 3DIGIT			   ; UN M.49 code
                  region = '(?:[a-z]{2}|\\d{3})',
                  // variant		 = 5*8alphanum		   ; registered variants
                  //				 / (DIGIT 3alphanum)
                  variant = '(?:[a-z0-9]{5,8}|\\d[a-z0-9]{3})',
                  //									   ; Single alphanumerics
                  //									   ; "x" reserved for private use
                  // singleton	 = DIGIT			   ; 0 - 9
                  //				 / %x41-57			   ; A - W
                  //				 / %x59-5A			   ; Y - Z
                  //				 / %x61-77			   ; a - w
                  //				 / %x79-7A			   ; y - z
                  singleton = '[0-9a-wy-z]',
                  // extension	 = singleton 1*("-" (2*8alphanum))
                  extension = singleton + '(?:-[a-z0-9]{2,8})+',
                  // privateuse	 = "x" 1*("-" (1*8alphanum))
                  privateuse = 'x(?:-[a-z0-9]{1,8})+',
                  // irregular	 = "en-GB-oed"		   ; irregular tags do not match
                  //				 / "i-ami"			   ; the 'langtag' production and
                  //				 / "i-bnn"			   ; would not otherwise be
                  //				 / "i-default"		   ; considered 'well-formed'
                  //				 / "i-enochian"		   ; These tags are all valid,
                  //				 / "i-hak"			   ; but most are deprecated
                  //				 / "i-klingon"		   ; in favor of more modern
                  //				 / "i-lux"			   ; subtags or subtag
                  //				 / "i-mingo"		   ; combination
                  //				 / "i-navajo"
                  //				 / "i-pwn"
                  //				 / "i-tao"
                  //				 / "i-tay"
                  //				 / "i-tsu"
                  //				 / "sgn-BE-FR"
                  //				 / "sgn-BE-NL"
                  //				 / "sgn-CH-DE"
                  irregular =
                    '(?:en-GB-oed' +
                    '|i-(?:ami|bnn|default|enochian|hak|klingon|lux|mingo|navajo|pwn|tao|tay|tsu)' +
                    '|sgn-(?:BE-FR|BE-NL|CH-DE))',
                  // regular		 = "art-lojban"		   ; these tags match the 'langtag'
                  //				 / "cel-gaulish"	   ; production, but their subtags
                  //				 / "no-bok"			   ; are not extended language
                  //				 / "no-nyn"			   ; or variant subtags: their meaning
                  //				 / "zh-guoyu"		   ; is defined by their registration
                  //				 / "zh-hakka"		   ; and all of these are deprecated
                  //				 / "zh-min"			   ; in favor of a more modern
                  //				 / "zh-min-nan"		   ; subtag or sequence of subtags
                  //				 / "zh-xiang"
                  regular = '(?:art-lojban|cel-gaulish|no-bok|no-nyn' + '|zh-(?:guoyu|hakka|min|min-nan|xiang))',
                  // grandfathered = irregular		   ; non-redundant tags registered
                  //				 / regular			   ; during the RFC 3066 era
                  grandfathered = '(?:' + irregular + '|' + regular + ')',
                  // langtag		 = language
                  //				   ["-" script]
                  //				   ["-" region]
                  //				   *("-" variant)
                  //				   *("-" extension)
                  //				   ["-" privateuse]
                  langtag =
                    language +
                    '(?:-' +
                    script +
                    ')?(?:-' +
                    region +
                    ')?(?:-' +
                    variant +
                    ')*(?:-' +
                    extension +
                    ')*(?:-' +
                    privateuse +
                    ')?'

                // Language-Tag	 = langtag			   ; normal language tags
                //				 / privateuse		   ; private use tag
                //				 / grandfathered	   ; grandfathered tags
                expBCP47Syntax = RegExp('^(?:' + langtag + '|' + privateuse + '|' + grandfathered + ')$', 'i')

                // Match duplicate variants in a language tag
                expVariantDupes = RegExp('^(?!x).*?-(' + variant + ')-(?:\\w{4,8}-(?!x-))*\\1\\b', 'i')

                // Match duplicate singletons in a language tag (except in private use)
                expSingletonDupes = RegExp('^(?!x).*?-(' + singleton + ')-(?:\\w+-(?!x-))*\\1\\b', 'i')

                // Match all extension sequences
                expExtSequences = RegExp('-' + extension, 'ig')
              })()

              // Sect 6.2 Language Tags
              // ======================

              /**
               * The IsStructurallyValidLanguageTag abstract operation verifies that the locale
               * argument (which must be a String value)
               *
               * - represents a well-formed BCP 47 language tag as specified in RFC 5646 section
               *	 2.1, or successor,
               * - does not include duplicate variant subtags, and
               * - does not include duplicate singleton subtags.
               *
               * The abstract operation returns true if locale can be generated from the ABNF
               * grammar in section 2.1 of the RFC, starting with Language-Tag, and does not
               * contain duplicate variant or singleton subtags (other than as a private use
               * subtag). It returns false otherwise. Terminal value characters in the grammar are
               * interpreted as the Unicode equivalents of the ASCII octet values given.
               */
              function /* 6.2.2 */ IsStructurallyValidLanguageTag(locale) {
                // represents a well-formed BCP 47 language tag as specified in RFC 5646
                if (!expBCP47Syntax.test(locale)) return false

                // does not include duplicate variant subtags, and
                if (expVariantDupes.test(locale)) return false

                // does not include duplicate singleton subtags.
                if (expSingletonDupes.test(locale)) return false

                return true
              }

              /**
	 * The CanonicalizeLanguageTag abstract operation returns the canonical and case-
	 * regularized form of the locale argument (which must be a String value that is
	 * a structurally valid BCP 47 language tag as verified by the
	 * IsStructurallyValidLanguageTag abstract operation). It takes the steps
	 * specified in RFC 5646 section 4.5, or successor, to bring the language tag
	 * into canonical form, and to regularize the case of the subtags, but does not
	 * take the steps to bring a language tag into “extlang form” and to reorder
	 * variant subtags.

	 * The specifications for extensions to BCP 47 language tags, such as RFC 6067,
	 * may include canonicalization rules for the extension subtag sequences they
	 * define that go beyond the canonicalization rules of RFC 5646 section 4.5.
	 * Implementations are allowed, but not required, to apply these additional rules.
	 */
              function /* 6.2.3 */ CanonicalizeLanguageTag(locale) {
                var match, parts

                // A language tag is in 'canonical form' when the tag is well-formed
                // according to the rules in Sections 2.1 and 2.2

                // Section 2.1 says all subtags use lowercase...
                locale = locale.toLowerCase()

                // ...with 2 exceptions: 'two-letter and four-letter subtags that neither
                // appear at the start of the tag nor occur after singletons.  Such two-letter
                // subtags are all uppercase (as in the tags "en-CA-x-ca" or "sgn-BE-FR") and
                // four-letter subtags are titlecase (as in the tag "az-Latn-x-latn").
                parts = locale.split('-')
                for (var i = 1, max = parts.length; i < max; i++) {
                  // Two-letter subtags are all uppercase
                  if (parts[i].length === 2) parts[i] = parts[i].toUpperCase()
                  // Four-letter subtags are titlecase
                  else if (parts[i].length === 4) parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].slice(1)
                  // Is it a singleton?
                  else if (parts[i].length === 1 && parts[i] != 'x') break
                }
                locale = arrJoin.call(parts, '-')

                // The steps laid out in RFC 5646 section 4.5 are as follows:

                // 1.  Extension sequences are ordered into case-insensitive ASCII order
                //	   by singleton subtag.
                if ((match = locale.match(expExtSequences)) && match.length > 1) {
                  // The built-in sort() sorts by ASCII order, so use that
                  match.sort()

                  // Replace all extensions with the joined, sorted array
                  locale = locale.replace(RegExp('(?:' + expExtSequences.source + ')+', 'i'), arrJoin.call(match, ''))
                }

                // 2.  Redundant or grandfathered tags are replaced by their 'Preferred-
                //	   Value', if there is one.
                if (hop.call(redundantTags.tags, locale)) locale = redundantTags.tags[locale]

                // 3.  Subtags are replaced by their 'Preferred-Value', if there is one.
                //	   For extlangs, the original primary language subtag is also
                //	   replaced if there is a primary language subtag in the 'Preferred-
                //	   Value'.
                parts = locale.split('-')

                for (var i = 1, max = parts.length; i < max; i++) {
                  if (hop.call(redundantTags.subtags, parts[i])) parts[i] = redundantTags.subtags[parts[i]]
                  else if (hop.call(redundantTags.extLang, parts[i])) {
                    parts[i] = redundantTags.extLang[parts[i]][0]

                    // For extlang tags, the prefix needs to be removed if it is redundant
                    if (i === 1 && redundantTags.extLang[parts[1]][1] === parts[0]) {
                      parts = arrSlice.call(parts, i++)
                      max -= 1
                    }
                  }
                }

                return arrJoin.call(parts, '-')
              }

              /**
               * The DefaultLocale abstract operation returns a String value representing the
               * structurally valid (6.2.2) and canonicalized (6.2.3) BCP 47 language tag for the
               * host environment’s current locale.
               */
              function /* 6.2.4 */ DefaultLocale() {
                return defaultLocale
              }

              // Sect 6.3 Currency Codes
              // =======================

              /**
               * The IsWellFormedCurrencyCode abstract operation verifies that the currency argument
               * (after conversion to a String value) represents a well-formed 3-letter ISO currency
               * code. The following steps are taken:
               */
              function /* 6.3.1 */ IsWellFormedCurrencyCode(currency) {
                var // 1. Let `c` be ToString(currency)
                  c = String(currency),
                  // 2. Let `normalized` be the result of mapping c to upper case as described
                  //	  in 6.1.
                  normalized = toLatinUpperCase(c)

                // 3. If the string length of normalized is not 3, return false.
                // 4. If normalized contains any character that is not in the range "A" to "Z"
                //	  (U+0041 to U+005A), return false.
                if (expCurrencyCode.test(normalized) === false) return false

                // 5. Return true
                return true
              }

              // Sect 9.2 Abstract Operations
              // ============================
              function /* 9.2.1 */ CanonicalizeLocaleList(locales) {
                // The abstract operation CanonicalizeLocaleList takes the following steps:

                // 1. If locales is undefined, then a. Return a new empty List
                if (locales === undefined) return new List()

                var // 2. Let seen be a new empty List.
                  seen = new List(),
                  // 3. If locales is a String value, then
                  //	  a. Let locales be a new array created as if by the expression new
                  //	  Array(locales) where Array is the standard built-in constructor with
                  //	  that name and locales is the value of locales.
                  locales = typeof locales === 'string' ? [locales] : locales,
                  // 4. Let O be ToObject(locales).
                  O = toObject(locales),
                  // 5. Let lenValue be the result of calling the [[Get]] internal method of
                  //	  O with the argument "length".
                  // 6. Let len be ToUint32(lenValue).
                  len = O.length,
                  // 7. Let k be 0.
                  k = 0

                // 8. Repeat, while k < len
                while (k < len) {
                  var // a. Let Pk be ToString(k).
                    Pk = String(k),
                    // b. Let kPresent be the result of calling the [[HasProperty]] internal
                    //	  method of O with argument Pk.
                    kPresent = Pk in O

                  // c. If kPresent is true, then
                  if (kPresent) {
                    var // i. Let kValue be the result of calling the [[Get]] internal
                      //	   method of O with argument Pk.
                      kValue = O[Pk]

                    // ii. If the type of kValue is not String or Object, then throw a
                    //	   TypeError exception.
                    if (kValue == null || (typeof kValue !== 'string' && typeof kValue !== 'object'))
                      throw new TypeError('String or Object type expected')

                    var // iii. Let tag be ToString(kValue).
                      tag = String(kValue)

                    // iv. If the result of calling the abstract operation
                    //	   IsStructurallyValidLanguageTag (defined in 6.2.2), passing tag as
                    //	   the argument, is false, then throw a RangeError exception.
                    if (!IsStructurallyValidLanguageTag(tag))
                      throw new RangeError("'" + tag + "' is not a structurally valid language tag")

                    // v. Let tag be the result of calling the abstract operation
                    //	  CanonicalizeLanguageTag (defined in 6.2.3), passing tag as the
                    //	  argument.
                    tag = CanonicalizeLanguageTag(tag)

                    // vi. If tag is not an element of seen, then append tag as the last
                    //	   element of seen.
                    if (arrIndexOf.call(seen, tag) === -1) arrPush.call(seen, tag)
                  }

                  // d. Increase k by 1.
                  k++
                }

                // 9. Return seen.
                return seen
              }

              /**
               * The BestAvailableLocale abstract operation compares the provided argument
               * locale, which must be a String value with a structurally valid and
               * canonicalized BCP 47 language tag, against the locales in availableLocales and
               * returns either the longest non-empty prefix of locale that is an element of
               * availableLocales, or undefined if there is no such element. It uses the
               * fallback mechanism of RFC 4647, section 3.4. The following steps are taken:
               */
              function /* 9.2.2 */ BestAvailableLocale(availableLocales, locale) {
                var // 1. Let candidate be locale
                  candidate = locale

                // 2. Repeat
                while (true) {
                  // a. If availableLocales contains an element equal to candidate, then return
                  // candidate.
                  if (arrIndexOf.call(availableLocales, candidate) > -1) return candidate

                  var // b. Let pos be the character index of the last occurrence of "-"
                    // (U+002D) within candidate. If that character does not occur, return
                    // undefined.
                    pos = candidate.lastIndexOf('-')

                  if (pos < 0) return

                  // c. If pos ≥ 2 and the character "-" occurs at index pos-2 of candidate,
                  //	  then decrease pos by 2.
                  if (pos >= 2 && candidate.charAt(pos - 2) == '-') pos -= 2

                  // d. Let candidate be the substring of candidate from position 0, inclusive,
                  //	  to position pos, exclusive.
                  candidate = candidate.substring(0, pos)
                }
              }

              /**
               * The LookupMatcher abstract operation compares requestedLocales, which must be
               * a List as returned by CanonicalizeLocaleList, against the locales in
               * availableLocales and determines the best available language to meet the
               * request. The following steps are taken:
               */
              function /* 9.2.3 */ LookupMatcher(availableLocales, requestedLocales) {
                var // 1. Let i be 0.
                  i = 0,
                  // 2. Let len be the number of elements in requestedLocales.
                  len = requestedLocales.length,
                  // 3. Let availableLocale be undefined.
                  availableLocale

                // 4. Repeat while i < len and availableLocale is undefined:
                while (i < len && !availableLocale) {
                  var // a. Let locale be the element of requestedLocales at 0-origined list
                    //	  position i.
                    locale = requestedLocales[i],
                    // b. Let noExtensionsLocale be the String value that is locale with all
                    //	  Unicode locale extension sequences removed.
                    noExtensionsLocale = String(locale).replace(expUnicodeExSeq, ''),
                    // c. Let availableLocale be the result of calling the
                    //	  BestAvailableLocale abstract operation (defined in 9.2.2) with
                    //	  arguments availableLocales and noExtensionsLocale.
                    availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale)

                  // d. Increase i by 1.
                  i++
                }

                var // 5. Let result be a new Record.
                  result = new Record()

                // 6. If availableLocale is not undefined, then
                if (availableLocale !== undefined) {
                  // a. Set result.[[locale]] to availableLocale.
                  result['[[locale]]'] = availableLocale

                  // b. If locale and noExtensionsLocale are not the same String value, then
                  if (String(locale) !== String(noExtensionsLocale)) {
                    var // i. Let extension be the String value consisting of the first
                      //	  substring of locale that is a Unicode locale extension sequence.
                      extension = locale.match(expUnicodeExSeq)[0],
                      // ii. Let extensionIndex be the character position of the initial
                      //	   "-" of the first Unicode locale extension sequence within locale.
                      extensionIndex = locale.indexOf('-u-')

                    // iii. Set result.[[extension]] to extension.
                    result['[[extension]]'] = extension

                    // iv. Set result.[[extensionIndex]] to extensionIndex.
                    result['[[extensionIndex]]'] = extensionIndex
                  }
                }
                // 7. Else
                // a. Set result.[[locale]] to the value returned by the DefaultLocale abstract
                //	  operation (defined in 6.2.4).
                else result['[[locale]]'] = DefaultLocale()

                // 8. Return result
                return result
              }

              /**
               * The BestFitMatcher abstract operation compares requestedLocales, which must be
               * a List as returned by CanonicalizeLocaleList, against the locales in
               * availableLocales and determines the best available language to meet the
               * request. The algorithm is implementation dependent, but should produce results
               * that a typical user of the requested locales would perceive as at least as
               * good as those produced by the LookupMatcher abstract operation. Options
               * specified through Unicode locale extension sequences must be ignored by the
               * algorithm. Information about such subsequences is returned separately.
               * The abstract operation returns a record with a [[locale]] field, whose value
               * is the language tag of the selected locale, which must be an element of
               * availableLocales. If the language tag of the request locale that led to the
               * selected locale contained a Unicode locale extension sequence, then the
               * returned record also contains an [[extension]] field whose value is the first
               * Unicode locale extension sequence, and an [[extensionIndex]] field whose value
               * is the index of the first Unicode locale extension sequence within the request
               * locale language tag.
               */
              function /* 9.2.4 */ BestFitMatcher(availableLocales, requestedLocales) {
                return LookupMatcher(availableLocales, requestedLocales)
              }

              /**
               * The ResolveLocale abstract operation compares a BCP 47 language priority list
               * requestedLocales against the locales in availableLocales and determines the
               * best available language to meet the request. availableLocales and
               * requestedLocales must be provided as List values, options as a Record.
               */
              function /* 9.2.5 */ ResolveLocale(
                availableLocales,
                requestedLocales,
                options,
                relevantExtensionKeys,
                localeData,
              ) {
                if (availableLocales.length === 0) {
                  throw new ReferenceError('No locale data has been provided for this object yet.')
                }

                // The following steps are taken:
                var // 1. Let matcher be the value of options.[[localeMatcher]].
                  matcher = options['[[localeMatcher]]']

                // 2. If matcher is "lookup", then
                if (matcher === 'lookup')
                  var // a. Let r be the result of calling the LookupMatcher abstract operation
                    //	  (defined in 9.2.3) with arguments availableLocales and
                    //	  requestedLocales.
                    r = LookupMatcher(availableLocales, requestedLocales)
                // 3. Else
                else
                  var // a. Let r be the result of calling the BestFitMatcher abstract
                    //	  operation (defined in 9.2.4) with arguments availableLocales and
                    //	  requestedLocales.
                    r = BestFitMatcher(availableLocales, requestedLocales)

                var // 4. Let foundLocale be the value of r.[[locale]].
                  foundLocale = r['[[locale]]']

                // 5. If r has an [[extension]] field, then
                if (hop.call(r, '[[extension]]'))
                  var // a. Let extension be the value of r.[[extension]].
                    extension = r['[[extension]]'],
                    // b. Let extensionIndex be the value of r.[[extensionIndex]].
                    extensionIndex = r['[[extensionIndex]]'],
                    // c. Let split be the standard built-in function object defined in ES5,
                    //	  15.5.4.14.
                    split = String.prototype.split,
                    // d. Let extensionSubtags be the result of calling the [[Call]] internal
                    //	  method of split with extension as the this value and an argument
                    //	  list containing the single item "-".
                    extensionSubtags = split.call(extension, '-'),
                    // e. Let extensionSubtagsLength be the result of calling the [[Get]]
                    //	  internal method of extensionSubtags with argument "length".
                    extensionSubtagsLength = extensionSubtags.length

                var // 6. Let result be a new Record.
                  result = new Record()

                // 7. Set result.[[dataLocale]] to foundLocale.
                result['[[dataLocale]]'] = foundLocale

                var // 8. Let supportedExtension be "-u".
                  supportedExtension = '-u',
                  // 9. Let i be 0.
                  i = 0,
                  // 10. Let len be the result of calling the [[Get]] internal method of
                  //	   relevantExtensionKeys with argument "length".
                  len = relevantExtensionKeys.length

                // 11 Repeat while i < len:
                while (i < len) {
                  var // a. Let key be the result of calling the [[Get]] internal method of
                    //	  relevantExtensionKeys with argument ToString(i).
                    key = relevantExtensionKeys[i],
                    // b. Let foundLocaleData be the result of calling the [[Get]] internal
                    //	  method of localeData with the argument foundLocale.
                    foundLocaleData = localeData[foundLocale],
                    // c. Let keyLocaleData be the result of calling the [[Get]] internal
                    //	  method of foundLocaleData with the argument key.
                    keyLocaleData = foundLocaleData[key],
                    // d. Let value be the result of calling the [[Get]] internal method of
                    //	  keyLocaleData with argument "0".
                    value = keyLocaleData['0'],
                    // e. Let supportedExtensionAddition be "".
                    supportedExtensionAddition = '',
                    // f. Let indexOf be the standard built-in function object defined in
                    //	  ES5, 15.4.4.14.
                    indexOf = arrIndexOf

                  // g. If extensionSubtags is not undefined, then
                  if (extensionSubtags !== undefined) {
                    var // i. Let keyPos be the result of calling the [[Call]] internal
                      //	  method of indexOf with extensionSubtags as the this value and
                      // an argument list containing the single item key.
                      keyPos = indexOf.call(extensionSubtags, key)

                    // ii. If keyPos ≠ -1, then
                    if (keyPos !== -1) {
                      // 1. If keyPos + 1 < extensionSubtagsLength and the length of the
                      //	  result of calling the [[Get]] internal method of
                      //	  extensionSubtags with argument ToString(keyPos +1) is greater
                      //	  than 2, then
                      if (keyPos + 1 < extensionSubtagsLength && extensionSubtags[keyPos + 1].length > 2) {
                        var // a. Let requestedValue be the result of calling the [[Get]]
                          //	  internal method of extensionSubtags with argument
                          //	  ToString(keyPos + 1).
                          requestedValue = extensionSubtags[keyPos + 1],
                          // b. Let valuePos be the result of calling the [[Call]]
                          //	  internal method of indexOf with keyLocaleData as the
                          //	  this value and an argument list containing the single
                          //	  item requestedValue.
                          valuePos = indexOf.call(keyLocaleData, requestedValue)

                        // c. If valuePos ≠ -1, then
                        if (valuePos !== -1)
                          var // i. Let value be requestedValue.
                            value = requestedValue,
                            // ii. Let supportedExtensionAddition be the
                            //	   concatenation of "-", key, "-", and value.
                            supportedExtensionAddition = '-' + key + '-' + value
                      }
                      // 2. Else
                      else {
                        var // a. Let valuePos be the result of calling the [[Call]]
                          // internal method of indexOf with keyLocaleData as the this
                          // value and an argument list containing the single item
                          // "true".
                          valuePos = indexOf(keyLocaleData, 'true')

                        // b. If valuePos ≠ -1, then
                        if (valuePos !== -1)
                          var // i. Let value be "true".
                            value = 'true'
                      }
                    }
                  }
                  // h. If options has a field [[<key>]], then
                  if (hop.call(options, '[[' + key + ']]')) {
                    var // i. Let optionsValue be the value of options.[[<key>]].
                      optionsValue = options['[[' + key + ']]']

                    // ii. If the result of calling the [[Call]] internal method of indexOf
                    //	   with keyLocaleData as the this value and an argument list
                    //	   containing the single item optionsValue is not -1, then
                    if (indexOf.call(keyLocaleData, optionsValue) !== -1) {
                      // 1. If optionsValue is not equal to value, then
                      if (optionsValue !== value) {
                        // a. Let value be optionsValue.
                        value = optionsValue
                        // b. Let supportedExtensionAddition be "".
                        supportedExtensionAddition = ''
                      }
                    }
                  }
                  // i. Set result.[[<key>]] to value.
                  result['[[' + key + ']]'] = value

                  // j. Append supportedExtensionAddition to supportedExtension.
                  supportedExtension += supportedExtensionAddition

                  // k. Increase i by 1.
                  i++
                }
                // 12. If the length of supportedExtension is greater than 2, then
                if (supportedExtension.length > 2) {
                  var // a. Let preExtension be the substring of foundLocale from position 0,
                    //	  inclusive, to position extensionIndex, exclusive.
                    preExtension = foundLocale.substring(0, extensionIndex),
                    // b. Let postExtension be the substring of foundLocale from position
                    //	  extensionIndex to the end of the string.
                    postExtension = foundLocale.substring(extensionIndex),
                    // c. Let foundLocale be the concatenation of preExtension,
                    //	  supportedExtension, and postExtension.
                    foundLocale = preExtension + supportedExtension + postExtension
                }
                // 13. Set result.[[locale]] to foundLocale.
                result['[[locale]]'] = foundLocale

                // 14. Return result.
                return result
              }

              /**
               * The LookupSupportedLocales abstract operation returns the subset of the
               * provided BCP 47 language priority list requestedLocales for which
               * availableLocales has a matching locale when using the BCP 47 Lookup algorithm.
               * Locales appear in the same order in the returned list as in requestedLocales.
               * The following steps are taken:
               */
              function /* 9.2.6 */ LookupSupportedLocales(availableLocales, requestedLocales) {
                var // 1. Let len be the number of elements in requestedLocales.
                  len = requestedLocales.length,
                  // 2. Let subset be a new empty List.
                  subset = new List(),
                  // 3. Let k be 0.
                  k = 0

                // 4. Repeat while k < len
                while (k < len) {
                  var // a. Let locale be the element of requestedLocales at 0-origined list
                    //	  position k.
                    locale = requestedLocales[k],
                    // b. Let noExtensionsLocale be the String value that is locale with all
                    //	  Unicode locale extension sequences removed.
                    noExtensionsLocale = String(locale).replace(expUnicodeExSeq, ''),
                    // c. Let availableLocale be the result of calling the
                    //	  BestAvailableLocale abstract operation (defined in 9.2.2) with
                    //	  arguments availableLocales and noExtensionsLocale.
                    availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale)

                  // d. If availableLocale is not undefined, then append locale to the end of
                  //	  subset.
                  if (availableLocale !== undefined) arrPush.call(subset, locale)

                  // e. Increment k by 1.
                  k++
                }

                var // 5. Let subsetArray be a new Array object whose elements are the same
                  //	  values in the same order as the elements of subset.
                  subsetArray = arrSlice.call(subset)

                // 6. Return subsetArray.
                return subsetArray
              }

              /**
               * The BestFitSupportedLocales abstract operation returns the subset of the
               * provided BCP 47 language priority list requestedLocales for which
               * availableLocales has a matching locale when using the Best Fit Matcher
               * algorithm. Locales appear in the same order in the returned list as in
               * requestedLocales. The steps taken are implementation dependent.
               */
              function /*9.2.7 */ BestFitSupportedLocales(availableLocales, requestedLocales) {
                // ###TODO: implement this function as described by the specification###
                return LookupSupportedLocales(availableLocales, requestedLocales)
              }

              /**
               * The SupportedLocales abstract operation returns the subset of the provided BCP
               * 47 language priority list requestedLocales for which availableLocales has a
               * matching locale. Two algorithms are available to match the locales: the Lookup
               * algorithm described in RFC 4647 section 3.4, and an implementation dependent
               * best-fit algorithm. Locales appear in the same order in the returned list as
               * in requestedLocales. The following steps are taken:
               */
              function /*9.2.8 */ SupportedLocales(availableLocales, requestedLocales, options) {
                // 1. If options is not undefined, then
                if (options !== undefined) {
                  var // a. Let options be ToObject(options).
                    options = new Record(toObject(options)),
                    // b. Let matcher be the result of calling the [[Get]] internal method of
                    //	  options with argument "localeMatcher".
                    matcher = options.localeMatcher

                  // c. If matcher is not undefined, then
                  if (matcher !== undefined) {
                    // i. Let matcher be ToString(matcher).
                    matcher = String(matcher)

                    // ii. If matcher is not "lookup" or "best fit", then throw a RangeError
                    //	   exception.
                    if (matcher !== 'lookup' && matcher !== 'best fit')
                      throw new RangeError('matcher should be "lookup" or "best fit"')
                  }
                }
                // 2. If matcher is undefined or "best fit", then
                if (matcher === undefined || matcher === 'best fit')
                  var // a. Let subset be the result of calling the BestFitSupportedLocales
                    //	  abstract operation (defined in 9.2.7) with arguments
                    //	  availableLocales and requestedLocales.
                    subset = BestFitSupportedLocales(availableLocales, requestedLocales)
                // 3. Else
                else
                  var // a. Let subset be the result of calling the LookupSupportedLocales
                    //	  abstract operation (defined in 9.2.6) with arguments
                    //	  availableLocales and requestedLocales.
                    subset = LookupSupportedLocales(availableLocales, requestedLocales)

                // 4. For each named own property name P of subset,
                for (var P in subset) {
                  if (!hop.call(subset, P)) continue

                  // a. Let desc be the result of calling the [[GetOwnProperty]] internal
                  //	  method of subset with P.
                  // b. Set desc.[[Writable]] to false.
                  // c. Set desc.[[Configurable]] to false.
                  // d. Call the [[DefineOwnProperty]] internal method of subset with P, desc,
                  //	  and true as arguments.
                  defineProperty(subset, P, {
                    writable: false,
                    configurable: false,
                    value: subset[P],
                  })
                }
                // "Freeze" the array so no new elements can be added
                defineProperty(subset, 'length', { writable: false })

                // 5. Return subset
                return subset
              }

              /**
               * The GetOption abstract operation extracts the value of the property named
               * property from the provided options object, converts it to the required type,
               * checks whether it is one of a List of allowed values, and fills in a fallback
               * value if necessary.
               */
              function /*9.2.9 */ GetOption(options, property, type, values, fallback) {
                var // 1. Let value be the result of calling the [[Get]] internal method of
                  //	  options with argument property.
                  value = options[property]

                // 2. If value is not undefined, then
                if (value !== undefined) {
                  // a. Assert: type is "boolean" or "string".
                  // b. If type is "boolean", then let value be ToBoolean(value).
                  // c. If type is "string", then let value be ToString(value).
                  value = type === 'boolean' ? Boolean(value) : type === 'string' ? String(value) : value

                  // d. If values is not undefined, then
                  if (values !== undefined) {
                    // i. If values does not contain an element equal to value, then throw a
                    //	  RangeError exception.
                    if (arrIndexOf.call(values, value) === -1)
                      throw new RangeError("'" + value + "' is not an allowed value for `" + property + '`')
                  }

                  // e. Return value.
                  return value
                }
                // Else return fallback.
                return fallback
              }

              /**
               * The GetNumberOption abstract operation extracts a property value from the
               * provided options object, converts it to a Number value, checks whether it is
               * in the allowed range, and fills in a fallback value if necessary.
               */
              function /* 9.2.10 */ GetNumberOption(options, property, minimum, maximum, fallback) {
                var // 1. Let value be the result of calling the [[Get]] internal method of
                  //	  options with argument property.
                  value = options[property]

                // 2. If value is not undefined, then
                if (value !== undefined) {
                  // a. Let value be ToNumber(value).
                  value = Number(value)

                  // b. If value is NaN or less than minimum or greater than maximum, throw a
                  //	  RangeError exception.
                  if (isNaN(value) || value < minimum || value > maximum)
                    throw new RangeError('Value is not a number or outside accepted range')

                  // c. Return floor(value).
                  return Math.floor(value)
                }
                // 3. Else return fallback.
                return fallback
              }

              // 11.1 The Intl.NumberFormat constructor
              // ======================================

              // Define the NumberFormat constructor internally so it cannot be tainted
              function NumberFormatConstructor() {
                var locales = arguments[0]
                var options = arguments[1]

                if (!this || this === Intl) {
                  return new Intl.NumberFormat(locales, options)
                }

                return InitializeNumberFormat(toObject(this), locales, options)
              }

              defineProperty(Intl, 'NumberFormat', {
                configurable: true,
                writable: true,
                value: NumberFormatConstructor,
              })

              // Must explicitly set prototypes as unwritable
              defineProperty(Intl.NumberFormat, 'prototype', {
                writable: false,
              })

              /**
               * The abstract operation InitializeNumberFormat accepts the arguments
               * numberFormat (which must be an object), locales, and options. It initializes
               * numberFormat as a NumberFormat object.
               */
              function /*11.1.1.1 */ InitializeNumberFormat(numberFormat, locales, options) {
                var // This will be a internal properties object if we're not already initialized
                  internal = getInternalProperties(numberFormat),
                  // Create an object whose props can be used to restore the values of RegExp props
                  regexpState = createRegExpRestore()

                // 1. If numberFormat has an [[initializedIntlObject]] internal property with
                // value true, throw a TypeError exception.
                if (internal['[[initializedIntlObject]]'] === true)
                  throw new TypeError('`this` object has already been initialized as an Intl object')

                // Need this to access the `internal` object
                defineProperty(numberFormat, '__getInternalProperties', {
                  value: function() {
                    // NOTE: Non-standard, for internal use only
                    if (arguments[0] === secret) return internal
                  },
                })

                // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.
                internal['[[initializedIntlObject]]'] = true

                var // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList
                  //	  abstract operation (defined in 9.2.1) with argument locales.
                  requestedLocales = CanonicalizeLocaleList(locales)

                // 4. If options is undefined, then
                if (options === undefined)
                  // a. Let options be the result of creating a new object as if by the
                  // expression new Object() where Object is the standard built-in constructor
                  // with that name.
                  options = {}
                // 5. Else
                // a. Let options be ToObject(options).
                else options = toObject(options)

                var // 6. Let opt be a new Record.
                  opt = new Record(),
                  // 7. Let matcher be the result of calling the GetOption abstract operation
                  //	  (defined in 9.2.9) with the arguments options, "localeMatcher", "string",
                  //	  a List containing the two String values "lookup" and "best fit", and
                  //	  "best fit".
                  matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit')

                // 8. Set opt.[[localeMatcher]] to matcher.
                opt['[[localeMatcher]]'] = matcher

                var // 9. Let NumberFormat be the standard built-in object that is the initial value
                  //	  of Intl.NumberFormat.
                  // 10. Let localeData be the value of the [[localeData]] internal property of
                  //	   NumberFormat.
                  localeData = internals.NumberFormat['[[localeData]]'],
                  // 11. Let r be the result of calling the ResolveLocale abstract operation
                  //	   (defined in 9.2.5) with the [[availableLocales]] internal property of
                  //	   NumberFormat, requestedLocales, opt, the [[relevantExtensionKeys]]
                  //	   internal property of NumberFormat, and localeData.
                  r = ResolveLocale(
                    internals.NumberFormat['[[availableLocales]]'],
                    requestedLocales,
                    opt,
                    internals.NumberFormat['[[relevantExtensionKeys]]'],
                    localeData,
                  )

                // 12. Set the [[locale]] internal property of numberFormat to the value of
                //	   r.[[locale]].
                internal['[[locale]]'] = r['[[locale]]']

                // 13. Set the [[numberingSystem]] internal property of numberFormat to the value
                //	   of r.[[nu]].
                internal['[[numberingSystem]]'] = r['[[nu]]']

                // The specification doesn't tell us to do this, but it's helpful later on
                internal['[[dataLocale]]'] = r['[[dataLocale]]']

                var // 14. Let dataLocale be the value of r.[[dataLocale]].
                  dataLocale = r['[[dataLocale]]'],
                  // 15. Let s be the result of calling the GetOption abstract operation with the
                  //	   arguments options, "style", "string", a List containing the three String
                  //	   values "decimal", "percent", and "currency", and "decimal".
                  s = GetOption(options, 'style', 'string', new List('decimal', 'percent', 'currency'), 'decimal')

                // 16. Set the [[style]] internal property of numberFormat to s.
                internal['[[style]]'] = s

                var // 17. Let c be the result of calling the GetOption abstract operation with the
                  //	   arguments options, "currency", "string", undefined, and undefined.
                  c = GetOption(options, 'currency', 'string')

                // 18. If c is not undefined and the result of calling the
                //	   IsWellFormedCurrencyCode abstract operation (defined in 6.3.1) with
                //	   argument c is false, then throw a RangeError exception.
                if (c !== undefined && !IsWellFormedCurrencyCode(c))
                  throw new RangeError("'" + c + "' is not a valid currency code")

                // 19. If s is "currency" and c is undefined, throw a TypeError exception.
                if (s === 'currency' && c === undefined)
                  throw new TypeError('Currency code is required when style is currency')

                // 20. If s is "currency", then
                if (s === 'currency') {
                  // a. Let c be the result of converting c to upper case as specified in 6.1.
                  c = c.toUpperCase()

                  // b. Set the [[currency]] internal property of numberFormat to c.
                  internal['[[currency]]'] = c

                  var // c. Let cDigits be the result of calling the CurrencyDigits abstract
                    //	  operation (defined below) with argument c.
                    cDigits = CurrencyDigits(c)
                }

                var // 21. Let cd be the result of calling the GetOption abstract operation with the
                  //	   arguments options, "currencyDisplay", "string", a List containing the
                  //	   three String values "code", "symbol", and "name", and "symbol".
                  cd = GetOption(options, 'currencyDisplay', 'string', new List('code', 'symbol', 'name'), 'symbol')

                // 22. If s is "currency", then set the [[currencyDisplay]] internal property of
                //	   numberFormat to cd.
                if (s === 'currency') internal['[[currencyDisplay]]'] = cd

                var // 23. Let mnid be the result of calling the GetNumberOption abstract operation
                  //	   (defined in 9.2.10) with arguments options, "minimumIntegerDigits", 1, 21,
                  //	   and 1.
                  mnid = GetNumberOption(options, 'minimumIntegerDigits', 1, 21, 1)

                // 24. Set the [[minimumIntegerDigits]] internal property of numberFormat to mnid.
                internal['[[minimumIntegerDigits]]'] = mnid

                var // 25. If s is "currency", then let mnfdDefault be cDigits; else let mnfdDefault
                  //	   be 0.
                  mnfdDefault = s === 'currency' ? cDigits : 0,
                  // 26. Let mnfd be the result of calling the GetNumberOption abstract operation
                  //	   with arguments options, "minimumFractionDigits", 0, 20, and mnfdDefault.
                  mnfd = GetNumberOption(options, 'minimumFractionDigits', 0, 20, mnfdDefault)

                // 27. Set the [[minimumFractionDigits]] internal property of numberFormat to mnfd.
                internal['[[minimumFractionDigits]]'] = mnfd

                var // 28. If s is "currency", then let mxfdDefault be max(mnfd, cDigits); else if s
                  //	   is "percent", then let mxfdDefault be max(mnfd, 0); else let mxfdDefault
                  //	   be max(mnfd, 3).
                  mxfdDefault =
                    s === 'currency'
                      ? Math.max(mnfd, cDigits)
                      : s === 'percent'
                      ? Math.max(mnfd, 0)
                      : Math.max(mnfd, 3),
                  // 29. Let mxfd be the result of calling the GetNumberOption abstract operation
                  //	   with arguments options, "maximumFractionDigits", mnfd, 20, and mxfdDefault.
                  mxfd = GetNumberOption(options, 'maximumFractionDigits', mnfd, 20, mxfdDefault)

                // 30. Set the [[maximumFractionDigits]] internal property of numberFormat to mxfd.
                internal['[[maximumFractionDigits]]'] = mxfd

                var // 31. Let mnsd be the result of calling the [[Get]] internal method of options
                  //	   with argument "minimumSignificantDigits".
                  mnsd = options.minimumSignificantDigits,
                  // 32. Let mxsd be the result of calling the [[Get]] internal method of options
                  //	   with argument "maximumSignificantDigits".
                  mxsd = options.maximumSignificantDigits

                // 33. If mnsd is not undefined or mxsd is not undefined, then:
                if (mnsd !== undefined || mxsd !== undefined) {
                  // a. Let mnsd be the result of calling the GetNumberOption abstract
                  //	  operation with arguments options, "minimumSignificantDigits", 1, 21,
                  //	  and 1.
                  mnsd = GetNumberOption(options, 'minimumSignificantDigits', 1, 21, 1)

                  // b. Let mxsd be the result of calling the GetNumberOption abstract
                  //	   operation with arguments options, "maximumSignificantDigits", mnsd,
                  //	   21, and 21.
                  mxsd = GetNumberOption(options, 'maximumSignificantDigits', mnsd, 21, 21)

                  // c. Set the [[minimumSignificantDigits]] internal property of numberFormat
                  //	  to mnsd, and the [[maximumSignificantDigits]] internal property of
                  //	  numberFormat to mxsd.
                  internal['[[minimumSignificantDigits]]'] = mnsd
                  internal['[[maximumSignificantDigits]]'] = mxsd
                }
                var // 34. Let g be the result of calling the GetOption abstract operation with the
                  //	   arguments options, "useGrouping", "boolean", undefined, and true.
                  g = GetOption(options, 'useGrouping', 'boolean', undefined, true)

                // 35. Set the [[useGrouping]] internal property of numberFormat to g.
                internal['[[useGrouping]]'] = g

                var // 36. Let dataLocaleData be the result of calling the [[Get]] internal method of
                  //	   localeData with argument dataLocale.
                  dataLocaleData = localeData[dataLocale],
                  // 37. Let patterns be the result of calling the [[Get]] internal method of
                  //	   dataLocaleData with argument "patterns".
                  patterns = dataLocaleData.patterns

                // 38. Assert: patterns is an object (see 11.2.3)

                var // 39. Let stylePatterns be the result of calling the [[Get]] internal method of
                  //	   patterns with argument s.
                  stylePatterns = patterns[s]

                // 40. Set the [[positivePattern]] internal property of numberFormat to the
                //	   result of calling the [[Get]] internal method of stylePatterns with the
                //	   argument "positivePattern".
                internal['[[positivePattern]]'] = stylePatterns.positivePattern

                // 41. Set the [[negativePattern]] internal property of numberFormat to the
                //	   result of calling the [[Get]] internal method of stylePatterns with the
                //	   argument "negativePattern".
                internal['[[negativePattern]]'] = stylePatterns.negativePattern

                // 42. Set the [[boundFormat]] internal property of numberFormat to undefined.
                internal['[[boundFormat]]'] = undefined

                // 43. Set the [[initializedNumberFormat]] internal property of numberFormat to
                //	   true.
                internal['[[initializedNumberFormat]]'] = true

                // Restore the RegExp properties
                regexpState.exp.test(regexpState.input)

                // Return the newly initialised object
                return numberFormat
              }

              function CurrencyDigits(currency) {
                // When the CurrencyDigits abstract operation is called with an argument currency
                // (which must be an upper case String value), the following steps are taken:

                // 1. If the ISO 4217 currency and funds code list contains currency as an
                // alphabetic code, then return the minor unit value corresponding to the
                // currency from the list; else return 2.
                return currencyMinorUnits[currency] !== undefined ? currencyMinorUnits[currency] : 2
              }

              /* 11.2.3 */ internals.NumberFormat = {
                '[[availableLocales]]': [],
                '[[relevantExtensionKeys]]': ['nu'],
                '[[localeData]]': {},
              }

              /**
               * When the supportedLocalesOf method of Intl.NumberFormat is called, the
               * following steps are taken:
               */
              /* 11.2.2 */ defineProperty(Intl.NumberFormat, 'supportedLocalesOf', {
                configurable: true,
                writable: true,
                value: fnBind.call(supportedLocalesOf, internals.NumberFormat),
              })

              /**
               * This named accessor property returns a function that formats a number
               * according to the effective locale and the formatting options of this
               * NumberFormat object.
               */
              /* 11.3.2 */ defineProperty(Intl.NumberFormat.prototype, 'format', {
                configurable: true,
                get: function() {
                  var internal = this != null && typeof this === 'object' && getInternalProperties(this)

                  // Satisfy test 11.3_b
                  if (!internal || !internal['[[initializedNumberFormat]]'])
                    throw new TypeError('`this` value for format() is not an initialized Intl.NumberFormat object.')

                  // The value of the [[Get]] attribute is a function that takes the following
                  // steps:

                  // 1. If the [[boundFormat]] internal property of this NumberFormat object
                  //	  is undefined, then:
                  if (internal['[[boundFormat]]'] === undefined) {
                    var // a. Let F be a Function object, with internal properties set as
                      //	  specified for built-in functions in ES5, 15, or successor, and the
                      //	  length property set to 1, that takes the argument value and
                      //	  performs the following steps:
                      F = function(value) {
                        // i. If value is not provided, then let value be undefined.
                        // ii. Let x be ToNumber(value).
                        // iii. Return the result of calling the FormatNumber abstract
                        //		operation (defined below) with arguments this and x.
                        return FormatNumber(this, /* x = */ Number(value))
                      },
                      // b. Let bind be the standard built-in function object defined in ES5,
                      //	  15.3.4.5.
                      // c. Let bf be the result of calling the [[Call]] internal method of
                      //	  bind with F as the this value and an argument list containing
                      //	  the single item this.
                      bf = fnBind.call(F, this)

                    // d. Set the [[boundFormat]] internal property of this NumberFormat
                    //	  object to bf.
                    internal['[[boundFormat]]'] = bf
                  }
                  // Return the value of the [[boundFormat]] internal property of this
                  // NumberFormat object.
                  return internal['[[boundFormat]]']
                },
              })

              /**
               * When the FormatNumber abstract operation is called with arguments numberFormat
               * (which must be an object initialized as a NumberFormat) and x (which must be a
               * Number value), it returns a String value representing x according to the
               * effective locale and the formatting options of numberFormat.
               */
              function FormatNumber(numberFormat, x) {
                var n,
                  // Create an object whose props can be used to restore the values of RegExp props
                  regexpState = createRegExpRestore(),
                  internal = getInternalProperties(numberFormat),
                  locale = internal['[[dataLocale]]'],
                  nums = internal['[[numberingSystem]]'],
                  data = internals.NumberFormat['[[localeData]]'][locale],
                  ild = data.symbols[nums] || data.symbols.latn,
                  // 1. Let negative be false.
                  negative = false

                // 2. If the result of isFinite(x) is false, then
                if (isFinite(x) === false) {
                  // a. If x is NaN, then let n be an ILD String value indicating the NaN value.
                  if (isNaN(x)) n = ild.nan
                  // b. Else
                  else {
                    // a. Let n be an ILD String value indicating infinity.
                    n = ild.infinity
                    // b. If x < 0, then let negative be true.
                    if (x < 0) negative = true
                  }
                }
                // 3. Else
                else {
                  // a. If x < 0, then
                  if (x < 0) {
                    // i. Let negative be true.
                    negative = true
                    // ii. Let x be -x.
                    x = -x
                  }

                  // b. If the value of the [[style]] internal property of numberFormat is
                  //	  "percent", let x be 100 × x.
                  if (internal['[[style]]'] === 'percent') x *= 100

                  // c. If the [[minimumSignificantDigits]] and [[maximumSignificantDigits]]
                  //	  internal properties of numberFormat are present, then
                  if (
                    hop.call(internal, '[[minimumSignificantDigits]]') &&
                    hop.call(internal, '[[maximumSignificantDigits]]')
                  )
                    // i. Let n be the result of calling the ToRawPrecision abstract operation
                    //	  (defined below), passing as arguments x and the values of the
                    //	  [[minimumSignificantDigits]] and [[maximumSignificantDigits]]
                    //	  internal properties of numberFormat.
                    n = ToRawPrecision(
                      x,
                      internal['[[minimumSignificantDigits]]'],
                      internal['[[maximumSignificantDigits]]'],
                    )
                  // d. Else
                  // i. Let n be the result of calling the ToRawFixed abstract operation
                  //	  (defined below), passing as arguments x and the values of the
                  //	  [[minimumIntegerDigits]], [[minimumFractionDigits]], and
                  //	  [[maximumFractionDigits]] internal properties of numberFormat.
                  else
                    n = ToRawFixed(
                      x,
                      internal['[[minimumIntegerDigits]]'],
                      internal['[[minimumFractionDigits]]'],
                      internal['[[maximumFractionDigits]]'],
                    )

                  // e. If the value of the [[numberingSystem]] internal property of
                  //	  numberFormat matches one of the values in the “Numbering System” column
                  //	  of Table 2 below, then
                  if (numSys[nums]) {
                    // i. Let digits be an array whose 10 String valued elements are the
                    //	  UTF-16 string representations of the 10 digits specified in the
                    //	  “Digits” column of Table 2 in the row containing the value of the
                    //	  [[numberingSystem]] internal property.
                    var digits = numSys[internal['[[numberingSystem]]']]
                    // ii. Replace each digit in n with the value of digits[digit].
                    n = String(n).replace(/\d/g, function(digit) {
                      return digits[digit]
                    })
                  }
                  // f. Else use an implementation dependent algorithm to map n to the
                  //	  appropriate representation of n in the given numbering system.
                  else n = String(n) // ###TODO###

                  // g. If n contains the character ".", then replace it with an ILND String
                  //	  representing the decimal separator.
                  n = n.replace(/\./g, ild.decimal)

                  // h. If the value of the [[useGrouping]] internal property of numberFormat
                  //	  is true, then insert an ILND String representing a grouping separator
                  //	  into an ILND set of locations within the integer part of n.
                  if (internal['[[useGrouping]]'] === true) {
                    var parts = n.split(ild.decimal)
                    parts[0] = parts[0].replace(expInsertGroups, ild.group)

                    n = arrJoin.call(parts, ild.decimal)
                  }
                }

                var // 4. If negative is true, then let result be the value of the [[negativePattern]]
                  //	  internal property of numberFormat; else let result be the value of the
                  //	  [[positivePattern]] internal property of numberFormat.
                  result = internal[negative === true ? '[[negativePattern]]' : '[[positivePattern]]']

                // 5. Replace the substring "{number}" within result with n.
                result = result.replace('{number}', n)

                // 6. If the value of the [[style]] internal property of numberFormat is
                //	  "currency", then:
                if (internal['[[style]]'] === 'currency') {
                  var cd,
                    // a. Let currency be the value of the [[currency]] internal property of
                    //	  numberFormat.
                    currency = internal['[[currency]]'],
                    // Shorthand for the currency data
                    cData = data.currencies[currency]

                  // b. If the value of the [[currencyDisplay]] internal property of
                  //	  numberFormat is "code", then let cd be currency.
                  if (internal['[[currencyDisplay]]'] === 'code') cd = currency
                  // c. Else if the value of the [[currencyDisplay]] internal property of
                  //	  numberFormat is "symbol", then let cd be an ILD string representing
                  //	  currency in short form. If the implementation does not have such a
                  //	  representation of currency, then use currency itself.
                  else if (internal['[[currencyDisplay]]'] === 'symbol') cd = cData || currency
                  // d. Else if the value of the [[currencyDisplay]] internal property of
                  //	  numberFormat is "name", then let cd be an ILD string representing
                  //	  currency in long form. If the implementation does not have such a
                  //	  representation of currency, then use currency itself.
                  else if (internal['[[currencyDisplay]]'] === 'name')
                    cd = cData ? cData['displayName-count-one'] : currency

                  // e. Replace the substring "{currency}" within result with cd.
                  result = result.replace('{currency}', cd)
                }

                // Restore the RegExp properties
                regexpState.exp.test(regexpState.input)

                // 7. Return result.
                return result
              }

              /**
               * When the ToRawPrecision abstract operation is called with arguments x (which
               * must be a finite non-negative number), minPrecision, and maxPrecision (both
               * must be integers between 1 and 21) the following steps are taken:
               */
              function ToRawPrecision(x, minPrecision, maxPrecision) {
                var // 1. Let p be maxPrecision.
                  p = maxPrecision

                // 2. If x = 0, then
                if (x === 0) {
                  var // a. Let m be the String consisting of p occurrences of the character "0".
                    m = arrJoin.call(Array(p + 1), '0'),
                    // b. Let e be 0.
                    e = 0
                }
                // 3. Else
                else {
                  // a. Let e and n be integers such that 10ᵖ⁻¹ ≤ n < 10ᵖ and for which the
                  //	  exact mathematical value of n × 10ᵉ⁻ᵖ⁺¹ – x is as close to zero as
                  //	  possible. If there are two such sets of e and n, pick the e and n for
                  //	  which n × 10ᵉ⁻ᵖ⁺¹ is larger.

                  var idx,
                    isInt = x % 1,
                    // Fix floating point precision issues in Chrome and Firefox
                    pre = isInt ? Math.pow(10, maxPrecision) : 1,
                    // toPrecision already does most of this for us
                    m = Number.prototype.toPrecision.call(x * pre, maxPrecision),
                    // Get the exponential value
                    e =
                      (idx = m.indexOf('e')) > -1
                        ? Number(m.slice(idx + 1))
                        : (idx = m.indexOf('.')) > -1
                        ? idx - 1
                        : m.length - 1

                  // Multiplying by 10^maxPrecision means we need to take that away from e
                  if (isInt) e -= maxPrecision

                  // Get the numbers without the decimal point
                  m = m.slice(0, m.indexOf('e') > -1 ? idx : m.length).replace('.', '')
                }

                // 4. If e ≥ p, then
                if (e >= p)
                  // a. Return the concatenation of m and e-p+1 occurrences of the character "0".
                  return m + arrJoin.call(Array(e - p + 1 + 1), '0')
                // 5. If e = p-1, then
                else if (e === p - 1)
                  // a. Return m.
                  return m
                // 6. If e ≥ 0, then
                else if (e >= 0)
                  // a. Let m be the concatenation of the first e+1 characters of m, the character
                  //	  ".", and the remaining p–(e+1) characters of m.
                  m = m.slice(0, e + 1) + '.' + m.slice(e + 1)
                // 7. If e < 0, then
                else if (e < 0)
                  // a. Let m be the concatenation of the String "0.", –(e+1) occurrences of the
                  //	  character "0", and the string m.
                  m = '0.' + arrJoin.call(Array(-(e + 1) + 1), '0') + m

                // 8. If m contains the character ".", and maxPrecision > minPrecision, then
                if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
                  var // a. Let cut be maxPrecision – minPrecision.
                    cut = maxPrecision - minPrecision

                  // b. Repeat while cut > 0 and the last character of m is "0":
                  while (cut > 0 && m.charAt(m.length - 1) === '0') {
                    //	i. Remove the last character from m.
                    m = m.slice(0, -1)

                    //	ii. Decrease cut by 1.
                    cut--
                  }

                  // c. If the last character of m is ".", then
                  if (m.charAt(m.length - 1) === '.')
                    //	  i. Remove the last character from m.
                    m = m.slice(0, -1)
                }
                // 9. Return m.
                return m
              }

              /**
               * When the ToRawFixed abstract operation is called with arguments x (which must
               * be a finite non-negative number), minInteger (which must be an integer between
               * 1 and 21), minFraction, and maxFraction (which must be integers between 0 and
               * 20) the following steps are taken:
               */
              function ToRawFixed(x, minInteger, minFraction, maxFraction) {
                // (or not because Number.toPrototype.toFixed does a lot of it for us)
                var idx,
                  // We can pick up after the fixed formatted string (m) is created
                  m = Number.prototype.toFixed.call(x, maxFraction),
                  // 4. If [maxFraction] ≠ 0, then
                  //	  ...
                  //	  e. Let int be the number of characters in a.
                  //
                  // 5. Else let int be the number of characters in m.
                  igr = m.split('.')[0].length, // int is a reserved word
                  // 6. Let cut be maxFraction – minFraction.
                  cut = maxFraction - minFraction,
                  exp = (idx = m.indexOf('e')) > -1 ? m.slice(idx + 1) : 0

                if (exp) {
                  m = m.slice(0, idx).replace('.', '')
                  m +=
                    arrJoin.call(Array(exp - (m.length - 1) + 1), '0') + '.' + arrJoin.call(Array(maxFraction + 1), '0')

                  igr = m.length
                }

                // 7. Repeat while cut > 0 and the last character of m is "0":
                while (cut > 0 && m.slice(-1) === '0') {
                  // a. Remove the last character from m.
                  m = m.slice(0, -1)

                  // b. Decrease cut by 1.
                  cut--
                }

                // 8. If the last character of m is ".", then
                if (m.slice(-1) === '.')
                  // a. Remove the last character from m.
                  m = m.slice(0, -1)

                // 9. If int < minInteger, then
                if (igr < minInteger)
                  // a. Let z be the String consisting of minInteger–int occurrences of the
                  //	  character "0".
                  var z = arrJoin.call(Array(minInteger - igr + 1), '0')

                // 10. Let m be the concatenation of Strings z and m.
                // 11. Return m.
                return (z ? z : '') + m
              }

              // Sect 11.3.2 Table 2, Numbering systems
              // ======================================
              var numSys = {
                arab: [
                  '\u0660',
                  '\u0661',
                  '\u0662',
                  '\u0663',
                  '\u0664',
                  '\u0665',
                  '\u0666',
                  '\u0667',
                  '\u0668',
                  '\u0669',
                ],
                arabext: [
                  '\u06F0',
                  '\u06F1',
                  '\u06F2',
                  '\u06F3',
                  '\u06F4',
                  '\u06F5',
                  '\u06F6',
                  '\u06F7',
                  '\u06F8',
                  '\u06F9',
                ],
                bali: [
                  '\u1B50',
                  '\u1B51',
                  '\u1B52',
                  '\u1B53',
                  '\u1B54',
                  '\u1B55',
                  '\u1B56',
                  '\u1B57',
                  '\u1B58',
                  '\u1B59',
                ],
                beng: [
                  '\u09E6',
                  '\u09E7',
                  '\u09E8',
                  '\u09E9',
                  '\u09EA',
                  '\u09EB',
                  '\u09EC',
                  '\u09ED',
                  '\u09EE',
                  '\u09EF',
                ],
                deva: [
                  '\u0966',
                  '\u0967',
                  '\u0968',
                  '\u0969',
                  '\u096A',
                  '\u096B',
                  '\u096C',
                  '\u096D',
                  '\u096E',
                  '\u096F',
                ],
                fullwide: [
                  '\uFF10',
                  '\uFF11',
                  '\uFF12',
                  '\uFF13',
                  '\uFF14',
                  '\uFF15',
                  '\uFF16',
                  '\uFF17',
                  '\uFF18',
                  '\uFF19',
                ],
                gujr: [
                  '\u0AE6',
                  '\u0AE7',
                  '\u0AE8',
                  '\u0AE9',
                  '\u0AEA',
                  '\u0AEB',
                  '\u0AEC',
                  '\u0AED',
                  '\u0AEE',
                  '\u0AEF',
                ],
                guru: [
                  '\u0A66',
                  '\u0A67',
                  '\u0A68',
                  '\u0A69',
                  '\u0A6A',
                  '\u0A6B',
                  '\u0A6C',
                  '\u0A6D',
                  '\u0A6E',
                  '\u0A6F',
                ],
                hanidec: [
                  '\u3007',
                  '\u4E00',
                  '\u4E8C',
                  '\u4E09',
                  '\u56DB',
                  '\u4E94',
                  '\u516D',
                  '\u4E03',
                  '\u516B',
                  '\u4E5D',
                ],
                khmr: [
                  '\u17E0',
                  '\u17E1',
                  '\u17E2',
                  '\u17E3',
                  '\u17E4',
                  '\u17E5',
                  '\u17E6',
                  '\u17E7',
                  '\u17E8',
                  '\u17E9',
                ],
                knda: [
                  '\u0CE6',
                  '\u0CE7',
                  '\u0CE8',
                  '\u0CE9',
                  '\u0CEA',
                  '\u0CEB',
                  '\u0CEC',
                  '\u0CED',
                  '\u0CEE',
                  '\u0CEF',
                ],
                laoo: [
                  '\u0ED0',
                  '\u0ED1',
                  '\u0ED2',
                  '\u0ED3',
                  '\u0ED4',
                  '\u0ED5',
                  '\u0ED6',
                  '\u0ED7',
                  '\u0ED8',
                  '\u0ED9',
                ],
                latn: [
                  '\u0030',
                  '\u0031',
                  '\u0032',
                  '\u0033',
                  '\u0034',
                  '\u0035',
                  '\u0036',
                  '\u0037',
                  '\u0038',
                  '\u0039',
                ],
                limb: [
                  '\u1946',
                  '\u1947',
                  '\u1948',
                  '\u1949',
                  '\u194A',
                  '\u194B',
                  '\u194C',
                  '\u194D',
                  '\u194E',
                  '\u194F',
                ],
                mlym: [
                  '\u0D66',
                  '\u0D67',
                  '\u0D68',
                  '\u0D69',
                  '\u0D6A',
                  '\u0D6B',
                  '\u0D6C',
                  '\u0D6D',
                  '\u0D6E',
                  '\u0D6F',
                ],
                mong: [
                  '\u1810',
                  '\u1811',
                  '\u1812',
                  '\u1813',
                  '\u1814',
                  '\u1815',
                  '\u1816',
                  '\u1817',
                  '\u1818',
                  '\u1819',
                ],
                mymr: [
                  '\u1040',
                  '\u1041',
                  '\u1042',
                  '\u1043',
                  '\u1044',
                  '\u1045',
                  '\u1046',
                  '\u1047',
                  '\u1048',
                  '\u1049',
                ],
                orya: [
                  '\u0B66',
                  '\u0B67',
                  '\u0B68',
                  '\u0B69',
                  '\u0B6A',
                  '\u0B6B',
                  '\u0B6C',
                  '\u0B6D',
                  '\u0B6E',
                  '\u0B6F',
                ],
                tamldec: [
                  '\u0BE6',
                  '\u0BE7',
                  '\u0BE8',
                  '\u0BE9',
                  '\u0BEA',
                  '\u0BEB',
                  '\u0BEC',
                  '\u0BED',
                  '\u0BEE',
                  '\u0BEF',
                ],
                telu: [
                  '\u0C66',
                  '\u0C67',
                  '\u0C68',
                  '\u0C69',
                  '\u0C6A',
                  '\u0C6B',
                  '\u0C6C',
                  '\u0C6D',
                  '\u0C6E',
                  '\u0C6F',
                ],
                thai: [
                  '\u0E50',
                  '\u0E51',
                  '\u0E52',
                  '\u0E53',
                  '\u0E54',
                  '\u0E55',
                  '\u0E56',
                  '\u0E57',
                  '\u0E58',
                  '\u0E59',
                ],
                tibt: [
                  '\u0F20',
                  '\u0F21',
                  '\u0F22',
                  '\u0F23',
                  '\u0F24',
                  '\u0F25',
                  '\u0F26',
                  '\u0F27',
                  '\u0F28',
                  '\u0F29',
                ],
              }

              /**
               * This function provides access to the locale and formatting options computed
               * during initialization of the object.
               *
               * The function returns a new object whose properties and attributes are set as
               * if constructed by an object literal assigning to each of the following
               * properties the value of the corresponding internal property of this
               * NumberFormat object (see 11.4): locale, numberingSystem, style, currency,
               * currencyDisplay, minimumIntegerDigits, minimumFractionDigits,
               * maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits, and
               * useGrouping. Properties whose corresponding internal properties are not present
               * are not assigned.
               */
              /* 11.3.3 */ defineProperty(Intl.NumberFormat.prototype, 'resolvedOptions', {
                configurable: true,
                writable: true,
                value: function() {
                  var prop,
                    descs = new Record(),
                    props = [
                      'locale',
                      'numberingSystem',
                      'style',
                      'currency',
                      'currencyDisplay',
                      'minimumIntegerDigits',
                      'minimumFractionDigits',
                      'maximumFractionDigits',
                      'minimumSignificantDigits',
                      'maximumSignificantDigits',
                      'useGrouping',
                    ],
                    internal = this != null && typeof this === 'object' && getInternalProperties(this)

                  // Satisfy test 11.3_b
                  if (!internal || !internal['[[initializedNumberFormat]]'])
                    throw new TypeError(
                      '`this` value for resolvedOptions() is not an initialized Intl.NumberFormat object.',
                    )

                  for (var i = 0, max = props.length; i < max; i++) {
                    if (hop.call(internal, (prop = '[[' + props[i] + ']]')))
                      descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true }
                  }

                  return objCreate({}, descs)
                },
              })

              // 12.1 The Intl.DateTimeFormat constructor
              // ==================================

              // Define the DateTimeFormat constructor internally so it cannot be tainted
              function DateTimeFormatConstructor() {
                var locales = arguments[0]
                var options = arguments[1]

                if (!this || this === Intl) {
                  return new Intl.DateTimeFormat(locales, options)
                }
                return InitializeDateTimeFormat(toObject(this), locales, options)
              }

              defineProperty(Intl, 'DateTimeFormat', {
                configurable: true,
                writable: true,
                value: DateTimeFormatConstructor,
              })

              // Must explicitly set prototypes as unwritable
              defineProperty(DateTimeFormatConstructor, 'prototype', {
                writable: false,
              })

              /**
               * The abstract operation InitializeDateTimeFormat accepts the arguments dateTimeFormat
               * (which must be an object), locales, and options. It initializes dateTimeFormat as a
               * DateTimeFormat object.
               */
              function /* 12.1.1.1 */ InitializeDateTimeFormat(dateTimeFormat, locales, options) {
                var // This will be a internal properties object if we're not already initialized
                  internal = getInternalProperties(dateTimeFormat),
                  // Create an object whose props can be used to restore the values of RegExp props
                  regexpState = createRegExpRestore()

                // 1. If dateTimeFormat has an [[initializedIntlObject]] internal property with
                //	  value true, throw a TypeError exception.
                if (internal['[[initializedIntlObject]]'] === true)
                  throw new TypeError('`this` object has already been initialized as an Intl object')

                // Need this to access the `internal` object
                defineProperty(dateTimeFormat, '__getInternalProperties', {
                  value: function() {
                    // NOTE: Non-standard, for internal use only
                    if (arguments[0] === secret) return internal
                  },
                })

                // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.
                internal['[[initializedIntlObject]]'] = true

                var // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList
                  //	  abstract operation (defined in 9.2.1) with argument locales.
                  requestedLocales = CanonicalizeLocaleList(locales),
                  // 4. Let options be the result of calling the ToDateTimeOptions abstract
                  //	  operation (defined below) with arguments options, "any", and "date".
                  options = ToDateTimeOptions(options, 'any', 'date'),
                  // 5. Let opt be a new Record.
                  opt = new Record(),
                  // 6. Let matcher be the result of calling the GetOption abstract operation
                  //	  (defined in 9.2.9) with arguments options, "localeMatcher", "string", a List
                  //	  containing the two String values "lookup" and "best fit", and "best fit".
                  matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit')

                // 7. Set opt.[[localeMatcher]] to matcher.
                opt['[[localeMatcher]]'] = matcher

                var // 8. Let DateTimeFormat be the standard built-in object that is the initial
                  //	  value of Intl.DateTimeFormat.
                  DateTimeFormat = internals.DateTimeFormat, // This is what we *really* need
                  // 9. Let localeData be the value of the [[localeData]] internal property of
                  //	  DateTimeFormat.
                  localeData = DateTimeFormat['[[localeData]]'],
                  // 10. Let r be the result of calling the ResolveLocale abstract operation
                  //	   (defined in 9.2.5) with the [[availableLocales]] internal property of
                  //		DateTimeFormat, requestedLocales, opt, the [[relevantExtensionKeys]]
                  //		internal property of DateTimeFormat, and localeData.
                  r = ResolveLocale(
                    DateTimeFormat['[[availableLocales]]'],
                    requestedLocales,
                    opt,
                    DateTimeFormat['[[relevantExtensionKeys]]'],
                    localeData,
                  )

                // 11. Set the [[locale]] internal property of dateTimeFormat to the value of
                //	   r.[[locale]].
                internal['[[locale]]'] = r['[[locale]]']

                // 12. Set the [[calendar]] internal property of dateTimeFormat to the value of
                //	   r.[[ca]].
                internal['[[calendar]]'] = r['[[ca]]']

                // 13. Set the [[numberingSystem]] internal property of dateTimeFormat to the value of
                //	   r.[[nu]].
                internal['[[numberingSystem]]'] = r['[[nu]]']

                // The specification doesn't tell us to do this, but it's helpful later on
                internal['[[dataLocale]]'] = r['[[dataLocale]]']

                var // 14. Let dataLocale be the value of r.[[dataLocale]].
                  dataLocale = r['[[dataLocale]]'],
                  // 15. Let tz be the result of calling the [[Get]] internal method of options with
                  //	   argument "timeZone".
                  tz = options.timeZone

                // 16. If tz is not undefined, then
                if (tz !== undefined) {
                  // a. Let tz be ToString(tz).
                  // b. Convert tz to upper case as described in 6.1.
                  //	  NOTE: If an implementation accepts additional time zone values, as permitted
                  //			under certain conditions by the Conformance clause, different casing
                  //			rules apply.
                  tz = toLatinUpperCase(tz)

                  // c. If tz is not "UTC", then throw a RangeError exception.
                  // ###TODO: accept more time zones###
                  if (tz !== 'UTC') throw new RangeError('timeZone is not supported.')
                }

                // 17. Set the [[timeZone]] internal property of dateTimeFormat to tz.
                internal['[[timeZone]]'] = tz

                // 18. Let opt be a new Record.
                opt = new Record()

                // 19. For each row of Table 3, except the header row, do:
                for (var prop in dateTimeComponents) {
                  if (!hop.call(dateTimeComponents, prop)) continue

                  var // 20. Let prop be the name given in the Property column of the row.
                    // 21. Let value be the result of calling the GetOption abstract operation,
                    //	   passing as argument options, the name given in the Property column of the
                    //	   row, "string", a List containing the strings given in the Values column of
                    //	   the row, and undefined.
                    value = GetOption(options, prop, 'string', dateTimeComponents[prop])

                  // 22. Set opt.[[<prop>]] to value.
                  opt['[[' + prop + ']]'] = value
                }

                var // Assigned a value below
                  bestFormat,
                  // 23. Let dataLocaleData be the result of calling the [[Get]] internal method of
                  //	   localeData with argument dataLocale.
                  dataLocaleData = localeData[dataLocale],
                  // 24. Let formats be the result of calling the [[Get]] internal method of
                  //	   dataLocaleData with argument "formats".
                  formats = dataLocaleData.formats,
                  // 25. Let matcher be the result of calling the GetOption abstract operation with
                  //	   arguments options, "formatMatcher", "string", a List containing the two String
                  //	   values "basic" and "best fit", and "best fit".
                  matcher = GetOption(options, 'formatMatcher', 'string', new List('basic', 'best fit'), 'best fit')

                // 26. If matcher is "basic", then
                if (matcher === 'basic')
                  // 27. Let bestFormat be the result of calling the BasicFormatMatcher abstract
                  //	   operation (defined below) with opt and formats.
                  bestFormat = BasicFormatMatcher(opt, formats)
                // 28. Else
                // 29. Let bestFormat be the result of calling the BestFitFormatMatcher
                //	   abstract operation (defined below) with opt and formats.
                else bestFormat = BestFitFormatMatcher(opt, formats)

                // 30. For each row in Table 3, except the header row, do
                for (var prop in dateTimeComponents) {
                  if (!hop.call(dateTimeComponents, prop)) continue

                  // a. Let prop be the name given in the Property column of the row.
                  // b. Let pDesc be the result of calling the [[GetOwnProperty]] internal method of
                  //	  bestFormat with argument prop.
                  // c. If pDesc is not undefined, then
                  if (hop.call(bestFormat, prop)) {
                    var // i. Let p be the result of calling the [[Get]] internal method of bestFormat
                      //	  with argument prop.
                      p = bestFormat[prop]

                    // ii. Set the [[<prop>]] internal property of dateTimeFormat to p.
                    internal['[[' + prop + ']]'] = p
                  }
                }

                var // Assigned a value below
                  pattern,
                  // 31. Let hr12 be the result of calling the GetOption abstract operation with
                  //	   arguments options, "hour12", "boolean", undefined, and undefined.
                  hr12 = GetOption(options, 'hour12', 'boolean' /*, undefined, undefined*/)

                // 32. If dateTimeFormat has an internal property [[hour]], then
                if (internal['[[hour]]']) {
                  // a. If hr12 is undefined, then let hr12 be the result of calling the [[Get]]
                  //	  internal method of dataLocaleData with argument "hour12".
                  hr12 = hr12 === undefined ? dataLocaleData.hour12 : hr12

                  // b. Set the [[hour12]] internal property of dateTimeFormat to hr12.
                  internal['[[hour12]]'] = hr12

                  // c. If hr12 is true, then
                  if (hr12 === true) {
                    var // i. Let hourNo0 be the result of calling the [[Get]] internal method of
                      //	  dataLocaleData with argument "hourNo0".
                      hourNo0 = dataLocaleData.hourNo0

                    // ii. Set the [[hourNo0]] internal property of dateTimeFormat to hourNo0.
                    internal['[[hourNo0]]'] = hourNo0

                    // iii. Let pattern be the result of calling the [[Get]] internal method of
                    //		bestFormat with argument "pattern12".
                    pattern = bestFormat.pattern12
                  }

                  // d. Else
                  // i. Let pattern be the result of calling the [[Get]] internal method of
                  //	  bestFormat with argument "pattern".
                  else pattern = bestFormat.pattern
                }

                // 33. Else
                // a. Let pattern be the result of calling the [[Get]] internal method of
                //	  bestFormat with argument "pattern".
                else pattern = bestFormat.pattern

                // 34. Set the [[pattern]] internal property of dateTimeFormat to pattern.
                internal['[[pattern]]'] = pattern

                // 35. Set the [[boundFormat]] internal property of dateTimeFormat to undefined.
                internal['[[boundFormat]]'] = undefined

                // 36. Set the [[initializedDateTimeFormat]] internal property of dateTimeFormat to
                //	   true.
                internal['[[initializedDateTimeFormat]]'] = true

                // Restore the RegExp properties
                regexpState.exp.test(regexpState.input)

                // Return the newly initialised object
                return dateTimeFormat
              }

              /**
               * Several DateTimeFormat algorithms use values from the following table, which provides
               * property names and allowable values for the components of date and time formats:
               */
              var dateTimeComponents = {
                weekday: ['narrow', 'short', 'long'],
                era: ['narrow', 'short', 'long'],
                year: ['2-digit', 'numeric'],
                month: ['2-digit', 'numeric', 'narrow', 'short', 'long'],
                day: ['2-digit', 'numeric'],
                hour: ['2-digit', 'numeric'],
                minute: ['2-digit', 'numeric'],
                second: ['2-digit', 'numeric'],
                timeZoneName: ['short', 'long'],
              }

              /**
               * When the ToDateTimeOptions abstract operation is called with arguments options,
               * required, and defaults, the following steps are taken:
               */
              function ToDateTimeOptions(options, required, defaults) {
                // 1. If options is undefined, then let options be null, else let options be
                //	  ToObject(options).
                options = options === undefined ? null : new Record(toObject(options))

                var // 2. Let create be the standard built-in function object defined in ES5, 15.2.3.5.
                  create = objCreate,
                  // 3. Let options be the result of calling the [[Call]] internal method of create with
                  //	  undefined as the this value and an argument list containing the single item
                  //	  options.
                  options = create(options),
                  // 4. Let needDefaults be true.
                  needDefaults = true

                // 5. If required is "date" or "any", then
                if (required === 'date' || required === 'any') {
                  // a. For each of the property names "weekday", "year", "month", "day":
                  // i. If the result of calling the [[Get]] internal method of options with the
                  //	  property name is not undefined, then let needDefaults be false.
                  if (
                    options.weekday !== undefined ||
                    options.year !== undefined ||
                    options.month !== undefined ||
                    options.day !== undefined
                  )
                    needDefaults = false
                }

                // 6. If required is "time" or "any", then
                if (required === 'time' || required === 'any') {
                  // a. For each of the property names "hour", "minute", "second":
                  // i. If the result of calling the [[Get]] internal method of options with the
                  //	  property name is not undefined, then let needDefaults be false.
                  if (options.hour !== undefined || options.minute !== undefined || options.second !== undefined)
                    needDefaults = false
                }

                // 7. If needDefaults is true and defaults is either "date" or "all", then
                if (needDefaults && (defaults === 'date' || defaults === 'all'))
                  // a. For each of the property names "year", "month", "day":
                  // i. Call the [[DefineOwnProperty]] internal method of options with the
                  //	  property name, Property Descriptor {[[Value]]: "numeric", [[Writable]]:
                  //	  true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
                  options.year = options.month = options.day = 'numeric'

                // 8. If needDefaults is true and defaults is either "time" or "all", then
                if (needDefaults && (defaults === 'time' || defaults === 'all'))
                  // a. For each of the property names "hour", "minute", "second":
                  // i. Call the [[DefineOwnProperty]] internal method of options with the
                  //	  property name, Property Descriptor {[[Value]]: "numeric", [[Writable]]:
                  //	  true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
                  options.hour = options.minute = options.second = 'numeric'

                // 9. Return options.
                return options
              }

              /**
               * When the BasicFormatMatcher abstract operation is called with two arguments options and
               * formats, the following steps are taken:
               */
              function BasicFormatMatcher(options, formats) {
                var // 1. Let removalPenalty be 120.
                  removalPenalty = 120,
                  // 2. Let additionPenalty be 20.
                  additionPenalty = 20,
                  // 3. Let longLessPenalty be 8.
                  longLessPenalty = 8,
                  // 4. Let longMorePenalty be 6.
                  longMorePenalty = 6,
                  // 5. Let shortLessPenalty be 6.
                  shortLessPenalty = 6,
                  // 6. Let shortMorePenalty be 3.
                  shortMorePenalty = 3,
                  // 7. Let bestScore be -Infinity.
                  bestScore = -Infinity,
                  // 8. Let bestFormat be undefined.
                  bestFormat,
                  // 9. Let i be 0.
                  i = 0,
                  // 10. Let len be the result of calling the [[Get]] internal method of formats with argument "length".
                  len = formats.length

                // 11. Repeat while i < len:
                while (i < len) {
                  var // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).
                    format = formats[i],
                    // b. Let score be 0.
                    score = 0

                  // c. For each property shown in Table 3:
                  for (var property in dateTimeComponents) {
                    if (!hop.call(dateTimeComponents, property)) continue

                    var // i. Let optionsProp be options.[[<property>]].
                      optionsProp = options['[[' + property + ']]'],
                      // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format
                      //	   with argument property.
                      // iii. If formatPropDesc is not undefined, then
                      // 1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.
                      formatProp = hop.call(format, property) ? format[property] : undefined

                    // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by
                    //	   additionPenalty.
                    if (optionsProp === undefined && formatProp !== undefined) score -= additionPenalty
                    // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by
                    //	  removalPenalty.
                    else if (optionsProp !== undefined && formatProp === undefined) score -= removalPenalty
                    // vi. Else
                    else {
                      var // 1. Let values be the array ["2-digit", "numeric", "narrow", "short",
                        //	  "long"].
                        values = ['2-digit', 'numeric', 'narrow', 'short', 'long'],
                        // 2. Let optionsPropIndex be the index of optionsProp within values.
                        optionsPropIndex = arrIndexOf.call(values, optionsProp),
                        // 3. Let formatPropIndex be the index of formatProp within values.
                        formatPropIndex = arrIndexOf.call(values, formatProp),
                        // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).
                        delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2)

                      // 5. If delta = 2, decrease score by longMorePenalty.
                      if (delta === 2) score -= longMorePenalty
                      // 6. Else if delta = 1, decrease score by shortMorePenalty.
                      else if (delta === 1) score -= shortMorePenalty
                      // 7. Else if delta = -1, decrease score by shortLessPenalty.
                      else if (delta === -1) score -= shortLessPenalty
                      // 8. Else if delta = -2, decrease score by longLessPenalty.
                      else if (delta === -2) score -= longLessPenalty
                    }
                  }

                  // d. If score > bestScore, then
                  if (score > bestScore) {
                    // i. Let bestScore be score.
                    bestScore = score

                    // ii. Let bestFormat be format.
                    bestFormat = format
                  }

                  // e. Increase i by 1.
                  i++
                }

                // 12. Return bestFormat.
                return bestFormat
              }

              /**
               * When the BestFitFormatMatcher abstract operation is called with two arguments options
               * and formats, it performs implementation dependent steps, which should return a set of
               * component representations that a typical user of the selected locale would perceive as
               * at least as good as the one returned by BasicFormatMatcher.
               */
              function BestFitFormatMatcher(options, formats) {
                // This is good enough for now
                return BasicFormatMatcher(options, formats)
              }

              /* 12.2.3 */ internals.DateTimeFormat = {
                '[[availableLocales]]': [],
                '[[relevantExtensionKeys]]': ['ca', 'nu'],
                '[[localeData]]': {},
              }

              /**
               * When the supportedLocalesOf method of Intl.DateTimeFormat is called, the
               * following steps are taken:
               */
              /* 12.2.2 */ defineProperty(Intl.DateTimeFormat, 'supportedLocalesOf', {
                configurable: true,
                writable: true,
                value: fnBind.call(supportedLocalesOf, internals.DateTimeFormat),
              })

              /**
               * This named accessor property returns a function that formats a number
               * according to the effective locale and the formatting options of this
               * DateTimeFormat object.
               */
              /* 12.3.2 */ defineProperty(Intl.DateTimeFormat.prototype, 'format', {
                configurable: true,
                get: function() {
                  var internal = this != null && typeof this === 'object' && getInternalProperties(this)

                  // Satisfy test 12.3_b
                  if (!internal || !internal['[[initializedDateTimeFormat]]'])
                    throw new TypeError('`this` value for format() is not an initialized Intl.DateTimeFormat object.')

                  // The value of the [[Get]] attribute is a function that takes the following
                  // steps:

                  // 1. If the [[boundFormat]] internal property of this DateTimeFormat object
                  //	  is undefined, then:
                  if (internal['[[boundFormat]]'] === undefined) {
                    var // a. Let F be a Function object, with internal properties set as
                      //	  specified for built-in functions in ES5, 15, or successor, and the
                      //	  length property set to 0, that takes the argument date and
                      //	  performs the following steps:
                      F = function() {
                        //	 i. If date is not provided or is undefined, then let x be the
                        //		result as if by the expression Date.now() where Date.now is
                        //		the standard built-in function defined in ES5, 15.9.4.4.
                        //	ii. Else let x be ToNumber(date).
                        // iii. Return the result of calling the FormatDateTime abstract
                        //		operation (defined below) with arguments this and x.
                        var x = Number(arguments.length === 0 ? Date.now() : arguments[0])
                        return FormatDateTime(this, x)
                      },
                      // b. Let bind be the standard built-in function object defined in ES5,
                      //	  15.3.4.5.
                      // c. Let bf be the result of calling the [[Call]] internal method of
                      //	  bind with F as the this value and an argument list containing
                      //	  the single item this.
                      bf = fnBind.call(F, this)
                    // d. Set the [[boundFormat]] internal property of this NumberFormat
                    //	  object to bf.
                    internal['[[boundFormat]]'] = bf
                  }
                  // Return the value of the [[boundFormat]] internal property of this
                  // NumberFormat object.
                  return internal['[[boundFormat]]']
                },
              })

              /**
               * When the FormatDateTime abstract operation is called with arguments dateTimeFormat
               * (which must be an object initialized as a DateTimeFormat) and x (which must be a Number
               * value), it returns a String value representing x (interpreted as a time value as
               * specified in ES5, 15.9.1.1) according to the effective locale and the formatting
               * options of dateTimeFormat.
               */
              function FormatDateTime(dateTimeFormat, x) {
                // 1. If x is not a finite Number, then throw a RangeError exception.
                if (!isFinite(x)) throw new RangeError('Invalid valid date passed to format')

                var internal = dateTimeFormat.__getInternalProperties(secret),
                  // Creating restore point for properties on the RegExp object... please wait
                  regexpState = createRegExpRestore(),
                  // 2. Let locale be the value of the [[locale]] internal property of dateTimeFormat.
                  locale = internal['[[locale]]'],
                  // 3. Let nf be the result of creating a new NumberFormat object as if by the
                  // expression new Intl.NumberFormat([locale], {useGrouping: false}) where
                  // Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.
                  nf = new Intl.NumberFormat([locale], { useGrouping: false }),
                  // 4. Let nf2 be the result of creating a new NumberFormat object as if by the
                  // expression new Intl.NumberFormat([locale], {minimumIntegerDigits: 2, useGrouping:
                  // false}) where Intl.NumberFormat is the standard built-in constructor defined in
                  // 11.1.3.
                  nf2 = new Intl.NumberFormat([locale], { minimumIntegerDigits: 2, useGrouping: false }),
                  // 5. Let tm be the result of calling the ToLocalTime abstract operation (defined
                  // below) with x, the value of the [[calendar]] internal property of dateTimeFormat,
                  // and the value of the [[timeZone]] internal property of dateTimeFormat.
                  tm = ToLocalTime(x, internal['[[calendar]]'], internal['[[timeZone]]']),
                  // 6. Let result be the value of the [[pattern]] internal property of dateTimeFormat.
                  result = internal['[[pattern]]'],
                  // Need the locale minus any extensions
                  dataLocale = internal['[[dataLocale]]'],
                  // Need the calendar data from CLDR
                  localeData = internals.DateTimeFormat['[[localeData]]'][dataLocale].calendars,
                  ca = internal['[[calendar]]']

                // 7. For each row of Table 3, except the header row, do:
                for (var p in dateTimeComponents) {
                  // a. If dateTimeFormat has an internal property with the name given in the
                  //	  Property column of the row, then:
                  if (hop.call(internal, '[[' + p + ']]')) {
                    var // Assigned values below
                      pm,
                      fv,
                      //	 i. Let p be the name given in the Property column of the row.
                      //	ii. Let f be the value of the [[<p>]] internal property of dateTimeFormat.
                      f = internal['[[' + p + ']]'],
                      // iii. Let v be the value of tm.[[<p>]].
                      v = tm['[[' + p + ']]']

                    //	iv. If p is "year" and v ≤ 0, then let v be 1 - v.
                    if (p === 'year' && v <= 0) v = 1 - v
                    //	 v. If p is "month", then increase v by 1.
                    else if (p === 'month') v++
                    //	vi. If p is "hour" and the value of the [[hour12]] internal property of
                    //		dateTimeFormat is true, then
                    else if (p === 'hour' && internal['[[hour12]]'] === true) {
                      // 1. Let v be v modulo 12.
                      v = v % 12

                      // 2. If v is equal to the value of tm.[[<p>]], then let pm be false; else
                      //	  let pm be true.
                      pm = v !== tm['[[' + p + ']]']

                      // 3. If v is 0 and the value of the [[hourNo0]] internal property of
                      //	  dateTimeFormat is true, then let v be 12.
                      if (v === 0 && internal['[[hourNo0]]'] === true) v = 12
                    }

                    // vii. If f is "numeric", then
                    if (f === 'numeric')
                      // 1. Let fv be the result of calling the FormatNumber abstract operation
                      //	  (defined in 11.3.2) with arguments nf and v.
                      fv = FormatNumber(nf, v)
                    // viii. Else if f is "2-digit", then
                    else if (f === '2-digit') {
                      // 1. Let fv be the result of calling the FormatNumber abstract operation
                      //	  with arguments nf2 and v.
                      fv = FormatNumber(nf2, v)

                      // 2. If the length of fv is greater than 2, let fv be the substring of fv
                      //	  containing the last two characters.
                      if (fv.length > 2) fv = fv.slice(-2)
                    }

                    // ix. Else if f is "narrow", "short", or "long", then let fv be a String
                    //	   value representing f in the desired form; the String value depends upon
                    //	   the implementation and the effective locale and calendar of
                    //	   dateTimeFormat. If p is "month", then the String value may also depend
                    //	   on whether dateTimeFormat has a [[day]] internal property. If p is
                    //	   "timeZoneName", then the String value may also depend on the value of
                    //	   the [[inDST]] field of tm.
                    else if (f in dateWidths) {
                      switch (p) {
                        case 'month':
                          fv = resolveDateString(localeData, ca, 'months', f, tm['[[' + p + ']]'])
                          break

                        case 'weekday':
                          try {
                            fv = resolveDateString(localeData, ca, 'days', f, tm['[[' + p + ']]'])
                            // fv = resolveDateString(ca.days, f)[tm['[['+ p +']]']];
                          } catch (e) {
                            throw new Error('Could not find weekday data for locale ' + locale)
                          }
                          break

                        case 'timeZoneName':
                          fv = '' // TODO
                          break

                        // TODO: Era
                        default:
                          fv = tm['[[' + p + ']]']
                      }
                    }

                    // x. Replace the substring of result that consists of "{", p, and "}", with
                    //	  fv.
                    result = result.replace('{' + p + '}', fv)
                  }
                }
                // 8. If dateTimeFormat has an internal property [[hour12]] whose value is true, then
                if (internal['[[hour12]]'] === true) {
                  // a. If pm is true, then let fv be an implementation and locale dependent String
                  //	  value representing “post meridiem”; else let fv be an implementation and
                  //	  locale dependent String value representing “ante meridiem”.
                  fv = resolveDateString(localeData, ca, 'dayPeriods', pm ? 'pm' : 'am')

                  // b. Replace the substring of result that consists of "{ampm}", with fv.
                  result = result.replace('{ampm}', fv)
                }

                // Restore properties of the RegExp object
                regexpState.exp.test(regexpState.input)

                // 9. Return result.
                return result
              }

              /**
               * When the ToLocalTime abstract operation is called with arguments date, calendar, and
               * timeZone, the following steps are taken:
               */
              function ToLocalTime(date, calendar, timeZone) {
                // 1. Apply calendrical calculations on date for the given calendar and time zone to
                //	  produce weekday, era, year, month, day, hour, minute, second, and inDST values.
                //	  The calculations should use best available information about the specified
                //	  calendar and time zone. If the calendar is "gregory", then the calculations must
                //	  match the algorithms specified in ES5, 15.9.1, except that calculations are not
                //	  bound by the restrictions on the use of best available information on time zones
                //	  for local time zone adjustment and daylight saving time adjustment imposed by
                //	  ES5, 15.9.1.7 and 15.9.1.8.
                // ###TODO###
                var d = new Date(date)

                // 2. Return a Record with fields [[weekday]], [[era]], [[year]], [[month]], [[day]],
                //	  [[hour]], [[minute]], [[second]], and [[inDST]], each with the corresponding
                //	  calculated value.
                return new Record({
                  '[[weekday]]': d.getDay(),
                  '[[era]]': +(d.getFullYear >= 0),
                  '[[year]]': d.getFullYear(),
                  '[[month]]': d.getMonth(),
                  '[[day]]': d.getDate(),
                  '[[hour]]': d.getHours(),
                  '[[minute]]': d.getMinutes(),
                  '[[second]]': d.getSeconds(),
                  '[[inDST]]': false, // ###TODO###
                })
              }

              /**
               * The function returns a new object whose properties and attributes are set as if
               * constructed by an object literal assigning to each of the following properties the
               * value of the corresponding internal property of this DateTimeFormat object (see 12.4):
               * locale, calendar, numberingSystem, timeZone, hour12, weekday, era, year, month, day,
               * hour, minute, second, and timeZoneName. Properties whose corresponding internal
               * properties are not present are not assigned.
               */
              /* 12.3.3 */ defineProperty(Intl.DateTimeFormat.prototype, 'resolvedOptions', {
                writable: true,
                configurable: true,
                value: function() {
                  var prop,
                    descs = new Record(),
                    props = [
                      'locale',
                      'calendar',
                      'numberingSystem',
                      'timeZone',
                      'hour12',
                      'weekday',
                      'era',
                      'year',
                      'month',
                      'day',
                      'hour',
                      'minute',
                      'second',
                      'timeZoneName',

                      // Not part of the spec, but in here for debugging purposes
                      'pattern',
                    ],
                    internal = this != null && typeof this === 'object' && getInternalProperties(this)

                  // Satisfy test 12.3_b
                  if (!internal || !internal['[[initializedDateTimeFormat]]'])
                    throw new TypeError(
                      '`this` value for resolvedOptions() is not an initialized Intl.DateTimeFormat object.',
                    )

                  for (var i = 0, max = props.length; i < max; i++) {
                    if (hop.call(internal, (prop = '[[' + props[i] + ']]')))
                      descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true }
                  }

                  return objCreate({}, descs)
                },
              })

              // Sect 13 Locale Sensitive Functions of the ECMAScript Language Specification
              // ===========================================================================

              /**
               * When the toLocaleString method is called with optional arguments locales and options,
               * the following steps are taken:
               */
              /* 13.2.1 */ defineProperty(Number.prototype, 'toLocaleStringIntl', {
                writable: true,
                configurable: true,
                value: function() {
                  // Satisfy test 13.2.1_1
                  if (Object.prototype.toString.call(this) !== '[object Number]')
                    throw new TypeError('`this` value must be a number for Number.prototype.toLocaleStringIntl()')

                  // 1. Let x be this Number value (as defined in ES5, 15.7.4).
                  // 2. If locales is not provided, then let locales be undefined.
                  // 3. If options is not provided, then let options be undefined.
                  // 4. Let numberFormat be the result of creating a new object as if by the
                  //	  expression new Intl.NumberFormat(locales, options) where
                  //	  Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.
                  // 5. Return the result of calling the FormatNumber abstract operation
                  //	  (defined in 11.3.2) with arguments numberFormat and x.
                  return FormatNumber(new NumberFormatConstructor(arguments[0], arguments[1]), this)
                },
              })

              /**
               * When the toLocaleString method is called with optional arguments locales and options,
               * the following steps are taken:
               */
              /* 13.3.1 */ defineProperty(Date.prototype, 'toLocaleStringIntl', {
                writable: true,
                configurable: true,
                value: function() {
                  // Satisfy test 13.3.0_1
                  if (Object.prototype.toString.call(this) !== '[object Date]')
                    throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleStringIntl()')

                  var // 1. Let x be this time value (as defined in ES5, 15.9.5).
                    x = +this

                  // 2. If x is NaN, then return "Invalid Date".
                  if (isNaN(x)) return 'Invalid Date'

                  var // 3. If locales is not provided, then let locales be undefined.
                    locales = arguments[0],
                    // 4. If options is not provided, then let options be undefined.
                    options = arguments[1],
                    // 5. Let options be the result of calling the ToDateTimeOptions abstract
                    //	  operation (defined in 12.1.1) with arguments options, "any", and "all".
                    options = ToDateTimeOptions(options, 'any', 'all'),
                    // 6. Let dateTimeFormat be the result of creating a new object as if by the
                    //	  expression new Intl.DateTimeFormat(locales, options) where
                    //	  Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.
                    dateTimeFormat = new DateTimeFormatConstructor(locales, options)

                  // 7. Return the result of calling the FormatDateTime abstract operation (defined
                  //	  in 12.3.2) with arguments dateTimeFormat and x.
                  return FormatDateTime(dateTimeFormat, x)
                },
              })

              /**
               * When the toLocaleDateString method is called with optional arguments locales and
               * options, the following steps are taken:
               */
              /* 13.3.2 */ defineProperty(Date.prototype, 'toLocaleDateString', {
                writable: true,
                configurable: true,
                value: function() {
                  // Satisfy test 13.3.0_1
                  if (Object.prototype.toString.call(this) !== '[object Date]')
                    throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleDateString()')

                  var // 1. Let x be this time value (as defined in ES5, 15.9.5).
                    x = +this

                  // 2. If x is NaN, then return "Invalid Date".
                  if (isNaN(x)) return 'Invalid Date'

                  var // 3. If locales is not provided, then let locales be undefined.
                    locales = arguments[0],
                    // 4. If options is not provided, then let options be undefined.
                    options = arguments[1],
                    // 5. Let options be the result of calling the ToDateTimeOptions abstract
                    //	  operation (defined in 12.1.1) with arguments options, "date", and "date".
                    options = ToDateTimeOptions(options, 'date', 'date'),
                    // 6. Let dateTimeFormat be the result of creating a new object as if by the
                    //	  expression new Intl.DateTimeFormat(locales, options) where
                    //	  Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.
                    dateTimeFormat = new DateTimeFormatConstructor(locales, options)

                  // 7. Return the result of calling the FormatDateTime abstract operation (defined
                  //	  in 12.3.2) with arguments dateTimeFormat and x.
                  return FormatDateTime(dateTimeFormat, x)
                },
              })

              /**
               * When the toLocaleTimeString method is called with optional arguments locales and
               * options, the following steps are taken:
               */
              /* 13.3.3 */ defineProperty(Date.prototype, 'toLocaleTimeString', {
                writable: true,
                configurable: true,
                value: function() {
                  // Satisfy test 13.3.0_1
                  if (Object.prototype.toString.call(this) !== '[object Date]')
                    throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleTimeString()')

                  var // 1. Let x be this time value (as defined in ES5, 15.9.5).
                    x = +this

                  // 2. If x is NaN, then return "Invalid Date".
                  if (isNaN(x)) return 'Invalid Date'

                  var // 3. If locales is not provided, then let locales be undefined.
                    locales = arguments[0],
                    // 4. If options is not provided, then let options be undefined.
                    options = arguments[1],
                    // 5. Let options be the result of calling the ToDateTimeOptions abstract
                    //	  operation (defined in 12.1.1) with arguments options, "time", and "time".
                    options = ToDateTimeOptions(options, 'time', 'time'),
                    // 6. Let dateTimeFormat be the result of creating a new object as if by the
                    //	  expression new Intl.DateTimeFormat(locales, options) where
                    //	  Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.
                    dateTimeFormat = new DateTimeFormatConstructor(locales, options)

                  // 7. Return the result of calling the FormatDateTime abstract operation (defined
                  //	  in 12.3.2) with arguments dateTimeFormat and x.
                  return FormatDateTime(dateTimeFormat, x)
                },
              })

              /**
               * Can't really ship a single script with data for hundreds of locales, so we provide
               * this __addLocaleData method as a means for the developer to add the data on an
               * as-needed basis
               */
              defineProperty(Intl, '__addLocaleData', {
                value: addLocaleData,
              })
              function addLocaleData(data) {
                if (!IsStructurallyValidLanguageTag(data.locale))
                  throw new Error("Object passed doesn't identify itself with a valid language tag")

                // Both NumberFormat and DateTimeFormat require number data, so throw if it isn't present
                if (!data.number) throw new Error("Object passed doesn't contain locale data for Intl.NumberFormat")

                var locale,
                  locales = [data.locale],
                  parts = data.locale.split('-')

                // Create fallbacks for locale data with scripts, e.g. Latn, Hans, Vaii, etc
                if (parts.length > 2 && parts[1].length == 4) arrPush.call(locales, parts[0] + '-' + parts[2])

                while ((locale = arrShift.call(locales))) {
                  // Add to NumberFormat internal properties as per 11.2.3
                  arrPush.call(internals.NumberFormat['[[availableLocales]]'], locale)
                  internals.NumberFormat['[[localeData]]'][locale] = data.number

                  // ...and DateTimeFormat internal properties as per 12.2.3
                  if (data.date) {
                    data.date.nu = data.number.nu
                    arrPush.call(internals.DateTimeFormat['[[availableLocales]]'], locale)
                    internals.DateTimeFormat['[[localeData]]'][locale] = data.date
                  }
                }

                // If this is the first set of locale data added, make it the default
                if (defaultLocale === undefined) defaultLocale = data.locale

                // 11.3 (the NumberFormat prototype object is an Intl.NumberFormat instance)
                if (!numberFormatProtoInitialised) {
                  InitializeNumberFormat(Intl.NumberFormat.prototype)
                  numberFormatProtoInitialised = true
                }

                // 11.3 (the NumberFormat prototype object is an Intl.NumberFormat instance)
                if (data.date && !dateTimeFormatProtoInitialised) {
                  InitializeDateTimeFormat(Intl.DateTimeFormat.prototype)
                  dateTimeFormatProtoInitialised = true
                }
              }

              // Exposed for debugging
              if (typeof window !== 'undefined') window.IntlLocaleData = internals

              // Helper functions
              // ================

              /**
               * A merge of the Intl.{Constructor}.supportedLocalesOf functions
               * To make life easier, the function should be bound to the constructor's internal
               * properties object.
               */
              function supportedLocalesOf(locales) {
                /*jshint validthis:true */

                // Bound functions only have the `this` value altered if being used as a constructor,
                // this lets us imitate a native function that has no constructor
                if (!hop.call(this, '[[availableLocales]]'))
                  throw new TypeError('supportedLocalesOf() is not a constructor')

                var // Create an object whose props can be used to restore the values of RegExp props
                  regexpState = createRegExpRestore(),
                  // 1. If options is not provided, then let options be undefined.
                  options = arguments[1],
                  // 2. Let availableLocales be the value of the [[availableLocales]] internal
                  //	  property of the standard built-in object that is the initial value of
                  //	  Intl.NumberFormat.

                  availableLocales = this['[[availableLocales]]'],
                  // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList
                  //	  abstract operation (defined in 9.2.1) with argument locales.
                  requestedLocales = CanonicalizeLocaleList(locales)

                // Restore the RegExp properties
                regexpState.exp.test(regexpState.input)

                // 4. Return the result of calling the SupportedLocales abstract operation
                //	  (defined in 9.2.8) with arguments availableLocales, requestedLocales,
                //	  and options.
                return SupportedLocales(availableLocales, requestedLocales, options)
              }

              /**
               * Returns a string for a date component, resolved using multiple inheritance as specified
               * as specified in the Unicode Technical Standard 35.
               */
              function resolveDateString(data, ca, component, width, key) {
                // From http://www.unicode.org/reports/tr35/tr35.html#Multiple_Inheritance:
                // 'In clearly specified instances, resources may inherit from within the same locale.
                //	For example, ... the Buddhist calendar inherits from the Gregorian calendar.'
                var obj = data[ca] && data[ca][component] ? data[ca][component] : data.gregory[component],
                  // "sideways" inheritance resolves strings when a key doesn't exist
                  alts = {
                    narrow: ['short', 'long'],
                    short: ['long', 'narrow'],
                    long: ['short', 'narrow'],
                  },
                  //
                  resolved = hop.call(obj, width)
                    ? obj[width]
                    : hop.call(obj, alts[width][0])
                    ? obj[alts[width][0]]
                    : obj[alts[width][1]]

                // `key` wouldn't be specified for components 'dayPeriods'
                return key != null ? resolved[key] : resolved
              }

              /**
               * A map that doesn't contain Object in its prototype chain
               */
              Record.prototype = objCreate(null)
              function Record(obj) {
                // Copy only own properties over unless this object is already a Record instance
                for (var k in obj) {
                  if (obj instanceof Record || hop.call(obj, k))
                    defineProperty(this, k, { value: obj[k], enumerable: true, writable: true, configurable: true })
                }
              }

              /**
               * An ordered list
               */
              List.prototype = objCreate(null)
              function List() {
                defineProperty(this, 'length', { writable: true, value: 0 })

                if (arguments.length) arrPush.apply(this, arrSlice.call(arguments))
              }

              /**
               * Constructs a regular expression to restore tainted RegExp properties
               */
              function createRegExpRestore() {
                var lm = RegExp.lastMatch,
                  ret = {
                    input: RegExp.input,
                  },
                  esc = /[.?*+^$[\]\\(){}|-]/g,
                  reg = new List(),
                  cap = {}

                if (lm == ')') lm = '\\)'
                // Create a snapshot of all the 'captured' properties
                for (var i = 1; i <= 9; i++) cap['$' + i] = RegExp['$' + i]

                // Now, iterate over them
                for (var i = 1; i <= 9; i++) {
                  var m = cap['$' + i]

                  // If it's empty, add an empty capturing group
                  if (!m) lm = '()' + lm
                  // Else find the string in lm and escape & wrap it to capture it
                  else lm = lm.replace(m, '(' + m.replace(esc, '\\$0') + ')')

                  // Push it to the reg and chop lm to make sure further groups come after
                  arrPush.call(reg, lm.slice(0, lm.indexOf('(') + 1))
                  lm = lm.slice(lm.indexOf('(') + 1)
                }

                // Create the regular expression that will reconstruct the RegExp properties
                ret.exp = new RegExp(arrJoin.call(reg, '') + lm, RegExp.multiline ? 'm' : '')

                return ret
              }

              /**
               * Convert only a-z to uppercase as per section 6.1 of the spec
               */
              function toLatinUpperCase(str) {
                var i = str.length

                while (i--) {
                  var ch = str.charAt(i)

                  if (ch >= 'a' && ch <= 'z') str = str.slice(0, i) + ch.toUpperCase() + str.slice(i + 1)
                }

                return str
              }

              /**
               * Mimics ES5's abstract ToObject() function
               */
              function toObject(arg) {
                if (arg == null) throw new TypeError('Cannot convert null or undefined to object')

                return Object(arg)
              }

              /**
               * Returns "internal" properties for an object
               */
              function getInternalProperties(obj) {
                if (hop.call(obj, '__getInternalProperties')) return obj.__getInternalProperties(secret)
                else return objCreate(null)
              }

              return Intl
            })({})

      if (!global.Intl) global.Intl = Intl

      return { Intl: Intl }
    }

  var __js_markers_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
       * The markerHelper is a private object that we use for placeholder values, primarily as a performance aid
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.makeMarkerHelper = function() {
        this.markerHelper = {
          chartMap: {},
          classMap: {},
        }
      }

      /**
       * Adds a marker to the chart
       * @private
       * @memberOf CIQ.ChartEngine
       * @param {CIQ.Marker} marker The marker to add
       */
      CIQ.ChartEngine.prototype.addToHolder = function(marker) {
        var panel = this.panels[marker.params.panelName]
        if (!panel) return

        // Switcheroo. If a NodeCreator is passed in, then we change the marker
        // to reference the actual DOM node and then we add stxNodeCreator to the
        // marker so that we can reference it if need be
        if (CIQ.derivedFrom(marker.params.node, CIQ.Marker.NodeCreator)) {
          marker.stxNodeCreator = marker.params.node
          marker.node = marker.stxNodeCreator.node
        } else {
          marker.node = marker.params.node
        }

        if (!this.markerHelper) this.makeMarkerHelper()

        if (marker.params.chartContainer) {
          this.container.appendChild(marker.node)
        } else if (marker.params.includeAxis) {
          panel.holder.appendChild(marker.node)
        } else {
          panel.subholder.appendChild(marker.node)
        }

        var label = marker.params.label
        if (!this.markers[label]) this.markers[label] = []
        this.markers[label].push(marker)

        marker.chart = panel.chart

        // Put it in the map of charts
        if (!this.markerHelper.chartMap[marker.chart.name]) {
          this.markerHelper.chartMap[marker.chart.name] = {
            dataSetLength: 0,
            markers: [],
          }
        }
        this.markerHelper.chartMap[marker.chart.name].markers.push(marker)

        // Put it in the map of placement functions
        if (!marker.className) {
          console.log('Marker objects must have a member className')
        }
        var classMap = this.markerHelper.classMap[marker.className]
        if (!classMap) classMap = this.markerHelper.classMap[marker.className] = {}
        if (!classMap[marker.params.panelName]) classMap[marker.params.panelName] = []
        classMap[marker.params.panelName].push(marker)

        this.setMarkerTick(marker)
      }

      /**
       * Gets an array of markers
       * @private
       * @param  {string} type The type of comparison "panelName","label","all"
       * @param {string} comparison The value to compare to
       */
      CIQ.ChartEngine.prototype.getMarkerArray = function(type, comparison) {
        var arr = []
        for (var label in this.markers) {
          for (var i = 0; i < this.markers[label].length; i++) {
            var marker = this.markers[label][i]
            if (type == 'panelName') {
              if (marker.params.panelName == comparison) arr.push(marker)
            } else if (type == 'label') {
              if (label == comparison) arr.push(marker)
            } else if (type == 'all') {
              arr.push(marker)
            }
          }
        }
        return arr
      }
      /**
       * Removes the marker from the chart
       * @private
       * @param  {CIQ.Marker} marker The marker to remove
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.removeFromHolder = function(marker) {
        var panel = this.panels[marker.params.panelName]
        if (panel) {
          if (marker.node.parentNode == panel.holder) panel.holder.removeChild(marker.node)
          else if (marker.node.parentNode == panel.subholder) panel.subholder.removeChild(marker.node)
          else if (marker.node.parentNode == this.container) this.container.removeChild(marker.node)
        }
        // Remove from label map
        var labels = this.markers[marker.params.label]
        if (!labels) return
        var i
        for (i = 0; i < labels.length; i++) {
          if (labels[i] === marker) {
            labels.splice(i, 1)
            break
          }
        }

        // remove from chart map
        var chartMap = this.markerHelper.chartMap[marker.chart.name]
        if (chartMap) {
          for (i = 0; i < chartMap.markers.length; i++) {
            if (chartMap.markers[i] === marker) {
              chartMap.markers.splice(i, 1)
              break
            }
          }
        }

        // remove from class map
        var classMap = this.markerHelper.classMap[marker.className]
        if (classMap) {
          var panelArray = classMap[marker.params.panelName]
          if (panelArray) {
            for (i = 0; i < panelArray.length; i++) {
              if (panelArray[i] === marker) {
                panelArray.splice(i, 1)
                break
              }
            }
          }
        }
      }

      /**
       * Moves the markers from one panel to another
       * Useful when renaming panels
       * @param  {string} fromPanelName The panel to move markers from
       * @param  {string} toPanelName The panel to move markers to
       * @memberOf CIQ.ChartEngine
       * @since 2016-07-16
       */
      CIQ.ChartEngine.prototype.moveMarkers = function(fromPanelName, toPanelName) {
        var arr = this.getMarkerArray('panelName', fromPanelName)
        for (var i = 0; i < arr.length; i++) {
          arr[i].params.panelName = toPanelName
        }
        for (var className in this.markerHelper.classMap) {
          var tmp = this.markerHelper.classMap[className][fromPanelName]
          if (tmp) {
            this.markerHelper.classMap[className][toPanelName] = tmp
            delete this.markerHelper.classMap[className][fromPanelName]
          }
        }
      }

      /**
       * Establishes the tick value for any markers that have a "date" specified. It tries to be efficient, not recalculating
       * unless the size of the dataSet for a chart has actually changed
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.establishMarkerTicks = function() {
        if (!this.markerHelper) this.makeMarkerHelper()
        var chartMap = this.markerHelper.chartMap
        for (var chart in chartMap) {
          var chartEntry = chartMap[chart]
          if (chartEntry.dataSetLength == this.charts[chart].dataSet.length) continue
          for (var i = 0; i < chartEntry.markers.length; i++) {
            this.setMarkerTick(chartEntry.markers[i])
          }
        }
      }

      /**
       * Figures out the position of a future marker but only if it is displayed on the screen.
       * @param  {CIQ.Marker} marker The marker to check
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.futureTickIfDisplayed = function(marker) {
        var chart = marker.chart
        if (chart.dataSet.length < 1) return
        var xaxisDT = chart.xaxis[chart.xaxis.length - 1].DT

        xaxisDT = new Date(xaxisDT.getTime() - this.timeZoneOffset * 60000)
        if (marker.params.x > xaxisDT) return // not displayed on screen yet

        // It should be displayed on the screen now so find the exact tick
        var futureTicksOnScreen = chart.maxTicks - chart.dataSegment.length
        var ticksToSearch = chart.dataSet.length + futureTicksOnScreen
        var pms, qms
        var dt = new Date(chart.dataSet[chart.dataSet.length - 1].DT)

        var iter = this.standardMarketIterator(dt, null, chart)

        var dms = marker.params.x.getTime()
        for (var j = chart.dataSet.length; j < ticksToSearch; j++) {
          pms = dt.getTime()
          dt = iter.next()
          qms = dt.getTime()
          // If the event lands on that day, or if the event landed between bars
          if (qms == dms) {
            marker.tick = j
            return
          } else if (qms > dms && pms < dms) {
            marker.tick = Math.max(j - 1, 0)
            return
          }
        }
      }

      /**
       * Establishes the tick value for the specified marker. We do this to avoid calculating the date every time we want
       * to place the marker. Converting date to tick is a very expensive operation!
       * @param {CIQ.Marker} marker The marker for which to establish the tick
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setMarkerTick = function(marker) {
        var chart = marker.chart
        if (marker.params.xPositioner == 'master' && marker.params.x) {
          marker.tick = Math.floor(marker.params.x / this.layout.periodicity)
          return
        } else if (marker.params.xPositioner == 'date' && marker.params.x) {
          var pms, qms
          // TODO, use binary search for finding date
          var dms = marker.params.x.getTime()
          for (var i = 0; i < chart.dataSet.length; i++) {
            var quotes = chart.dataSet[i]
            qms = quotes.DT.getTime()
            pms = qms
            if (i > 0) pms = chart.dataSet[i - 1].DT.getTime()
            // If the event lands on that day, or if the event landed between bars
            if (qms == dms) {
              marker.tick = i
              return
            } else if (qms > dms && pms < dms) {
              marker.tick = Math.max(i - 1, 0)
              return
            } else if (dms < qms) {
              marker.tick = null
              // marker date is in distant past, shortcircuit the logic for performance.
              return
            }
          }
          if (chart.dataSet.length < 1) return
          var dt = new Date(chart.dataSet[i - 1].DT)
          if (dt.getTime() < dms) marker.params.future = true
          marker.tick = null // reset in case we had figured it out with an earlier dataset
        }
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias positionMarkers
       */
      CIQ.ChartEngine.prototype.positionMarkers = function() {
        var self = this
        if (!self.markerHelper) return

        function draw() {
          if (self.runPrepend('positionMarkers', arguments)) return
          self.markerTimeout = null
          for (var className in self.markerHelper.classMap) {
            for (var panelName in self.markerHelper.classMap[className]) {
              var arr = self.markerHelper.classMap[className][panelName]
              var panel = self.panels[panelName]
              if (arr.length) {
                var params = {
                  stx: self,
                  arr: arr,
                  panel: panel,
                }
                params.firstTick = panel.chart.dataSet.length - panel.chart.scroll
                params.lastTick = params.firstTick + panel.chart.dataSegment.length

                var fn = arr[0].constructor.placementFunction // Some magic, this gets the static member "placementFunction" of the class (not the instance)
                if (fn) {
                  fn(params)
                } else {
                  self.defaultMarkerPlacement(params)
                }
              }
            }
          }
          self.runAppend('positionMarkers', arguments)
        }

        if (this.markerDelay || this.markerDelay === 0) {
          if (!this.markerTimeout) this.markerTimeout = setTimeout(draw, this.markerDelay)
        } else {
          draw()
        }
      }

      /**
       * A marker is a DOM object that is managed by the chart. Makers are placed in "holders" which are
       * DIV elements whose placement and size corresponds with a panel on the chart. A holder exists for
       * each panel. Markers are placed by date, tick or bar to control their position on the x-axis. They
       * are placed by value (price) to control their position on the y-axis. Markers will be repositioned
       * when the user scrolls or zooms the chart.
       *
       * The default placement function for any markers is {@link CIQ.ChartEngine#defaultMarkerPlacement}, but custom placement functions can be created as needed.
       * See {@link CIQ.Marker.AboveCandle} for sample custom rendering function.
       *
       * If markers must be part of an exported image generated using the {@link STXSocial} plug-in, you need to draw them on the actual canvas instead using [Canvas Markers](tutorial-Popular%20API%20injections.html#marker).
       *
       * See {@tutorial Markers} tutorials for additional implementation instructions.
       *
       * @name CIQ.Marker
       * @param {Object} params Parameters that describe the marker
       * @param {CIQ.ChartEngine} params.stx The chart to attach the marker
       * @param {*} params.x A valid date, date string, tick or bar (depending on selected xPositioner) to select a candle to attach to.
       * @param {Number} params.y A valid value for positioning on the y-axis (depending on selected yPositioner, if missing the marker will be set "above_candle" as long as a valid candle is selected by `params.x`)
       * @param {HTMLElement} [params.node] The HTML element. This should be detached from the DOM! If none passed then a blank div will be created.
       * @param {string} params.panelName="chart" The name of the panel to attach the holder. Defaults to the main chart panel.
       * @param {String} [params.xPositioner="date"] Determines the x position.
       * Values are:
       * - "date" (`params.x` must be set to a JavaScript date)
       * - "master" (`params.x` must be set to a masterData position)
       * - "bar" (`params.x` must be set to a dataSegment position)
       * - "none" (use CSS positioning, `params.x` will not be used)
       * @param {String} [params.yPositioner="value"] Determines the y position. Candle positioning requires a valid candle selected by `params.x`
       * Values are:
       * - "value" (`params.y` must be set to an exact y axis value)
       * - "above_candle" (right above the candle or line. If more than one on same position, they will align upwards from the first. `params.y` will not be used)
       * - "under_candle" (right under the candle or line. If more than one on same position, they will align downwards from the first. `params.y` will not be used)
       * - "on_candle" (in the center or the candle or line - covering it. If more than one on same position, they will align downwards from the first. `params.y` will not be used)
       * - "top" (on top of the chart, right under the margin. If more than one on same position, they will align downwards from the first. `params.y` will not be used)
       * - "bottom" ( on the bottom of the chart, right over the margin. If more than one on same position, they will align upwards from the first. `params.y` will not be used)
       * - "none" (use CSS positioning. `params.y` will not be used)
       * @param {boolean} [params.permanent=false] Stays on the chart even when chart is re-initialized (symbol change, newChart(), initializeChart())
       * @param {String} [params.label="generic"] A label for the marker. Multiple markers can be assigned the same label. This allows them to be deleted in one fell swoop.
       * @param {boolean} [params.includeAxis=false] If true then the marker can display on the x or y axis. Otherwise it will be cropped at the axis edges.
       * @param {Boolean} [params.chartContainer] If true then the marker will be put directly in the chart container as opposed to in a holder. When placing
       * markers directly in the chart container, the z-index setting for the marker should be set vis a vis the z-index of the holders in order to place
       * the markers below or above those inside the holders.
       * @constructor
       * @since
       * <br> 15-07-01 Class added
       * <br> 05-2016-10 It now takes the following `params.yPositioner` values: "value", "above_candle", "under_candle","on_candle","top","bottom"
       * @version ChartIQ Advanced Package
       * @example
       * new CIQ.Marker({
       * 	stx: stxx,
       * 	xPositioner: "date",
       *  yPositioner: "value",
       * 	x: someDate,
       * 	label: "events",
       * 	node: newNode
       * });
       */
      CIQ.Marker = function(params) {
        this.params = {
          xPositioner: 'date',
          yPositioner: 'value',
          panelName: 'chart',
          permanent: false,
          label: 'generic',
          includeAxis: false,
        }
        CIQ.extend(this.params, params)
        if (!this.params.node) {
          this.params.node = document.createElement('DIV')
        }
        if (!this.params.stx) {
          console.log('Marker created without specifying stx')
          return
        }
        if (!this.className) this.className = 'CIQ.Marker'
        this.params.stx.addToHolder(this)
      }

      /**
       * Removes the marker from the chart object
       * @memberOf CIQ.Marker
       * @since  15-07-01
       */
      CIQ.Marker.prototype.remove = function() {
        this.params.stx.removeFromHolder(this)
      }

      /**
       * Normally the chart will take care of positioning the marker automatically but you can
       * force a marker to render itself by calling this method. This will cause the marker to
       * call it's placement function. You might want to do this for instance if your marker morphs
       * or changes position outside of the animation loop.
       */
      CIQ.Marker.prototype.render = function() {
        var arr = [this]
        var params = {
          stx: this.params.stx,
          arr: arr,
          panel: this.params.stx.panels[this.params.panelName],
        }
        this.constructor.placementFunction(params)
      }

      /**
       * Removes all markers with the specified label from the chart object
       * @param  {CIQ.ChartEngine} stx   The chart object
       * @param  {String} label The label
       * @memberOf CIQ.Marker
       * @since  15-07-01
       */
      CIQ.Marker.removeByLabel = function(stx, label) {
        var arr = stx.getMarkerArray('label', label)
        for (var i = 0; i < arr.length; i++) stx.removeFromHolder(arr[i])
      }

      /**
       * Placement functions are responsible for positioning markers in their holder according to each marker's settings.
       * They are called directly form the draw() function in the animation loop.
       * Each Marker placement handler must have a corresponding `placementFunction` or this method will be used.
       *
       * `firstTick` and `lastTick` can be used as a hint as to whether to display a marker or not.
       *
       * See {@link CIQ.Marker} and {@tutorial Markers} for more details
       * @memberOf CIQ.ChartEngine
       * @param {Object} params The parameters
       * @param {Array} params.arr The array of markers
       * @param {Object} params.panel The panel to display
       * @param {Number} params.firstTick The first tick displayed on the screen
       * @param {Number} params.lastTick The last tick displayed on the screen
       * @since
       * <br> 2015-09-01 On prior versions you must define your own default function. Example: CIQ.ChartEngine.prototype.defaultMarkerPlacement = CIQ.Marker.AboveCandle.placementFunction;
       */
      CIQ.ChartEngine.prototype.defaultMarkerPlacement = function(params) {
        var panel = params.panel
        var yAxis = params.yAxis ? params.yAxis : params.panel.yAxis
        var chart = panel.chart
        var stx = params.stx
        var showsHighs = CIQ.ChartEngine.chartShowsHighs(stx.layout.chartType)

        var placementMap = {}
        for (var i = 0; i < params.arr.length; i++) {
          var marker = params.arr[i],
            mparams = marker.params
          var node = marker.node
          // Getting clientWidth and clientHeight is a very expensive operation
          // so we'll cache the results. Don't use this function if your markers change
          // shape or size dynamically!
          if (!marker.clientWidth) marker.clientWidth = node.clientWidth
          if (!marker.clientHeight) marker.clientHeight = node.clientHeight
          var quote = null

          // X axis positioning logic

          var tick = marker.tick,
            dataSet = chart.dataSet,
            clientWidth = marker.clientWidth
          if (mparams.xPositioner != 'none') {
            if (mparams.xPositioner == 'bar' && mparams.x) {
              if (mparams.x < chart.xaxis.length) {
                var xaxis = chart.xaxis[mparams.x]
                if (xaxis) quote = xaxis.data
              }
              node.style.left = Math.round(stx.pixelFromBar(mparams.x, chart) - clientWidth / 2) + 1 + 'px'
            } else {
              // This is a section of code to hide markers if they are off screen, and also to figure out
              // the position of markers "just in time"
              // the tick is conditionally pre-set by CIQ.ChartEngine.prototype.setMarkerTick depending on marker.params.xPositioner
              if (!tick && tick !== 0) {
                // if tick is not defined then hide, probably in distant past
                if (mparams.future && chart.scroll < chart.maxTicks) {
                  // In future
                  stx.futureTickIfDisplayed(marker) // Just in time check for tick
                  if (!tick && tick !== 0) {
                    node.style.left = '-1000px'
                    continue
                  }
                } else {
                  node.style.left = '-1000px'
                  continue
                }
              }
              if (tick < dataSet.length) quote = dataSet[tick]
              if (tick < params.firstTick && marker.rightEdge < 0) continue // off screen, no need to reposition the marker
              marker.leftpx = Math.round(stx.pixelFromTick(tick, chart) - chart.left - clientWidth / 2)
              marker.rightEdge = marker.leftpx + clientWidth
              node.style.left = marker.leftpx + 'px'
            }
            if (!quote) quote = dataSet[dataSet.length - 1] // Future ticks based off the value of the current quote

            if (typeof placementMap[node.style.left] != 'undefined') placementMap[node.style.left] += 1
            else placementMap[node.style.left] = 0
          }

          // Y axis positioning logic
          var yPositioner = mparams.yPositioner,
            y = mparams.y,
            clientHeight = node.clientHeight,
            val
          if (yPositioner != 'none') {
            var height = mparams.chartContainer ? stx.height : panel.yAxis.bottom
            var bottom = 0,
              bottomAdjust = 0
            if (placementMap[node.style.left]) {
              bottomAdjust = (clientHeight + 2) * placementMap[node.style.left]
            }
            bottomAdjust += 2

            if (yPositioner == 'value' && y) {
              bottom = Math.round(height - stx.pixelFromPriceTransform(y, panel, yAxis) - clientHeight / 2) + 'px'
            } else if (yPositioner == 'under_candle' && quote) {
              val = quote.Close
              if (showsHighs) val = quote.Low
              bottom =
                Math.round(height - stx.pixelFromPriceTransform(val, panel, yAxis) - clientHeight - bottomAdjust) + 'px'
            } else if (yPositioner == 'on_candle' && quote) {
              val = quote.Close
              if (showsHighs) val = quote.Low + (quote.High - quote.Low) / 2
              bottom =
                Math.round(height - stx.pixelFromPriceTransform(val, panel, yAxis) - clientHeight / 2 - bottomAdjust) +
                'px'
            } else if (yPositioner == 'top') {
              bottom = Math.round(height - clientHeight - bottomAdjust) + 'px'
            } else if (yPositioner == 'bottom') {
              bottom = Math.round(bottomAdjust) + 'px'
            } else if (quote) {
              //above_candle
              val = quote.Close
              if (showsHighs) val = quote.High
              bottom = Math.round(height - stx.pixelFromPriceTransform(val, panel, yAxis) + bottomAdjust) + 'px'
            }
            if (node.style.bottom != bottom) node.style.bottom = bottom
          }
        }
      }

      /**
       * Base class to create an empty marker node that can then be styled. Used by {@link CIQ.Marker.Simple}
       * See {@tutorial Markers} tutorials for additional implementation instructions.
       * @name CIQ.Marker.NodeCreator
       * @constructor
       */
      CIQ.Marker.NodeCreator = function() {}

      CIQ.Marker.NodeCreator.toNode = function() {
        return this.node
      }

      /**
       * Constructor for basic built-in markers.
       * See {@tutorial Markers} tutorials for additional implementation instructions.
       * @name CIQ.Marker.Simple
       * @constructor
       * @param {Object} params Parameters to describe the marker
       * @param {String} params.type The marker type "circle", "square", "callout"
       * @param {String} params.headline The headline text to display
       * @param {String} [params.category] The category "news", "earningsUp", "earningsDown", "dividend", "filing", "split"
       * @param {String} [params.story] The story to display when hovered
       */
      CIQ.Marker.Simple = function(params) {
        this.node = document.createElement('div')
        this.node.className = 'stx-marker'
        CIQ.appendClassName(this.node, params.type)
        if (params.category) CIQ.appendClassName(this.node, params.category)
        var visual = CIQ.newChild(this.node, 'div', 'stx-visual')
        CIQ.newChild(this.node, 'div', 'stx-stem')

        var expand
        if (params.type == 'callout') {
          var content = CIQ.newChild(visual, 'div', 'stx-marker-content')
          CIQ.newChild(content, 'h4', null, params.headline)
          expand = CIQ.newChild(content, 'div', 'stx-marker-expand')
          CIQ.newChild(expand, 'p', null, params.story)
        } else {
          expand = CIQ.newChild(this.node, 'div', 'stx-marker-expand')
          CIQ.newChild(expand, 'h4', null, params.headline)
          CIQ.newChild(expand, 'p', null, params.story)
        }
        var node = this.node
        CIQ.safeClickTouch(this.node, function(e) {
          CIQ.toggleClassName(node, 'highlight')
        })
      }

      CIQ.Marker.Simple.ciqInheritsFrom(CIQ.Marker.NodeCreator, false)

      return _exports
    }

  var __js_quoteFeed_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
	 * Base class for Quotes infrastructure. Many of the built in UI capabilities such as comparison charts and mult-symbol studies expect
	 * to follow this infrastructure. You should define your own classes that follow this pattern
	 * in order to adapt your quote feed to make the most use of the built in componentry.
	 * <P>See {@link CIQ.ChartEngine#attachQuoteFeed} for details on how to attach a QuoteFeed to your chart.</P>
	 * <P>See {@tutorial Data Loading} for a complete tutorial on how to load data into your charts.</P>
	 * <P>**Note:** please review the following tutorial about data accessibility before attempting to request data from the browser : {@tutorial Integrating Third Party Data Feeds}<P>

	 * @name  CIQ.QuoteFeed
	 * @constructor
	 * @private
	 * @deprecated
	 */
      CIQ.QuoteFeed = function() {}

      /**
	 * This function MUST be used with the fetch method to return any results back to the chart (errors, or the data used to update the chart) -- this is a requirement.
	 * Failure to use this callback will affect the chart's ability to autorefresh and properly render.
	 *
	 * @callback CIQ.QuoteFeed~dataCallback
	 * @param response
	 * @param {string} response.error			Null if no error, otherwise an error message.
	 * @param {array} response.quotes			An array of Quotes in required JSON format if no error.
	 * @param {boolean} [response.moreAvailable]	Set this to `true` to enable pagination when user scrolls off the left of the chart if more data will be available from the quote feed. Set to `false` if the quote feed has exhausted the historical data for the instrument requested. Not relevant on current quote update requests.
	 * @param {object} [response.attribution]		This object will be assigned to `stx.chart.attribution` and can be used by your UI to display market source and mode. See example.
	 * @memberOf CIQ.QuoteFeed
	 * @example
	 * cb({quotes:[--array of quote elements here--], moreAvailable:true, attribution:{source:"delayed", exchange:"NYSE"}});
	 * @example
	 * cb({error:"Your error message here"});
	 * @example
	 * // have your quotefeed callback call the attribution function.
		var quoteBehavior={
		  refreshInterval: 1,
		  callback: function(params){
			  showAttribution(params.stx);
		  }
		};
	 * // after very data call, the attribution function will be called and you can then use it to display any message regarding the quote feed
		function showAttribution(stx){
			var source=stx.chart.attribution.source;
			var exchange= stx.chart.attribution.exchange;
			var message = exchange + " quotes are "+ source;
			// add your code here to display the message on your screen.
		}
	 */

      /**
       * The charting engine will call this method whenever it needs data from your feed.
       * Override this with your implementation to fetch data from your server.
       * <br>See full implementation outline and demo engine example in stx.js and a fully functinal jsfiddle at {@link http://jsfiddle.net/chartiq/qp33kna7}.
       * <br>See {@tutorial Data Loading} tutorial for complete usage details and examples.
       *
       * **Important:** All data returned in the array must be sorted in ascending order. yourData[0] must be the oldest and yourData[length] must be the newest element in the dataset.
       *
       * @param  {object}   params					-Describes the data requested by the chart. You must return exactly what is requested.
       * @param {CIQ.ChartEngine} params.stx 				-The chart object requesting data
       * @param {string} params.symbol 				-The symbol to fetch.
       * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initalized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
       * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicityV2}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
       * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
       * @param {Date} [params.startDate] 			-The starting datetime. This will be sent when the chart requires an update to add more data at the right side of the chart. Your feed should return any new ticks it has starting from this date. This is also used in combination with endDate when the chart needs a specific date range of data for comparisons. Your feed should return the entire range specified, regardless of ticks. If no start or end dates are sent, your feed should return the number of  most current bars requested in `ticks`. If using {@link CIQ.ChartEngine#setTimeZone}, please be sure to interpret the date appropriately.
       * @param {Date} [params.endDate] 				-The ending datetime. This will be sent when the chart is executing a "loadMore" pagination operation. Your feed should return the requested number of historical ticks with the most current date not newer than this date. This is also used in combination with startDate when the chart needs a specific date range of data for comparisons. Your feed should return the entire range specified, regardless of ticks. If no start or end dates are sent, your feed should return the number of  most current bars requested in `ticks`. If using {@link CIQ.ChartEngine#setTimeZone}, please be sure to interpret the date appropriately.
       * @param {Boolean} [params.update]				-This will be true when the chart requires a refresh. params.startDate will also be set.
       * @param {Boolean} [params.fetchMaximumBars]	-If set to true, the chart requires as much historical data as is available from the feed (params.ticks may also be set to 20,000 to set a safety max), regardless of start date. This is needed for some chart types since they aggregate data (kagi,renko, or linebreak, for example). Developers implementing fetch, should override params.tick and use a smaller number if their feed can't support that much data being sent back. The engine will then make multiple smaller calls to get enough data to fill the screen.
       * @param {number} params.ticks 				-The number of ticks required to fill the chart screen. It is suggested to return 3 times this amount to prevent excessive quote feed requests when user paginates. This can be used to determine how much data to fetch when a date range is not requested (initial load) . Less ticks can be returned if your feed can not support the requested amount, and the engine will make additional calls to try to get the rest of the data. If a date range is requested, you must return the entire range regardless of ticks. If an `update` is requested (strtDate only) you can ignore the number of `ticks` and return the most current data you have.
       * @param  {CIQ.QuoteFeed~dataCallback} cb		-Call this function with the results (or error) of your data request, and an indicator back to the engine indicating if there is more historical data available. ** !!!! This is a mandatory parameter that can not be omitted !!! **
       * @abstract
       * @memberOf CIQ.QuoteFeed
       * @since
       * <br> 04-2015 -- must take into account the scenario where a date range is sent in the params (params.startDate && params.endDate) to fill in a gap in the masterData array. Usually used for series or studies.
       * <br>- 2015-11-1 `params.symbolObject` is now available
       * @private
       * @deprecated
       */
      CIQ.QuoteFeed.prototype.fetch = function(params, cb) {
        if (!this.v2QuoteFeed) {
          console.log('You must implement CIQ.QuoteFeed.[yourfeedname].prototype.fetch()')
        }
      }

      /**
       * Whenever an error occurs the params and dataCallback from fetch will be automatically passed to this method by the quote engine.
       * Use this to alert the user if desired.
       * Override this with your own alerting mechanisms.
       * @param  {object} params The params originally passed into fetch()
       * @param {object} dataCallback The data returned to fetch
       * @memberOf CIQ.QuoteFeed
       * @example
       * 	CIQ.MyQuoteFeed.prototype.announceError=function(params, dataCallback){
       *		if(params.startDate){
       *			// Perhaps some sort of "disconnected" message on screen
       *		}else if(params.endDate){
       *			// Perhaps something indicating the end of the chart
       *		}else{
       *			CIQ.alert("Error fetching quote:" + dataCallback.error);	// Probably a not found error?
       *		}
       *	};
       *	@private
       *	@deprecated
       */
      CIQ.QuoteFeed.prototype.announceError = function(params, dataCallback) {
        if (params.suppressErrors || dataCallback.suppressAlert) return
        if (params.startDate) {
          // Perhaps some sort of "disconnected" message on screen
        } else if (params.endDate) {
          // Perhaps something indicating the end of the chart
        } else if (dataCallback.error) {
          CIQ.alert('Error fetching quote:' + dataCallback.error)
        } else {
          //CIQ.alert("Error fetching quote:" + params.symbol);	// Probably a not found error?
        }
      }

      /**
       * Fetches multiple quotes asynchronously, possibly from various data sources. This method is used to update a chart with multiple symbols
       * such as a comparison chart.
       * @param  {array}   arr Array of stock symbols
       * @param  {Function} cb  Function to callback when quotes are fetched. Will be passed an array of results. Each result is an object {dataCallback, params}.
       * @memberOf CIQ.QuoteFeed
       * @private
       * @deprecated
       */
      CIQ.QuoteFeed.prototype.multiFetch = function(arr, cb) {
        if (arr.length === 0) cb([])

        var tracker = {
          counter: 0,
          finished: arr.length,
          results: [],
        }

        function handleResponse(params, tracker, cb) {
          return function(dataCallback) {
            tracker.results.push({ dataCallback: dataCallback, params: params })
            tracker.counter++
            if (tracker.counter >= tracker.finished) {
              var results = tracker.results
              tracker.results = []
              cb(results)
            }
          }
        }
        for (var i = 0; i < arr.length; i++) {
          var params = arr[i]
          if (params.stx.isEquationChart(params.symbol)) {
            //equation chart
            CIQ.fetchEquationChart(params, handleResponse(params, tracker, cb))
          } else {
            CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.SERIES, this, params, handleResponse(params, tracker, cb))
          }
        }
      }

      /**
	 * A QuoteFeed that maintains a list of subscribed symbols and provides
	 * callbacks for when to subscribe or unsubscribe as instruments are added or removed from the chart.
	 * These could be additional symbols needed for a study, series added programatically or even comparisons added by the user via the UI.
	 *
	 * A subscription is uniquely defined by a `params` object accepted by {@link CIQ.QuoteFeed#fetch}:
	 * `{
	 * 	symbolObject:
	 * 	period:
	 * 	interval:
	 * }`
	 * @name  CIQ.QuoteFeed.Subscriptions
	 * @constructor
	 * @example
		//Copy and paste CIQ.QuoteFeed.CopyAndPasteMe. Change "CopyAndPasteMe" to the name
		//of your quote service. Then implement the fetch() method based on the included comments

		CIQ.QuoteFeed.CopyAndPasteMe=function(){};

		CIQ.QuoteFeed.CopyAndPasteMe.ciqInheritsFrom(CIQ.QuoteFeed.Subscriptions);

		CIQ.QuoteFeed.CopyAndPasteMe.prototype.fetchFromSource=function(params, cb){

			// This is an outline for how to implement fetch in your custom feed. Cut and paste
			// this code and then implement. Leave any portion blank that you cannot support.
			//
			// Most quote feeds will support startDate and endDate. This will be enough to implement
			// charts. It is also possible to implement charts with quote feeds that support other
			// request parameters but you may need to do some manipulation within this code to
			// accomplish this.
			//
			// See CIQ.QuoteFeed.Demo or CIQ.QuoteFeed.EndOfDay below for actual implementations.

			if(params.startDate && params.endDate){
				// If you receive both a startDate and endDate then the chart is asking for a
				// specific data range. This usually happens when a comparison symbol has been
				// added to the chart. You'll want the comparison symbol to show up on all the same
				// bars on the screen.
				//
				// You should return data for the entire range, otherwise you could get a gap of data on the screen.
			} else if(params.startDate){
				// This means the chart is asking for a refresh of most recent data.
				// (This is streaming by "polling". For actual push based streaming see {@link CIQ.ChartEngine#streamTrade} and {@link CIQ.ChartEngine.appendMasterData}.
				//
				// The chart will call this every X seconds based on what you have specified in behavior.refreshInterval
				// when you initially attached the quote feed to stxx (attachQuoteFeed).
				//
				// If you don't support polling then just do nothing and return.
				// Otherwise fetch your data, probably using Ajax, and call the cb method with your data.
				//
				// Please note that you may need to return more than 1 bar of data. If the chart has moved
				// forward then the requested startDate will be the previous bar (to finalized the bar) and
				// you should return that bar as well as the current (new) bar. To simplify, always return
				// all of the bars starting with startDate and ending with the most recent bar.
			}else if(params.endDate){
				// If you only receive an endDate, it means the user has scrolled past the end of
				// the chart. The chart needs older data, if it's available.
				// If you don't support pagination just return and do nothing.
				//
				// Note: If your server requires a startDate then you'll need to calculate one here. A simple method
				// would be to take the endDate and then, using JavaScript Date math, create a date that is far enough
				// in the past based on params.period, params.interval and params.ticks. @todo, provide a convenience method
				//
				// Otherwise fetch your data, probably using Ajax, and call the call with cb method with your data.
			}else{
				// The chart needs an initial load.
				//
				// params.tick provides an suggested number of bars to retrieve to fill up the chart
				// and provide some bars off the left edge of the screen. It's good to provide more initial
				// data than just the size of the chart because many users will immediately zoom out. If you
				// have extra data off the left edge of the chart, then the zoom will be instantaneous. There
				// is very little downside to sending extra data.
				//
				// You do not need to retrieve exactly params.tick number of bars. This is a suggestion.
				// You can return as many as you want. Fetching 1,000 bars is another good approach. This will
				// cover the immediate zooming and panning needs of 95% of users.
				//
				// Note: If your server requires startDate and endDate then use Date.now() for the endDate
				// and calculate a startDate using JavaScript Date math. params.period, params.interval and params.ticks
				// provide all the variables necessary to do the math. @todo, provide a convenience method
				//
				// Fetch your data, probably using Ajax, and call the cb method with yourdata. This
				// is where you'll need to reformat your data into the format required by the chart.
				//
				//  Put your code here to format the response according to the specs and return it in the callback.
				//
				//	Example code:
				//
				// CIQ.postAjax(url, null, function(status, response){
				//	if(status!=200){
				//		cb({error:status});	// something went wrong, use the callback function to return your error
				//		return;
				//	}
				//
				//	var quotes=formatQuotes(response);
				//	var newQuotes=[];
				//	for(var i=0;i<quotes.length;i++){
				//		newQuotes[i]={};
				//		newQuotes[i].Date=quotes[i][0]; // Or set newQuotes[i].DT if you have a JS Date
				//		newQuotes[i].Open=quotes[i][1];
				//		newQuotes[i].High=quotes[i][2];
				//		newQuotes[i].Low=quotes[i][3];
				//		newQuotes[i].Close=quotes[i][4];
				//		newQuotes[i].Volume=quotes[i][5];
				//		newQuotes[i].Adj_Close=quotes[i][6];
				//	}
				//  cb({quotes:newQuotes, moreAvailable:false}); // set moreAvailable to true or false if your server supports fetching older data, and you know that older data is available.
				// });
				//
			}
		};

		CIQ.QuoteFeed.CopyAndPasteMe.prototype.subscribe=function(params){
			// This will get called each time the chart encounters a new symbol. This
			// could happen from a user changing symbol, a user adding a comparison symbol,
			// a new study that requires a new symbol.
			//
			// You can use this along with unsubscribe() to keep track for the purpose
			// of maintaining legends, lists of securities, or to open or close streaming
			// connections.
			//
			// If using a push streamer, subscribe to this security and then have the push
			// streamer push updates using {@link CIQ.ChartEngine#streamTrade} if you have
			// a "last trade" stream or {@link CIQ.ChartEngine@appendMasterData} if you have an "OHLC" stream.
			//
			// Use params.interval, params.period, params.symbolObject to inform your streamer
			// what it needs to send
		};

		CIQ.QuoteFeed.CopyAndPasteMe.prototype.unsubscribe=function(params){
			// When a chart no longer needs to keep track of a symbol it will call
			// unsubscribe(). You can use this to tell your streamer it no longer
			// needs to send updates.
		};
		@private
		@deprecated
	 */
      CIQ.QuoteFeed.Subscriptions = function() {
        this.subscriptions = []
      }

      CIQ.QuoteFeed.Subscriptions.ciqInheritsFrom(CIQ.QuoteFeed)

      CIQ.QuoteFeed.Subscriptions.prototype.checkSubscriptions = function(stx) {
        var sub, need
        var chartNeeds = stx.getSymbols()

        // reset subscription match status
        for (var s = 0; s < this.subscriptions.length; s++) {
          this.subscriptions[s].match = false
        }

        for (var i = 0; i < chartNeeds.length; i++) {
          // Convert kernel periodicity/interval/timeUnit to feed format
          need = chartNeeds[i]
          var interval = need.interval
          // If we're rolling our own months or weeks then we should ask for days from the quote feed
          if ((interval == 'month' || interval == 'week') && !stx.dontRoll) {
            interval = 'day'
          }

          need.interval = interval
          need.period = 1
          need.match = false

          if (!isNaN(need.interval)) {
            // normalize numeric intervals into "minute" form
            need.period = need.interval
            need.interval = need.timeUnit
            if (!need.interval) need.interval = 'minute'
          }
          delete need.periodicity // to avoid confusion
          delete need.timeUnit // to avoid confusion
          delete need.setSpan // to avoid confusion

          for (s = 0; s < this.subscriptions.length; s++) {
            sub = this.subscriptions[s]
            if (CIQ.equals(sub, need, { match: true })) {
              need.match = true
              sub.match = true
              break
            }
          }
        }
        //console.log(this.subscriptions);
        //console.log(chartNeeds);

        var self = this
        // unsubscribe to any symbols no longer matched, and remove them from subscriptions
        this.subscriptions = this.subscriptions.filter(function(c) {
          if (!c.match) {
            self.unsubscribe(c)
          }
          return c.match
        })

        chartNeeds.forEach(function(c) {
          if (!c.match) {
            self.subscribe(c)
            self.subscriptions.push(c)
          }
        })
      }

      CIQ.QuoteFeed.Subscriptions.prototype.fetch = function(params, cb) {
        var self = this
        this.fetchFromSource(params, function(results) {
          if (!results.error) {
            self.checkSubscriptions(params.stx)
          }
          cb(results)
        })
      }

      /**
       * This callback will be called when a new instrument is added to the chart.
       * Put your code here to subscribe to your feed.
       * @param  {object}   params			-Describes the symbol and periodicity for the new instrument.
       * @param {string} params.symbol 				-The new symbol to subscribe. See {@link CIQ.QuoteFeed} for details.
       * @param {string} [params.symbolObject] 		-The new symbol to subscribe in object format. See {@link CIQ.QuoteFeed} for details.
       * @param {number} params.period 				-The timeframe each returned object represents. See {@link CIQ.QuoteFeed} for details.
       * @param {string} params.interval 				-The type of data your feed will need to provide. See {@link CIQ.QuoteFeed} for details.
       * @memberOf CIQ.QuoteFeed.Subscriptions
       * @private
       * @deprecated
       */
      CIQ.QuoteFeed.Subscriptions.prototype.subscribe = function(params) {
        console.log('subscribe', params)
      }

      /**
       * This callback will be called when an existing instrument is removed from the chart.
       * Put your code here to UN-subscribe from your feed.
       * @param  {object}   params			-Describes the symbol and periodicity for the currently subscribed instrument.
       * @param {string} params.symbol 				-The symbol to remove. See {@link CIQ.QuoteFeed} for details.
       * @param {string} [params.symbolObject] 		-The  symbol to remove in object format. See {@link CIQ.QuoteFeed} for details.
       * @param {number} params.period 				-The timeframe each current object represents. See {@link CIQ.QuoteFeed} for details.
       * @param {string} params.interval 				-The type of data your feed is currently providing. See {@link CIQ.QuoteFeed} for details.
       * @memberOf CIQ.QuoteFeed.Subscriptions
       * @private
       * @deprecated
       */
      CIQ.QuoteFeed.Subscriptions.prototype.unsubscribe = function(params) {
        console.log('unsubscribe', params)
      }

      /**
       * The charting engine will call this method whenever it needs data from your feed.
       * Override this with your implementation to fetch data from your server.
       * Uses same parameters and format as {@link CIQ.QuoteFeed#fetch}.
       * @memberOf CIQ.QuoteFeed.Subscriptions
       * @private
       * @deprecated
       */
      CIQ.QuoteFeed.Subscriptions.prototype.fetchFromSource = function(params, cb) {
        console.log('Please provide implementation of fetchFromSource')
      }

      /**
       * Return true if your quote feed should make an immediate refresh after initial load. For instance if your
       * initial load is EOD and then you need to immediately load a real-time bar
       * @param  {object} params The same parameters that are passed to fetch()
       * @return {boolean}       Return true if a refresh is required immediately
       * @memberOf CIQ.QuoteFeed
       * @private
       */
      CIQ.QuoteFeed.prototype.requiresImmediateRefresh = function(params) {
        return false
      }

      /**
       * Attaches a quote feed to the charting engine. This causes the chart to pull data from the quotefeed as needed.
       * @param  {object} [quotefeed] your quoteFeed object.
       * @param  {object} [behavior] Optional behavior object to initialize quotefeed
       * @param {number} [behavior.refreshInterval] If non null, then sets the frequency for fetchUpdates (if null or zero then fetchUpdate will not be called)
       * @param {Function} [behavior.callback] Optional callback after any fetch to enhance functionality. It will be called with the params object used with the fetch call.
       * @param {number} [behavior.noLoadMore] If true, then the chart will not attempt to load any more data after the initial load. Not even the current quote request that automatically takes place right after an initial load.
       * @param {boolean} [behavior.loadMoreReplace] If true, then when loading more the feed should actually reload everything (no end_date)
       * @memberOf CIQ.ChartEngine
       * @example
       * var quoteBehavior={
       *	   refreshInterval: 1,
       *	   noLoadMore: true
       * };
       * stxx.attachQuoteFeed(quotefeed,quoteBehavior);
       * @since 2016-12-01
       */
      CIQ.ChartEngine.prototype.attachQuoteFeed = function(quoteFeed, behavior) {
        if (!behavior) behavior = {}
        if (this.quoteDriver) {
          this.quoteDriver.die()
        }
        // Legacy QuoteFeeds
        if (
          typeof quoteFeed.fetchInitialData !== 'function' &&
          typeof quoteFeed.fetchUpdateData !== 'function' &&
          typeof quoteFeed.fetchPaginationData !== 'function'
        ) {
          this.quoteDriver = new CIQ.ChartEngine.Driver(this, quoteFeed, behavior)
          return
        }

        // New "duck typed" v2 quotefeed
        if (typeof quoteFeed.fetchPaginationData !== 'function' && typeof quoteFeed.fetchUpdateData !== 'function') {
          behavior.noLoadMore = true
        }
        quoteFeed.v2QuoteFeed = true // store flag in quotefeed to single new version of quotefeed
        quoteFeed.multiFetch = CIQ.QuoteFeed.prototype.multiFetch // no inheritance in new quotefeed so add multifetch function
        quoteFeed.announceError = CIQ.QuoteFeed.prototype.announceError // no inheritance so add function
        quoteFeed.requiresImmediateRefresh = CIQ.QuoteFeed.prototype.requiresImmediateRefresh // no inheritance so add function
        if (typeof quoteFeed.subscribe === 'function') {
          // if subscription quotefeed
          quoteFeed.checkSubscriptions = CIQ.QuoteFeed.Subscriptions.prototype.checkSubscriptions // no inheritance so add checkSubscriptions function
          quoteFeed.subscriptions = []
        }
        this.quoteDriver = new CIQ.ChartEngine.Driver(this, quoteFeed, behavior)
      }

      /**
       * Please use {@link CIQ.ChartEngine#attachQuoteFeed}.
       * @deprecated
       */
      CIQ.ChartEngine.prototype.attachEngineQuoteFeed = function(quoteFeed, behavior) {
        this.attachQuoteFeed(quoteFeed, behavior)
      }

      /**
       * LEGACY INTERFACE
       * Attaches an additional {@link CIQ.QuoteFeed}. fetch() will be called on this quote feed after
       * every fetch on the primary quote feed. This allows additional content to be loaded (for instance a
       * custom study that fetches pre-computed data). See {@link CIQ.ChartEngine#detachTagAlongQuoteFeed}
       *
       * The data from a tagAlong will be added to the masterData in an object under the label name.
       *
       * @param  {object} feed Feed descriptor
       * @param {CIQ.QuoteFeed} feed.quoteFeed The quote feed object
       * @param {Object} [feed.behavior] Optional behavior object. This will behave like the primary behavior object except that the refreshInterval will not be respected.
       * @param {string} feed.label Multiple copies of the same physical QuoteFeed can be used with independent labels. If multiple copies are
       * attached with the same label then a count will be kept to prevent early detachment.
       * @memberOf CIQ.ChartEngine
       * @since  04-2015
       * @deprecated
       * @private
       */
      CIQ.ChartEngine.prototype.attachTagAlongQuoteFeed = function(feed) {
        if (!feed.label) {
          console.log('Attempt to attachTagAlongQuoteFeed without assigning a label')
          return
        }
        this.quoteDriver.attachTagAlongQuoteFeed(feed)
      }

      /**
       * LEGACY INTERFACE
       * See {@link CIQ.ChartEngine#attachTagAlongQuoteFeed}
       * @memberOf CIQ.ChartEngine
       * @since  04-2015
       * @deprecated
       * @private
       */
      CIQ.ChartEngine.prototype.detachTagAlongQuoteFeed = function(feed) {
        this.quoteDriver.detachTagAlongQuoteFeed(feed)
      }

      /**
       * Drives the Chart's relationship with QuoteFeed
       * @constructor
       * @private
       * @name  CIQ.ChartEngine.Driver
       */
      CIQ.ChartEngine.Driver = function(stx, quoteFeed, behavior) {
        this.tagalongs = {}
        this.stx = stx
        this.quoteFeed = quoteFeed
        this.behavior = behavior
        this.loadingNewChart = false // This gets set to true when loading a new chart in order to prevent refreshes while waiting for data back from the server
        this.intervalTimer = null // This is the window.setInterval which can be cleared to stop the updating loop
        this.updatingChart = false // This gets set when the chart is being refreshed
        this.updateChartLoop()
      }

      CIQ.ChartEngine.Driver.prototype.die = function() {
        if (this.intervalTimer) window.clearInterval(this.intervalTimer)
      }

      /**
       * Call this whenever the kernel knows that the symbols being used have changed
       * @private
       */
      CIQ.ChartEngine.Driver.prototype.updateSubscriptions = function() {
        if (this.quoteFeed.checkSubscriptions) this.quoteFeed.checkSubscriptions(this.stx)
      }

      CIQ.ChartEngine.Driver.prototype.attachTagAlongQuoteFeed = function(feed) {
        if (!this.tagalongs[feed.label]) {
          this.tagalongs[feed.label] = {
            label: feed.label,
            quoteFeed: feed.quoteFeed,
            behavior: feed.behavior ? feed.behavior : {},
            count: 0,
          }
        }
        this.tagalongs[feed.label].count++
      }

      CIQ.ChartEngine.Driver.prototype.detachTagAlongQuoteFeed = function(feed) {
        var tagalong = this.tagalongs[feed.label]
        tagalong.count--
        if (!tagalong.count) this.tagalongs[feed.label] = null
      }

      CIQ.ChartEngine.Driver.prototype.loadDependents = function(params) {
        var field
        var syms = {}
        var stx = params.stx
        var series = stx.chart.series

        function getStartDate(symbol) {
          for (var c = stx.masterData.length - 1; c >= 0; c--) {
            if (stx.masterData[c] && typeof stx.masterData[c][symbol] != 'undefined') {
              return CIQ.strToDateTime(stx.masterData[c].Date)
            }
          }
          return params.startDate
        }

        for (field in series) {
          if (series[field].parameters.data && !series[field].parameters.data.useDefaultQuoteFeed) continue // legacy
          syms[field] = true
        }
        for (var p in stx.panels) {
          if (stx.panels[p].studyQuotes) {
            for (var sq in stx.panels[p].studyQuotes) syms[sq] = true
          }
        }
        var arr = []
        for (field in syms) {
          var seriesParam = CIQ.shallowClone(params.originalState)
          seriesParam.symbol = field
          if (series[field] && series[field].parameters.symbolObject)
            seriesParam.symbolObject = series[field].parameters.symbolObject
          if (seriesParam.update) {
            seriesParam.startDate = getStartDate(field)
          } else {
            // since we support comparisons between instruments that may have different trading hours,
            // we can't depend on the params.ticks to keep them in sync.
            // Instead , when appending data, we must explicitly send exact ranges to load.
            // Using ticks may cause to load different ranges for instruments with different trading hours.
            if (!seriesParam.startDate && stx.masterData[0]) seriesParam.startDate = stx.masterData[0].DT
            if (!seriesParam.endDate && stx.masterData[stx.masterData.length - 1])
              seriesParam.endDate = stx.masterData[stx.masterData.length - 1].DT
          }
          arr.push(seriesParam)
        }
        if (!arr.length) {
          // we need this because in updateChart we don't create and let the dependents do it.
          stx.createDataSet()
          if (!params.nodraw) stx.draw()
          return
        }
        this.quoteFeed.multiFetch(arr, function(results) {
          for (var i = 0; i < results.length; i++) {
            var result = results[i]
            if (!result.dataCallback.error && result.dataCallback.error !== 0) {
              var field = null
              if (stx.chart.series[result.params.symbol]) {
                field = stx.chart.series[result.params.symbol].parameters.field
              }
              CIQ.addMemberToMasterdata(stx, result.params.symbol, result.dataCallback.quotes, null, null, field)
            }
          }
          stx.createDataSet()
          stx.draw()
        })
      }

      CIQ.ChartEngine.Driver.prototype.executeTagAlongs = function(params) {
        var count = {
          count: CIQ.objLength(this.taglongs),
        }
        var self = this
        function closure(qparams, tagalong, count) {
          return function(dataCallback) {
            count.count--
            if (!dataCallback.error && dataCallback.error !== 0) {
              var fields = qparams.fields
              if (!fields) fields = null
              CIQ.addMemberToMasterdata(self.stx, tagalong.label, dataCallback.quotes, fields)
            }

            if (count.count == -1) self.render()
          }
        }
        for (var label in this.tagalongs) {
          var tagalong = this.tagalongs[label]

          // behavior + params
          var qparams = CIQ.shallowClone(tagalong.behavior)
          CIQ.extend(qparams, params, true)

          CIQ.ChartEngine.Driver.fetchData(null, tagalong.quoteFeed, qparams, closure(qparams, tagalong, count)) // only legacy quotefeed supported with tagalong
        }
      }

      CIQ.ChartEngine.Driver.prototype.render = function() {
        this.stx.createDataSet()
        this.stx.draw()
      }

      /**
       * Updates the chart as part of the chart loop
       * @memberOf CIQ.ChartEngine.Driver
       * @private
       */
      CIQ.ChartEngine.Driver.prototype.updateChart = function() {
        if (this.updatingChart) return
        if (this.loadingNewChart) return
        var howManyToGet = CIQ.objLength(this.stx.charts)
        var howManyReturned = 0

        var interval = this.stx.layout.interval
        var timeUnit = this.stx.layout.timeUnit

        function closure(self, params, symbol) {
          if (self.behavior.prefetchAction) self.behavior.prefetchAction('updateChart')
          return function(dataCallback) {
            howManyReturned++
            if (
              symbol == params.chart.symbol &&
              interval == self.stx.layout.interval &&
              timeUnit == self.stx.layout.timeUnit
            ) {
              // Make sure user hasn't changed symbol while we were waiting on a response
              if (!dataCallback.error && dataCallback.error !== 0) {
                var lastBarAdded = false
                if (!params.missingBarsCreated) {
                  if (
                    params.chart.masterData &&
                    params.chart.masterData.length &&
                    dataCallback.quotes &&
                    dataCallback.quotes.length > 0
                  ) {
                    var lastRecord = params.chart.masterData[params.chart.masterData.length - 1]
                    if (
                      (dataCallback.quotes[0].DT && lastRecord.DT < dataCallback.quotes[0].DT) ||
                      (dataCallback.quotes[0].Date && lastRecord.Date < dataCallback.quotes[0].Date)
                    ) {
                      dataCallback.quotes.unshift(lastRecord) //add previous bar so we can close gaps
                      lastBarAdded = true //there is no overlap; possible gap
                    }
                  }
                  dataCallback.quotes = self.stx.doCleanupGaps(dataCallback.quotes, params.chart)
                  if (lastBarAdded) dataCallback.quotes.shift()
                }
                self.stx.appendMasterData(dataCallback.quotes, params.chart, { noCreateDataSet: true })
                params.chart.attribution = dataCallback.attribution
              } else {
                self.quoteFeed.announceError(params.originalState, dataCallback)
              }
            } else {
              //console.log("orphaned update",params);
              return
            }
            if (howManyReturned == howManyToGet) {
              self.updatingChart = false
            }
            self.executeTagAlongs(params)
            if (self.behavior.callback) {
              self.behavior.callback(params)
            }
            self.loadDependents(params) // createDataSet(),draw() will be handled in here
          }
        }

        //TODO, change this to multi-fetch?
        for (var chartName in this.stx.charts) {
          var chart = this.stx.charts[chartName]
          if (!chart.symbol) continue
          // Removed below line.  It's possible IPO has no quotes from newChart but a BATS update will return data.
          //if(!chart.masterData /*|| !chart.masterData.length*/) continue;	 // sometimes there is no data but it is not an error, and we want to let the refresh try again. If don't go in here, self.updatingChart will never be set to true and we will never refresh.
          var params = this.makeParams(chart.symbol, chart.symbolObject, chart)
          if (chart.masterData && chart.masterData.length)
            params.startDate = chart.masterData[chart.masterData.length - 1].DT // if there is no data, then let the fetch treat an in initial load without start or end dates.
          params.update = true
          params.originalState = CIQ.shallowClone(params)
          this.updatingChart = true
          var closureCB = closure(this, params, chart.symbol)
          if (this.stx.isEquationChart(params.symbol)) {
            //equation chart
            CIQ.fetchEquationChart(params, closureCB)
          } else {
            CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.UPDATE, this.quoteFeed, params, closureCB)
          }
        }
      }

      CIQ.ChartEngine.Driver.prototype.updateChartLoop = function() {
        if (this.behavior.noUpdate) return
        function closure(self) {
          return function() {
            if (self.behavior.noUpdate) return
            self.updateChart()
          }
        }
        if (this.behavior.refreshInterval)
          this.intervalTimer = window.setInterval(closure(this), this.behavior.refreshInterval * 1000)
      }

      /**
       * Convenience function to change the quoteFeed refresh interval.
       * @param  {number} newInterval The new refresh interval in seconds
       * @memberOf CIQ.ChartEngine.Driver
       * @since 07/01/2015
       */
      CIQ.ChartEngine.Driver.prototype.resetRefreshInterval = function(newInterval) {
        if (this.intervalTimer) window.clearInterval(this.intervalTimer) // stop the timer
        this.behavior.refreshInterval = newInterval // set to your new interval
        this.updateChartLoop() // restart the timer in the new interval
      }

      CIQ.ChartEngine.Driver.prototype.loadAll = function(chart, cb) {
        var self = this
        var count = 0
        function closure() {
          return function(response) {
            if (response) cb(response)
            else if (!chart.moreAvailable) {
              cb(null)
            } else if (count++ > 20) {
              cb('error, moreAvailable not implemented correctly in QuoteFeed')
            } else {
              self.checkLoadMore(chart, true, true, closure())
            }
          }
        }
        this.checkLoadMore(chart, true, true, closure())
      }

      /**
       * If the quote feed has indicated there is more data available it will create and execute a fetch() call,
       * load the data into the masterData array, and create a new dataSet. Called internally as needed to keep the chart data up to date.
       * Finally it will re-draw the chart to display the new data
       * @param  {CIQ.ChartEngine.Chart} [whichChart] The chart to adjust. Otherwise adjusts the main symbol chart.
       * @param forceLoadMore set to true to force a fetch() call.
       * @param fetchMaximumBars	set to true to request the maximum amount of data available from the feed.
       * @param cb The callback function. Will be called with the error retuned by the quotefeed, if any.
       * @memberOf CIQ.ChartEngine.Driver
       * @private
       */
      CIQ.ChartEngine.Driver.prototype.checkLoadMore = function(chart, forceLoadMore, fetchMaximumBars, cb, nodraw) {
        if (chart.loadingMore) {
          chart.initialScroll = chart.scroll
          if (cb) cb(null)
          return
        }
        if (!chart.moreAvailable) {
          if (cb) cb()
          return
        }
        var interval = this.stx.layout.interval
        var timeUnit = this.stx.layout.timeUnit
        function closure(self, params) {
          if (self.behavior.prefetchAction) self.behavior.prefetchAction('checkLoadMore')
          return function(dataCallback) {
            if (
              params.symbol == params.chart.symbol &&
              interval == self.stx.layout.interval &&
              timeUnit == self.stx.layout.timeUnit
            ) {
              // Make sure user hasn't changed symbol while we were waiting on a response
              if (!params.loadMore) params.chart.loadingMore = false
              if (!dataCallback.error && dataCallback.error !== 0) {
                if (!dataCallback.quotes) dataCallback.quotes = []
                if (!params.missingBarsCreated) {
                  dataCallback.quotes.push(params.chart.masterData[0]) //add bar for end date so we can close gaps
                  dataCallback.quotes = self.stx.doCleanupGaps(dataCallback.quotes, params.chart)
                  dataCallback.quotes.pop() //remove end date bar
                }
                // set moreAvailable before we call draw or we can create an infinite loop if the feed servers runs out of data in the middle of a draw
                if (!dataCallback.quotes.length) chart.moreAvailable = false
                // Can't be more available if we got nothing back
                else chart.moreAvailable = dataCallback.moreAvailable === false ? false : true
                var fullMasterData = params.loadMoreReplace
                  ? dataCallback.quotes
                  : dataCallback.quotes.concat(params.chart.masterData)
                self.stx.setMasterData(fullMasterData, params.chart)
                self.stx.createDataSet()
                if (!nodraw) self.stx.draw()
                params.startDate = params.chart.masterData[0].DT
                self.executeTagAlongs(params)
                if (self.behavior.callback) {
                  self.behavior.callback(params)
                }
                self.loadDependents(params)
                if (cb) cb()
              } else {
                self.quoteFeed.announceError(params.originalState, dataCallback)
                params.chart.loadingMore = false
                if (cb) cb(dataCallback.error)
              }
            } else {
              //console.log("orphaned loadMore",params);
              return
            }
          }
        }
        var fetching = false
        if (!this.behavior.noLoadMore) {
          if (!this.stx.maxDataSetSize || chart.dataSet.length < this.stx.maxDataSetSize) {
            if ((chart.dataSet.length > 0 && chart.scroll >= chart.dataSet.length) || forceLoadMore) {
              if (!chart.loadingMore) {
                chart.initialScroll = chart.scroll
                chart.loadingMore = true
                var params = this.makeParams(chart.symbol, chart.symbolObject, chart)
                if (chart.masterData.length) params.endDate = chart.masterData[0].DT
                else params.endDate = this.convertToDataZone(new Date())
                params.originalState = CIQ.shallowClone(params)
                params.nodraw = nodraw
                if (this.stx.fetchMaximumBars[this.stx.layout.aggregationType]) fetchMaximumBars = true
                if (fetchMaximumBars) {
                  params.fetchMaximumBars = true
                  params.ticks = Math.max(20000, params.ticks)
                }
                console.log(params.ticks, params.endDate, chart.masterData[0].DT)
                var closureCB = closure(this, params)
                if (this.stx.isEquationChart(params.symbol)) {
                  //equation chart
                  CIQ.fetchEquationChart(params, closureCB)
                } else {
                  CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.PAGINATION, this.quoteFeed, params, closureCB)
                }
                fetching = true
              }
            }
          }
        }
        if (chart.loadingMore) {
          chart.initialScroll = chart.scroll
        }
        if (!fetching && cb) cb(null)
      }

      /**
       * Returns how many bars should be fetched. If we're fetching a series then it's simply the number
       * of bars already in the chart. Otherwise it's the number of bars to fetch to fill up the screen.
       * If we're rolling our own months or weeks from daily ticks it will return the number of daily ticks to fetch.
       * @param  {object} params Parameters
       * @param  {object} params.stx	  The chart object
       * @return {number}		   Number of bars to fetch
       * @memberOf CIQ.ChartEngine.Driver
       * @private
       */
      CIQ.ChartEngine.Driver.prototype.barsToFetch = function(params) {
        if (params.isSeries) return params.stx.masterData.length
        var interval = this.stx.layout.interval
        var p = params.stx.layout.periodicity
        // Rough calculation, this will account for 24x7 securities
        // If we're rolling our own months or weeks then adjust to daily bars
        if ((interval == 'month' || interval == 'week') && !this.stx.dontRoll) {
          p *= interval == 'week' ? 7 : 30
        }
        var bars = params.stx.chart.maxTicks * p
        return bars
      }

      CIQ.ChartEngine.Driver.prototype.makeParams = function(symbol, symbolObject, chart) {
        var interval = this.stx.layout.interval
        var ticks = this.barsToFetch({ stx: this.stx })
        // If we're rolling our own months or weeks then we should ask for days from the quote feed
        if ((interval == 'month' || interval == 'week') && !this.stx.dontRoll) {
          interval = 'day'
        }
        var params = CIQ.shallowClone(this.behavior)

        CIQ.extend(
          params,
          {
            stx: this.stx,
            symbol: symbol,
            symbolObject: symbolObject,
            chart: chart,
            interval: interval,
            extended: this.stx.layout.extended,
            period: 1,
            feed: 'delayed',
            ticks: ticks,
          },
          true,
        )

        if (!params.symbolObject) params.symbolObject = { symbol: symbol }

        if (!isNaN(params.interval)) {
          // normalize numeric intervals into "minute" form
          params.period = params.interval
          params.interval = this.stx.layout.timeUnit
          if (!params.interval) params.interval = 'minute'
        }
        if (params.pts) params.ticks = Math.max(params.ticks, 1000)
        return params
      }

      CIQ.ChartEngine.Driver.prototype.newChart = function(params, cb) {
        var stx = this.stx
        var symbol = params.symbol
        var interval = stx.layout.interval
        var timeUnit = stx.layout.timeUnit
        var chart = params.chart
        chart.moreAvailable = true
        chart.attribution = null
        var qparams = this.makeParams(symbol, params.symbolObject, chart)
        CIQ.extend(qparams, params, true)
        // Some aggregation types potentially require a lot of data. We set the flag "fetchMaximumBars"
        // but also take a guess and say 20,000 bars should cover most situations
        if (stx.fetchMaximumBars[stx.layout.aggregationType] || params.fetchMaximumBars) {
          qparams.ticks = Math.max(20000, qparams.ticks)
          qparams.fetchMaximumBars = true
        }

        function closure(self, qparams) {
          if (self.behavior.prefetchAction) self.behavior.prefetchAction('newChart')
          return function(dataCallback) {
            var chart = qparams.chart,
              quotes
            if (symbol == chart.symbol && interval == stx.layout.interval && timeUnit == stx.layout.timeUnit) {
              // Make sure user hasn't changed symbol while we were waiting on a response
              if (
                !dataCallback.error &&
                dataCallback.error !== 0 /*&& dataCallback.quotes && dataCallback.quotes.length>0*/
              ) {
                if (!qparams.missingBarsCreated)
                  quotes = dataCallback.quotes = stx.doCleanupGaps(dataCallback.quotes, chart)
                stx.setMasterData(quotes, chart)
                //self.loadingNewChart=false;	 //need to set early
                // We'll rely on checkLoadMore to make the definitive decision
                if (!quotes) chart.moreAvailable = false
                else chart.moreAvailable = dataCallback.moreAvailable === false ? false : true

                chart.attribution = dataCallback.attribution
                stx.createDataSet()
                if (params.initializeChart) stx.initializeChart()
                if (!qparams.nodraw) stx.home() // by default the white space is maintained now, so no need to include the {maintainWhitespace:true} parameter
              } else {
                self.quoteFeed.announceError(qparams.originalState, dataCallback)
              }
            } else {
              //console.log("orphaned request", qparams);
              if (cb) cb('orphaned')
              return
            }
            self.loadingNewChart = false
            if (cb) {
              cb(dataCallback.error)
            }
            if (qparams.chart.masterData && qparams.chart.masterData.length)
              qparams.startDate = qparams.chart.masterData[0].DT
            self.executeTagAlongs(qparams)
            if (self.behavior.callback) {
              self.behavior.callback(qparams)
            }
            self.loadDependents(qparams)

            self.resetRefreshInterval(self.behavior.refreshInterval)
          }
        }
        this.loadingNewChart = true
        this.updatingChart = false

        qparams.originalState = CIQ.shallowClone(qparams)
        var closureCB = closure(this, qparams)
        if (this.stx.isEquationChart(qparams.symbol)) {
          //equation chart
          CIQ.fetchEquationChart(qparams, closureCB)
        } else {
          CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.INITIAL, this.quoteFeed, qparams, closureCB)
        }
      }

      ///////////////////////////////////////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////////////////////////////////////
      // Below code supports new quotefeed architecture
      ///////////////////////////////////////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////////////////////////////////////

      //Quotefeed constants defining fetchData's context parameter
      CIQ.QuoteFeed.INITIAL = 1
      CIQ.QuoteFeed.UPDATE = 2
      CIQ.QuoteFeed.PAGINATION = 3
      CIQ.QuoteFeed.SERIES = 4

      // ALL quotefeed-fetch calls (old and new versions) go through this function
      CIQ.ChartEngine.Driver.fetchData = function(context, quoteFeed, params, cb) {
        if (quoteFeed.v2QuoteFeed) {
          // if new version of quotefeed
          if (typeof quoteFeed.subscribe !== 'function') {
            // if no subscribe function defined then this is a typical quotefeed
            CIQ.ChartEngine.Driver.fetchDataInContext(context, quoteFeed, params, cb)
          } else {
            // else this is a "subscription" quotefeed
            CIQ.ChartEngine.Driver.fetchDataInContext(context, quoteFeed, params, function(results) {
              if (!results.error) {
                quoteFeed.checkSubscriptions(params.stx)
              }
              cb(results)
            })
          }
        } else {
          // old version of quotefeed
          quoteFeed.fetch(params, cb)
        }
      }

      // if not a "subscription" quotefeed, then this function is always called for new quotefeed -- here the user's quotefeed is invoked;
      // functions not defined in quotefeed are skipped over
      CIQ.ChartEngine.Driver.fetchDataInContext = function(context, quoteFeed, params, cb) {
        var iterator_parms, iterator, suggestedStartDate, suggestedEndDate
        switch (context) {
          case CIQ.QuoteFeed.UPDATE:
            var startDate
            if (params.startDate) {
              startDate = params.startDate
            } else {
              startDate = new Date() // occurs if initial fetch returned no data
              startDate.setHours(0, 0, 0, 0)
            }
            if (typeof quoteFeed.fetchUpdateData === 'function') {
              quoteFeed.fetchUpdateData(params.symbol, startDate, params, cb)
            }
            break
          case CIQ.QuoteFeed.SERIES:
            params.series = true
            if (params.startDate && params.endDate) {
              // if both dates then a portion of the series is being initialized (or reinitialized)
              if (typeof quoteFeed.fetchInitialData === 'function') {
                quoteFeed.fetchInitialData(params.symbol, params.startDate, params.endDate, params, cb)
              }
            } else {
              // else must be an update
              if (typeof quoteFeed.fetchUpdateData === 'function') {
                quoteFeed.fetchUpdateData(params.symbol, params.startDate, params, cb)
              }
            }
            break
          case CIQ.QuoteFeed.INITIAL:
            suggestedEndDate = new Date()
            suggestedEndDate.setMilliseconds(0)
            iterator_parms = {
              begin: suggestedEndDate,
              interval: params.interval == 'tick' ? 1 : params.interval,
              periodicity: params.interval == 'tick' ? params.stx.chart.xAxis.futureTicksInterval : params.period,
              inZone: params.stx.dataZone,
              outZone: params.stx.dataZone,
            }
            iterator = params.stx.chart.market.newIterator(iterator_parms)
            suggestedStartDate = iterator.previous(params.ticks)
            if (typeof quoteFeed.fetchInitialData === 'function') {
              quoteFeed.fetchInitialData(params.symbol, suggestedStartDate, suggestedEndDate, params, cb)
            }
            break
          case CIQ.QuoteFeed.PAGINATION:
            iterator_parms = {
              begin: params.endDate,
              interval: params.interval == 'tick' ? 1 : params.interval,
              periodicity: params.interval == 'tick' ? params.stx.chart.xAxis.futureTicksInterval : params.period,
              inZone: params.stx.dataZone,
              outZone: params.stx.dataZone,
            }
            iterator = params.stx.chart.market.newIterator(iterator_parms)
            suggestedStartDate = iterator.previous(params.ticks)

            if (typeof quoteFeed.fetchPaginationData === 'function') {
              quoteFeed.fetchPaginationData(params.symbol, suggestedStartDate, params.endDate, params, cb)
            }
            break
          default:
            console.error('Illegal fetchData constant')
        }
      }

      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // Start of New Quotefeed Documentation for JSDOC
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      /**
       * MyQuoteFeed represents and specifies an object for a custom built quotefeed. If any of the functions specified below are not defined in the quotefeed object, then the charting engine will skip over the related functionality.
       * <P>See the {@tutorial Data Integration with QuoteFeeds} tutorial on building your own quotefeed for additional explanation and examples.</P>
       * <P>See {@link CIQ.ChartEngine#attachQuoteFeed} for how to attach your quoteFeed object to the charting engine. Only one quotefeed can be attached to the charting engine at a time.</P>
       * <P>See quotefeedSimulator.js for a working example of a quotefeed.
       * @namespace MyQuoteFeed
       * @example
       * // customQuoteFeed implements a MyQuoteFeed object
       * customQuoteFeed = {};
       * customQuoteFeed.fetchInitialData(symbol, suggestedStartDate, suggestedEndDate, params, cb){. . .};
       * customQuoteFeed.fetchUpdateData(symbol, startDate, suggestedEndDate, params, cb){. . .};
       * customQuoteFeed.fetchPaginationData(symbol, suggestedStartDate, endDate, params, cb){. . .};
       * stxx.attachQuoteFeed(customQuoteFeed,{refreshInterval:1});
       * @since 2016-12-01
       */
      var MyQuoteFeed = {}

      /**
       * The charting engine calls this optional quotefeed function when it needs initial data for a symbol within a chart.
       * @param {string} symbol The ticker symbol of the data being fetched
       * @param {Date} suggestedStartDate A suggested starting date for the fetched data (based on how much can be displayed); however, if params.series is true, the specified date is required (as opposed to suggested)
       * @param {Date} suggestedEndDate A suggested starting date for the fetched data (based on how much can be displayed); however, if params.series is true, the specified date is required (as opposed to suggested)
       * @param {object} params						-Provides additional information on the data requested by the chart.
       * @param {Boolean}	params.series 				-If true then the request is for series/comparision data (i.e. not the the main symbol)
       * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
       * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initalized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
       * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicityV2}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
       * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
       * @param {Boolean} [params.update]				-This will be true when the chart requires a refresh. params.startDate will also be set.
       * @param {Boolean} [params.fetchMaximumBars]	-If set to true, the chart requires as much historical data as is available from the feed (params.ticks may also be set to 20,000 to set a safety max), regardless of start date. This is needed for some chart types since they aggregate data (kagi,renko, or linebreak, for example). Developers implementing fetch, should override params.tick and use a smaller number if their feed can't support that much data being sent back. The engine will then make multiple smaller calls to get enough data to fill the screen.
       * @param {number} params.ticks 				-The number of ticks required to fill the chart screen. It is suggested to return 3 times this amount to prevent excessive quote feed requests when user paginates. This can be used to determine how much data to fetch when a date range is not requested (initial load) . Less ticks can be returned if your feed can not support the requested amount, and the engine will make additional calls to try to get the rest of the data. If a date range is requested, you must return the entire range regardless of ticks. If an `update` is requested (strtDate only) you can ignore the number of `ticks` and return the most current data you have.
       * @param  {CIQ.QuoteFeed~dataCallback} cb		-Call this function with the results (or error) of your data request, and an indicator back to the engine indicating if there is more historical data available. ** !!!! This is a mandatory parameter that can not be omitted !!! **
       * @memberOf MyQuoteFeed
       */
      MyQuoteFeed.fetchInitialData = function(symbol, suggestedStartDate, suggestedEndDate, params, cb) {}

      /**
       * The charting engine calls this optional quotefeed function when it needs new data for a symbol within a chart.
       * @param {string} symbol The ticker symbol of the data being fetched
       * @param {Date} startDate The starting date for the fetched data (based on how much can be displayed)
       * @param {object} params						-Provides additional information on the data requested by the chart.
       * @param {Boolean}	params.series 				-If true then the request is for series/comparision data (i.e. not the main symbol)
       * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
       * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initalized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
       * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicityV2}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
       * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
       * @param {Boolean} [params.update]				-This will be true when the chart requires a refresh. params.startDate will also be set.
       * @param {Boolean} [params.fetchMaximumBars]	-If set to true, the chart requires as much historical data as is available from the feed (params.ticks may also be set to 20,000 to set a safety max), regardless of start date. This is needed for some chart types since they aggregate data (kagi,renko, or linebreak, for example). Developers implementing fetch, should override params.tick and use a smaller number if their feed can't support that much data being sent back. The engine will then make multiple smaller calls to get enough data to fill the screen.
       * @param {number} params.ticks 				-The number of ticks required to fill the chart screen. It is suggested to return 3 times this amount to prevent excessive quote feed requests when user paginates. This can be used to determine how much data to fetch when a date range is not requested (initial load) . Less ticks can be returned if your feed can not support the requested amount, and the engine will make additional calls to try to get the rest of the data. If a date range is requested, you must return the entire range regardless of ticks. If an `update` is requested (strtDate only) you can ignore the number of `ticks` and return the most current data you have.
       * @param  {CIQ.QuoteFeed~dataCallback} cb		-Call this function with the results (or error) of your data request, and an indicator back to the engine indicating if there is more historical data available. ** !!!! This is a mandatory parameter that can not be omitted !!! **
       * @memberOf MyQuoteFeed
       */
      MyQuoteFeed.fetchUpdateData = function(symbol, startDate, params, cb) {}

      /**
       * The charting engine calls this optional quotefeed function when it needs pagination data for a symbol within a chart.
       * @param {string} symbol The ticker symbol of the data being fetched
       * @param {Date} suggestedStartDate A suggested starting data for the fetched data (based on how much can be displayed)
       * @param {object} params						-Provides additional information on the data requested by the chart.
       * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
       * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initalized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
       * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicityV2}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
       * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
       * @param {Boolean} [params.update]				-This will be true when the chart requires a refresh. params.startDate will also be set.
       * @param {Boolean} [params.fetchMaximumBars]	-If set to true, the chart requires as much historical data as is available from the feed (params.ticks may also be set to 20,000 to set a safety max), regardless of start date. This is needed for some chart types since they aggregate data (kagi,renko, or linebreak, for example). Developers implementing fetch, should override params.tick and use a smaller number if their feed can't support that much data being sent back. The engine will then make multiple smaller calls to get enough data to fill the screen.
       * @param {number} params.ticks 				-The number of ticks required to fill the chart screen. It is suggested to return 3 times this amount to prevent excessive quote feed requests when user paginates. This can be used to determine how much data to fetch when a date range is not requested (initial load) . Less ticks can be returned if your feed can not support the requested amount, and the engine will make additional calls to try to get the rest of the data. If a date range is requested, you must return the entire range regardless of ticks. If an `update` is requested (strtDate only) you can ignore the number of `ticks` and return the most current data you have.
       * @param  {CIQ.QuoteFeed~dataCallback} cb		-Call this function with the results (or error) of your data request, and an indicator back to the engine indicating if there is more historical data available. ** !!!! This is a mandatory parameter that can not be omitted !!! **
       * @memberOf MyQuoteFeed
       */
      MyQuoteFeed.fetchPaginationData = function(symbol, suggestedStartDate, endDate, params, cb) {}

      /**
       * Although not a core quotefeed function, the charting engine calls this optional function when each time the chart encounters a new symbol. This could happen from a user changing symbol, a user adding a comparison symbol, or a new study that requires a new symbol.
       * <br>
       * You can use this along with unsubscribe() to keep track for the purpose of maintaining legends, lists of securities, or to open or close streaming connections.
       * <br>
       * If using a push stream, subscribe and then have the push streamer push updates using STXChart#streamTrade if you have a "last trade" stream or STXChart@appendMasterData if you have an "OHLC" stream. Use params.interval, params.period, params.symbolObject to inform your streamer what it needs to send.
       * @memberOf MyQuoteFeed
       * @param {object} params						-Provides additional information on the data requested by the chart.
       * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
       * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initalized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
       * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicityV2}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
       * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
       * @param {Boolean} [params.update]				-This will be true when the chart requires a refresh. params.startDate will also be set.
       * @param {Boolean} [params.fetchMaximumBars]	-If set to true, the chart requires as much historical data as is available from the feed (params.ticks may also be set to 20,000 to set a safety max), regardless of start date. This is needed for some chart types since they aggregate data (kagi,renko, or linebreak, for example). Developers implementing fetch, should override params.tick and use a smaller number if their feed can't support that much data being sent back. The engine will then make multiple smaller calls to get enough data to fill the screen.
       * @param {number} params.ticks 				-The number of ticks required to fill the chart screen. It is suggested to return 3 times this amount to prevent excessive quote feed requests when user paginates. This can be used to determine how much data to fetch when a date range is not requested (initial load) . Less ticks can be returned if your feed can not support the requested amount, and the engine will make additional calls to try to get the rest of the data. If a date range is requested, you must return the entire range regardless of ticks. If an `update` is requested (strtDate only) you can ignore the number of `ticks` and return the most current data you have.
       * @param  {CIQ.QuoteFeed~dataCallback} cb		-Call this function with the results (or error) of your data request, and an indicator back to the engine indicating if there is more historical data available. ** !!!! This is a mandatory parameter that can not be omitted !!! **
       * @memberOf MyQuoteFeed
       */
      MyQuoteFeed.subscribe = function(params) {}

      /**
       * Although not a core quotefeed function, the charting engine calls this optional function when each time the chart removes a symbol. This could happen from a user changing symbol, a user removing a comparison symbol, or a study removed that requires a new symbol.
       * <br>
       * You can use this along with subscribe() to keep track for the purpose of maintaining legends, lists of securities, or to open or close streaming connections.
       * @memberOf MyQuoteFeed
       * @param {object} params						-Provides additional information on the data requested by the chart.
       * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
       * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initalized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
       * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicityV2}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
       * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
       * @param {Boolean} [params.update]				-This will be true when the chart requires a refresh. params.startDate will also be set.
       * @param {Boolean} [params.fetchMaximumBars]	-If set to true, the chart requires as much historical data as is available from the feed (params.ticks may also be set to 20,000 to set a safety max), regardless of start date. This is needed for some chart types since they aggregate data (kagi,renko, or linebreak, for example). Developers implementing fetch, should override params.tick and use a smaller number if their feed can't support that much data being sent back. The engine will then make multiple smaller calls to get enough data to fill the screen.
       * @param {number} params.ticks 				-The number of ticks required to fill the chart screen. It is suggested to return 3 times this amount to prevent excessive quote feed requests when user paginates. This can be used to determine how much data to fetch when a date range is not requested (initial load) . Less ticks can be returned if your feed can not support the requested amount, and the engine will make additional calls to try to get the rest of the data. If a date range is requested, you must return the entire range regardless of ticks. If an `update` is requested (strtDate only) you can ignore the number of `ticks` and return the most current data you have.
       * @param  {CIQ.QuoteFeed~dataCallback} cb		-Call this function with the results (or error) of your data request, and an indicator back to the engine indicating if there is more historical data available. ** !!!! This is a mandatory parameter that can not be omitted !!! **
       * @memberOf MyQuoteFeed
       */
      MyQuoteFeed.unsubscribe = function(params) {}

      /**
       * Although not a core quotefeed function, the charting engine calls this optional function when an error occurs. It is up to the quotefeed designer to decide what action (if any) to take in this function. Use this to alert the user if desired.
       * @memberOf MyQuoteFeed
       * @param  {object} params The params originally passed into a fetch function
       * @param {object} dataCallback The data returned to fetch
       * @memberOf MyQuoteFeed
       * @example
       * MyQuoteFeed.announceError=function(params, dataCallback){
       *		CIQ.alert("Error fetching quote:" + dataCallback.error);
       * };
       */
      MyQuoteFeed.announceError = function(params, cb) {}

      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // End of New Quotefeed Documentation for JSDOC
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      return _exports
    }

  var __js_renderers_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
       * Creates a Shading renderer
       * This is just like Lines renderer except it will allow shading between lines.
       * Note: by default the renderer will display lines as underlays. As such, they will appear below the chart ticks and any other studies or drawings.
       *
       * See {@link CIQ.Renderer#construct} for parameters required by all renderers
       * @param {Object} config Config for renderer
       * @param  {object} [config.params] Parameters to control the renderer itself
       * @param  {number} [config.params.width] Width of the rendered line
       * @constructor
       * @name  CIQ.Renderer.Shading
       */
      CIQ.Renderer.Shading = function(config) {
        this.construct(config)
        this.shading = null
        this.errTimeout = null
      }
      CIQ.Renderer.Shading.ciqInheritsFrom(CIQ.Renderer.Lines, false)

      /**
       * Sets the shading scheme of the renderer
       * @param  {array} scheme single object or array of objects denoting shading
       * @param  {String} [scheme.primary] left series for comparison; if omitted, use chart.dataSegment[i].Close
       * @param  {String} [scheme.secondary] right series for comparison; if omitted, use first series in the seriesMap
       * @param  {String} [scheme.color] color in hex, rgb, rgba, etc to shade between primary and secondary
       * @param  {String} [scheme.greater] color in hex, rgb, rgba, etc to shade between primary and secondary if primary is greater in price than secondary
       * @param  {String} [scheme.lesser] color in hex, rgb, rgba, etc to shade between primary and secondary if primary is lesser in price than secondary
       * Note: if scheme.greater or scheme.lesser are omitted, scheme.color is used.
       * At a bare minimum, scheme.color is required.  It is not required if scheme.greater and scheme.lesser are supplied.
       * If scheme.primary is omitted, the shading will only occur if the series share the same axis as the chart.dataSegment[i].Close.
       * If shading cannot occur for any reason, series lines will still be drawn.
       * @memberOf CIQ.Renderer.Shading
       * @example
       * renderer.setShading([
       * 	{primary:'ibm', secondary:'ge', greater:'green', lesser:'red'}, // switches shading based on crossover of values
       * 	{primary:'t', secondary:'intc', color:'blue'}, // color always blue between them regardless of which is higher or lower
       * 	{secondary:'t', color:'yellow'}, // compares masterData with the named series
       * 	{color:'yellow'} // automatically shades between master and the first series
       * ]);
       */
      CIQ.Renderer.Shading.prototype.setShading = function(scheme) {
        if (scheme.constructor != Array) {
          scheme = [scheme]
        }
        this.shading = scheme
      }

      CIQ.Renderer.Shading.prototype.draw = function() {
        if (!this.shading) {
          if (!this.errTimeout) {
            console.log('Warning: no shading scheme set.  Use myRenderer.setShading(scheme) to set.')
            var self = this
            this.errTimeout = setTimeout(function() {
              self.errTimeout = null
            }, 10000)
          }
        }
        var chart = this.stx.panels[this.params.panel].chart
        var seriesMap = {}
        var s
        for (s = 0; s < this.seriesParams.length; s++) {
          if (chart.series[this.seriesParams[s].field]) {
            // make sure the series is still there.
            var defaultParams = CIQ.clone(chart.series[this.seriesParams[s].field].parameters)
            seriesMap[this.seriesParams[s].field] = {
              parameters: CIQ.extend(CIQ.extend(defaultParams, this.params), this.seriesParams[s]),
              yValueCache: this.caches[this.seriesParams[s].field],
              useChartLegend: false,
            }
          }
        }
        this.stx.drawSeries(chart, seriesMap, this.params.yAxis)
        for (s in seriesMap) {
          this.caches[s] = seriesMap[s].yValueCache
        }
        for (s = 0; s < this.shading.length; s++) {
          var scheme = this.shading[s]
          if (!scheme.greater) scheme.greater = scheme.color
          if (!scheme.lesser) scheme.lesser = scheme.color
          if (!scheme.primary) scheme.primary = 'Close'
          if (!scheme.secondary) scheme.secondary = this.seriesParams[0].field

          if (!scheme.secondary || !scheme.greater || !scheme.lesser) continue
          else if (!seriesMap[scheme.primary] && scheme.primary != 'Close') continue
          else if (!seriesMap[scheme.secondary]) continue
          else if (scheme.primary == 'Close' && this.params.yAxis != chart.yAxis) continue //don't allow shading across axes

          var sd = {
            panel: this.params.panel,
            outputs: { topBand: scheme.greater, bottomBand: scheme.lesser },
            outputMap: {},
          }
          sd.outputMap[scheme.primary] = 'topBand'
          sd.outputMap[scheme.secondary] = 'bottomBand'
          var parameters = {
            topBand: scheme.primary,
            topAxis: this.params.yAxis,
            bottomBand: scheme.secondary,
            bottomAxis: scheme.primary == 'Close' ? null : this.params.yAxis,
          }
          CIQ.fillIntersecting(this.stx, sd, chart.dataSegment, parameters)
        }
      }

      /**
	 * Creates a Histogram renderer
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {Object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {boolean} [config.params.defaultBorders] Whether to draw a border for each bar as a whole.  Can be overridden by a border set for a series.  Default: false.
	 * @param  {number} [config.params.widthFactor] Width of each bar as a percentage of the candleWidth. Valid values are 0.00-1.00. Default: .8
	 * @param  {number} [config.params.heightPercentage] The amount of vertical space to use, valid values are 0.00-1.00. Default: .7
	 * @param  {boolean} [config.params.bindToYAxis] Set to true to bind the rendering to the y-axis and to draw it. Automatically set if params.yAxis is present.
	 * @param  {string} [config.params.subtype="overlaid"] Subtype of rendering "stacked", "clustered", "overlaid"
	 * @constructor
	 * @name  CIQ.Renderer.Histogram
	 * 	@example
		    var axis2=new CIQ.ChartEngine.YAxis();
		    axis2.position="left";

			// configure the histogram display
			var params={
				yAxis: axis2,
				name:				"Sentiment Data",
				type:				"histogram",
				subtype:			"stacked",
				heightPercentage:	.7,	 // how high to go. 1 = 100%
				opacity:			.7,  // only needed if supporting IE8, otherwise can use rgba values in histMap instead
				widthFactor:		.8	 // to control space between bars. 1 = no space in between
			};

		 	//legend creation callback
			function histogramLegend(colors){
		        stxx.chart.legendRenderer(stxx,{legendColorMap:colors, coordinates:{x:260, y:stxx.panels["chart"].yAxis.top+30}, noBase:true});
		    }

			var histRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Histogram({params: params, callback: histogramLegend}));

			stxx.addSeries("^NIOALL", {display:"Symbol 1"});
			stxx.addSeries("^NIOAFN", {display:"Symbol 2"});
			stxx.addSeries("^NIOAMD", {display:"Symbol 3"});

      		histRenderer.removeAllSeries()
			.attachSeries("^NIOALL","#6B9CF7")
			.attachSeries("^NIOAFN","#95B7F6")
			.attachSeries("^NIOAMD","#B9D0F5")
			.ready();  //use ready() to immediately draw the histogram
	 *
	 * @example
		// this is an example on how completely remove a renderer and all associated data. This should only be necessary if you are also removing the chart itself
		// remove all series from the renderer including series data from the masterData
  		renderer.removeAllSeries(true);
  		// detach the series renderer from the chart.
  		stxx.removeSeriesRenderer(renderer);
  		// delete the renderer itself.
  		delete renderer;
	 */
      CIQ.Renderer.Histogram = function(config) {
        this.construct(config)
        this.params.type = 'histogram'
        this.params.highlightable = false
      }

      CIQ.Renderer.Histogram.ciqInheritsFrom(CIQ.Renderer, false)
      CIQ.Renderer.Histogram.prototype.performCalculations = function() {
        if (this.params.yAxis) {
          var panel = this.stx.panels[this.params.panel]
          var fields = []
          for (var i = 0; i < this.seriesParams.length; i++) {
            fields.push(this.seriesParams[i].field)
          }
          var minMax = this.stx.determineMinMax(
            this.stx.chart.dataSegment,
            fields,
            this.params.subtype == 'stacked',
            true,
          )
          this.stx.calculateYAxisRange(panel, this.params.yAxis, 0, minMax[1])
          var heightPercentage = this.params.heightPercentage ? this.params.heightPercentage : 1
          this.params.yAxis.high = minMax[1] / this.params.heightPercentage
          this.params.yAxis.min = 0 // So that zoom doesn't pull negative numbers in
          this.params.bindToYAxis = true
        }
      }

      CIQ.Renderer.Histogram.prototype.draw = function() {
        this.stx.drawHistogram(CIQ.clone(this.params), this.seriesParams)
      }

      /**
       * Creates a Heatmap renderer
       * See {@link CIQ.Renderer#construct} for parameters required by all renderers
       * @param {Object} config Config for renderer
       * @param  {object} [config.params] Parameters to control the renderer itself
       * @param  {number} [config.params.widthFactor] Width of each bar as a percentage of the candleWidth. Valid values are 0.00-1.00. Default: 1
       * @param  {number} [config.params.height] The amount of vertical space to use, in price units. For example, 2=>2 unit increments on yaxis.
       * @constructor
       * @name  CIQ.Renderer.Heatmap
       */
      CIQ.Renderer.Heatmap = function(config) {
        this.construct(config)
        this.params.type = 'heatmap'
        this.params.highlightable = false
      }

      CIQ.Renderer.Heatmap.ciqInheritsFrom(CIQ.Renderer, false)
      CIQ.Renderer.Heatmap.prototype.performCalculations = function() {
        var panel = this.stx.panels[this.params.panel]
        var yAxis = this.params.yAxis ? this.params.yAxis : panel.yAxis
        var fields = []
        for (var i = 0; i < this.seriesParams.length; i++) {
          fields.push(this.seriesParams[i].field)
        }
        var minMax = this.stx.determineMinMax(this.stx.chart.dataSegment, fields, false, true)
        if (this.params.yAxis) {
          this.stx.calculateYAxisRange(panel, yAxis, minMax[0], minMax[1])
        } else if (this.params.panel == this.stx.chart.panel.name) {
          this.stx.chart.lowValue = Math.min(this.stx.chart.lowValue, minMax[0])
          this.stx.chart.highValue = Math.max(this.stx.chart.highValue, minMax[1])
        } else {
          this.stx.calculateYAxisRange(panel, yAxis, minMax[0], minMax[1])
          panel.lowValue = panel.yAxis.low
          panel.highValue = panel.yAxis.high
        }
      }

      CIQ.Renderer.Heatmap.prototype.draw = function() {
        this.stx.drawHeatmap(CIQ.clone(this.params), this.seriesParams)
      }

      return _exports
    }

  var __js_span_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ
      /**
	 * Sets a chart to the requested date range.
	 *
	 * When a quotefeed is attached to the chart (ver 04-2015 and up), and not enough data is available in masterData to render the requested range, setRange will request more from the feed.
	 * Also, if no periodicity (params.periodicity) is supplied in the parameters, **it may	 override the current periodicity** and automatically choose the best periodicity to use for the requested range. 
	 * So depending on your UI, **you may need to use the callback to refresh the periodicity displayed on your menu**.
	 * 
	 * Therefore, if you choose to let setRange set the periodicity, you should **not** call setPeriodicityV2 before or after calling this method.
	 * 
	 * **Note:** if the chart is in `tick` periodicity, the periodicity will be automatically selected even if one was provided because in `tick` periodicity we have no way to know how many ticks to get to fulfill the requested range.
	 *
	 * If there is no quotefeed attached (or using a version prior to 04-2015), then setRange will use whatever data is available in the masterData. So you must ensure you have preloaded enough to display the requested range.
	 *
	 * This function must be called after newChart() creates a datSet.
	 *
	 * **Note: ** versions prior to '2014-12-02' must use the legacy arguments : setRange(dtLeft, dtRight, padding, char, cb())
	 *
	 * @param {object} params  Parameters for the request
	 * @param {Date} [params.dtLeft] Date to set left side of chart. If no left date is specified then the right edge will be flushed, and the same interval and period will be kept causing the chart to simply scroll to the right date indicated. Must be in 'dataZone' time if one set. See {@link CIQ.ChartEngine#setTimeZone} and {@link CIQ.ChartEngine#convertToDataZone} for more details.
	 * @param {Date} [params.dtRight] Date to set right side of chart. Defaults to right now. Must be in 'dataZone' time if one set. See {@link CIQ.ChartEngine#setTimeZone} and {@link CIQ.ChartEngine#convertToDataZone} for more details.
	 * @param {number} [params.padding] Whitespace padding in pixels to apply to right side of chart after sizing for date range. If not present the current whiteSpace will be preserved. Set to 0 to remove whiteSpace.
	 * @param {CIQ.ChartEngine.Chart} [params.chart] Which chart, defaults to "chart"
	 * @param {boolean} [params.goIntoFuture] If true then the right side of the chart will be set into the future if dtRight is greater than last tick
	 * @param {boolean} [params.goIntoPast] If true then the left side of the chart will be set into the future if dtLeft is less than first tick
	 * @param {object} [params.periodicity] Override a specific periodicity combination to use with the range. Only available if a quoteFeed is attached to the chart. **Note:** if the chart is in `tick` periodicity, the periodicity will be automatically selected even if one was provided because in `tick` periodicity we have no way to know how many ticks to get to fulfill the requested range.
	 * @param {Number} [params.periodicity.period] Period as used by {@link CIQ.ChartEngine#setPeriodicityV2}
	 * @param {string} [params.periodicity.interval] An interval as used by {@link CIQ.ChartEngine#setPeriodicityV2}
	 * @param {string} [params.periodicity.timeUnit] A timeUnit as used by {@link CIQ.ChartEngine#setPeriodicityV2}
	 * @param {Number} [params.pixelsPerBar] Optionally override this value so that the auto-periodicity selected chooses different sized candles.
	 * @param {Function} [cb] Callback method. Will be called with the error retuned by the quotefeed, if any.
	 * @memberOf CIQ.ChartEngine
	 * @since 04-2015 params.rangePeriodicityMap and params.periodicity added as well as automatic integration with {@link CIQ.QuoteFeed}
	 * @since  TBC params.rangePeriodicityMap deprecated in favor of new automatic algorithm
	 * @example
	 * // this will display all of the available data in the current chart periodicity
    	stxx.setRange({
	        dtLeft: stxx.chart.dataSet[0].DT,
	        dtRight: stxx.chart.dataSet[stxx.chart.dataSet.length - 1].DT,
	        periodicity:{period:stxx.layout.periodicity,interval:stxx.layout.interval}
	    });
	 */
      CIQ.ChartEngine.prototype.setRange = function(params, cb) {
        if (CIQ.isEmpty(params)) {
          // Handle legacy argument list implementation
          params = {
            dtLeft: arguments[0],
            dtRight: arguments[1],
            padding: arguments[2],
            chart: arguments[3],
            goIntoFuture: false,
          }
          cb = arguments[4]
        }

        if (!params.chart) params.chart = this.chart
        if (typeof params.padding == 'undefined') {
          // if no whitespace sent in , maintain exising ( different than sending 0 which will set to no whitespace )
          params.padding = this.preferences.whitespace
        }
        var dontChangePeriodicity = false
        var chart = params.chart
        var lt = params.dtLeft
        var rt = this.convertToDataZone(new Date())
        if (params.dtRight) rt = params.dtRight
        if (!lt) {
          // If no left date then we want to just flush the right edge, and keep the same interval,period
          var iter = this.standardMarketIterator(rt, null, chart)
          lt = iter.previous(chart.maxTicks)
          if (!params.periodicity) dontChangePeriodicity = true
        }

        var self = this
        function showTheRange(err) {
          if (typeof err == 'undefined') err = null

          var l = 0,
            r = 0
          var todaysDate = new Date()
          var base = params.base
          var periodicity = params.periodicity
          var dataSet = chart.dataSet
          var dsLength = dataSet.length

          if (!dataSet || dsLength === 0) {
            if (cb) cb(err)
            return
          }

          // range is day and interval is day
          if (base === 'day' && (periodicity && periodicity.interval === 'day')) {
            var multiplier = params.multiplier
            // left bar is how many days the range is, or beginning of dataset
            var leftBar = dsLength < multiplier ? 0 : dsLength - multiplier
            l = leftBar
            r = dsLength - 1
          }
          // if intraday range and last day in dataSet doesn't equal current day then show previous day's data
          else if (base === 'today' && dataSet[dsLength - 1].DT.getDate() != todaysDate.getDate()) {
            var leftDT = new Date(dataSet[dsLength - 1].DT.getTime())
            var rightDT = new Date(leftDT.getTime())

            for (var d = dsLength - 1; d >= 0; d--) {
              if (dataSet[d] && dataSet[d].DT.getDate() != leftDT.getDate()) {
                leftDT = new Date(dataSet[d + 1].DT)
                break
              }
            }
            if (rightDT.getTime() == leftDT.getTime()) {
              leftDT = new Date(dataSet[0].DT)
            }

            l = self.tickFromDate(leftDT, chart, null, true)
            r = self.tickFromDate(rightDT, chart)
          } else {
            if (lt.getTime() >= dataSet[0].DT.getTime() || params.goIntoPast) {
              l = self.tickFromDate(lt, chart, null, true)
            } else {
              l = 0
            }
            if (rt.getTime() <= dataSet[dsLength - 1].DT.getTime() || params.goIntoFuture) {
              r = self.tickFromDate(rt, chart)
            } else {
              r = dsLength - 1
            }
          }
          var ticks = r - l + 1

          if (ticks < 1) {
            if (cb) cb(err)
            return
          }

          self.setCandleWidth((self.chart.width - params.padding) / ticks, chart)
          chart.scroll = dsLength - l + 1
          self.micropixels = 0
          //if(self.preferences.whitespace) self.preferences.whitespace=(chart.maxTicks-chart.scroll)*self.layout.candleWidth;
          self.draw()
          self.changeOccurred('layout')
          if (cb) cb(err)
        }

        var loadMoreCount = 0 // safety valve to eliminate infinite loop
        function loadTheRange(err) {
          if (err && loadMoreCount === 0) {
            // change the periodicity, scroll and candle width back to original chart values
            // if our inital fetch from the quotefriver failed.
            self.chart.scroll = previousScroll
            self.setCandleWidth(previousCandleWidth)
            self.layout.interval = previousInterval
            self.layout.periodicity = previousPeriodicity
            self.layout.timeUnit = previousTimeUnit
            if (cb) cb(err)
            return
          }
          loadMoreCount++
          if (loadMoreCount > 10) {
            console.log(
              'CIQ.ChartEngine.setRange(): Too many loads (10) from server. Stopping. Check periodicity logic.',
            )
            showTheRange()
            return
          }
          if (chart.moreAvailable && chart.masterData[0].DT > lt) {
            self.quoteDriver.checkLoadMore(chart, true, false, function(err) {
              if (!err) loadTheRange()
              else showTheRange(err) // if there was an error on a subsequent fetch, then show as much as we awere able to get.
            })
          } else {
            showTheRange()
          }
        }

        function estimateMaxTicks(rtMS, ltMS, interval, period, dontRoll) {
          // how many ticks do we need at the requested periodicity to fill the screen
          var ticks = 0
          var ms = rtMS - ltMS
          if (CIQ.ChartEngine.isDailyInterval(interval)) {
            if (interval == 'month') {
              ticks = ms / CIQ.MONTH / period
            } else if (interval == 'week') {
              ticks = ms / CIQ.WEEK / period
            } else {
              ticks = ms / CIQ.DAY / period
            }
          } else {
            if (!isNaN(interval)) ticks = ms / (CIQ.MINUTE * interval) / period
            else {
              if (interval == 'millisecond') ticks = ms / period
              else if (interval == 'second') ticks = ms / CIQ.SECOND / period
              else if (interval == 'hour') ticks = ms / CIQ.HOUR / period
              else ticks = ms / CIQ.MINUTE / period
            }
          }
          return Math.round(ticks) // rough estimation...
        }

        if (this.quoteDriver) {
          var intervalToUse, periodToUse, timeUnitToUse
          if (dontChangePeriodicity) {
            intervalToUse = this.layout.interval
            timeUnitToUse = this.layout.timeUnit
            periodToUse = this.layout.period
          } else if (params.periodicity) {
            // If the caller specifies the periodicity then we use that
            intervalToUse = params.periodicity.interval
            timeUnitToUse = params.periodicity.timeUnit
            periodToUse = params.periodicity.period
          } else {
            // Set the periodicity according to the staticRangePeriodicityMap
            // This will check the milliseconds of each range and choose the proper width
            var rangeInMS = rt.getTime() - lt.getTime()
            if (!this.autoPickCandleWidth.turnOn) {
              var periodicityMap = this.staticRangePeriodicityMap

              var entryToUse = null
              // Cycle through the periodicity map looking for the closest fit
              for (var i = 0; i < periodicityMap.length; i++) {
                var mapEntry = periodicityMap[i]

                if (rangeInMS <= mapEntry.rangeInMS) {
                  entryToUse = mapEntry
                  break
                }
              }
              intervalToUse = entryToUse.interval
              periodToUse = entryToUse.periodicity
              timeUnitToUse = entryToUse.timeUnit
            } else {
              // Calculate the best periodicity dynamically according to the intervals
              // set in dynamicRangePeriodicityMap
              var pixelsPerBar = 0

              // use candlewidth set in the chart
              if (this.autoPickCandleWidth.candleWidth) {
                pixelsPerBar = this.autoPickCandleWidth.candleWidth
              }
              // else choose candlewidth according to chart type
              else {
                switch (this.layout.chartType) {
                  case 'line':
                  case 'colored_line':
                  case 'mountain':
                  case 'colored_mountain':
                  case 'baseline_delta':
                  case 'baseline_delta_mountain':
                  case 'wave':
                    pixelsPerBar = 2
                    break
                  case 'candle':
                  case 'bar':
                  case 'colored_bar':
                  case 'hollow_candle':
                  case 'volume_candle':
                  case 'scatterplot':
                    pixelsPerBar = 5
                    break
                }
              }

              var numBars = chart.width / pixelsPerBar

              var possibleIntervals = this.dynamicRangePeriodicityMap

              // default
              intervalToUse = possibleIntervals[0].interval
              periodToUse = 1

              var numBarsLastInterval
              for (var j = 0; j < possibleIntervals.length; j++) {
                var numBarsThisInterval = rangeInMS / possibleIntervals[j].rangeInMS
                if (numBarsThisInterval < numBars) {
                  if (possibleIntervals[j - 1]) {
                    intervalToUse = possibleIntervals[j - 1].interval
                    periodToUse = Math.ceil(numBarsLastInterval / numBars)
                  } else {
                    intervalToUse = possibleIntervals[j].interval
                    periodToUse = 1
                  }
                  break
                }
                numBarsLastInterval = numBarsThisInterval
              }
            }
          }

          // maintain the previous values just in case an error is thrown when getting new data
          var previousScroll = this.chart.scroll
          var previousCandleWidth = this.layout.candleWidth
          var previousInterval = this.layout.interval
          var previousPeriodicity = this.layout.periodicity
          var previousTimeUnit = this.layout.timeUnit

          // to prevent multiple fetches trying to get enough ticks for the selected range;
          // maxticks,scroll and  candleWidth are used in CIQ.ChartEngine.Driver.barsToFetch and checkLoadMore() to deduce the number of ticks to fill the screen.
          // So we need to set it here to prevent us from using the pre-setRange  values wich are not going to be right.
          // these are estimated, for the fetch, but will be properly recalculated by showTheRange();
          this.chart.scroll = this.chart.maxTicks = estimateMaxTicks(
            rt.getTime(),
            lt.getTime(),
            intervalToUse,
            periodToUse,
            this.dontRoll,
          )
          this.layout.candleWidth = this.chart.width / this.chart.maxTicks

          // logic to determine whether we have the right interval for what is needed
          var needDifferentData =
            this.layout.timeUnit != timeUnitToUse && (timeUnitToUse == 'seconds' || timeUnitToUse == 'milliseconds')
          if (
            !needDifferentData &&
            CIQ.ChartEngine.isDailyInterval(this.layout.interval) !== CIQ.ChartEngine.isDailyInterval(intervalToUse)
          )
            needDifferentData = true
          else if (!CIQ.ChartEngine.isDailyInterval(this.layout.interval) && this.layout.interval != intervalToUse)
            needDifferentData = true

          if (!this.chart.masterData || needDifferentData) {
            this.layout.interval = intervalToUse
            this.layout.periodicity = periodToUse
            this.layout.timeUnit = timeUnitToUse
            if (!this.layout.timeUnit) {
              if (CIQ.ChartEngine.isDailyInterval(this.layout.interval)) this.layout.timeUnit = null
              else if (this.layout.interval == 'second') this.layout.timeUnit = 'second'
              // backward compatibility with heatmap
              else if (this.layout.interval != 'tick') this.layout.timeUnit = 'minute'
            }
            var qparams = {
              symbol: chart.symbol,
              symbolObject: chart.symbolObject,
              chart: chart,
              nodraw: true,
            }
            if (this.layout.interval == 'tick') {
              // for 'tick' periodcity we have to request a specific range instead of # of ticks,
              //since we can never be sure how many ticks will be in a particular range.
              qparams.startDate = lt
              qparams.endDate = rt
            }

            if (!this.displayInitialized) qparams.initializeChart = true //TODO, this is confusing to developers. They think it means newChart()
            this.quoteDriver.newChart(qparams, loadTheRange)
          } else {
            if (this.layout.interval != intervalToUse || this.layout.periodicity != periodToUse) {
              this.layout.interval = intervalToUse
              this.layout.periodicity = periodToUse
              this.createDataSet()
            }
            loadTheRange()
          }
        } else {
          showTheRange()
        }
      }

      /**
       * Sets the chart to display the requested span.
       *
       * setSpan makes use of {@link CIQ.ChartEngine#setRange} by converting the span requested into a date range.
       * All parameters in setSpan will be sent into setRange (except if 'all' is requested), so you can pre-load things like `params.rangePeriodicityMap` in setSpan for setRange to use.
       * Just keep in mind that if passing `periodicity.interval` and `periodicity.period` to be used in {@link CIQ.ChartEngine#setRange} , then **DO NOT** set `maintainPeriodicity` or it will not pass the requested periodicity.
       *
       * If a quotefeed is attached to the chart (ver 04-2015 and up), setSpan will attempt to gather more data from the feed (IF NEEDED) to fulfill the requested range AND **may override the periodicity** to provide the most optimal chart display. So depending on your UI, **you may need to use the callback to refresh the periodicity displayed on your menu**.
       * Please see {@link CIQ.ChartEngine#setRange}	 and {@link CIQ.ChartEngine#displayAll} for complete details on how the periodicity is calculated.
       * If 'all' data is requested {@link CIQ.ChartEngine#displayAll} is called first to ensure all quotefeed data for that particular instrument is loaded. Note that 'all' will display the data in `monthly` periodicity.
       * Calling setPeriodicityV2 immediately after setting a span may cause all of the data to be re-fetched at a different periodicity than the one used by the requested span. Once you have set your initial periodicity for the chart, there is not need to manually change it when setting a new span unless you are using the `params.maintainPeriodicity` flag; in which case you want to call `setPeriodicityV2` **before** you set the span, so the setSpan call will use the pre-set periodicity.
       * Setting a span to `params.multiplier:168` `params.span:'days'` or `params.multiplier:1` `params.span:'week'`, for example, is really the same thing; same span of time. If what you are trying to do is tell the chart how you want the raw data to be fetched, that is done with {@link stxChart.setPeriodicityV2} or by letting setSpan figure it out as described above.
       * Remember that by default weekly and monthly data is calculated using daily raw ticks. If your feed returns data already rolled up in monthly or weekly ticks, you can override this behavior by setting `stxx.dontRoll` to `true` ( see {@link CIQ.ChartEngine#dontRoll}  and the **'Periodicity and your masterData'** section in the {@tutorial Data Loading} tutorial)
       *
       * **Note:** if the chart is in `tick` periodicity, the periodicity will be automatically selected even if it was requested to be maintained because in `tick` periodicity we have no way to know how many ticks to get to fulfill the requested range.
       *
       * If there is no quotefeed attached (or using a version prior to 04-2015), then setStan will use whatever data is available in the masterData. So you must ensure you have preloaded enough to display the requested range.
       *
       * This function must be called after newChart() creates a datSet, or together with newChart() by setting the proper parameter values. See example in this section and {@link CIQ.ChartEngine#newChart} for more details and compatibility with your current version.
       *
       * Setting `params.span` to "today" will cause the chart to display a market day but extend the chart all the way to market close (as per market hours set in the active market definition - see {@link CIQ.Market})
       *
       * **Note: ** versions prior to '2015-05-01' must use the legacy arguments : setSpan(multiplier, span, padding, char,useMarketTZ,cb), and related example in this section.
       *
       * @param {object} params Parameter for the function
       * @param {number} params.multiplier   (params.period in legacy versions) Number of spans to show. To show 3 weeks of data, for example, set this to 3 and `params.span` to 'week'.
       * @param {string} params.base (params.interval in legacy versions) The base span to show. "minute","hour","day","week","month","year","all", "ytd" or "today". ** These spans are market hours sensitive **, so if you ask for 1 hour, for example, at the time the markets are close, the span will find the last time the markets where open for the active symbol, and include the last market hour in the span. It will also exclude days when the market is closed. This span will be combined with the multiplier. Example 2 days, 4 months. Please note that "all" will attempt to load all of the data the quotefeed has available for that symbol. Use this span with caution.
       * @param {string} params.span (backward compatibility synonym with base)
       * @param {boolean} [params.maintainPeriodicity] If set to true, it will maintain the current periodicity for the chart instead of trying to select the most optimal periodicity for the selected range. See {@link CIQ.ChartEngine#setRange} for default rangePeriodicityMap. **Note:** if the chart is in `tick` periodicity, the periodicity will be automatically selected even if it was requested to be maintained because in `tick` periodicity we have no way to know how many ticks to get to fulfill the requested range.
       * @param {number} [params.padding] Whitespace padding in pixels to apply to right side of chart after sizing for date range. If not set will default whitespace to 0.
       * @param {boolean} [params.forceLoad] Forces a complete load (used by newChart)
       * @param {CIQ.ChartEngine.Chart} [params.chart] Which chart, defaults to "chart"
       * @param {Function} cb Optional callback
       * @memberOf CIQ.ChartEngine
       * @example
       * // this displays 5 days. It can be called anywhere including buttons on the UI
       *	stxx.setSpan ({
       *		multiplier: 5,
       *		span: "day",
       *		padding: 30
       *	});
       * @example
       * // this displays 2 days as the initial range when newChart is called
       * stxx.newChart(
       * 		newSymbol,
       * 		null,
       * 		null,
       * 		finishedLoadingNewChart(
       * 			stxx.chart.symbol,
       * 			newSymbol
       * 		),
       * 		{
       * 			span:{base:'day',multiplier:2},		// this parameter will cause newChart to call setSpan with these parameters
       * 			periodicity:{period:1,interval:5}	// this parameter will cause newChart to call setPeriodicityV2 with these parameters
       * 		}
       * );
       * @since
       * <br>- 04-2015: added "all", "today", "ytd" and automatic integration with {@link CIQ.QuoteFeed}
       * <br>- 15-07-01: params.period changed to params.multiplier for clarity
       * <br>- 15-07-01: params.interval changed to params.span for clarity
       * <br>- 05-2016-10: save the desired span in stxx.layout to be restored with the layout between sessions
       */
      CIQ.ChartEngine.prototype.setSpan = function(params, cb) {
        var period = arguments[0]
        var interval = arguments[1]
        var padding = arguments[2]
        var chart = arguments[3]

        if (typeof params == 'object') {
          period = params.period ? params.period : params.multiplier ? params.multiplier : 1
          interval = params.interval
            ? params.interval
            : params.base
            ? params.base
            : params.span
            ? params.span
            : params.period
          padding = params.padding
          chart = params.chart
        } else {
          params = {
            period: period,
            interval: interval,
            padding: padding,
            chart: chart,
          }
          cb = arguments[5]
        }
        if (!params.padding) params.padding = 0

        if (!chart) chart = this.chart

        interval = interval.toLowerCase()
        if (interval == 'all') {
          this.displayAll(params, cb)
          return
        }
        var iterInterval = interval
        var iterPeriod = 1
        if (interval == 'today') {
          iterInterval = 'day'
        } else if (interval == 'year') {
          iterInterval = 'month'
          iterPeriod = 12
        }

        var parms_copy = CIQ.shallowClone(params)
        parms_copy.goIntoFuture = false

        var iter_parms = {
          begin: new Date(),
          interval: iterInterval,
          period: iterPeriod,
          //'inZone': this.dataZone, default to browser timezone since we are just setting 'begin' in new Date()
          outZone: this.dataZone,
        }
        var iter = chart.market.newIterator(iter_parms)
        var leftDT = this.convertToDataZone(new Date())

        function zeroDT(dt) {
          dt.setHours(0)
          dt.setMinutes(0)
          dt.setSeconds(0)
          dt.setMilliseconds(0)
          return dt
        }
        if (interval === 'ytd') {
          leftDT = zeroDT(leftDT)
          leftDT.setMonth(0)
          leftDT.setDate(1)
        } else if (interval === 'today') {
          // forward and then back will land us on the most current valid market day
          iter.next()
          leftDT = iter.previous()
        } else if (interval === 'month') {
          leftDT = zeroDT(new Date())
          leftDT.setMonth(leftDT.getMonth() - period)
        } else if (interval === 'year') {
          leftDT = zeroDT(new Date())
          leftDT.setFullYear(leftDT.getFullYear() - period)
        } else if (interval === 'week') {
          leftDT = zeroDT(new Date())
          leftDT.setDate(leftDT.getDate() - period * 7)
        } else if (interval === 'day' && period == 1) {
          // Special case, 1 "day" will start from same time on previous market close
          // 2 or more days will always start from market open of prior days (next else)
          var h = leftDT.getHours()
          var m = leftDT.getMinutes()
          var s = leftDT.getSeconds()
          var mm = leftDT.getMilliseconds()
          leftDT = iter.previous()
          leftDT.setHours(h)
          leftDT.setMinutes(m)
          leftDT.setSeconds(s)
          leftDT.setMilliseconds(mm)
        } else {
          leftDT = iter.previous(period - 1)
        }
        parms_copy.dtLeft = leftDT
        if (interval === 'today') {
          parms_copy.goIntoFuture = true
          parms_copy.dtRight = new Date(leftDT)
          var closeHour = iter.market.zclose_hour
          var closeMinute = iter.market.zclose_minute
          parms_copy.dtRight.setHours(closeHour ? closeHour : 23)
          parms_copy.dtRight.setMinutes(closeHour ? closeMinute : 59) // not a typo!!!
          parms_copy.dtRight.setSeconds(0)
          parms_copy.dtRight = chart.market._convertFromMarketTZ(parms_copy.dtRight, this.dataZone)

          parms_copy.dtLeft.setHours(iter.market.zopen_hour)
          parms_copy.dtLeft.setMinutes(iter.market.zopen_minute)
          parms_copy.dtLeft.setSeconds(0)
          parms_copy.dtLeft = chart.market._convertFromMarketTZ(parms_copy.dtLeft, this.dataZone)
        }
        if (parms_copy.maintainPeriodicity) {
          parms_copy.periodicity = {}
          parms_copy.periodicity.interval = this.layout.interval
          parms_copy.periodicity.period = this.layout.periodicity
        }
        chart.spanLock = false // unlock left edge
        var self = this
        this.setRange(parms_copy, function(err) {
          if (!params.maintainPeriodicity) {
            self.layout.setSpan = { base: params.base, multiplier: params.multiplier }
            self.changeOccurred('layout')
          }
          if (interval == 'today') {
            chart.spanLock = true // lock left edge of screen, in callback after we have fetched!
          }
          if (cb) cb(err)
        })
      }

      //@private
      CIQ.ChartEngine.prototype.getSpanCandleWidth = function(span) {
        var arr = span.split(',')
        if (arr.length < 2) return
        var num = parseFloat(arr[0])
        var now = new Date()
        var prev = new Date()
        if (arr[1] == 'year') {
          prev.setFullYear(prev.getFullYear() - num)
        } else if (arr[1] == 'month') {
          prev.setMonth(prev.getMonth() - num)
        } else if (arr[1] == 'day') {
          prev.setDate(prev.getDate() - num)
        } else if (arr[1] == 'week') {
          prev.setDate(prev.getDate() - 7 * num)
        }
        var diff = (now.getTime() - prev.getTime()) / 1000 / 60 / 60 / 24
        diff = (diff * 5) / 7
        var candleWidth = this.chart.width / diff
        return candleWidth
      }

      /**
       * Sets a chart to display all data for a security. If the chart is driven by a QuoteFeed then it will first
       * set the periodicity to a `daily` interval if not already set (`monthly` if the {@link CIQ.ChartEngine#dontRoll} flag is set) .
       * It will then call QuoteDriver.loadAll() which makes multiple queries to ensure all data availabe from the quote feed is loaded.
       * Once all the data is loaded, the chart will be set to cover that range using {@link CIQ.ChartEngine#setRange}
       * @param {object} [params] Optional parameters in same format as {@link CIQ.ChartEngine#setSpan}.
       * @param {Function} [cb] Callback, is called when chart is displayed.
       * @since  04-2015
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.displayAll = function(params, cb) {
        var chart = this.chart
        if (params && params.chart) chart = params.chart
        var self = this
        function displayTheResults() {
          if (!chart.masterData || !chart.masterData.length) return
          var p = CIQ.clone(params)
          p.dtLeft = chart.masterData[0].DT
          p.dtRight = chart.masterData[chart.masterData.length - 1].DT
          if (params.maintainPeriodicity) {
            p.periodicity = {}
            p.periodicity.interval = self.layout.interval
            p.periodicity.period = self.layout.periodicity
          } else if (params.periodicity) {
            p.periodicity = params.periodicity
          }
          self.setRange(p, function(err) {
            if (!params.maintainPeriodicity) {
              self.layout.setSpan = { base: params.base, multiplier: params.multiplier }
              self.changeOccurred('layout')
            }
            self.home({ whitespace: 0 })
            if (cb) cb(err)
          })
        }
        function loadAllTheData() {
          self.quoteDriver.loadAll(chart, displayTheResults)
        }

        // Case 1: push style quotes
        if (!this.quoteDriver) {
          displayTheResults()
          return
        }

        var previousDaily = CIQ.ChartEngine.isDailyInterval(this.layout.interval)

        var periodicity = params.maintainPeriodicity
          ? { periodicity: this.layout.periodicity, interval: this.layout.interval }
          : { periodicity: 1, interval: 'month' }
        periodicity = params.periodicity ? params.periodicity : periodicity
        if (periodicity.period) periodicity.periodicity = periodicity.period // setSpan,setRange unfortunately use period instead of periodicity
        this.layout.periodicity = periodicity.periodicity
        this.layout.interval = periodicity.interval
        this.layout.timeUnit = null

        var nowDaily = CIQ.ChartEngine.isDailyInterval(this.layout.interval)

        // Case 2: new symbol
        if (params.forceLoad || nowDaily != previousDaily) {
          this.quoteDriver.newChart(
            {
              noDraw: true,
              symbol: this.chart.symbol,
              symbolObject: this.chart.symbolObject,
              chart: this.chart,
              fetchMaximumBars: true,
            },
            loadAllTheData,
          )
        } else {
          // Case 3, a daily interval is set but we don't have all the data
          if (chart.moreAvailable) {
            loadAllTheData()
          } else {
            // Case 4, a daily interval is set and we have all the data
            this.createDataSet() // Just in case the interval changed from month to day or vice versa
            displayTheResults()
          }
        }
      }

      return _exports
    }

  var __js_studies_ =
    // -------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc
    // -------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
       * Namespace for functionality related to studies (aka indicators)
       * @namespace
       * @name  CIQ.Studies
       */
      CIQ.Studies = function() {}

      /**
       * Constants for when no inputs or outputs specified in studies.
       * Values can be changed but do not change keys.
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.DEFAULT_INPUTS = { Period: 14 }
      CIQ.Studies.DEFAULT_OUTPUTS = { Result: 'auto' }

      /**
       * Array of study outputs which should be considered valid fields in the study dialog "Field" dropdown".
       * This is autopopulated from {@link CIQ.Studies.displayStudies}.
       * @type {Array}
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.actualOutputs = []

      /**
       * Maps the names of studies to the panel that they are drawn on. For instance, a moving average may be drawn on an RSI panel
       * @type {Object}
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.studyPanelMap = {}
      CIQ.Studies.colorPickerDiv = null

      /**
       * A study descriptor contains all of the information necessary to instantiate a study.
       * @param {string} name       The name of the study. This should be unique to the chart. For instance if there are two RSI panels then they should be of different periods and named accordingly. Usually this is determined automatically by the library.
       * @param {string} type       The type of study, which can be used as a look up in the StudyLibrary
       * @param {string} panel      The name of the panel that contains the study
       * @param {object} inputs     Names and values of input fields
       * @param {object} outputs    Names and values (colors) of outputs
       * @param {object} parameters Additional parameters that are unique to the particular study
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.StudyDescriptor = function(name, type, panel, inputs, outputs, parameters) {
        this.name = name
        this.type = type
        this.panel = panel
        this.inputs = inputs
        this.outputs = outputs
        this.parameters = parameters // Optional parameters, i.e. zones
        this.outputMap = {} // Maps dataSet label to outputs label "RSI (14)" : "RSI", for the purpose of figuring color
        this.min = null
        this.max = null
        var libraryEntry = CIQ.Studies.studyLibrary[type]
        if (!libraryEntry) {
          libraryEntry = {}
          if (panel == 'chart' || (!panel && parameters && parameters.chartName == 'chart')) this.overlay = true
        }
        if (typeof libraryEntry.inputs == 'undefined') libraryEntry.inputs = CIQ.clone(CIQ.Studies.DEFAULT_INPUTS)
        if (typeof libraryEntry.outputs == 'undefined') libraryEntry.outputs = CIQ.clone(CIQ.Studies.DEFAULT_OUTPUTS)

        this.study = libraryEntry
        this.libraryEntry = libraryEntry // deprecated, backwards compatibility
      }

      /**
       * Automatically generates a unique name for the study instance. If a translation callback has been associated with the chart
       * object then the name of the study will be translated.
       * @param  {object} stx       A chart object
       * @param  {string} studyName Type of study
       * @param  {object} inputs    The inputs for this study instance
       * @param {string} [replaceID] If it matches then return the same id
       * @return {string}           A unique name for the study
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.generateID = function(stx, studyName, inputs, replaceID) {
        var translatedStudy = studyName
        if (stx) translatedStudy = stx.translateIf(translatedStudy)
        if (CIQ.isEmpty(inputs)) return translatedStudy
        if (CIQ.Studies.studyLibrary[studyName]) {
          if (CIQ.Studies.studyLibrary[studyName].customRemoval) return studyName //therefore only one instance can exist at a time
        }
        var id = translatedStudy + ' ('
        var first = false
        for (var field in inputs) {
          if (field == 'Shading') continue //this does not merit being in the studyname
          var val = inputs[field]
          if (val == 'field') continue // skip default, usually means "Close"
          if (!first) {
            first = true
          } else {
            id += ','
          }
          id += val
        }
        id += ')'

        //this tests if replaceID is just a warted version of id, int that case keep the old id
        if (replaceID && replaceID.indexOf(id) === 0) return replaceID

        // If the id already exists then we'll wart it by adding -N
        if (stx.layout.studies && stx.layout.studies[id]) {
          for (var i = 2; i < 50; i++) {
            var warted = id + '-' + i
            if (!stx.layout.studies[warted]) {
              id = warted
              break
            }
          }
        }
        return id
      }

      /**
       * Generates an object that can be used to create a dialog for creating or modifying a study.
       * The object will then contain arrays for inputs, outputs and parameters. Each
       * input will describe a form field that should be generated. Each output will describe a color
       * swatch that should be generated. The results of the dialog would then be passed to {@link CIQ.Studies.addStudy}
       * The libraryEntry (required), which is the object that defines the prototype for a study, may contain attributes which are used
       * to help construct the input fields of the study dialog.  See documentation of {@link CIQ.Studies.studyLibrary}.
       * @param  {CIQ.Studies.StudyDescriptor} params.name Name of study to add
       * @param  {CIQ.Studies.StudyDescriptor} params.sd A study descriptor when modifying an existing study
       * @param  {CIQ.CIQ.ChartEngine} params.stx A chart object
       * @param  {Object} [params.inputs] Existing input parameters for the study (if modifying)
       * @param  {Object} [params.outputs] Existing output parameters for the study (if modifying)
       * @param  {Object} [params.parameters] Existing additional parameters for the study (if modifying)
       * @memberOf CIQ.Studies
       * @example
       * var helper=new CIQ.Studies.DialogHelper({sd:sd,stx:stx});
       * console.log(helper.inputs);
       * console.log(helper.outputs);
       * console.log(helper.parameters);
       */
      CIQ.Studies.DialogHelper = function(params) {
        var stx = (this.stx = params.stx)
        var sd = (this.sd = params.sd)
        this.name = sd ? sd.type : params.name
        this.inputs = []
        this.outputs = []
        this.parameters = []
        var libraryEntry = (this.libraryEntry = sd ? sd.study : CIQ.Studies.studyLibrary[params.name])
        if (typeof libraryEntry.inputs == 'undefined') libraryEntry.inputs = CIQ.clone(CIQ.Studies.DEFAULT_INPUTS)
        if (typeof libraryEntry.outputs == 'undefined') libraryEntry.outputs = CIQ.clone(CIQ.Studies.DEFAULT_OUTPUTS)
        var panel = sd && stx.panels[sd.panel] ? stx.panels[sd.panel] : { chart: stx.chart }
        var chart = panel.chart

        this.title = stx.translateIf(libraryEntry.name)

        this.attributes = libraryEntry.attributes
        if (!this.attributes) this.attributes = {}

        /*
		This code loops through the acceptable inputs for the study in question. The format of the input default in the studyLibrary determines what type of input
		is required. For instance a number requires an input field. A string will produce a select box, of moving averages for instance if the string is "ma".
		If the string is "field" then a select box of acceptable fields is displayed. Likewise, an array will show up as a select box.
		 */
        for (var i in libraryEntry.inputs) {
          var input = {}
          this.inputs.push(input)
          input.name = i
          input.heading = stx.translateIf(i)
          var acceptedData = libraryEntry.inputs[i]
          if (sd && sd.inputs && typeof sd.inputs[i] != 'undefined' && sd.inputs[i] !== null) input.value = sd.inputs[i]
          else input.value = libraryEntry.inputs[i]

          input.defaultInput = libraryEntry.inputs[i]
          if (!this.attributes[i]) this.attributes[i] = CIQ.Studies.inputAttributeDefaultGenerator(input.defaultInput)

          if (acceptedData.constructor == Number) {
            input.type = 'number'
          } else if (acceptedData.constructor == String) {
            var isMA = CIQ.Studies.movingAverageHelper(stx, input.defaultInput)
            if (isMA) {
              input.type = 'select'
              input.defaultInput = isMA
              var converted = CIQ.Studies.movingAverageHelper(stx, input.value)
              if (!converted) converted = input.value
              input.value = converted
              input.options = CIQ.Studies.movingAverageHelper(stx, 'options')
            } else if (acceptedData == 'field') {
              input.type = 'select'
              input.options = {}
              nextField: for (var field in chart.dataSet[chart.dataSet.length - 1]) {
                if (
                  ['Open', 'High', 'Low', 'Close', 'Adj_Close', 'hl/2', 'hlc/3', 'hlcc/4', 'ohlc/4'].indexOf(field) ==
                  -1
                ) {
                  // field not an actual output but rather is just an intermediate value, so skip
                  if (CIQ.Studies.actualOutputs.indexOf(field) == -1) continue
                  // can't modify study basing it on its own output data, which is changing due to the same modify (infinite loop)
                  // can't modify study A basing it on another study B which uses study A data, this causes infinite loop as well
                  if (params.sd) {
                    for (var out in params.sd.outputMap) {
                      // here we make sure that the output, and not a warted version of it, is in the field before skipping it.
                      if (field.indexOf(out) != -1 && field.indexOf(out + '-') == -1) continue nextField
                    }
                  }
                }
                input.options[field] = stx.translateIf(field)
              }
              if (input.value == 'field') {
                input.value = 'Close'
              }
              if (input.defaultInput == 'field') {
                input.defaultInput = 'Close'
              }
            } else {
              input.type = 'text'
            }
          } else if (acceptedData.constructor == Boolean) {
            input.type = 'checkbox'
            if (input.value === true || input.value == 'true' || input.value == 'on') input.value = true
          } else if (acceptedData.constructor == Array) {
            input.type = 'select'
            input.options = {}
            for (var ii = 0; ii < acceptedData.length; ii++) {
              input.options[acceptedData[ii]] = stx.translateIf(acceptedData[ii])
            }
            if (input.value.constructor == Array) {
              input.value = input.value[0]
            }
            input.defaultInput = acceptedData[0]
          }
        }

        /*
		Outputs are much simpler than inputs. Outputs are simply a list of available outputs and the selected color for that output. So here
		we print a line item in the dialog for each output and attach a color picker to it. The color picker is obtained from the Context.
		 */

        for (i in libraryEntry.outputs) {
          var output = {
            name: i,
            heading: stx.translateIf(i),
          }
          this.outputs.push(output)

          output.color = output.defaultOutput = libraryEntry.outputs[i]
          if (sd && sd.outputs && sd.outputs[i]) output.color = sd.outputs[i]
          if (output.color == 'auto') output.color = stx.defaultColor
        }

        /* And now the parameters */

        if (libraryEntry.parameters && libraryEntry.parameters.template == 'studyOverZones') {
          var init = libraryEntry.parameters.init
          if (init) {
            var obj
            obj = {
              name: 'studyOverZones',
              heading: stx.translateIf('Show Zones'),
              defaultValue: init.studyOverZonesEnabled,
              value: init.studyOverZonesEnabled,
            }
            var parameters = sd ? sd.parameters : null
            if (parameters && (parameters.studyOverZonesEnabled || parameters.studyOverZonesEnabled === false)) {
              obj.value = parameters.studyOverZonesEnabled
            }
            this.parameters.push(obj)

            obj = {
              name: 'studyOverBought',
              heading: stx.translateIf('OverBought'),
              defaultValue: init.studyOverBoughtValue,
              value: init.studyOverBoughtValue,
              defaultColor: init.studyOverBoughtColor,
              color: init.studyOverBoughtColor,
            }
            if (parameters && parameters.studyOverBoughtValue) obj.value = parameters.studyOverBoughtValue
            if (parameters && parameters.studyOverBoughtColor) obj.color = parameters.studyOverBoughtColor
            if (obj.color == 'auto') obj.color = stx.defaultColor
            this.parameters.push(obj)

            obj = {
              name: 'studyOverSold',
              heading: stx.translateIf('OverSold'),
              defaultValue: init.studyOverSoldValue,
              value: init.studyOverSoldValue,
              defaultColor: init.studyOverSoldColor,
              color: init.studyOverSoldColor,
            }
            if (parameters && parameters.studyOverSoldValue) obj.value = parameters.studyOverSoldValue
            if (parameters && parameters.studyOverSoldColor) obj.color = parameters.studyOverSoldColor
            if (obj.color == 'auto') obj.color = stx.defaultColor
            this.parameters.push(obj)

            if (!this.attributes.studyOverBoughtValue) this.attributes.studyOverBoughtValue = {}
            if (!this.attributes.studyOverSoldValue) this.attributes.studyOverSoldValue = {}
          }
        }
      }

      /**
       * Update (or add) the study attached to the DialogHelper.
       * @param  {Object} updates Should contain updates
       * @example
       * var helper=new CIQ.Studies.DialogHelper({sd:sd, stx:stx});
       * helper.updateStudy({inputs:{Period:60}});
       */
      CIQ.Studies.DialogHelper.prototype.updateStudy = function(updates) {
        var newParams = {}
        var sd = this.sd
        var libraryEntry = this.libraryEntry
        if (!libraryEntry) libraryEntry = {}
        if (!sd) sd = libraryEntry
        newParams.inputs = CIQ.shallowClone(sd.inputs)
        newParams.outputs = CIQ.shallowClone(sd.outputs)
        newParams.parameters = CIQ.shallowClone(sd.parameters)
        CIQ.extend(newParams, updates)
        if (!newParams.parameters) newParams.parameters = {}
        if (newParams.inputs && newParams.inputs.id) {
          newParams.parameters.replaceID = newParams.inputs.id
          delete newParams.inputs.id
          delete newParams.inputs.display
        }
        this.sd = CIQ.Studies.addStudy(
          this.stx,
          this.name,
          newParams.inputs,
          newParams.outputs,
          newParams.parameters,
          null,
          sd.study,
        )
      }

      /**
       * Prepares a study descriptor for use by assigning default calculation or display functions if required and configuring the outputMap
       * which is used internally to determine the color for each output. This method also places any overlays into the stx.overlays array for
       * future reference. Finally it is responsible for rebuilding any derived studies when replacing an underlying study.
       * @private
       * @param  {object} stx   A chart object
       * @param  {object} study The study library entry
       * @param  {object} sd    The study descriptor for this instance
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.prepareStudy = function(stx, study, sd, parameters) {
        if (typeof study.calculateFN == 'undefined') study.useRawValues = true
        if (typeof study.seriesFN == 'undefined') study.seriesFN = CIQ.Studies.displaySeriesAsLine

        if (parameters && parameters.replaceID) {
          // Remove any overlays that relied on the old panel ID name, for instance a moving average on RSI(14) is no
          CIQ.Studies.rejiggerDerivedStudies(stx, parameters.replaceID, sd.inputs.id, sd.panel)
          delete parameters.replaceID
        }

        // Unless overridden by the calculation function we assume the convention that the dataSet entries
        // will begin with the output name such as "RSI rsi (14)"
        if (CIQ.isEmpty(sd.outputMap)) {
          for (var i in sd.outputs) {
            if (study.useRawValues) {
              sd.outputMap[i] = i
            } else {
              sd.outputMap[i + ' ' + sd.name] = i
            }
          }
        }
        if (sd.overlay) {
          stx.overlays[sd.name] = sd
        }
        if (sd.underlay) {
          stx.overlays[sd.name] = sd
        }
        if (study.feed) {
          stx.attachTagAlongQuoteFeed(study.feed)
        } else {
          if (sd.chart.dataSet) stx.createDataSet()
          stx.draw()
        }
      }

      /**
       * Fixes any derived studies that were based off of a study that has just changed.
       * For instance a moving average on another overlay, or a moving average on an RSI.
       * The panel name needs to change and the input "Field".
       * @param  {CIQ.ChartEngine} stx       The stx instance
       * @param  {String} replaceID The old ID for the underlying study e.g. RSI (14)
       * @param  {String} newID     The new ID for the underlying study
       */
      CIQ.Studies.rejiggerDerivedStudies = function(stx, replaceID, newID, panelID) {
        var studies = stx.layout.studies,
          overlays = stx.overlays
        for (var s in studies) {
          var st = studies[s]
          var inputs = st.inputs
          var derivedID = inputs.id
          if (inputs.id.indexOf(replaceID) != -1 && inputs.id.indexOf(replaceID + '-') == -1) {
            //check if exact field (and not warted one) exists in input
            var newDerivedID = inputs.id.replace(replaceID, newID) // The new ID, naively accomplished with string replace
            if (inputs.Field && inputs.Field.indexOf(replaceID) != -1) {
              // Yuck, we should implement actual parent
              var oldName = st.name
              inputs.Field = inputs.Field.replace(replaceID, newID) // Adjust the field name, tricky because the field name is "output (id)" and we don't really know the outputs
              inputs.id = inputs.id.replace(replaceID, newID)
              inputs.display = inputs.display.replace(replaceID, newID)
              st.name = st.name.replace(replaceID, newID)
              st.outputMap = {}
              for (var i in st.outputs) {
                if (st.study.useRawValues) {
                  st.outputMap[i] = i
                } else {
                  st.outputMap[i + ' ' + st.name] = i
                }
              }

              if (overlays[oldName]) {
                delete overlays[oldName]
                overlays[st.name] = st
              }
              if (st.panel != 'chart') st.panel = panelID
              delete studies[derivedID] // Take this study out of the study
              studies[newDerivedID] = st // Add it back in, now it will be at the end of the object, preserving the ordering
              CIQ.Studies.rejiggerDerivedStudies(stx, derivedID, newDerivedID, panelID) // Recursively check for underlying of underlying
            }
          }
        }
      }

      /**
       * Replaces an existing study with new inputs, outputs and parameters. When using this method
       * a study's position in the stack will remain the same. Derived (child) studies will shift to
       * use the new study as well
       * @param {object} stx        The chart object
       * @param {String} id 		The id of the current study. If set, then the old study will be replaced
       * @param {string} type       The name of the study (out of the studyLibrary)
       * @param {object} [inputs]     Inputs for the study instance. Default is those defined in the studyLibrary.
       * @param {object} [outputs]    Outputs for the study instance. Default is those defined in the studyLibrary.
       * @param {object} [parameters] additional custom parameters for this study if supported or required by that study
       * @param {string} [panelName] Optionally specify the panel. If not specified then an attempt will be made to locate a panel based on the input id or otherwise created if required.
       * @param {object} [study] Optionally supply a study definition, overriding what may be found in the study library
       * @return {object} A study descriptor which can be used to remove or modify the study.
       * @since TBD added study argument
       */
      CIQ.Studies.replaceStudy = function(stx, id, type, inputs, outputs, parameters, panelName, study) {
        if (!parameters) parameters = {}
        parameters.replaceID = id
        delete inputs.id
        delete inputs.display
        return CIQ.Studies.addStudy(stx, type, inputs, outputs, parameters, panelName, study)
      }

      /**
       * Adds a study to the chart. A layout change event is triggered when this occurs.
       * <P>Example: <iframe width="800" height="500" scrolling="no" seamless="seamless" align="top" style="float:top" src="http://jsfiddle.net/chartiq/5y4a0kry/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="1"></iframe>
       *
       * Optionally you can assign the edit callback to a function that can handle initialization of a dialog box for editing studies.
       * If the callback is not assigned a function, the edit study buttons/functionality will not appear.
       * The 'Study Edit' feature is standard functionality in the advanced package.
       *
       * Prior to version 2015-07-01, all edit functionality was handled by `stx.editCallback` and was limited to panel studies.
       * Starting on version 2015-07-01, edit functionality is handled by `stxx.callbacks.studyPanelEdit` and `stxx.callbacks.studyOverlayEdit`; and it is available on both panel studies and overly studies.
       * See Examples for exact function parameters and return value requirements.
       * Please note that these callbacks must be set **before** you call importLayout. Otherwise your imported studies will not have an edit capability.
       *
       * @param {object} stx        The chart object
       * @param {string} type       The name of the study (object key on the {@link CIQ.Studies.studyLibrary})
       * @param {object} [inputs]     Inputs for the study instance. Default is those defined in the studyLibrary. Note that if you specify this objct it will not be combined with the library defaults. So even if you only want to define or override one single element (`display`, for example); you them must also send all of the additional inputs required to render the study.
       * @param {String} [inputs.id] The id of the current study. If set, then the old study will be replaced
       * @param {String} [inputs.display] The display name of the current study. If not set, a name generated by {@link CIQ.Studies.prettyDisplay} will be used. Note that if the study descriptor defines a `display` name, the study descriptor name will allays override this parameter.
       * @param {object} [outputs]    Outputs for the study instance. Default is those defined in the studyLibrary. Note that if you specify this objct it will not be combined with the library defaults. So even if you only want to override one single element; you them must also send all of the additional outputs required to render the study.
       * @param {object} [parameters] Additional custom parameters for this study if supported or required by that study
       * @param {string} [panelName] Optionally specify the panel. The relationship between studies and their panels is kept in {@link CIQ.Studies.studyPanelMap}. If not specified then an attempt will be made to locate a panel based on the input id or otherwise created if required.
       * @param {object} [study] Optionally supply a study definition, overriding what may be found in the study library
       * @return {object} A study descriptor which can be used to remove or modify the study.
       * @since TBD added study argument
       * @memberOf CIQ.Studies
       * @example
       * CIQ.Studies.addStudy(stxx, "vol undr", {}, {"Up Volume":"#8cc176","Down Volume":"#b82c0c"});
       * @example
       * // this is an example of  the expected stxx.editCallback function for version prior to version 2015-07-01
       * stxx.editCallback=function(stx, sd){
       *	// your code here
       *	return $$("studyDialog"); // This is a reference to the actual HTML dialog container that can be filled by studyDialog.
       * };
       * @example
       * var params={stx:stx,sd:sd,inputs:inputs,outputs:outputs, parameters:parameters};
       * stxx.callbacks.studyPanelEdit=function(params){
       *		// your code here
       * };
       * @example
       * var params={stx:stx,sd:sd,inputs:inputs,outputs:outputs, parameters:parameters};
       * stxx.callbacks.studyOverlayEdit=function(params){
       *		// your code here
       * };
       */
      CIQ.Studies.addStudy = function(stx, type, inputs, outputs, parameters, panelName, study) {
        var libraryEntry = study ? study : CIQ.Studies.studyLibrary[type]
        if (!parameters) parameters = {}
        if (libraryEntry && libraryEntry.parameters && libraryEntry.parameters.init) {
          for (var param in libraryEntry.parameters.init) {
            if (typeof parameters[param] == 'undefined' || parameters[param] === null) {
              parameters[param] = libraryEntry.parameters.init[param]
            }
          }
        }
        if (!parameters.chartName) parameters.chartName = 'chart'
        if (!inputs && libraryEntry && libraryEntry.inputs) {
          inputs = CIQ.shallowClone(libraryEntry.inputs)
          for (var i in inputs) {
            if (inputs[i] instanceof Array) inputs[i] = inputs[i][0]
          }
        }
        if (!inputs) inputs = CIQ.clone(CIQ.Studies.DEFAULT_INPUTS)
        if (!outputs && libraryEntry && libraryEntry.outputs) outputs = CIQ.shallowClone(libraryEntry.outputs)
        if (!outputs) outputs = CIQ.clone(CIQ.Studies.DEFAULT_OUTPUTS)

        if (inputs.Period < 1) inputs.Period = 1 // periods can't be less than one candle. This is a general safety check. Each study should have a check or add input validation.

        if (!inputs.id) inputs.id = CIQ.Studies.generateID(stx, type, inputs, parameters.replaceID)
        var sd = null
        if (libraryEntry && libraryEntry.initializeFN) {
          sd = libraryEntry.initializeFN(stx, type, inputs, outputs, parameters, panelName, study)
        } else {
          sd = CIQ.Studies.initializeFN(stx, type, inputs, outputs, parameters, panelName, study)
        }
        if (!sd) {
          console.log('CIQ.Studies.addStudy: initializeFN() returned null for ' + type)
          return
        }
        study = sd.study
        sd.chart = stx.charts[parameters.chartName]
        if (!stx.layout.studies) stx.layout.studies = {}
        // removed following line because it causes modified studies to be re-added out of sequence causing issues if there are dependencies
        // so instead of deleting and adding to the end of the array, we just replace the data with the new sd
        //delete stx.layout.studies[sd.inputs.id]; // for good measure, in case of orphaned studies
        stx.layout.studies[sd.inputs.id] = sd
        sd.type = type
        sd.permanent = study.permanent
        sd.customLegend = study.customLegend
        var panel = stx.panels[sd.panel]
        CIQ.Studies.prepareStudy(stx, study, sd, parameters)
        stx.changeOccurred('layout')
        var hasEditCallback = false
        var isPanelStudy = !(sd.overlay || sd.underlay)

        if (isPanelStudy && study.horizontalCrosshairFieldFN) {
          panel.horizontalCrosshairField = study.horizontalCrosshairFieldFN(stx, sd)
        }

        if (stx.editCallback) hasEditCallback = true
        if (stx.callbacks.studyOverlayEdit && !isPanelStudy) hasEditCallback = true
        if (stx.callbacks.studyPanelEdit && isPanelStudy) hasEditCallback = true

        if (hasEditCallback) {
          parameters.editMode = true
          var hasInput = false
          for (var input in sd.inputs) {
            if (input == 'id') continue
            if (input == 'display') continue
            hasInput = true
            break
          }
          if (!hasInput) {
            for (var output in sd.outputs) {
              hasInput = true
              break
            }
          }
          if (hasInput) {
            var editFunction
            if (typeof sd.study.edit != 'undefined') {
              if (sd.study.edit) {
                editFunction = (function(stx, sd, inputs, outputs) {
                  return function() {
                    sd.study.edit(sd, { stx: stx, inputs: inputs, outputs: outputs, parameters: parameters })
                  }
                })(stx, sd, inputs, outputs, parameters)
                stx.setPanelEdit(panel, editFunction)
                sd.editFunction = editFunction
              }
            } else if (!isPanelStudy && stx.callbacks.studyOverlayEdit) {
              editFunction = (function(stx, sd, inputs, outputs, parameters) {
                return function(forceEdit) {
                  stx.dispatch('studyOverlayEdit', {
                    stx: stx,
                    sd: sd,
                    inputs: inputs,
                    outputs: outputs,
                    parameters: parameters,
                    forceEdit: forceEdit,
                  })
                }
              })(stx, sd, inputs, outputs, parameters)
              sd.editFunction = editFunction
            } else {
              if (stx.editCallback) {
                // deprecated legacy support
                editFunction = (function(stx, sd, inputs, outputs) {
                  return function() {
                    var dialogDiv = stx.editCallback(stx, sd)
                    CIQ.Studies.studyDialog(stx, type, dialogDiv, {
                      inputs: inputs,
                      outputs: outputs,
                      parameters: parameters,
                    })
                  }
                })(stx, sd, inputs, outputs, parameters)
                if (panel.name != 'chart') {
                  stx.setPanelEdit(panel, editFunction)
                }
              } else {
                editFunction = (function(stx, sd, inputs, outputs, parameters) {
                  return function() {
                    stx.dispatch('studyPanelEdit', {
                      stx: stx,
                      sd: sd,
                      inputs: inputs,
                      outputs: outputs,
                      parameters: parameters,
                    })
                  }
                })(stx, sd, inputs, outputs, parameters)
                if (panel.name != 'chart') {
                  stx.setPanelEdit(panel, editFunction)
                  sd.editFunction = editFunction
                }
              }
            }
          }
        }
        return sd
      }

      /** @deprecated **/
      CIQ.Studies.quickAddStudy = CIQ.Studies.addStudy

      /**
       * Removes a study from the chart (and panel if applicable)
       * @param  {object} stx A chart object
       * @param  {object} sd  A study descriptor returned from {@link CIQ.Studies.quickAddStudy} or {@link CIQ.Studies.go}
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.removeStudy = function(stx, sd) {
        if (sd.overlay || sd.underlay) {
          stx.removeOverlay(sd.name)
          stx.draw()
        } else {
          var panel = stx.panels[sd.panel]
          if (panel) stx.panelClose(panel)
        }
      }

      /**
       * <span class="animation">Animation Loop</span>
       * This method displays all of the studies for a chart. It is called from within the chart draw() loop.
       * @param  {CIQ.ChartEngine} stx The charting object
       * @param {CIQ.ChartEngine.Chart} chart Which chart to display studies for
       * @param {Boolean} [underlays=false] If set to true then underlays only will be displayed, otherwise underlays will be skipped
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.displayStudies = function(stx, chart, underlays) {
        var s = stx.layout.studies
        if (!s) return
        if (underlays) CIQ.Studies.actualOutputs = []
        var permanentPanel = {} // local map of permanent panels
        permanentPanel[chart.name] = true // no X on chart panel
        for (var n in s) {
          var sd = s[n]
          var study = sd.study
          if (!study) continue
          if (underlays) {
            if (!sd.underlay && !study.underlay) continue
          } else {
            if (sd.underlay || study.underlay) continue
          }
          var panel = stx.panels[sd.panel]
          if (panel) {
            if (panel.chart != chart) continue
            if (sd.study.range != 'bypass') panel.min = null // force determineminmax to calculate values, except if we are bypassing the automatic range setting
            //TODO: get rid of orphaned overlay study?
            if (panel.hidden) continue
            if (!permanentPanel[panel.name]) {
              var permanent = sd.permanent
              if (panel.closeX) {
                panel.closeX.style.display = permanent ? 'none' : ''
              } else {
                panel.close.style.display = permanent ? 'none' : ''
              }
              permanentPanel[panel.name] = permanent
            }
          } else {
            //orphaned panel study, kill it
            delete s[n]
            continue
          }

          var quotes = sd.chart.dataSegment // Find the appropriate data to drive this study

          for (var i in sd.outputMap) {
            CIQ.Studies.actualOutputs.push(i)
          }

          if (typeof study.seriesFN == 'undefined') {
            // null means don't display, undefined means display by default as a series
            CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
          } else {
            if (study.seriesFN) {
              if (panel) study.seriesFN(stx, sd, quotes)
            }
          }
        }
      }

      /**
       * Convenience function for determining the min and max for a given data point
       * @param {object} stx The chart
       * @param {string} name The field to evaluate
       * @param {array} quotes The array of quotes to evaluate (typically dataSet, scrubbed or dataSegment)
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateMinMaxForDataPoint = function(stx, name, quotes) {
        var min = Number.MAX_VALUE
        var max = Number.MAX_VALUE * -1
        for (var i = 0; i < quotes.length; i++) {
          var m = quotes[i][name]
          if (m === null || typeof m == 'undefined') continue
          if (isNaN(m)) continue
          min = Math.min(m, min)
          max = Math.max(m, max)
        }
        return { min: min, max: max }
      }

      /**
       * Method to determine the minimum and maximum points in a study panel. The studyLibrary is checked for the type of range. If the range
       * is dynamic then the output values for the study are checked for minimum and maximum values. If a histogram is being printed then
       * the values for the histogram (represented by sd.name+"_hist") are also checked. This method does not draw the yAxis but it does compute
       * the high, low and shadow that the yAxis utilizes when drawn.
       * @param  {object} stx    The chart object
       * @param  {object} sd     The study descriptor
       * @param  {array} quotes The set of quotes to evaluate
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.determineMinMax = function(stx, sd, quotes) {
        var panel = stx.panels[sd.panel]
        if (!panel) return
        if (!panel.min && panel.min !== 0) {
          var study = sd.study
          if (!sd.min && sd.min !== 0) {
            if (study.range == '0 to 100') {
              panel.min = 0
              panel.max = 100
            } else if (study.range == '-1 to 1') {
              panel.min = -1
              panel.max = 1
            } else if (study.range != 'bypass') {
              panel.min = Number.MAX_VALUE
              panel.max = Number.MAX_VALUE * -1
              for (var i = 0; i < quotes.length; i++) {
                var quote = quotes[i]
                if (!quote) continue

                var m
                for (var j in sd.outputMap) {
                  m = quote[j]
                  if (m === null || typeof m == 'undefined') continue
                  if (isNaN(m)) continue
                  panel.min = Math.min(m, panel.min)
                  panel.max = Math.max(m, panel.max)
                }

                for (var h = 0; h <= 5; h++) {
                  m = quote[sd.name + '_hist' + (h ? h : '')]
                  if (m === null || typeof m == 'undefined') continue
                  if (isNaN(m)) continue
                  panel.min = Math.min(m, panel.min)
                  panel.max = Math.max(m, panel.max)
                }
              }
            }
            if (study.range == '0 to max') {
              panel.min = Math.min(0, panel.min)
            }
          } else {
            panel.min = sd.min
            panel.max = sd.max
          }
        }
        // use the panel high/low values if they were set previously, like by a renderer
        if ((panel.highValue || panel.highValue === 0) && panel.highValue > panel.max) panel.max = panel.highValue
        if ((panel.lowValue || panel.lowValue === 0) && panel.lowValue < panel.min) panel.min = panel.lowValue
        // If a developer hard codes the max or min for yAxis then that supercedes everything
        var yAxis = panel.yAxis
        if (yAxis.max || yAxis.max === 0) panel.max = yAxis.max
        if (yAxis.min || yAxis.min === 0) panel.min = yAxis.min
        if (panel.max == panel.min) {
          // All the same values, force a straight line
          panel.max = panel.max * 2
          panel.min = 0
        }
        panel.shadow = panel.max - panel.min
        if (panel.max > 0 && panel.min < 0) panel.shadow = panel.max + panel.min * -1
        yAxis.high = panel.max
        yAxis.low = panel.min
        yAxis.shadow = yAxis.high - yAxis.low
      }

      /**
       * Creates the yAxis for a study panel. Utilizes CIQ.ChartEngine.createYAxis internally. This method is not re-entrant. panel.axisDrawn will be set
       * to true in order to prevent the yAxis from being drawn multiple times if there are multiple studies on a panel. The first study on the panel
       * will therefore determine the minimum and maximum bounds of the panel. If the library entry defines a yAxisFN function then it will be used
       * to render the yaxis instead of CIQ.ChartEngine.createYAxis. If zones are enabled then CIQ.ChartEngine.createYAxis again will not be the renderer.
       * @param  {object} stx    The chart object
       * @param  {object} sd     The study descriptor
       * @param  {array} quotes The set of quotes (representing dataSegment)
       * @param  {object} panel  A reference to the panel
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.createYAxis = function(stx, sd, quotes, panel) {
        if (!panel.axisDrawn) {
          panel.height = panel.bottom - panel.top
          CIQ.Studies.determineMinMax(stx, sd, quotes)
          // panel.yAxis.displayGridLines=false;	// Moved to initializeFN
          var parameters
          var study = sd.study
          if (study.yaxis || study.yAxisFN) {
            parameters = { noDraw: true }
            stx.createYAxis(panel, parameters)
            stx.drawYAxis(panel, parameters)
            if (study.yaxis) study.yaxis(stx, sd) // backward compatibility
            if (study.yAxisFN) study.yAxisFN(stx, sd) // Use yAxisFN for forward compatibility
          } else {
            // If zones are enabled then we don't want to draw the yAxis
            parameters = {
              noDraw: sd.parameters && sd.parameters.studyOverZonesEnabled,
            }
            if (study.range == '0 to 100') parameters.range = [0, 100]
            else if (study.range == '-1 to 1') parameters.range = [-1, 1]
            if (study.yAxis && study.yAxis.ground) parameters.ground = true

            stx.createYAxis(panel, parameters)
            stx.drawYAxis(panel, parameters)
          }
          if (study.centerline) {
            CIQ.Studies.drawHorizontal(stx, sd, quotes, study.centerline)
          } else if (panel.min < 0 && panel.max > 0) {
            CIQ.Studies.drawHorizontal(stx, sd, quotes, 0)
          }
          panel.axisDrawn = true
        }
      }

      /**
       * Displays a single or group of series as lines in the study panel.
       * One series per output field declared in the study library will be displayed.
       * It expects the 'quotes' array to have data fields for each series with keys in the outputMap format: 'output name from study library'+ " " + sd.name.
       * Y-axis will be rendered if studyOverZones are not set and panel is not “hidden”.
       * studyOverZones will be displayed and Peaks & Valleys will be filled if corresponding thresholds are set in the study library as follows:
       *
       * <code>init:{studyOverZonesEnabled:true, studyOverBoughtValue:70, studyOverBoughtColor:"auto", studyOverSoldValue:30, studyOverSoldColor:"auto"}</code>
       *
       * For most custom studies this function will do the work for you.
       * @param  {object} stx    The chart object
       * @param  {object} sd     The study descriptor
       * @param  {array} quotes The set of quotes (dataSegment)
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.displaySeriesAsLine = function(stx, sd, quotes) {
        if (!quotes.length) return
        var panel = stx.panels[sd.panel]
        if (!panel) return
        if (panel.hidden) return
        if (panel.name != sd.chart.name && !sd.underlay) {
          CIQ.Studies.createYAxis(stx, sd, quotes, panel)
        }
        CIQ.Studies.drawZones(stx, sd, quotes)

        for (var i in sd.outputMap) {
          CIQ.Studies.displayIndividualSeriesAsLine(stx, sd, panel, i, quotes)
        }
      }

      /**
	 * Displays a single or group of series as histogram in the study panel.
	 * It expects the 'quotes' array to have data fields for each series with keys in the outputMap format: 'output name from study library'+ " " + sd.name.
	 *
	 * It takes into account the following study input fields (see {@link CIQ.ChartEngine#drawHistogram} for details ) :
	 * - sd.inputs.HistogramType ("overlaid", "clustered", "stacked") - Default "overlaid"
	 * - sd.inputs.HeightPercentage - Default ".25"
	 * - sd.inputs.WidthFactor - Default ".5"
	 * @param  {object} stx    The chart object
	 * @param  {object} sd     The study descriptor
	 * @param  {array} quotes The set of quotes (dataSegment)
	 * @memberOf CIQ.Studies
	 * @example
	 *
		// this adds a study panel that will display the High and Low values from the masterData as a stacked histogram study
		CIQ.Studies.studyLibrary["Plot High Low"]={
		 	"seriesFN": CIQ.Studies.displaySeriesAsHistogram,
		 	inputs:{"HistogramType":"stacked"},
		    outputs:{"High":"blue","Low":"red"}
		};
		CIQ.Studies.quickAddStudy(stxx, "Plot High Low");
	 */
      CIQ.Studies.displaySeriesAsHistogram = function(stx, sd, quotes) {
        if (!quotes.length) return
        var panel = stx.panels[sd.panel]
        if (!panel) return
        if (panel.hidden) return

        var seriesParam = []
        for (var i in sd.outputMap) {
          var output = sd.outputs[sd.outputMap[i]]
          var series = {
            field: i,
            fill_color_up: output,
            border_color_up: output,
            fill_color_down: output,
            border_color_down: output,
          }
          seriesParam.push(series)
        }

        var inputs = sd.inputs
        var params = {
          name: sd.name,
          type: inputs.HistogramType ? inputs.HistogramType : 'overlaid',
          panel: sd.panel,
          heightPercentage: inputs.HeightPercentage ? inputs.HeightPercentage : 0.25,
          widthFactor: inputs.WidthFactor ? inputs.WidthFactor : 0.5,
        }

        if (!sd.study || !sd.study.parameters || !sd.study.parameters.excludeYAxis) {
          CIQ.Studies.createYAxis(stx, sd, sd.chart.dataSegment, stx.panels[sd.panel])
        }
        stx.drawHistogram(params, seriesParam)
      }

      /**
       * Displays multiple data-points as series on a panel. This is the default display function for an indicator and will
       * work for 90% of custom indicators.
       * It also inserts the study results into the studyPanelMap to be selected as the basis for another study.
       * @param  {object} stx    The chart object
       * @param  {object} sd     The study descriptor
       * @param  {object} panel  A reference to the study panel
       * @param  {string} name   The name of this study instance (should match field from 'quotes' needed to render this line)
       * @param  {array} quotes The array of quotes (dataSegment)
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.displayIndividualSeriesAsLine = function(stx, sd, panel, name, quotes) {
        if (!panel.height) panel.height = panel.bottom - panel.top
        CIQ.Studies.studyPanelMap[name] = sd //TODO, this will need to take into consideration ...?
        var context = stx.chart.context
        context.lineWidth = 1
        if (sd.highlight) context.lineWidth = 3
        var color = sd.outputs[sd.outputMap[name]]
        if (color == 'auto') color = stx.defaultColor // This is calculated and set by the kernel before draw operation.
        context.strokeStyle = color
        var labelDecimalPlaces = 0
        var study = sd.study,
          yAxis = panel.yAxis
        if (yAxis.shadow < 1000) labelDecimalPlaces = 2
        if (yAxis.shadow < 5) labelDecimalPlaces = 4
        if (sd.overlay || sd.underlay) labelDecimalPlaces = null // will end up using the same as the chart itself
        if (yAxis.decimalPlaces || yAxis.decimalPlaces === 0) labelDecimalPlaces = yAxis.decimalPlaces
        var label = sd.parameters.label

        // backwards compatibility
        var libParams = study.parameters
        if (libParams) {
          if (libParams.noLabels) label = false
          if (!sd.noSlopes && sd.noSlopes !== false) sd.noSlopes = libParams.noSlopes
        }
        var showLabel = label || (stx.preferences.labels && label !== false)

        stx.plotLineChart(panel, quotes, name, {
          skipTransform: stx.panels[sd.panel].name != sd.chart.name,
          label: showLabel,
          labelDecimalPlaces: labelDecimalPlaces,
          noSlopes: sd.noSlopes,
        })

        if (study.appendDisplaySeriesAsLine) study.appendDisplaySeriesAsLine(stx, sd, quotes, name, panel)
        context.lineWidth = 1
      }

      /**
       * Draws a horizontal line on the study.
       * @param  {object} stx    The chart object
       * @param  {object} sd     The study descriptor
       * @param  {array} quotes The array of quotes (unused)
       * @param  {number} price  The price (value) to draw the horizontal line
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.drawHorizontal = function(stx, sd, quotes, price) {
        var panel = stx.panels[sd.panel]
        if (!panel) return

        var y = stx.pixelFromPrice(price, panel)
        if (y > panel.top && y < panel.yAxis.bottom)
          stx.plotLine(panel.left, panel.right, y, y, '#DDDDDD', 'segment', stx.chart.context, false, {})
      }

      /**
       * A sample of a custom display function. This function creates the yAxis, draws **a single** histogram and then plots the series.
       * Note that to differentiate between a regular series and the histogram series there is a convention to use sd.name+"_hist" for histogram values on a study</b> See {@link CIQ.Studies.createHistogram} for details</p>
       * @param  {object} stx      The chart object
       * @param  {object} sd       The study descriptor
       * @param  {array} quotes   The quotes (dataSegment)
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.displayHistogramWithSeries = function(stx, sd, quotes) {
        var panel = stx.panels[sd.panel]
        CIQ.Studies.createYAxis(stx, sd, quotes, panel)
        CIQ.Studies.createHistogram(stx, sd, quotes, false, 0.4)
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
      }

      /**
       * Plots over/under zones for indicators that support them, and when the user selects them. This method will draw its own
       * yAxis which will not have a scale, but merely the over under points.
       * Shading will be performed between the zone lines and the study plot.
       * @param  {object} stx      The chart object
       * @param  {object} sd       The study descriptor
       * @param  {array} quotes   The quotes (dataSegment)
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.drawZones = function(stx, sd, quotes) {
        if (!sd.parameters || !sd.parameters.studyOverZonesEnabled) return

        var low = parseFloat(sd.parameters.studyOverSoldValue)
        var high = parseFloat(sd.parameters.studyOverBoughtValue)
        var lowColor = sd.parameters.studyOverSoldColor
        var highColor = sd.parameters.studyOverBoughtColor
        var output = sd.zoneOutput
        if (!output) output = 'Result'
        var zoneColor = sd.outputs[output]
        if (!zoneColor || zoneColor == 'auto' || CIQ.isTransparent(zoneColor)) zoneColor = stx.defaultColor
        if (!lowColor) lowColor = zoneColor
        if (!lowColor || lowColor == 'auto' || CIQ.isTransparent(lowColor)) lowColor = stx.defaultColor
        if (!highColor) highColor = zoneColor
        if (!highColor || highColor == 'auto' || CIQ.isTransparent(highColor)) highColor = stx.defaultColor
        var panel = stx.panels[sd.panel]
        var drawBorders = panel.yAxis.displayBorder
        if (stx.axisBorders === false) drawBorders = false
        if (stx.axisBorders === true) drawBorders = true
        var borderEdge = Math.round(panel.right) + 0.5
        var w = drawBorders ? borderEdge - 0.5 : panel.right
        var tickWidth = drawBorders ? 3 : 0 // pixel width of tick off edge of border

        var ctx = stx.chart.context
        var color = ctx.fillStyle

        stx.chart.context.globalAlpha = 0.2

        stx.startClip(panel.name, true)
        var yAxis = panel.yAxis
        var yAxisPlotter = (yAxis.yAxisPlotter = new CIQ.Plotter())
        yAxisPlotter.newSeries('border', 'stroke', stx.canvasStyle('stx_grid_border'))

        ctx.beginPath()
        var ph = Math.round(stx.pixelFromPrice(high, panel)) + 0.5
        ctx.strokeStyle = highColor
        ctx.moveTo(panel.left, ph)
        ctx.lineTo(w, ph)
        ctx.stroke()
        ctx.closePath()

        stx.chart.context.beginPath()
        var pl = Math.round(stx.pixelFromPrice(low, panel)) + 0.5
        ctx.strokeStyle = lowColor
        ctx.moveTo(panel.left, pl)
        ctx.lineTo(w, pl)
        ctx.stroke()
        ctx.closePath()

        if (drawBorders) {
          yAxisPlotter.moveTo('border', borderEdge - 0.5, ph)
          yAxisPlotter.lineTo('border', borderEdge + tickWidth, ph)
          yAxisPlotter.moveTo('border', borderEdge - 0.5, pl)
          yAxisPlotter.lineTo('border', borderEdge + tickWidth, pl)
        }

        ctx.fillStyle = color

        CIQ.preparePeakValleyFill(stx, quotes, {
          panelName: sd.panel,
          band: output + ' ' + sd.name,
          threshold: high,
          direction: 1,
          color: highColor,
        })
        CIQ.preparePeakValleyFill(stx, quotes, {
          panelName: sd.panel,
          band: output + ' ' + sd.name,
          threshold: low,
          direction: -1,
          color: lowColor,
        })

        ctx.globalAlpha = 1

        if (!sd.study || !sd.study.yaxis) {
          if (drawBorders) {
            var b = Math.round(yAxis.bottom) + 0.5
            yAxisPlotter.moveTo('border', borderEdge, yAxis.top)
            yAxisPlotter.lineTo('border', borderEdge, b)
            yAxisPlotter.draw(stx.chart.context, 'border')
          }

          // Draw the y-axis with high/low
          stx.canvasFont('stx_yaxis')
          stx.canvasColor('stx_yaxis')
          var ypx = panel.height / panel.shadow
          var textX = yAxis.left + tickWidth + 3
          ctx.fillText(high, textX, ph)
          ctx.fillText(low, textX, pl)
          panel.axisDrawn = true
        }
        stx.endClip()
        ctx.globalAlpha = 1
      }

      /**
       * Draws a histogram on the study.
       * Initial bar color is defined in stx-chart.css under '.stx_histogram'. If using the default UI, refer to stx-standard.css under '.Light .stx_histogram' and '.Dark .stx_histogram' style sections.
       * If sd.outputs["Decreasing Bar"] and sd.outputs["Increasing Bar"] are present, their corresponding colors will be used instead.
       * <p><b>Note the convention to use sd.name+"_hist" for histogram values on a study</b></p>
       *
       * @param  {object} stx      The chart object
       * @param  {object} sd       The study descriptor
       * @param  {array} quotes   The quotes (dataSegment)
       * @param  {boolean} centered If true then the histogram will be physically centered on the yAxis, otherwise it will be centered at the zero value on the yAxis
       * @param  {number} [opacity=1] Optionally set the opacity
       * @memberOf CIQ.Studies
       */

      CIQ.Studies.createHistogram = function(stx, sd, quotes, centered, opacity) {
        var panel = stx.panels[sd.panel]
        stx.startClip(panel.name)

        var myWidth = stx.layout.candleWidth - 2
        if (myWidth < 2) myWidth = 1

        var y = stx.pixelFromPrice(0, panel)
        if (panel.min > 0) y = stx.pixelFromPrice(panel.min, panel) // Don't draw below the bottom of the chart. If zero isn't on the chart then make it behave like a bar graph.
        if (centered) {
          y = Math.floor(panel.top + panel.height / 2)
        }

        var context = stx.chart.context
        var field = sd.name + '_hist'
        if (!sd.outputs['Decreasing Bar'] && !sd.outputs['Negative Bar']) stx.canvasColor('stx_histogram')
        else context.globalAlpha = opacity ? opacity : 1
        var y0, y1
        var outputs = sd.outputs
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          if (!quote) continue
          if (quote.candleWidth) myWidth = Math.floor(Math.max(1, quote.candleWidth - 2))
          var x0 = Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2)
          var x1 = Math.floor(myWidth)
          y0 = y1
          y1 = stx.pixelFromPrice(quote[field], panel) - y
          if (outputs['Decreasing Bar'] && y1 > y0) context.fillStyle = outputs['Decreasing Bar']
          else if (outputs['Increasing Bar'] && y1 < y0) context.fillStyle = outputs['Increasing Bar']
          else if (outputs['Positive Bar'] && y1 < 0) context.fillStyle = outputs['Positive Bar']
          else if (outputs['Negative Bar'] && y1 > 0) context.fillStyle = outputs['Negative Bar']
          context.fillRect(x0, y, x1, Math.floor(y1))
        }

        context.globalAlpha = 1
        stx.endClip()
      }

      /**
       * Convenience function for creating a volume style chart that supports multiple colors
       * of volume bars. If borderMap (border colors) is passed in then the chart will display in a format where bars are flush against
       * one another so that there is no white space between bars. If however a borderMap is not specified then white space will be left
       * between the bars.
       * @param  {CIQ.ChartEngine} stx      The chart object
       * @param  {object} sd       The study descriptor
       * @param  {object} colorMap Map of colors to arrays. Each array should contain entries for each dataSegment bar mapped to that color.
       * It should contain null values for any bar that shouldn't be drawn
       * @param {object} borderMap Map of border colors for each color. If null then no borders will be drawn.
       * @example
       * var colorMap={};
       * colorMap["#FF0000"]=[56,123,null,null,45];
       * colorMap["#00FF00"]=[null,null,12,13,null];
       *
       * var borderMap={
       *    "#FF0000": "#FFFFFF",
       *    "#00FF00": "#FFFFDD"
       * };
       * CIQ.Studies.volumeChart(stx, sd, colorMap, borderMap);
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.volumeChart = function(stx, sd, colorMap, borderMap) {
        // Determine min max
        var maximum = Number.MAX_VALUE * -1
        var color, value
        for (color in colorMap) {
          for (var c = 0; c < colorMap[color].length; c++) {
            value = colorMap[color][c]
            if (!value) continue
            if (value > maximum) maximum = value
          }
        }

        // determine calculation ratios
        var panel = stx.panels[sd.panel]
        var b = Math.floor(panel.yAxis.bottom) + 0.5
        var t = Math.floor(panel.yAxis.top) + 0.5
        var h = b - t
        var candleWidth = stx.layout.candleWidth
        var multiplier = panel.height / maximum
        var borderColor = null
        if (!sd.parameters || !sd.parameters.displayBorder) borderMap = null
        var offset = 0
        if (!borderMap) offset = (candleWidth - stx.chart.tmpWidth) / 2
        var context = stx.chart.context
        context.lineWidth = 1
        stx.startClip(sd.panel)
        for (color in colorMap) {
          if (borderMap) borderColor = borderMap[color]
          context.fillStyle = color
          if (borderColor) context.strokeStyle = borderColor
          context.beginPath()
          var prevTop = b + 0.5
          var farLeft = Math.floor(stx.pixelFromBar(0, panel.chart))
          var prevRight
          for (var i = 0; i < colorMap[color].length; i++) {
            if (stx.chart.dataSegment[i] && stx.chart.dataSegment[i].candleWidth) {
              candleWidth = stx.chart.dataSegment[i].candleWidth
              if (!borderMap) offset = candleWidth / 4
            } else {
              candleWidth = stx.layout.candleWidth
              if (!borderMap) offset = (candleWidth - stx.chart.tmpWidth) / 2
            }
            if (i === 0) {
              farLeft -= candleWidth / 2
              prevRight = farLeft
            }
            value = colorMap[color][i]
            if (!value) {
              prevTop = b
              prevRight += candleWidth
              //if(borderMap) prevRight-=0.5;
              continue
            }
            var y = value * (h / maximum)
            var top = Math.min(Math.floor(b - h + (h - y)) + 0.5, b)
            var x0, x1
            x0 = Math.floor(prevRight + offset)
            x1 = Math.floor(prevRight + candleWidth - offset)
            x0 = Math.max(x0, farLeft)

            context.moveTo(x0, b)
            context.lineTo(x1, b)
            context.lineTo(x1, top)
            context.lineTo(x0, top)
            if (borderMap) {
              if (prevTop > top || i === 0) context.lineTo(x0, prevTop) // draw down to the top of the previous bar, so that we don't overlap strokes
            } else {
              context.lineTo(x0, b)
            }
            prevTop = top
            prevRight += candleWidth
            //if(borderMap) prevRight-=0.5;
          }
          context.fill()
          context.strokeStyle = borderColor
          if (borderMap && stx.layout.candleWidth >= 2) context.stroke()
          context.closePath()
        }
        stx.endClip()
      }

      /**
       * Used to reduce certain common fields to abbreviated form for display in study panel labels
       * @type {Object}
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.prettify = {
        Close: 'C',
        Open: 'O',
        High: 'H',
        Low: 'L',
        ',simple': '',
        simple: '',
        exponential: 'ema',
        'time series': 'ts',
        triangular: 'tri',
        variable: 'var',
        VIDYA: 'vidya',
        weighted: 'wa',
        'welles wilder': 'ww',
      }

      CIQ.Studies.prettyRE = /^.*\((.*?)\).*$/

      /**
       * Convert a study ID into a displayable format
       * @param  {string} id The ID
       * @return {string}    A pretty (shortened) ID
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.prettyDisplay = function(id) {
        var match = CIQ.Studies.prettyRE.exec(id)
        if (!match) return id
        var guts = match[1]
        if (guts) {
          for (var i in CIQ.Studies.prettify) {
            guts = guts.replace(i, CIQ.Studies.prettify[i])
          }
          id = id.replace(match[1], guts)
        }
        return id
      }

      /**
       * The default initialize function for a study. It creates the study descriptor. It creates the panel if one is required.
       *
       * @param  {object} stx        The chart object
       * @param  {string} type       The type of study (from studyLibrary)
       * @param  {object} inputs     The inputs for the study instance
       * @param  {object} outputs    The outputs for the study instance
       * @param  {object} [parameters] Optional parameters if required or supported by this study
       * @param {string} [panelName] Optional panel. If not provided then the panel will be determined dynamically.
       * @param {object} [study]	Optionally supply a study definition to use in lieu of the study library entry
       * @return {object}            The newly initialized study descriptor
       * @since TBD added study argument
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.initializeFN = function(stx, type, inputs, outputs, parameters, panelName, study) {
        function determinePanelForOverlay(inputs, parameters, panels) {
          var panel = null
          if (inputs.Field) {
            var st = CIQ.Studies.studyPanelMap[inputs.Field]
            if (st) panel = st.panel
            if (inputs.Field == 'Volume') {
              if (panels.vchart) panel = 'vchart'
              else panel = 'volume'
            }
          }
          if (!panel) panel = parameters.chartName // If a panel isn't specified then this is an overlay on the chart itself
          return panel
        }
        if (!inputs)
          inputs = {
            id: type,
          }
        if (!parameters) parameters = {}
        if (!inputs.display) inputs.display = CIQ.Studies.prettyDisplay(inputs.id)
        var sd = new CIQ.Studies.StudyDescriptor(inputs.id, type, inputs.id, inputs, outputs, parameters)
        if (inputs.Period) sd.days = parseInt(sd.inputs.Period) // you can't have fractional day periods so convert to int
        if (study) {
          if (!study.inputs) study.inputs = sd.study.inputs
          if (!study.outputs) study.outputs = sd.study.outputs
          sd.study = study
        } else study = sd.study
        if (study.display) inputs.display = study.display // override what is displayed in the label
        if (!panelName) panelName = inputs.id
        var isOverlay = sd.overlay || study.overlay || inputs.Overlay
        var isUnderlay = sd.underlay || study.underlay || inputs.Underlay
        if (isUnderlay) sd.underlay = true
        if (isOverlay) sd.overlay = true

        if (parameters.replaceID && (stx.panelExists(parameters.replaceID) || isOverlay || isUnderlay)) {
          var oldStudy = stx.layout.studies[parameters.replaceID]
          if (isOverlay || isUnderlay) {
            //sd.panel=oldStudy.panel;
            sd.panel = determinePanelForOverlay(inputs, parameters, stx.panels)
            if (parameters.replaceID != sd.inputs.id) {
              // delete the old study if using a different id (not modifying the same study )
              delete stx.layout.studies[parameters.replaceID]
              delete stx.overlays[parameters.replaceID]
              CIQ.deleteRHS(CIQ.Studies.studyPanelMap, oldStudy)
            }
          } else {
            sd.panel = panelName
            var newPanels = {}
            for (var p in stx.panels) {
              if (p == parameters.replaceID) {
                // swap the name/id of the old panel
                var tmp = stx.panels[p]
                tmp.name = panelName
                tmp.display = inputs.display
                newPanels[panelName] = tmp
                if (parameters.replaceID != panelName) {
                  //delete stx.panels[parameters.replaceID];
                  CIQ.deleteRHS(CIQ.Studies.studyPanelMap, oldStudy)
                }
                if (stx.moveMarkers) stx.moveMarkers(parameters.replaceID, panelName)
              } else {
                newPanels[p] = stx.panels[p]
              }
            }
            stx.panels = newPanels
            // we want to preserve the order so we keep it unless the ID changed. Otherwise it will attempt to draw the depending study before the base study
            if (parameters.replaceID != sd.inputs.id) delete stx.layout.studies[parameters.replaceID] // delete the old study if using a different id (not modifying the same)
          }
        } else if (stx.panelExists(panelName)) {
          sd.panel = panelName
          if (!sd.underlay && sd.panel == stx.chart.name) sd.overlay = true //set to overlay if the panel name is "chart"
        } else if (!isOverlay && !isUnderlay) {
          var panelHeight = study.panelHeight ? study.panelHeight : null
          stx.createPanel(inputs.display, inputs.id, panelHeight, parameters.chartName)
          if (!study.yAxis) {
            stx.panels[inputs.id].yAxis.displayGridLines = false
          }
        } else {
          sd.panel = determinePanelForOverlay(inputs, parameters, stx.panels)
        }
        var panel = stx.panels[sd.panel]
        if (panel && panel.chart.name != panel.name) {
          var syAxis = study ? study.yAxis : null
          var sparameters = study ? study.parameters : null
          if (syAxis) {
            CIQ.extend(panel.yAxis, syAxis)
            if (syAxis.ground) panel.yAxis.initialMarginBottom = 0
            if (
              syAxis.ground ||
              syAxis.initialMarginTop ||
              syAxis.initialMarginTop === 0 ||
              syAxis.initialMarginBottom ||
              syAxis.initialMarginBottom === 0
            ) {
              stx.calculateYAxisMargins(panel.yAxis)
            }
          } else if (sparameters && (sparameters.zoom || sparameters.zoom === 0)) {
            // LEGACY, instead add a yAxis to the study
            panel.yAxis.zoom = sparameters.zoom // Optionally set the default zoom in the "parameters" in the study library
          } else {
            panel.yAxis.zoom = 10 // Default to slight zoom when adding study panels so that studies are not up on the edge
          }
        }

        return sd
      }

      /**
       * Plots over/under zones for indicators that support them, and when the user selects them. This method will draw its own
       * yAxis which will not have a scale, but merely the over under points.
       * @private
       * @deprecated use CIQ.Studies.drawZones instead
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.overZones = function(stx, sd, quotes) {
        if (!quotes.length) return
        var panel = stx.panels[sd.panel]
        if (!panel) return
        if (panel.hidden) return
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
        var parameters = sd.parameters
        if (parameters && parameters.studyOverZonesEnabled) {
          var ctx = stx.chart.context
          var overBought = parseFloat(parameters.studyOverBoughtValue),
            overSold = parseFloat(parameters.studyOverSoldValue)
          var ypx = panel.height / panel.shadow
          var overBoughtY = panel.bottom - ypx * overBought
          var overSoldY = panel.bottom - ypx * overSold
          var params = {
            lineWidth: 1,
          }
          ctx.globalAlpha = 0.2
          stx.plotLine(
            panel.left,
            panel.right - 5,
            overBoughtY,
            overBoughtY,
            parameters.studyOverBoughtColor,
            'segment',
            ctx,
            false,
            params,
          )
          ctx.globalAlpha = 0.2
          stx.plotLine(
            panel.left,
            panel.right - 5,
            overSoldY,
            overSoldY,
            parameters.studyOverSoldColor,
            'segment',
            ctx,
            false,
            params,
          )

          if (!sd.study || !sd.study.yaxis) {
            // Draw the y-axis with overbought/oversold
            var fontHeight = stx.getCanvasFontSize('stx_yaxis')
            stx.canvasFont('stx_yaxis')
            stx.canvasColor('stx_yaxis')
            ctx.fillText(overBought, panel.yAxis.left, overBoughtY + fontHeight / 2)
            ctx.fillText(overSold, panel.yAxis.left, overSoldY + fontHeight / 2)
            panel.axisDrawn = true
          }
        }
      }

      /**
       * A sample display function for an overlay. An overlay displays in the chart area.
       *
       * Also note the use of clipping to ensure that the overlay doesn't print outside of the panel
       *
       * Finally note that when color=="auto" you can use stx.defaultColor which will automatically adjust based on the background color. This
       * is the default for studies that use the color picker for user selection of output colors.
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.displayPSAR2 = function(stx, sd, quotes) {
        var panel = stx.panels[sd.panel]
        var isChart = panel.name == panel.chart.name
        stx.startClip(panel.name)
        var ctx = stx.chart.context
        var squareWave = sd.inputs['Plot Type'] == 'squarewave'
        for (var output in sd.outputs) {
          var field = output + ' ' + sd.name
          ctx.beginPath()
          var candleWidth = stx.layout.candleWidth
          var pointWidth = Math.max(3, Math.floor(stx.chart.tmpWidth / 2))
          for (var x = 0; x < quotes.length; x++) {
            var quote = quotes[x]
            if (!quote || (!quote[field] && quote[field] !== 0)) continue
            if (quote.candleWidth) candleWidth = quote.candleWidth
            if (isChart && quote.transform) quote = quote.transform
            var x0 = stx.pixelFromBar(x, panel.chart)
            if (squareWave) x0 -= candleWidth / 2
            var y0 = stx.pixelFromPrice(quote[field], panel)
            if (x === 0 || !quotes[x - 1] || (!quotes[x - 1][field] && quotes[x - 1][field] !== 0)) {
              ctx.moveTo(x0, y0)
            }
            if (squareWave) {
              ctx.lineTo(x0, y0)
              ctx.lineTo(x0 + candleWidth, y0)
              if (quotes[x + 1]) {
                var quote_1 = quotes[x + 1]
                if (isChart && quote_1.transform) quote_1 = quote_1.transform
                if (!quote_1[field] && quote_1[field] !== 0) {
                  ctx.lineTo(
                    x0 + candleWidth,
                    stx.pixelFromPrice(quote_1[sd.referenceOutput + ' ' + sd.name], stx.panels[sd.panel]),
                  )
                }
              }
            } else {
              ctx.moveTo(x0 - pointWidth / 2, y0)
              ctx.lineTo(x0 + pointWidth / 2, y0)
            }
          }
          ctx.lineWidth = 1
          if (sd.highlight) ctx.lineWidth = 3
          var color = sd.outputs[output]
          if (color == 'auto') color = stx.defaultColor // This is calculated and set by the kernel before draw operation.
          ctx.strokeStyle = color
          ctx.stroke()
          ctx.closePath()
          ctx.lineWidth = 1
        }
        stx.endClip()
      }

      /**
       * A sample of a custom initialize function. It is rare that one would be required. In this case we simply customize the input display
       * but otherwise call the default.
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.initializeStochastics = function(stx, type, inputs, outputs) {
        inputs.display = 'Stoch (' + inputs.Period + ')'
        return CIQ.Studies.initializeFN.apply(null, arguments)
      }

      /**
       * A simple calculation function.  Volume is already obtained, so all that is done here is setting colors.
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateVolume = function(stx, sd) {
        var outputs = sd.outputs
        if (sd.name == 'vchart' || sd.name == 'volume') {
          stx.setStyle('stx_volume_up', 'color', outputs['Up Volume'])
          stx.setStyle('stx_volume_down', 'color', outputs['Down Volume'])
        } else {
          if (!stx || !stx.chart.dataSet) return
          var layout = stx.layout
          var remove = sd.parameters.removeStudy
          var previous = layout.volumeUnderlay
          layout.volumeUnderlay = !remove
          if (previous != layout.volumeUnderlay) stx.changeOccurred('layout')
          if (remove) {
            CIQ.Studies.removeStudy(stx, sd)
          } else {
            stx.setStyle('stx_volume_underlay_up', 'color', outputs['Up Volume'])
            stx.setStyle('stx_volume_underlay_down', 'color', outputs['Down Volume'])
            if (outputs['Up Border']) stx.setStyle('stx_volume_underlay_up', 'border-left-color', outputs['Up Border'])
            if (outputs['Down Border'])
              stx.setStyle('stx_volume_underlay_down', 'border-left-color', outputs['Down Border'])
          }
        }
      }

      /**
       * Moving Average convenience function
       * @param  {string}   type    The type of moving average, e.g. simple, exponential, triangular, etc
       * @param  {number}   periods Moving average period
       * @param  {string}   field   The field in the data array to perform the moving average on
       * @param  {number}   offset  Periods to offset the result by
       * @param  {string}   name    String to prefix to the name of the output.  Full name of output would be name + " " + sd.name, for instance "Signal MACD"
       * @param  {CIQ.ChartEngine} stx     Chart object
       * @param  {object}   sd      Study Descriptor
       * @memberOf CIQ.Studies
       * @since 04-2015
       */
      CIQ.Studies.MA = function(type, periods, field, offset, name, stx, sd) {
        var ma = new CIQ.Studies.StudyDescriptor(name + ' ' + sd.name, 'ma', sd.panel)
        ma.chart = sd.chart
        ma.days = parseInt(periods, 10)
        ma.inputs = {}
        if (type) ma.inputs.Type = type
        if (field) ma.inputs.Field = field
        if (offset) ma.inputs.Offset = parseInt(offset, 10)
        CIQ.Studies.calculateMovingAverage(stx, ma)
      }

      // Moving average data; add to it if adding moving average functionality
      CIQ.Studies.movingAverage = {
        //conversions: mapping of study type to moving average type name
        conversions: {
          ma: 'simple',
          sma: 'simple',
          ema: 'exponential',
          tsma: 'time series',
          tma: 'triangular',
          vma: 'variable',
          vdma: 'vidya',
          wma: 'weighted',
          smma: 'welles wilder',
        },
        //translations: mapping of moving average type name to display name
        translations: {
          simple: 'Simple',
          exponential: 'Exponential',
          'time series': 'Time Series',
          triangular: 'Triangular',
          variable: 'Variable',
          vidya: 'VIDYA',
          weighted: 'Weighted',
          'welles wilder': 'Welles Wilder',
        },
        //typeMap: mapping of both study type and type name to calculation function suffix
        //i.e., calculateMovingAverageXXX
        typeMap: {
          ema: 'Exponential',
          exponential: 'Exponential',
          tsma: 'TimeSeries',
          'time series': 'TimeSeries',
          tma: 'Triangular',
          triangular: 'Triangular',
          vma: 'Variable',
          variable: 'Variable',
          vdma: 'Variable',
          vidya: 'Variable',
          wma: 'Weighted',
          weighted: 'Weighted',
          smma: 'Exponential',
          'welles wilder': 'Exponential',
        },
      }
      /**
       * Does conversions for valid moving average types
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {String} input String to test if a moving average type or "options" to return the list of ma options.
       * @return {Object} The name of the moving average or a list of options
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.movingAverageHelper = function(stx, input) {
        if (input == 'options') {
          var translations = {}
          for (var t in CIQ.Studies.movingAverage.translations) {
            translations[t] = stx.translateIf(CIQ.Studies.movingAverage.translations[t])
          }
          return translations
        } else return CIQ.Studies.movingAverage.conversions[input]
      }

      /**
       * Creates a volume underlay for the chart. The underlay is always 25% of the height of the chart.
       * Will use color attributes from the CSS styles `stx_volume_underlay_up` and  `stx_volume_underlay_down` unless overwritten by the calculation function ( default behavior).
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.volUnderlay = function(stx, sd, quotes) {
        var seriesParam = [
          {
            field: 'Volume',
            fill_color_up: stx.canvasStyle('stx_volume_underlay_up').color,
            border_color_up: stx.canvasStyle('stx_volume_underlay_up').borderLeftColor,
            opacity_up: stx.canvasStyle('stx_volume_underlay_up').opacity,
            fill_color_down: stx.canvasStyle('stx_volume_underlay_down').color,
            border_color_down: stx.canvasStyle('stx_volume_underlay_down').borderLeftColor,
            opacity_down: stx.canvasStyle('stx_volume_underlay_down').opacity,
          },
        ]
        var params = {
          name: 'Volume',
          panel: sd.panel,
          heightPercentage: sd.inputs.HeightPercentage ? sd.inputs.HeightPercentage : sd.parameters.heightPercentage,
          widthFactor: 1,
        }
        if (!params.heightPercentage) params.heightPercentage = sd.study.parameters.heightPercentage // backwards compatibility
        stx.drawHistogram(params, seriesParam)
      }

      /**
       *
       * Creates a volume chart. This is the one study that requires a specific panel name called "vchart".
       * If no volume is available on the screen then the panel will be watermarked "Volume Not Available" (translated if a translate function is attached to the kernel object).
       * Will use color attributes from the CSS styles `stx_volume_up` and  `stx_volume_down` unless overwritten by the calculation function ( default behavior).
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.createVolumeChart = function(stx, sd, quotes) {
        var seriesParam = [
          {
            field: 'Volume',
            fill_color_up: stx.canvasStyle('stx_volume_up').color,
            border_color_up: stx.canvasStyle('stx_volume_up').borderLeftColor,
            opacity_up: 1,
            fill_color_down: stx.canvasStyle('stx_volume_down').color,
            border_color_down: stx.canvasStyle('stx_volume_down').borderLeftColor,
            opacity_down: 1,
          },
        ]

        var params = {
          name: 'Volume',
          panel: sd.panel,
          widthFactor: 1,
          bindToYAxis: true,
        }

        sd.outputMap.Volume = 'transparent'
        CIQ.Studies.createYAxis(stx, sd, sd.chart.dataSegment, stx.panels[sd.panel])
        stx.drawHistogram(params, seriesParam)
      }

      /**
       * A sample study calculation function. Note how sd.chart.scrubbed is used instead of dataSet. Also note the naming convention
       * for the outputs.
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateRSI = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        function computeRSI(avgGain, avgLoss) {
          if (avgLoss === 0) return 100
          var rs = avgGain / avgLoss
          return 100 - 100 / (1 + rs)
        }
        if (quotes.length < sd.days + 1) {
          if (typeof practiceMode != 'undefined' && practiceMode) return
          stx.watermark(sd.panel, 'center', 'bottom', stx.translateIf('Not enough quotes to compute RSI'))
          return
        }
        var gain = 0,
          loss = 0,
          i,
          change
        for (i = 1; i < sd.days; i++) {
          change = quotes[i].Close - quotes[i - 1].Close
          if (change < 0) loss += change * -1
          else gain += change
        }
        var avgGain = gain / sd.days
        var avgLoss = loss / sd.days
        quotes[i][sd.name] = computeRSI(avgGain, avgLoss)
        var name = 'RSI ' + sd.name
        for (i = sd.days; i < quotes.length; i++) {
          var quote = quotes[i]
          change = quote.Close - quotes[i - 1].Close
          if (change > 0) {
            avgGain = (avgGain * (sd.days - 1) + change) / sd.days
            avgLoss = (avgLoss * (sd.days - 1)) / sd.days
          } else {
            avgLoss = (avgLoss * (sd.days - 1) + change * -1) / sd.days
            avgGain = (avgGain * (sd.days - 1)) / sd.days
          }
          quote[name] = computeRSI(avgGain, avgLoss)
        }
        sd.zoneOutput = 'RSI'
      }

      /**
       * Calculate function for MACD study
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateMACD = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        if (!quotes) return
        if (quotes.length < sd.days + 1) {
          if (typeof practiceMode != 'undefined' && practiceMode) return
          stx.watermark(
            sd.panel,
            'center',
            'bottom',
            stx.translateIf('Not enough quotes to compute MACD ' + sd.chart.dataSet.length),
          )

          return
        }
        var inputs = sd.inputs,
          name = sd.name
        if (!sd.macd1Days) sd.macd1Days = parseFloat(inputs['Fast MA Period'])
        if (!sd.macd2Days) sd.macd2Days = parseFloat(inputs['Slow MA Period'])
        if (!sd.signalDays) sd.signalDays = parseFloat(inputs['Signal Period'])
        if (!sd.days) sd.days = Math.max(sd.macd1Days, sd.macd2Days, sd.signalDays)

        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'

        var maType = inputs['Moving Average Type']
        if (!maType) maType = 'exponential'

        CIQ.Studies.MA(maType, sd.macd1Days, field, 0, 'MACD1', stx, sd)
        CIQ.Studies.MA(maType, sd.macd2Days, field, 0, 'MACD2', stx, sd)

        var i, quote
        for (i = sd.days - 1; i < quotes.length; i++) {
          quote = quotes[i]
          quote['MACD ' + name] = quote['MACD1 ' + name] - quote['MACD2 ' + name]
        }
        var sigMaType = inputs['Signal MA Type']
        if (!sigMaType) sigMaType = 'exponential'
        CIQ.Studies.MA(sigMaType, sd.signalDays, 'MACD ' + name, 0, 'Signal', stx, sd)

        var histogram = name + '_hist'
        for (i = sd.days - 1; i < quotes.length; i++) {
          quote = quotes[i]
          var signal = quote['Signal ' + name]
          if (!signal && signal !== 0) continue // don't create histogram before the signal line is valid
          quote[histogram] = quote['MACD ' + name] - quote['Signal ' + name]
        }
      }

      /**
       * Calculate function for standard deviation.
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateStandardDeviation = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        if (sd.days < 0) sd.days = 1
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        var type = sd.inputs['Moving Average Type']
        if (!type) type = sd.inputs.Type
        CIQ.Studies.MA(type, sd.days, field, sd.inputs.Offset, '_MA', stx, sd)

        var acc1 = 0
        var acc2 = 0
        var ma = 0
        var mult = Number(sd.inputs['Standard Deviations'])
        if (mult < 0) mult = 2
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          var val = quote[field]
          if (isNaN(val)) val = 0
          acc1 += Math.pow(val, 2)
          acc2 += val
          if (i < sd.days - 1) continue
          if (i >= sd.days) {
            var val2 = quotes[i - sd.days][field]
            if (isNaN(val2)) val2 = 0
            acc1 -= Math.pow(val2, 2)
            acc2 -= val2
          }
          ma = quote['_MA ' + sd.name]
          quote[name] = Math.sqrt((acc1 + sd.days * Math.pow(ma, 2) - 2 * ma * acc2) / sd.days) * mult
        }
      }

      /**
       * Calculate function for moving averages. sd.inputs["Type"] can be used to request a specific type of moving average.
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateMovingAverage = function(stx, sd) {
        if (!sd.chart.scrubbed) return
        var type = sd.inputs.Type
        if (type == 'ma' || !type) type = 'simple' // handle when the default inputs are passed in
        var typeMap = CIQ.Studies.movingAverage.typeMap
        if (type in typeMap) {
          return CIQ.Studies['calculateMovingAverage' + typeMap[type]](stx, sd)
        } else if (type !== 'simple') {
          return
        }
        var quotes = sd.chart.scrubbed
        if (sd.days < 0) sd.days = 1
        var acc = 0
        var ma = 0
        var ii = 0
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close' // Handle when the default inputs are passed in
        var offset = parseInt(sd.inputs.Offset, 10)
        if (isNaN(offset)) offset = 0
        var vals = []
        for (i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          var val = quote[field]
          var notOverflowing = i + offset >= 0 && i + offset < quotes.length
          var offsetQuote = notOverflowing ? quotes[i + offset] : null
          if (!val && val !== 0) {
            if (offsetQuote) offsetQuote[name] = null
            continue
          }
          acc += val
          vals.push(val)
          if (ii == sd.days - 1) {
            ma = acc / sd.days
            if (offsetQuote) offsetQuote[name] = ma
          } else if (ii >= sd.days) {
            var val2 = vals.shift()
            acc -= val2
            ma = acc / sd.days
            if (offsetQuote) offsetQuote[name] = ma
          } else if (ii === 0) {
            ma = acc
            if (offsetQuote) offsetQuote[name] = null
          } else {
            ma = acc / (ii + 1)
            if (offsetQuote) offsetQuote[name] = null
          }
          ii++
        }
      }

      /**
       * Calculate function for exponential moving average
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateMovingAverageExponential = function(stx, sd) {
        var type = sd.inputs.Type
        var quotes = sd.chart.scrubbed
        var acc = 0
        var ma = 0
        var ii = 0
        var multiplier = 2 / (sd.days + 1)
        if (type == 'welles wilder') multiplier = 1 / sd.days

        var emaPreviousDay = 0
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }

        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close' // Handle when the default inputs are passed in
        var offset = parseInt(sd.inputs.Offset, 10)
        if (isNaN(offset)) offset = 0
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          var val = quote[field]
          var notOverflowing = i + offset >= 0 && i + offset < quotes.length
          var offsetQuote = notOverflowing ? quotes[i + offset] : null
          if (!val && val !== 0) {
            if (offsetQuote) offsetQuote[name] = null
            continue
          }
          if (ii == sd.days - 1) {
            acc += val
            ma = acc / sd.days
            if (offsetQuote) offsetQuote[name] = ma
          } else if (ii >= sd.days) {
            var m = multiplier
            ma = (val - emaPreviousDay) * m + emaPreviousDay
            if (offsetQuote) offsetQuote[name] = ma
          } else if (ii === 0) {
            acc += val
            ma = acc
            if (offsetQuote) offsetQuote[name] = null
          } else {
            // 1 <= li < sd.days
            acc += val
            ma = acc / (ii + 1)
            if (offsetQuote) offsetQuote[name] = null
          }
          emaPreviousDay = ma
          ii++
        }
      }

      /**
       * Calculate function for variable moving average and VI Dynamic MA (VIDYA)
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateMovingAverageVariable = function(stx, sd) {
        var type = sd.inputs.Type
        var quotes = sd.chart.scrubbed
        var alpha = 2 / (sd.days + 1)

        var vmaPreviousDay = 0
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }

        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close' // Handle when the default inputs are passed in

        if (type == 'vidya') {
          sd.std = new CIQ.Studies.StudyDescriptor(sd.name, 'sdev', sd.panel)
          sd.std.chart = sd.chart
          sd.std.days = 5
          sd.std.inputs = { Field: field, 'Standard Deviations': 1, Type: 'ma' }
          sd.std.outputs = { STD: null }
          CIQ.Studies.calculateStandardDeviation(stx, sd.std)

          CIQ.Studies.MA('ma', 20, 'STD ' + sd.name, 0, 'MASTD', stx, sd)
        } else {
          sd.cmo = new CIQ.Studies.StudyDescriptor(sd.name, 'cmo', sd.panel)
          sd.cmo.chart = sd.chart
          sd.cmo.days = 9
          sd.cmo.outputs = { CMO: null }
          CIQ.Studies.calculateChandeMomentum(stx, sd.cmo)
        }

        var offset = parseInt(sd.inputs.Offset, 10)
        if (isNaN(offset)) offset = 0
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          var val = quote[field]
          var notOverflowing = i + offset >= 0 && i + offset < quotes.length
          var offsetQuote = notOverflowing ? quotes[i + offset] : null
          if (!val && val !== 0) {
            if (offsetQuote) offsetQuote[name] = null
            continue
          }
          var vi
          if (type == 'vidya') {
            if (!quote['MASTD ' + sd.name]) continue
            else vi = quote['STD ' + sd.name] / quote['MASTD ' + sd.name]
          } else {
            if (!quote['CMO ' + sd.name]) continue
            else vi = Math.abs(quote['CMO ' + sd.name]) / 100
          }
          var vma = alpha * vi * val + (1 - alpha * vi) * vmaPreviousDay
          if (offsetQuote) offsetQuote[name] = vma
          vmaPreviousDay = vma
        }
      }

      /**
       * Calculate function for time series moving average
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateMovingAverageTimeSeries = function(stx, sd) {
        sd.ma = new CIQ.Studies.StudyDescriptor(sd.name, 'ma', sd.panel)
        sd.ma.chart = sd.chart
        sd.ma.days = sd.days
        sd.ma.inputs = sd.inputs
        CIQ.Studies.calculateLinearRegressionIndicator(stx, sd.ma)

        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        var offset = parseInt(sd.inputs.Offset, 10)
        if (isNaN(offset)) offset = 0
        var quotes = sd.chart.scrubbed
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          if (i + offset >= 0 && i + offset < quotes.length) quotes[i + offset][name] = quote['Forecast ' + sd.name]
        }
      }

      /**
       * Calculate function for triangular moving average
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateMovingAverageTriangular = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close' // Handle when the default inputs are passed in
        var days = Math.ceil(sd.days / 2)
        CIQ.Studies.MA('simple', days, sd.inputs.Field, 0, 'TRI1', stx, sd)
        if (sd.days % 2 === 0) days++
        CIQ.Studies.MA('simple', days, 'TRI1 ' + sd.name, 0, 'TRI2', stx, sd)

        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        var offset = parseInt(sd.inputs.Offset, 10)
        if (isNaN(offset)) offset = 0
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          if (i + offset >= 0 && i + offset < quotes.length) quotes[i + offset][name] = quote['TRI2 ' + sd.name]
        }
        return
      }

      /**
       * Calculate function for weighted moving average
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       */
      CIQ.Studies.calculateMovingAverageWeighted = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        var accAdd = 0
        var accSubtract = 0
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close' // Handle when the default inputs are passed in
        var divisor = (sd.days * (sd.days + 1)) / 2

        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        var offset = parseInt(sd.inputs.Offset, 10)
        if (isNaN(offset)) offset = 0
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          var val = quote[field]
          var notOverflowing = i + offset >= 0 && i + offset < quotes.length
          var offsetQuote = notOverflowing ? quotes[i + offset] : null
          if (!val && val !== 0) {
            if (offsetQuote) offsetQuote[name] = null
            continue
          }
          var weight = Math.min(sd.days, i + 1)
          if (i >= sd.days) {
            //age out old values
            accAdd -= accSubtract
            if (quotes[i - sd.days] && quotes[i - sd.days][field]) accSubtract -= quotes[i - sd.days][field]
          }
          accAdd += weight * val
          accSubtract += val

          if (i < sd.days - 1) {
            if (offsetQuote) offsetQuote[name] = null
          } else {
            if (offsetQuote) offsetQuote[name] = accAdd / divisor
          }
        }
        return
      }

      /**
       * Calculate function for klinger
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */

      CIQ.Studies.calculateKlinger = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        var field = sd.name + '_hist',
          klinger = 'Klinger ' + sd.name,
          klingerSignal = 'KlingerSignal ' + sd.name,
          signedVolume = 'SV ' + sd.name,
          shortEMA = 'EMA-S ' + sd.name,
          longEMA = 'EMA-L ' + sd.name,
          i
        for (i = 1; i < quotes.length; i++) {
          var sv = quotes[i].Volume
          if (quotes[i]['hlc/3'] < quotes[i - 1]['hlc/3']) sv *= -1
          quotes[i][signedVolume] = sv
        }

        CIQ.Studies.MA('exponential', Number(sd.inputs['Short Cycle']), signedVolume, 0, 'EMA-S', stx, sd)
        CIQ.Studies.MA('exponential', Number(sd.inputs['Long Cycle']), signedVolume, 0, 'EMA-L', stx, sd)

        for (i = Number(sd.inputs['Long Cycle']); i < quotes.length; i++) {
          quotes[i][klinger] = quotes[i][shortEMA] - quotes[i][longEMA]
        }

        CIQ.Studies.MA('exponential', Number(sd.inputs['Signal Periods']), klinger, 0, 'KlingerSignal', stx, sd)

        for (i = 0; i < quotes.length; i++) {
          quotes[i][field] = quotes[i][klinger] - quotes[i][klingerSignal]
        }
      }

      /**
       * Calculate function for stochastics
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateStochastics = function(stx, sd) {
        sd.max = 100
        sd.min = 0
        if (!sd.smooth) sd.smooth = sd.inputs.Smooth
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'

        var quotes = sd.chart.scrubbed
        if (!quotes) return

        if (quotes.length < sd.days + 1) {
          if (typeof practiceMode != 'undefined' && practiceMode) return
          stx.watermark(
            sd.panel,
            'center',
            'bottom',
            stx.translateIf('Not enough quotes to compute stochastics ' + sd.chart.dataSet.length + ':' + sd.days),
          )
          return
        }

        function computeStochastics(position, field, days) {
          var beg = position - days + 1
          var low = 1000000,
            high = 0
          for (var i = beg; i <= position; i++) {
            low = Math.min(low, quotes[i].Low)
            high = Math.max(high, quotes[i].High)
          }
          var k = ((quotes[position][field] - low) / (high - low)) * 100
          return k
        }

        var name = sd.name
        if (sd.smooth) name = name.substring(0, name.length - 2)

        var fastPeriod = sd.inputs['%K Periods']
        if (!fastPeriod) fastPeriod = sd.days

        for (var i = fastPeriod; i < quotes.length; i++) {
          quotes[i][name] = computeStochastics(i, field, fastPeriod)
        }

        var smoothingPeriod = sd.inputs['%K Smoothing Periods']
        if (smoothingPeriod) sd.smooth = true
        else if (sd.smooth) smoothingPeriod = 3
        if (sd.smooth) {
          sd.smooth = new CIQ.Studies.StudyDescriptor(sd.name, 'ma', sd.panel)
          sd.smooth.chart = sd.chart
          sd.smooth.days = smoothingPeriod
          sd.smooth.inputs = { Field: name, Type: 'simple' }
          CIQ.Studies.calculateMovingAverage(stx, sd.smooth)
        }
        sd.outputMap[sd.name] = 'Fast'

        var slowPeriod = sd.inputs['%D Periods']
        if (!slowPeriod) slowPeriod = 3
        sd.ma = new CIQ.Studies.StudyDescriptor(sd.name + '_3', 'ma', sd.panel)
        sd.ma.chart = sd.chart
        sd.ma.days = slowPeriod
        sd.ma.inputs = { Field: sd.name, Type: 'simple' }
        sd.ma.min = sd.min
        sd.ma.max = sd.max
        CIQ.Studies.calculateMovingAverage(stx, sd.ma)
        sd.outputMap[sd.name + '_3'] = 'Slow'
      }

      CIQ.Studies.calculateStudyATR = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var period = sd.days
        var total = 0
        var name = sd.name
        for (var i = 1; i < quotes.length; i++) {
          var prices = quotes[i]
          var pd = quotes[i - 1]
          var trueRange = Math.max(prices.High, pd.Close) - Math.min(prices.Low, pd.Close)
          total += trueRange
          if (i > period) total -= quotes[i - period]['True Range ' + name]
          prices['True Range ' + name] = trueRange
          prices['Sum True Range ' + name] = total
          if (i == period) prices['ATR ' + name] = total / period
          else if (i > period) prices['ATR ' + name] = (pd['ATR ' + name] * (period - 1) + trueRange) / period
        }
      }

      CIQ.Studies.calculatePSAR = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        var af = 0
        var ep = null
        var lasttrend = false
        var SAR = 0
        var step = parseFloat(sd.inputs['Minimum AF'])
        var maxStep = parseFloat(sd.inputs['Maximum AF'])

        function doReset() {
          af = 0
          ep = null
          lasttrend = !lasttrend
        }
        for (var i = 0; i < quotes.length - 1; i++) {
          var priorSAR = SAR
          if (lasttrend) {
            if (!ep || ep < quotes[i].High) {
              ep = quotes[i].High
              af = Math.min(af + step, maxStep)
            }
            SAR = priorSAR + af * (ep - priorSAR)
            var lowestPrior2Lows = Math.min(quotes[Math.max(1, i) - 1].Low, quotes[i].Low)
            if (SAR > quotes[i + 1].Low) {
              SAR = ep
              doReset()
            } else if (SAR > lowestPrior2Lows) {
              SAR = lowestPrior2Lows
            }
          } else {
            if (!ep || ep > quotes[i].Low) {
              ep = quotes[i].Low
              af = Math.min(af + step, maxStep)
            }
            SAR = priorSAR + af * (ep - priorSAR)
            var highestPrior2Highs = Math.max(quotes[Math.max(1, i) - 1].High, quotes[i].High)
            if (SAR < quotes[i + 1].High) {
              SAR = ep
              doReset()
            } else if (SAR < highestPrior2Highs) {
              SAR = highestPrior2Highs
            }
          }
          quotes[i + 1]['Result ' + sd.name] = SAR
        }
      }

      CIQ.Studies.calculateTRIX = function(stx, sd) {
        var name = sd.name
        var fields = ['Close', 'MA1 ' + name, 'MA2 ' + name, 'MA3 ' + name]
        for (var e = 0; e < fields.length - 1; e++) {
          CIQ.Studies.MA('exponential', sd.days, fields[e], 0, 'MA' + (e + 1).toString(), stx, sd)
        }
        var quotes = sd.chart.scrubbed
        var ma3 = fields[3]
        for (var i = 1; i < quotes.length; i++) {
          var q0 = quotes[i - 1][ma3]
          if (!q0) continue
          quotes[i]['Result ' + name] = 100 * (quotes[i][ma3] / q0 - 1)
        }
      }

      CIQ.Studies.calculateMedianPrice = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var period = sd.days
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        var total = 0
        for (var i = 0; i < quotes.length; i++) {
          total += quotes[i]['hl/2']
          if (i >= period) {
            total -= quotes[i - period]['hl/2']
            quotes[i][name] = total / period
          }
        }
      }

      CIQ.Studies.calculateIntradayMomentum = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var period = sd.days

        var totalUp = 0
        var totalDown = 0
        for (var i = 0; i < quotes.length; i++) {
          var diff = quotes[i].Close - quotes[i].Open
          if (diff > 0) totalUp += diff
          else totalDown -= diff
          if (i >= period) {
            var pDiff = quotes[i - period].Close - quotes[i - period].Open
            if (pDiff > 0) totalUp -= pDiff
            else totalDown += pDiff
          }
          quotes[i]['Result ' + sd.name] = (100 * totalUp) / (totalUp + totalDown)
        }
      }

      CIQ.Studies.calculateQStick = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var period = sd.days

        for (var i = 0; i < quotes.length; i++) {
          quotes[i]['Close-Open ' + sd.name] = quotes[i].Close - quotes[i].Open
        }
        CIQ.Studies.MA(sd.inputs['Moving Average Type'], period, 'Close-Open ' + sd.name, 0, 'Result', stx, sd)
      }

      CIQ.Studies.calculateSchaff = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var period = sd.days
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        var factor = 0.5

        CIQ.Studies.MA(sd.inputs['Moving Average Type'], Number(sd.inputs['Short Cycle']), field, 0, 'MACD1', stx, sd)
        CIQ.Studies.MA(sd.inputs['Moving Average Type'], Number(sd.inputs['Long Cycle']), field, 0, 'MACD2', stx, sd)

        function getLLVHHV(p, x, n) {
          var l = null,
            h = null
          for (var j = x - p + 1; j <= x; j++) {
            var d = quotes[j][n + ' ' + sd.name]
            if (!d) continue
            l = l === null ? d : Math.min(l, d)
            h = h === null ? d : Math.max(h, d)
          }
          return [l, h]
        }
        var f1 = 0,
          f2 = 0
        var longCycle = Number(sd.inputs['Long Cycle'])
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          quote['Result ' + sd.name] = f2

          if (i < longCycle - 1) continue
          quote['MACD ' + sd.name] = quote['MACD1 ' + sd.name] - quote['MACD2 ' + sd.name]

          if (i < longCycle + (period - 1)) continue
          var lh = getLLVHHV(period, i, 'MACD')
          f1 = lh[1] > lh[0] ? (100 * (quote['MACD ' + sd.name] - lh[0])) / (lh[1] - lh[0]) : f1
          quote['PF ' + sd.name] = quotes[i - 1]['PF ' + sd.name]
            ? quotes[i - 1]['PF ' + sd.name] + factor * (f1 - quotes[i - 1]['PF ' + sd.name])
            : f1

          if (i < longCycle + 2 * (period - 1)) continue
          lh = getLLVHHV(period, i, 'PF')
          f2 = lh[1] > lh[0] ? (100 * (quote['PF ' + sd.name] - lh[0])) / (lh[1] - lh[0]) : f2
          quote['Result ' + sd.name] = quotes[i - 1]['Result ' + sd.name]
            ? quotes[i - 1]['Result ' + sd.name] + factor * (f2 - quotes[i - 1]['Result ' + sd.name])
            : f2
        }
      }

      CIQ.Studies.calculateStochMomentum = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        function getLLVHHV(p, x) {
          var l = null,
            h = null
          for (var j = x - p + 1; j <= x; j++) {
            l = l === null ? quotes[j].Low : Math.min(l, quotes[j].Low)
            h = h === null ? quotes[j].High : Math.max(h, quotes[j].High)
          }
          return [l, h]
        }

        var pKPeriods = Number(sd.inputs['%K Periods'])
        var i
        for (i = pKPeriods - 1; i < quotes.length; i++) {
          var quote = quotes[i]
          var lh = getLLVHHV(pKPeriods, i)
          quote['H ' + sd.name] = quote.Close - (lh[0] + lh[1]) / 2
          quote['DHL ' + sd.name] = lh[1] - lh[0]
        }

        CIQ.Studies.MA('exponential', Number(sd.inputs['%K Smoothing Periods']), 'H ' + sd.name, 0, 'HS1', stx, sd)
        CIQ.Studies.MA(
          'exponential',
          Number(sd.inputs['%K Double Smoothing Periods']),
          'HS1 ' + sd.name,
          0,
          'HS2',
          stx,
          sd,
        )
        CIQ.Studies.MA('exponential', Number(sd.inputs['%K Smoothing Periods']), 'DHL ' + sd.name, 0, 'DHL1', stx, sd)
        CIQ.Studies.MA(
          'exponential',
          Number(sd.inputs['%K Double Smoothing Periods']),
          'DHL1 ' + sd.name,
          0,
          'DHL2',
          stx,
          sd,
        )

        for (i = pKPeriods - 1; i < quotes.length; i++) {
          quotes[i]['%K ' + sd.name] = (quotes[i]['HS2 ' + sd.name] / (0.5 * quotes[i]['DHL2 ' + sd.name])) * 100
        }

        CIQ.Studies.MA(
          sd.inputs['%D Moving Average Type'],
          Number(sd.inputs['%D Periods']),
          '%K ' + sd.name,
          0,
          '%D',
          stx,
          sd,
        )

        sd.zoneOutput = '%K'
      }

      CIQ.Studies.calculateEhlerFisher = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        function getLLVHHV(p, x) {
          var l = null,
            h = null
          for (var j = x - p + 1; j <= x; j++) {
            var d = (quotes[j].High + quotes[j].Low) / 2
            l = l === null ? d : Math.min(l, d)
            h = h === null ? d : Math.max(h, d)
          }
          return [l, h]
        }

        var n = 0
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          if (i < sd.days - 1) {
            quote['EF ' + sd.name] = quote['EF Trigger ' + sd.name] = n
            continue
          }
          var lh = getLLVHHV(sd.days, i)
          n =
            0.33 * 2 * (((quotes[i].High + quotes[i].Low) / 2 - lh[0]) / Math.max(0.000001, lh[1] - lh[0]) - 0.5) +
            0.67 * n
          if (n > 0) n = Math.min(n, 0.9999)
          else if (n < 0) n = Math.max(n, -0.9999)
          var previous = i ? quotes[i - 1]['EF ' + sd.name] : 0
          quote['EF ' + sd.name] = 0.5 * Math.log((1 + n) / (1 - n)) + 0.5 * previous
          quote['EF Trigger ' + sd.name] = previous
        }
      }

      CIQ.Studies.calculatePrettyGoodOscillator = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        CIQ.Studies.calculateStudyATR(stx, sd)

        CIQ.Studies.MA('exponential', sd.days, 'True Range ' + sd.name, 0, 'EMA', stx, sd)
        CIQ.Studies.MA('simple', sd.days, 'Close', 0, 'SMA', stx, sd)

        for (var i = 1; i < quotes.length; i++) {
          if (!quotes[i]['SMA ' + sd.name] || !quotes[i]['EMA ' + sd.name]) continue
          quotes[i]['Result ' + sd.name] = (quotes[i].Close - quotes[i]['SMA ' + sd.name]) / quotes[i]['EMA ' + sd.name]
        }
      }

      CIQ.Studies.calculateUltimateOscillator = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var cycle = [sd.inputs['Cycle 1'], sd.inputs['Cycle 2'], sd.inputs['Cycle 3']]
        var c01 = cycle[0] * cycle[1]
        var c02 = cycle[0] * cycle[2]
        var c12 = cycle[1] * cycle[2]
        var accbp = [0, 0, 0]
        var acctr = [0, 0, 0]
        var start = Math.max(cycle[0], Math.max(cycle[1], cycle[2]))
        for (var i = 1; i < quotes.length; i++) {
          var minLC = Math.min(quotes[i].Low, quotes[i - 1].Close)
          var bp = quotes[i].Close - minLC
          var tr = Math.max(quotes[i].High, quotes[i - 1].Close) - minLC
          for (var x = 0; x < cycle.length; x++) {
            accbp[x] += bp
            acctr[x] += tr
            if (i > cycle[x]) {
              var p_minLC = Math.min(quotes[i - cycle[x]].Low, quotes[i - cycle[x] - 1].Close)
              var p_bp = quotes[i - cycle[x]].Close - p_minLC
              var p_tr = Math.max(quotes[i - cycle[x]].High, quotes[i - cycle[x] - 1].Close) - p_minLC
              accbp[x] -= p_bp
              acctr[x] -= p_tr
            }
          }
          if (i < start) continue
          var numerator = (c12 * accbp[0]) / acctr[0] + (c02 * accbp[1]) / acctr[1] + (c01 * accbp[2]) / acctr[2]
          var denominator = c12 + c02 + c01
          quotes[i]['Result ' + sd.name] = (100 * numerator) / denominator
        }
      }

      CIQ.Studies.calculatePriceVolumeTrend = function(stx, sd) {
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'

        var quotes = sd.chart.scrubbed
        var total = 0
        for (var i = 1; i < quotes.length; i++) {
          if (!quotes[i][field]) continue
          if (!quotes[i - 1][field]) continue

          total += (quotes[i].Volume * (quotes[i][field] - quotes[i - 1][field])) / quotes[i - 1][field]
          quotes[i]['Result ' + sd.name] = total
        }
      }

      CIQ.Studies.calculateOnBalanceVolume = function(stx, sd) {
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        var minTick = sd.inputs['Min Tick Value']
        var obv = false
        if (!minTick && minTick !== 0) {
          obv = true
          minTick = 0
        }
        var quotes = sd.chart.scrubbed
        var total = 0
        var direction = 0
        for (var i = 1; i < quotes.length; i++) {
          if (!quotes[i][field]) continue
          if (!quotes[i - 1][field]) continue

          if (quotes[i][field] - quotes[i - 1][field] > minTick) direction = 1
          else if (quotes[i - 1][field] - quotes[i][field] > minTick) direction = -1
          else if (obv) direction = 0
          total += quotes[i].Volume * direction
          quotes[i]['Result ' + sd.name] = total
        }
      }

      CIQ.Studies.calculateVolumeIndex = function(stx, sd) {
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        var quotes = sd.chart.scrubbed
        var total = 100
        for (var i = 1; i < quotes.length; i++) {
          if (!quotes[i][field]) continue
          if (!quotes[i - 1][field]) continue
          if (
            (sd.type == 'Pos Vol' && quotes[i].Volume > quotes[i - 1].Volume) ||
            (sd.type == 'Neg Vol' && quotes[i].Volume < quotes[i - 1].Volume)
          ) {
            total *= quotes[i][field] / quotes[i - 1][field]
          }
          quotes[i]['Index ' + sd.name] = total
        }
        CIQ.Studies.MA(sd.inputs['Moving Average Type'], sd.days, 'Index ' + sd.name, 0, 'MA', stx, sd)
      }

      CIQ.Studies.calculateHistoricalVolatility = function(stx, sd) {
        function intFactor(days) {
          if (isNaN(days)) days = 365
          if (stx.layout.interval == 'day') return days
          else if (stx.layout.interval == 'week') return 52
          else if (stx.layout.interval == 'month') return 12
          else return days
        }
        var quotes = sd.chart.scrubbed
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        var mult = sd.inputs['Standard Deviations']
        if (mult < 0) mult = 1
        annualizingFactor = 100 * Math.sqrt(intFactor(sd.inputs['Days Per Year'])) * mult

        var arr = []
        var accum = 0
        for (var i = 1; i < quotes.length; i++) {
          var denom = quotes[i - 1][field]
          if (denom) {
            var ln = Math.log(quotes[i][field] / denom)
            arr.push(ln)
            accum += ln
            if (i >= sd.days) {
              var d2 = 0
              accum /= sd.days
              for (var j = 0; j < arr.length; j++) {
                d2 += Math.pow(arr[j] - accum, 2)
              }
              accum *= sd.days
              accum -= arr.shift()
              quotes[i]['Result ' + sd.name] = Math.sqrt(d2 / sd.days) * annualizingFactor
            }
          }
        }
      }

      CIQ.Studies.calculateSwingIndex = function(stx, sd) {
        var T = sd.inputs['Limit Move Value']
        if (T === null || isNaN(T)) T = 99999
        var quotes = sd.chart.scrubbed
        var total = 0
        for (var i = 1; i < quotes.length; i++) {
          var A = Math.abs(quotes[i].High - quotes[i - 1].Close)
          var B = Math.abs(quotes[i].Low - quotes[i - 1].Close)
          var C = Math.abs(quotes[i].High - quotes[i].Low)
          var D = Math.abs(quotes[i - 1].Close - quotes[i - 1].Open)
          var K = Math.max(A, B)
          var M = Math.max(C, K)
          var R = M + 0.25 * D
          if (M == A) R -= 0.5 * B
          else if (M == B) R -= 0.5 * A

          var swing =
            ((50 *
              (quotes[i].Close -
                quotes[i - 1].Close +
                0.5 * (quotes[i].Close - quotes[i].Open) +
                0.25 * (quotes[i - 1].Close - quotes[i - 1].Open))) /
              R) *
            (K / T)
          if (R === 0 || T === 0) swing = 0

          if (sd.type == 'Swing') total = 0
          total += swing
          quotes[i]['Result ' + sd.name] = total
        }
      }

      CIQ.Studies.calculateADX = function(stx, sd) {
        CIQ.Studies.calculateStudyATR(stx, sd)

        var quotes = sd.chart.scrubbed
        var period = sd.days
        var smoothing = parseInt(sd.inputs['Smoothing Period'], 10)
        if (!smoothing && smoothing !== 0) smoothing = period
        var smoothTR = 0
        var smoothPlusDM = 0
        var smoothMinusDM = 0
        var runningDX = 0
        for (var i = 1; i < quotes.length; i++) {
          var plusDM = Math.max(0, quotes[i].High - quotes[i - 1].High)
          var minusDM = Math.max(0, quotes[i - 1].Low - quotes[i].Low)
          if (plusDM > minusDM) minusDM = 0
          else if (minusDM > plusDM) plusDM = 0
          else plusDM = minusDM = 0

          if (i <= period) {
            smoothPlusDM += plusDM
            smoothMinusDM += minusDM
            smoothTR += quotes[i]['True Range ' + sd.name]
            if (i < period) continue
          } else {
            smoothPlusDM = smoothPlusDM - smoothPlusDM / period + plusDM
            smoothMinusDM = smoothMinusDM - smoothMinusDM / period + minusDM
            smoothTR = smoothTR - smoothTR / period + quotes[i]['True Range ' + sd.name]
          }

          var plusDI = (100 * smoothPlusDM) / smoothTR
          var minusDI = (100 * smoothMinusDM) / smoothTR
          var DX = (100 * Math.abs(plusDI - minusDI)) / (plusDI + minusDI)

          quotes[i]['+DI ' + sd.name] = plusDI
          quotes[i]['-DI ' + sd.name] = minusDI
          if (sd.inputs.Series !== false && smoothing) {
            if (i < period + smoothing - 1) {
              runningDX += DX
            } else if (i == period + smoothing - 1) {
              quotes[i]['ADX ' + sd.name] = runningDX / smoothing
            } else {
              quotes[i]['ADX ' + sd.name] = (quotes[i - 1]['ADX ' + sd.name] * (smoothing - 1) + DX) / smoothing
            }
          }
        }
        if (!sd.inputs.Histogram) return
        var histogram = sd.name + '_hist'
        for (i = sd.days - 1; i < quotes.length; i++) {
          quote = quotes[i]
          if (!quote['+DI ' + sd.name] && quote['+DI ' + sd.name] !== 0) continue
          if (!quote['-DI ' + sd.name] && quote['-DI ' + sd.name] !== 0) continue
          quote[histogram] = quote['+DI ' + sd.name] - quote['-DI ' + sd.name]
          if (sd.inputs.Series === false) {
            //delete these so yAxis computes max/min correctly
            delete quote['+DI ' + sd.name]
            delete quote['-DI ' + sd.name]
          }
        }
      }

      CIQ.Studies.calculateRandomWalk = function(stx, sd) {
        CIQ.Studies.calculateStudyATR(stx, sd)

        var quotes = sd.chart.scrubbed
        var period = sd.days

        for (var i = 2; i < quotes.length; i++) {
          var ttr = 0
          var high = quotes[i].High
          var low = quotes[i].Low
          var maxHigh = 0
          var maxLow = 0
          for (var j = 1; j <= period; j++) {
            if (i <= j) {
              maxHigh = maxLow = 0
              break
            }
            ttr += quotes[i - j]['True Range ' + sd.name]
            var denom = (ttr / j) * Math.sqrt(j)
            if (denom) {
              // skip if denominator is 0 --
              var cH = (high - quotes[i - j].Low) / denom
              var cL = (quotes[i - j].High - low) / denom
              maxHigh = Math.max(maxHigh, cH)
              maxLow = Math.max(maxLow, cL)
            }
          }
          quotes[i]['Random Walk High ' + sd.name] = maxHigh
          quotes[i]['Random Walk Low ' + sd.name] = maxLow
        }
      }

      CIQ.Studies.calculateChange = function(stx, sd) {
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        var quotes = sd.chart.scrubbed
        for (var i = sd.days; i < quotes.length; i++) {
          quotes[i]['Result ' + sd.name] = quotes[i][field] - quotes[i - sd.days][field]
        }
      }

      CIQ.Studies.calculateRateOfChange = function(stx, sd) {
        var field = sd.inputs.Field
        if (sd.name.indexOf('Vol ROC') === 0) field = 'Volume'
        else if (!field || field == 'field') field = 'Close'
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }

        var offset = sd.inputs['Center Line']
        if (!offset) offset = 0
        else offset = parseInt(offset, 10)

        var quotes = sd.chart.scrubbed
        for (var i = sd.days; i < quotes.length; i++) {
          if (sd.name.indexOf('Momentum') === 0)
            quotes[i][name] = quotes[i][field] - quotes[i - sd.days][field] + offset
          else {
            var denom = quotes[i - sd.days][field]
            if (denom) {
              // skip if denominator is 0 --
              quotes[i][name] = 100 * (quotes[i][field] / denom - 1) + offset
            }
          }
        }
      }

      CIQ.Studies.calculateTypicalPrice = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var period = sd.days
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        var total = 0
        for (var i = 0; i < quotes.length; i++) {
          total += quotes[i]['hlc/3']
          if (i >= period) {
            total -= quotes[i - period]['hlc/3']
            quotes[i][name] = total / period
          }
        }
      }

      CIQ.Studies.calculateWeightedClose = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var period = sd.days
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        var total = 0
        for (var i = 0; i < quotes.length; i++) {
          total += quotes[i]['hlcc/4']
          if (i >= period) {
            total -= quotes[i - period]['hlcc/4']
            quotes[i][name] = total / period
          }
        }
      }

      CIQ.Studies.calculateElderRay = function(stx, sd) {
        if (sd.days < 1) return
        var quotes = sd.chart.scrubbed
        CIQ.Studies.MA('exponential', sd.days, 'Close', 0, 'EMA', stx, sd)

        for (var i = sd.days - 1; i < quotes.length; i++) {
          quotes[i][sd.name + '_hist1'] = quotes[i].High - quotes[i]['EMA ' + sd.name]
          quotes[i][sd.name + '_hist2'] = quotes[i].Low - quotes[i]['EMA ' + sd.name]
        }
      }

      CIQ.Studies.calculateElderForce = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        for (var i = 1; i < quotes.length; i++) {
          quotes[i]['EF1 ' + sd.name] = quotes[i].Volume * (quotes[i].Close - quotes[i - 1].Close)
        }
        if (!sd.days) sd.days = 13
        CIQ.Studies.MA('exponential', sd.days, 'EF1 ' + sd.name, 0, 'Result', stx, sd)
      }

      CIQ.Studies.calculateCenterOfGravity = function(stx, sd) {
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        var quotes = sd.chart.scrubbed
        for (var i = sd.days - 1; i < quotes.length; i++) {
          var num = 0,
            den = 0
          for (var j = 0; j < sd.days; j++) {
            num -= (j + 1) * quotes[i - j][field]
            den += quotes[i - j][field]
          }
          quotes[i]['Result ' + sd.name] = num / den
        }
      }

      CIQ.Studies.calculateEaseOfMovement = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        for (var i = 1; i < quotes.length; i++) {
          var avgCurrent = (quotes[i].High + quotes[i].Low) / 2
          var avgPrior = (quotes[i - 1].High + quotes[i - 1].Low) / 2
          var dm = avgCurrent - avgPrior
          var br = quotes[i].Volume / 100000000 / (quotes[i].High - quotes[i].Low)
          quotes[i]['EOM1 ' + sd.name] = dm / br
        }
        CIQ.Studies.MA(sd.inputs['Moving Average Type'], sd.days, 'EOM1 ' + sd.name, 0, 'Result', stx, sd)
      }

      CIQ.Studies.calculateChaikinVolatility = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var i
        for (i = 0; i < quotes.length; i++) {
          quotes[i]['High-Low ' + sd.name] = quotes[i].High - quotes[i].Low
        }
        CIQ.Studies.MA(sd.inputs['Moving Average Type'], sd.days, 'High-Low ' + sd.name, 0, 'MA', stx, sd)

        var roc = sd.inputs['Rate Of Change']
        if (!roc) roc = sd.days
        for (i = roc; i < quotes.length; i++) {
          if (!quotes[i - roc]['MA ' + sd.name]) continue
          quotes[i]['Result ' + sd.name] = 100 * (quotes[i]['MA ' + sd.name] / quotes[i - roc]['MA ' + sd.name] - 1)
        }
      }

      CIQ.Studies.calculateChaikinMoneyFlow = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var sumMoneyFlow = 0,
          sumVolume = 0
        for (var i = 0; i < quotes.length; i++) {
          if (quotes[i].High == quotes[i].Low) quotes[i]['MFV ' + sd.name] = 0
          else
            quotes[i]['MFV ' + sd.name] =
              (quotes[i].Volume * (2 * quotes[i].Close - quotes[i].High - quotes[i].Low)) /
              (quotes[i].High - quotes[i].Low)
          sumMoneyFlow += quotes[i]['MFV ' + sd.name]
          sumVolume += quotes[i].Volume
          if (i > sd.days - 1) {
            sumMoneyFlow -= quotes[i - sd.days]['MFV ' + sd.name]
            sumVolume -= quotes[i - sd.days].Volume
            if (sumVolume) quotes[i]['Result ' + sd.name] = sumMoneyFlow / sumVolume
          }
        }
      }

      CIQ.Studies.calculateTwiggsMoneyFlow = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var sumMoneyFlow = 0,
          sumVolume = 0
        for (var i = 1; i < quotes.length; i++) {
          var trh = Math.max(quotes[i - 1].Close, quotes[i].High)
          var trl = Math.min(quotes[i - 1].Close, quotes[i].Low)
          quotes[i]['MFV ' + sd.name] =
            (quotes[i].Volume * (2 * quotes[i].Close - trh - trl)) / (trh - trl === 0 ? 999999 : trh - trl)
          if (i > sd.days - 1) {
            sumMoneyFlow *= (sd.days - 1) / sd.days
            sumVolume *= (sd.days - 1) / sd.days
          }
          sumMoneyFlow += quotes[i]['MFV ' + sd.name]
          sumVolume += quotes[i].Volume
          if (i > sd.days - 1) {
            if (sumVolume) quotes[i]['Result ' + sd.name] = sumMoneyFlow / (sumVolume > 0 ? sumVolume : 999999)
          }
        }
      }

      CIQ.Studies.calculateMassIndex = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        for (var i = 0; i < quotes.length; i++) {
          quotes[i]['High-Low ' + sd.name] = quotes[i].High - quotes[i].Low
        }

        CIQ.Studies.MA('exponential', 9, 'High-Low ' + sd.name, 0, 'EMA', stx, sd)
        CIQ.Studies.MA('exponential', 9, 'EMA ' + sd.name, 0, 'EMA2', stx, sd)

        var total = 0
        for (var j = 17; j < quotes.length; j++) {
          total += quotes[j]['EMA ' + sd.name] / quotes[j]['EMA2 ' + sd.name]
          if (j >= 17 + sd.days - 1) {
            quotes[j]['Result ' + sd.name] = total
            total -= quotes[j - sd.days + 1]['EMA ' + sd.name] / quotes[j - sd.days + 1]['EMA2 ' + sd.name]
          }
        }
      }

      CIQ.Studies.calculateMoneyFlowIndex = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var cumPosMF = 0
        var cumNegMF = 0
        var lastTypPrice = 0
        var directions = []
        for (var i = 0; i < quotes.length; i++) {
          var typPrice = (quotes[i].High + quotes[i].Low + quotes[i].Close) / 3
          if (i > 0) {
            var rawMoneyFlow = typPrice * quotes[i].Volume
            if (typPrice > lastTypPrice) {
              directions.push([1, rawMoneyFlow])
              cumPosMF += rawMoneyFlow
            } else if (typPrice < lastTypPrice) {
              directions.push([-1, rawMoneyFlow])
              cumNegMF += rawMoneyFlow
            } else {
              directions.push([0, 0])
            }
            if (i > sd.days) {
              var old = directions.shift()
              if (old[0] == 1) cumPosMF -= old[1]
              else if (old[0] == -1) cumNegMF -= old[1]
              if (cumNegMF === 0) quotes[i]['Result ' + sd.name] = 100
              else quotes[i]['Result ' + sd.name] = 100 - 100 / (1 + cumPosMF / cumNegMF)
            }
          }
          lastTypPrice = typPrice
        }
      }

      CIQ.Studies.calculateChandeMomentum = function(stx, sd) {
        var name = sd.name
        for (var p in sd.outputs) {
          name = p + ' ' + name
        }
        var quotes = sd.chart.scrubbed
        var sumMomentum = 0,
          absSumMomentum = 0
        var history = []
        for (var i = 1; i < quotes.length; i++) {
          var diff = quotes[i].Close - quotes[i - 1].Close
          history.push(diff)
          sumMomentum += diff
          absSumMomentum += Math.abs(diff)
          if (history.length == sd.days) {
            quotes[i][name] = (100 * sumMomentum) / absSumMomentum
            var old = history.shift()
            sumMomentum -= old
            absSumMomentum -= Math.abs(old)
          }
        }
      }

      CIQ.Studies.calculateChandeForecast = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        CIQ.Studies.MA('time series', sd.days, field, 0, 'MA', stx, sd)
        for (var i = 1; i < quotes.length; i++) {
          quotes[i]['Result ' + sd.name] = 100 * (1 - quotes[i]['MA ' + sd.name] / quotes[i][field])
        }
      }

      CIQ.Studies.calculateDetrendedPrice = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        CIQ.Studies.MA(sd.inputs['Moving Average Type'], sd.days, field, 0, 'MA', stx, sd)

        for (var i = Math.floor(sd.days / 2 - 1); i < quotes.length - Math.floor(sd.days / 2 + 1); i++) {
          quotes[i]['Result ' + sd.name] = quotes[i][field] - quotes[i + Math.floor(sd.days / 2 + 1)]['MA ' + sd.name]
        }
      }

      CIQ.Studies.calculateAroon = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var daysSinceHigh = 0,
          daysSinceLow = 0
        var xDayHigh = null,
          xDayLow = null
        var j
        for (var i = 0; i < quotes.length; i++) {
          if (xDayHigh === null) xDayHigh = quotes[i].High
          if (xDayLow === null) xDayLow = quotes[i].Low
          xDayHigh = Math.max(xDayHigh, quotes[i].High)
          if (xDayHigh == quotes[i].High) {
            daysSinceHigh = 0
          } else {
            daysSinceHigh++
            if (daysSinceHigh > sd.days) {
              xDayHigh = quotes[i].High
              daysSinceHigh = 0
              for (j = 1; j <= sd.days; j++) {
                xDayHigh = Math.max(xDayHigh, quotes[i - j].High)
                if (xDayHigh == quotes[i - j].High) {
                  daysSinceHigh = j
                }
              }
            }
          }
          xDayLow = Math.min(xDayLow, quotes[i].Low)
          if (xDayLow == quotes[i].Low) {
            daysSinceLow = 0
          } else {
            daysSinceLow++
            if (daysSinceLow > sd.days) {
              xDayLow = quotes[i].Low
              daysSinceLow = 0
              for (j = 1; j <= sd.days; j++) {
                xDayLow = Math.min(xDayLow, quotes[i - j].Low)
                if (xDayLow == quotes[i - j].Low) {
                  daysSinceLow = j
                }
              }
            }
          }
          quotes[i]['Aroon Up ' + sd.name] = 100 * (1 - daysSinceHigh / sd.days)
          quotes[i]['Aroon Down ' + sd.name] = 100 * (1 - daysSinceLow / sd.days)
          quotes[i]['Aroon Oscillator ' + sd.name] =
            quotes[i]['Aroon Up ' + sd.name] - quotes[i]['Aroon Down ' + sd.name]
        }
      }

      CIQ.Studies.calculatePrimeNumber = function(stx, sd) {
        var primes = []
        function isPrime(x) {
          if (x <= 0) return false
          else if (x != Math.floor(x)) return false
          //assume x is an int
          else if (primes[x] === true || primes[x] === false) return primes[x]
          var q = parseInt(Math.sqrt(x), 10)
          for (var i = 2; i <= q; i++) {
            if (x % i === 0) {
              primes[x] = false
              return false
            }
          }
          primes[x] = true
          return true
        }
        var quotes = sd.chart.scrubbed
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          if (!quote) continue

          var high = quote.High
          //high=Math.ceil(high);
          for (var h = 0; high > 0 && high <= 10; h++) high *= 10
          if (isPrime(high)) high += 2
          high = Math.ceil(high)
          if (high % 2 === 0) high++
          while (!isPrime(high)) high += 2
          high /= Math.pow(10, h)

          var low = quote.Low
          //low=Math.floor(low);
          for (var l = 0; low > 0 && low <= 10; l++) low *= 10
          if (isPrime(low)) low -= 2
          low = Math.floor(low)
          if (low % 2 === 0) low--
          if (low > 0) {
            while (!isPrime(low)) low -= 2
            low /= Math.pow(10, l)
          }

          if (sd.type == 'Prime Number Bands') {
            quote['Prime Bands Top ' + sd.name] = high
            quote['Prime Bands Bottom ' + sd.name] = Math.max(0, low)
          } else {
            var value = 0
            var tolerance = (sd.inputs['Tolerance Percentage'] * (high - low)) / 100
            var skew = high + low - 2 * quote.Close
            if (skew < tolerance) value = 1
            else if (skew > tolerance) value = -1
            if (value) quote['Result ' + sd.name] = value
          }
        }
      }

      CIQ.Studies.calculateVerticalHorizontalFilter = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        sd.mhml = new CIQ.Studies.StudyDescriptor(sd.name, sd.type, sd.panel)
        sd.mhml.chart = sd.chart
        sd.mhml.days = sd.days
        sd.mhml.inputs = {}
        sd.mhml.outputs = { MHML: null }
        CIQ.Studies.calculateMaxHighMinLow(stx, sd.mhml)
        var sumChanges = 0
        var changes = []
        for (var i = 1; i < quotes.length; i++) {
          var change = Math.abs(quotes[i].Close - quotes[i - 1].Close)
          changes.push(change)
          sumChanges += change
          if (i >= sd.days) {
            quotes[i]['Result ' + sd.name] = quotes[i]['MHML ' + sd.name] / sumChanges
            sumChanges -= changes.shift()
          }
        }
      }

      CIQ.Studies.calculatePriceOscillator = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var field = sd.inputs.Field
        var maType = sd.inputs['Moving Average Type']
        if (!maType) maType = 'simple'
        if (!field || field == 'field') {
          if (sd.parameters.isVolume) {
            field = 'Volume'
            maType = 'exponential'
          } else field = 'Close'
        }
        var pts = sd.inputs['Points Or Percent']
        if (!pts) pts = 'Percent'

        CIQ.Studies.MA(maType, Number(sd.inputs['Short Cycle']), field, 0, 'Short MA', stx, sd)
        CIQ.Studies.MA(maType, Number(sd.inputs['Long Cycle']), field, 0, 'Long MA', stx, sd)

        for (var i = Number(sd.inputs['Long Cycle']); i < quotes.length; i++) {
          var quote = quotes[i]
          if (!quote) continue
          if (pts == 'Points') quote['Result ' + sd.name] = quote['Short MA ' + sd.name] - quote['Long MA ' + sd.name]
          else quote['Result ' + sd.name] = 100 * (quote['Short MA ' + sd.name] / quote['Long MA ' + sd.name] - 1)
        }
      }

      CIQ.Studies.calculateKeltner = function(stx, sd) {
        CIQ.Studies.MA(sd.inputs['Moving Average Type'], sd.days, 'Close', 0, 'MA', stx, sd)
        CIQ.Studies.calculateStudyATR(stx, sd)
        CIQ.Studies.calculateGenericEnvelope(stx, sd, sd.inputs.Shift, 'MA ' + sd.name, 'ATR ' + sd.name)
      }

      CIQ.Studies.calculateCoppock = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'

        var longDays = parseInt(sd.inputs['Long RoC'], 10)
        if (!longDays) longDays = 14
        var shortDays = parseInt(sd.inputs['Short RoC'], 10)
        if (!shortDays) shortDays = 11
        var period = sd.days
        if (!period) period = 10
        if (longDays < shortDays) return

        for (var i = longDays; i < quotes.length; i++) {
          var denom1 = quotes[i - shortDays][field]
          var denom2 = quotes[i - longDays][field]
          if (denom1 && denom2) {
            // skip if denominator is 0 --
            quotes[i]['Sum ' + sd.name] = 100 * (quotes[i][field] / denom1 + quotes[i][field] / denom2 - 2)
          }
        }

        CIQ.Studies.MA('weighted', period, 'Sum ' + sd.name, 0, 'Result', stx, sd)
      }

      CIQ.Studies.calculateLinearRegressionIndicator = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'

        var sumWeights = (sd.days * (sd.days + 1)) / 2
        var squaredSumWeights = Math.pow(sumWeights, 2)
        var sumWeightsSquared = (sumWeights * (2 * sd.days + 1)) / 3

        var sumCloses = 0
        var sumWeightedCloses = 0
        var sumClosesSquared = 0
        for (var i = 0; i < quotes.length; i++) {
          if (!quotes[i][field] && quotes[i][field] !== 0) continue
          sumWeightedCloses += sd.days * quotes[i][field] - sumCloses
          sumCloses += quotes[i][field]
          sumClosesSquared += Math.pow(quotes[i][field], 2)
          if (i < sd.days - 1) continue
          else if (i > sd.days - 1) {
            if (!quotes[i - sd.days][field] && quotes[i - sd.days][field] !== 0) continue
            sumCloses -= quotes[i - sd.days][field]
            sumClosesSquared -= Math.pow(quotes[i - sd.days][field], 2)
          }
          var b =
            (sd.days * sumWeightedCloses - sumWeights * sumCloses) / (sd.days * sumWeightsSquared - squaredSumWeights)
          quotes[i]['Slope ' + sd.name] = b
          var a = (sumCloses - b * sumWeights) / sd.days
          quotes[i]['Intercept ' + sd.name] = a
          quotes[i]['Forecast ' + sd.name] = a + b * sd.days
          var c =
            (sd.days * sumWeightsSquared - squaredSumWeights) / (sd.days * sumClosesSquared - Math.pow(sumCloses, 2))
          quotes[i]['RSquared ' + sd.name] = b * b * c
        }
      }

      // Old version of study had outputs "Bollinger Band ...", this will convert to new "Bollinger Bands ..."
      CIQ.Studies.convertOldBollinger = function(stx, type, inputs, outputs, parameters, panel) {
        for (var o in outputs) {
          if (o.indexOf('Bands') > 0) break //new way already
          outputs[o.replace(/ Band /, ' Bands ')] = outputs[o]
          delete outputs[o]
        }
        return CIQ.Studies.initializeFN(stx, type, inputs, outputs, parameters, panel)
      }

      CIQ.Studies.calculateBollinger = function(stx, sd) {
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'

        CIQ.Studies.MA(sd.inputs['Moving Average Type'], sd.days, field, 0, 'MA', stx, sd)

        sd.std = new CIQ.Studies.StudyDescriptor(sd.name, 'STD Dev', sd.panel)
        sd.std.chart = sd.chart
        sd.std.days = sd.days
        sd.std.inputs = { Field: field, 'Standard Deviations': 1, Type: sd.inputs['Moving Average Type'] }
        sd.std.outputs = { 'STD Dev': null }
        CIQ.Studies.calculateStandardDeviation(stx, sd.std)

        CIQ.Studies.calculateGenericEnvelope(
          stx,
          sd,
          sd.inputs['Standard Deviations'],
          'MA ' + sd.name,
          'STD Dev ' + sd.name,
        )
        if (sd.type == 'Boll %b') sd.zoneOutput = '%b'
      }

      CIQ.Studies.calculateMAEnvelope = function(stx, sd) {
        var field = sd.inputs.Field
        if (!field || field == 'field') field = 'Close'
        CIQ.Studies.MA(sd.inputs['Moving Average Type'], sd.days, field, 0, 'MA', stx, sd)
        var shiftType = sd.inputs['Shift Type']
        var shift = sd.inputs.Shift
        if (!shiftType) {
          //legacy
          shiftType = 'percent'
          shift = sd.inputs['Shift Percentage']
        }
        if (shiftType == 'percent') {
          CIQ.Studies.calculateGenericEnvelope(stx, sd, shift / 100, 'MA ' + sd.name)
        } else if (shiftType == 'points') {
          CIQ.Studies.calculateGenericEnvelope(stx, sd, null, 'MA ' + sd.name, null, Number(shift))
        }
      }

      /**
       * Calculate function for preparing data to be used by displayChannel().
       * Inserts the following fields in the dataSet:
       * <code>
       * quote[sd.type + " Top " + sd.name]=quote[centerIndex]+totalShift;<br>
       * quote[sd.type + " Bottom " + sd.name]=quote[centerIndex]-totalShift;<br>
       * quote[sd.type + " Median " + sd.name]=quote[centerIndex];<br>
       * quote["Bandwidth " + sd.name]=200*totalShift/quote[centerIndex];<br>
       * quote["%b " + sd.name]=50*((quote.Close-quote[centerIndex])/totalShift+1);<br>
       * </code>
       * Example: 'Prime Bands' + ' Top ' +  'Prime Number Bands (true)'.
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @param  {object} percentShift Used to calculate totalShift. Defaults to 0 (zero)
       * @param  {object} centerIndex  Quote element to use for center series (Open, Close, High, Low). Defaults to "Close"
       * @param  {object} offsetIndex  Quote element to use for calculating totalShift (percentShift*quote[offsetIndex]+pointShift;)
       * @param  {object} pointShift   Used to calculate totalShift.Defaults to 0 (zero)
       * @memberOf CIQ.Studies
       */
      CIQ.Studies.calculateGenericEnvelope = function(stx, sd, percentShift, centerIndex, offsetIndex, pointShift) {
        if (!percentShift) percentShift = 0
        if (!pointShift) pointShift = 0
        if (!offsetIndex) offsetIndex = 'Close'
        if (!centerIndex) centerIndex = 'Close'
        var quotes = sd.chart.scrubbed
        for (var i = 0; quotes && i < quotes.length; i++) {
          var quote = quotes[i]
          if (!quote) continue
          if (!quote[centerIndex]) continue
          var totalShift = percentShift * quote[offsetIndex] + pointShift
          quote[sd.type + ' Top ' + sd.name] = quote[centerIndex] + totalShift
          quote[sd.type + ' Bottom ' + sd.name] = quote[centerIndex] - totalShift
          quote[sd.type + ' Median ' + sd.name] = quote[centerIndex]
          quote['Bandwidth ' + sd.name] = (200 * totalShift) / quote[centerIndex]
          quote['%b ' + sd.name] = 50 * ((quote.Close - quote[centerIndex]) / totalShift + 1)
        }
      }

      CIQ.Studies.calculateMaxHighMinLow = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        var low = -1,
          high = -1
        for (var i = 0; i < quotes.length; i++) {
          var period = sd.days
          high = Math.max(high == -1 ? quotes[i].High : high, quotes[i].High)
          low = Math.min(low == -1 ? quotes[i].Low : low, quotes[i].Low)
          if (sd.inputs['High Period']) period = sd.inputs['High Period']
          var j
          if (i >= period) {
            if (quotes[i - period].High == high) {
              high = quotes[i].High
              for (j = 1; j < period; j++) {
                high = Math.max(high, quotes[i - j].High)
              }
            }
          }
          if (sd.inputs['Low Period']) period = sd.inputs['Low Period']
          if (i >= period) {
            if (quotes[i - period].Low == low) {
              low = quotes[i].Low
              for (j = 1; j < period; j++) {
                low = Math.min(low, quotes[i - j].Low)
              }
            }
          }
          var result = 0
          if (sd.type == 'HHV') {
            result = high
          } else if (sd.type == 'LLV') {
            result = low
          } else if (sd.type == 'Donchian Width') {
            result = high - low
          } else if (sd.type == 'GAPO' || sd.type == 'Gopala') {
            result = Math.log(high - low) / Math.log(period)
          } else if (sd.type == 'VT HZ Filter') {
            result = high - low
            quotes[i]['MHML ' + sd.name] = result
            continue
          } else if (sd.type == 'Williams %R') {
            result = (-100 * (high - quotes[i].Close)) / (high - low)
            quotes[i]['Result ' + sd.name] = result
            continue
          }
          if (i == quotes.length - 1) break

          if (sd.type == 'Donchian Channel') {
            quotes[i + 1]['Donchian High ' + sd.name] = high
            quotes[i + 1]['Donchian Low ' + sd.name] = low
            quotes[i + 1]['Donchian Median ' + sd.name] = (high + low) / 2
          } else {
            //width
            quotes[i + 1]['Result ' + sd.name] = result
          }
        }
      }

      CIQ.Studies.calculateAccumulationDistribution = function(stx, sd) {
        var quotes = sd.chart.scrubbed
        var total = 0
        for (var i = 1; i < quotes.length; i++) {
          var quote = quotes[i]
          var yClose = quotes[i - 1].Close
          if (!quote) continue
          var todayAD = 0
          if (quote.Close > yClose) {
            todayAD = quote.Close - Math.min(quote.Low, yClose)
          } else if (quote.Close < yClose) {
            todayAD = quote.Close - Math.max(quote.High, yClose)
          }
          if (sd.inputs['Use Volume']) todayAD *= quote.Volume
          total += todayAD
          quote['Result ' + sd.name] = total
        }
      }

      CIQ.Studies.calculateCCI = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        CIQ.Studies.MA('simple', sd.days, 'hlc/3', 0, 'MA', stx, sd)

        for (var i = sd.days - 1; i < quotes.length; i++) {
          var quote = quotes[i]
          if (!quote) continue
          var md = 0
          for (var j = 0; j < sd.days; j++) {
            md += Math.abs(quotes[i - j]['hlc/3'] - quote['MA ' + sd.name])
          }
          md /= sd.days
          quote['Result ' + sd.name] = (quote['hlc/3'] - quote['MA ' + sd.name]) / (0.015 * md)
        }
      }

      CIQ.Studies.calculateFractalChaos = function(stx, sd) {
        var quotes = sd.chart.scrubbed

        var fractalHigh = 0
        var fractalLow = 0
        var test = 0
        for (var i = 4; i < quotes.length; i++) {
          quotes[i]['Result ' + sd.name] = 0
          var j
          test = 0
          for (j = 0; j <= i; j++) {
            if (!quotes[i - j]) break
            if (quotes[i - j].High > quotes[i - 2].High) break
            if (j < 2 && quotes[i - j].High == quotes[i - 2].High) break
            if (quotes[i - j].High < quotes[i - 2].High) test++
            if (test == 4) {
              fractalHigh = quotes[i - 2].High
              break
            }
          }
          if (sd.type == 'Fractal Chaos Bands') {
            quotes[i]['Fractal High ' + sd.name] = fractalHigh > 0 ? fractalHigh : null
          } else if (test == 4) {
            //oscillator
            quotes[i]['Result ' + sd.name] = 1
          }
          test = 0
          for (j = 0; j <= i; j++) {
            if (!quotes[i - j]) break
            if (quotes[i - j].Low < quotes[i - 2].Low) break
            if (j < 2 && quotes[i - j].Low == quotes[i - 2].Low) break
            if (quotes[i - j].Low > quotes[i - 2].Low) test++
            if (test == 4) {
              fractalLow = quotes[i - 2].Low
              break
            }
          }
          if (sd.type == 'Fractal Chaos Bands') {
            quotes[i]['Fractal Low ' + sd.name] = fractalLow > 0 ? fractalLow : null
          } else if (test == 4) {
            //oscillator
            quotes[i]['Result ' + sd.name] = -1
          }
        }
      }

      CIQ.Studies.displayPrettyGoodOscillator = function(stx, sd, quotes) {
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)

        var low = -3
        var high = 3

        var panel = stx.panels[sd.panel]
        var color = stx.chart.context.strokeStyle

        stx.chart.context.globalAlpha = 0.2
        stx.chart.context.strokeStyle = sd.outputs.Result

        stx.chart.context.beginPath()
        var ph = stx.pixelFromPrice(high, panel)
        stx.chart.context.moveTo(0, ph)
        stx.chart.context.lineTo(stx.chart.width, ph)

        pl = stx.pixelFromPrice(low, panel)
        stx.chart.context.moveTo(0, pl)
        stx.chart.context.lineTo(stx.chart.width, pl)
        stx.chart.context.stroke()
        stx.chart.context.closePath()

        CIQ.preparePeakValleyFill(stx, quotes, {
          panelName: sd.panel,
          band: 'Result ' + sd.name,
          threshold: high,
          direction: 1,
          color: sd.outputs.Result,
        })
        CIQ.preparePeakValleyFill(stx, quotes, {
          panelName: sd.panel,
          band: 'Result ' + sd.name,
          threshold: low,
          direction: -1,
          color: sd.outputs.Result,
        })

        stx.chart.context.strokeStyle = color
        stx.chart.context.globalAlpha = 1
      }
      CIQ.Studies.displayRAVI = function(stx, sd, quotes) {
        var i
        for (i = 0; i < quotes.length; i++) {
          if (!quotes[i]) continue
          quotes[i][sd.name + '_hist'] = quotes[i]['Result ' + sd.name]
          //delete quotes[i]["Result "+sd.name];
        }
        CIQ.Studies.determineMinMax(stx, sd, quotes)
        var panel = stx.panels[sd.panel]
        panel.yAxis.low = panel.min = Math.min(0, panel.min)
        panel.yAxis.high = panel.max = Math.max(0, panel.max)
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)

        var y = stx.pixelFromPrice(0, panel)

        var myWidth = stx.layout.candleWidth - 2
        if (myWidth < 2) myWidth = 1

        var upColor = sd.outputs['Increasing Bar']
        var downColor = sd.outputs['Decreasing Bar']
        stx.canvasColor('stx_histogram')
        stx.chart.context.globalAlpha = 1
        stx.startClip(sd.panel)
        for (i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          if (!quote || !quotes[i - 1]) continue
          var overBought = 0,
            overSold = 0
          if (sd.parameters && sd.parameters.studyOverZonesEnabled) {
            overBought = parseFloat(sd.parameters.studyOverBoughtValue)
            overSold = parseFloat(sd.parameters.studyOverSoldValue)
          }
          if (i === 0) stx.chart.context.fillStyle = '#CCCCCC'
          else if (quote[sd.name + '_hist'] > overBought && quotes[i - 1][sd.name + '_hist'] < quote[sd.name + '_hist'])
            stx.chart.context.fillStyle = upColor
          else if (quote[sd.name + '_hist'] < overSold && quotes[i - 1][sd.name + '_hist'] > quote[sd.name + '_hist'])
            stx.chart.context.fillStyle = downColor
          else stx.chart.context.fillStyle = '#CCCCCC'
          if (quote.candleWidth) myWidth = Math.floor(Math.max(1, quote.candleWidth - 2))
          stx.chart.context.fillRect(
            Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2),
            Math.floor(y),
            Math.floor(myWidth),
            Math.floor(stx.pixelFromPrice(quote[sd.name + '_hist'], panel) - y),
          )
        }
        stx.endClip()
      }

      CIQ.Studies.displayElderForce = function(stx, sd, quotes) {
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
        CIQ.preparePeakValleyFill(stx, quotes, {
          panelName: sd.panel,
          band: 'Result ' + sd.name,
          threshold: 0,
          direction: 1,
          color: sd.outputs.Result,
        })
        CIQ.preparePeakValleyFill(stx, quotes, {
          panelName: sd.panel,
          band: 'Result ' + sd.name,
          threshold: 0,
          direction: -1,
          color: sd.outputs.Result,
        })
      }

      CIQ.Studies.displayElderRay = function(stx, sd, quotes) {
        CIQ.Studies.determineMinMax(stx, sd, quotes)
        var panel = stx.panels[sd.panel]
        panel.yAxis.low = panel.min = Math.min(0, panel.min)
        panel.yAxis.high = panel.max = Math.max(0, panel.max)
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)

        var y = stx.pixelFromPrice(0, panel)

        var myWidth = stx.layout.candleWidth - 2
        if (myWidth < 2) myWidth = 1
        function drawBar(i, reduction, output, hist) {
          stx.chart.context.fillStyle = sd.outputs[output]
          stx.chart.context.fillRect(
            Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2 + myWidth * reduction),
            Math.floor(y),
            Math.floor(myWidth * (1 - 2 * reduction)),
            Math.floor(stx.pixelFromPrice(quote[sd.name + hist], panel) - y),
          )
        }

        stx.canvasColor('stx_histogram')
        var fillStyle = stx.chart.context.fillStyle
        stx.chart.context.globalAlpha = 1
        stx.startClip(sd.panel)
        for (var i = 0; i < quotes.length; i++) {
          var quote = quotes[i]
          if (!quote) continue
          if (quote.candleWidth) myWidth = Math.floor(Math.max(1, quote.candleWidth - 2))
          if (quote[sd.name + '_hist1'] > 0) drawBar(i, 0, 'Elder Bull Power', '_hist1')
          if (quote[sd.name + '_hist2'] < 0) drawBar(i, 0, 'Elder Bear Power', '_hist2')
          if (quote[sd.name + '_hist1'] < 0) drawBar(i, 0.1, 'Elder Bull Power', '_hist1')
          if (quote[sd.name + '_hist2'] > 0) drawBar(i, 0.1, 'Elder Bear Power', '_hist2')
        }
        stx.endClip()
        stx.chart.context.fillStyle = fillStyle
      }

      CIQ.Studies.displayADX = function(stx, sd, quotes) {
        CIQ.Studies.createYAxis(stx, sd, quotes, stx.panels[sd.panel])
        if (sd.inputs.Series && sd.inputs.Shading) {
          var parameters = {
            topBand: '+DI ' + sd.name,
            bottomBand: '-DI ' + sd.name,
          }
          stx.chart.context.globalAlpha = 0.3
          CIQ.fillIntersecting(stx, sd, quotes, parameters)
          stx.chart.context.globalAlpha = 1
        }
        var opacity = sd.inputs.Series ? 0.4 : 1
        if (sd.inputs.Histogram) CIQ.Studies.createHistogram(stx, sd, quotes, false, opacity)
        if (sd.inputs.Series !== false) CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
        else if (!sd.inputs.Series && !sd.inputs.Histogram)
          stx.watermark(sd.panel, 'center', 'bottom', stx.translateIf('Nothing to display'))
      }

      CIQ.Studies.displayMassIndex = function(stx, sd, quotes) {
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)

        var bulge = sd.inputs['Bulge Threshold']

        var panel = stx.panels[sd.panel]
        var color = stx.chart.context.strokeStyle

        stx.chart.context.globalAlpha = 0.2
        stx.chart.context.strokeStyle = sd.outputs.Result

        stx.chart.context.beginPath()
        var p = stx.pixelFromPrice(bulge, panel)
        stx.chart.context.moveTo(0, p)
        stx.chart.context.lineTo(stx.chart.width, p)
        stx.chart.context.stroke()
        stx.chart.context.closePath()

        CIQ.preparePeakValleyFill(stx, quotes, {
          panelName: sd.panel,
          band: 'Result ' + sd.name,
          threshold: bulge,
          direction: 1,
          color: sd.outputs.Result,
        })

        stx.chart.context.strokeStyle = color
        stx.chart.context.globalAlpha = 1
      }

      /**
       * Rendering function for displaying a Channel study output composed of top, middle and bottom lines.
       *
       * Requires study library input of <code>"Channel Fill":true</code> to determine if the area within the channel is to be shaded.
       * Shading will be done using the "xxxxx Channel" or "xxxxx Median" color defined in the outputs parameter of the study library.
       *
       * Requires study library outputs to have fields in the format of :
       * - 'xxxxx Top' or 'xxxxx High' for the top band,
       * - 'xxxxx Bottom' or 'xxxxx Low' for the bottom band and
       * - 'xxxxx Median' or 'xxxxx Channel' for the middle line.
       *
       * It expects 'quotes' to have fields for each series in the channel with keys in the following format:
       * - study-output-name ( from study library) + " " + sd.name.
       * - Example: 'Prime Bands Top'+ ' ' +  'Prime Number Bands (true)'. Which equals : 'Prime Bands Top Prime Number Bands (true)'
       *
       * @param  {CIQ.ChartEngine} stx Chart object
       * @param  {object} sd  Study Descriptor
       * @param {array} quotes The array of quotes needed to render the channel
       * @memberOf CIQ.Studies
       * @example
       * "inputs": {"Period":5, "Shift": 3, "Field":"field", "Channel Fill":true}
       * "outputs": {"Prime Bands Top":"red", "Prime Bands Bottom":"auto", "Prime Bands Channel":"rgb(184,44,11)"}
       */
      CIQ.Studies.displayChannel = function(stx, sd, quotes) {
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
        if (sd.inputs['Channel Fill']) {
          var parameters = { panelName: sd.panel }
          for (var p in sd.outputs) {
            var lastWord = p.split(' ').pop()
            if (lastWord == 'Top' || lastWord == 'High') {
              parameters.topBand = p + ' ' + sd.name
            } else if (lastWord == 'Bottom' || lastWord == 'Low') {
              parameters.bottomBand = p + ' ' + sd.name
            } else if (lastWord == 'Median' || lastWord == 'Channel') {
              parameters.color = sd.outputs[p]
            }
          }
          CIQ.prepareChannelFill(stx, quotes, parameters)
        }
      }

      CIQ.Studies.inputAttributeDefaultGenerator = function(value) {
        if (!value && value !== 0) return {}
        if (value.constructor == Number) {
          if (Math.floor(value) == value) {
            //Integer
            if (value > 0) return { min: 1, step: 1 }
            //positive
            else return { step: 1 } //full range
          } else {
            //Decimal
            if (value > 0) return { min: 0, step: 0.01 }
            //positive
            else return { step: 0.01 } //full range
          }
        }
        return {}
      }

      /**
	 * The studyLibrary defines all of the available studies. This is used to drive the dialog boxes and creation of the studies. When you
	 * create a custom study you should add it to the studyLibrary.
	 *
	 * You can also alter study defaults by overriding the different elements on each definition.
	 * For example, if you wanted to change the default colors for the volume underlay,
	 * you would add the following code in your files; making sure your files are loaded **after** the library js files -- not before:
	 * ```
	 * CIQ.Studies.studyLibrary["vol undr"].outputs= {"Up Volume":"blue","Down Volume":"yellow"};
	 * ```
	 * See {@tutorial Custom Studies} for complete details
	 * @type {Object}
	 * @memberOf CIQ.Studies
	 * @example
	 * "RAVI": {
			"name": "RAVI",
			"seriesFN": CIQ.Studies.displayRAVI,
			"calculateFN": CIQ.Studies.calculatePriceOscillator,
			"inputs": {"Field":"field", "Short Cycle":7, "Long Cycle":65},
			"outputs": {"Increasing Bar":"#00DD00", "Decreasing Bar":"#FF0000"},
			"parameters": {
				template:"studyOverZones",
				init:{studyOverZonesEnabled:true, studyOverBoughtValue:3, studyOverBoughtColor:"auto", studyOverSoldValue:-3, studyOverSoldColor:"auto"}
			},
			"attributes":{"Short Cycle":{"min":1,"max":999,step:"1"}}
		},
	 */
      CIQ.Studies.studyLibrary = {
        rsi: {
          name: 'RSI',
          inputs: { Period: 14 },
          calculateFN: CIQ.Studies.calculateRSI,
          range: '0 to 100',
          outputs: { RSI: 'auto' },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 80,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: 20,
              studyOverSoldColor: 'auto',
            },
          },
        },
        ma: {
          name: 'Moving Average',
          overlay: true,
          range: 'bypass',
          calculateFN: CIQ.Studies.calculateMovingAverage,
          inputs: { Period: 50, Field: 'field', Type: 'ma', Offset: 0, Underlay: false },
          outputs: { MA: '#FF0000' },
        },
        macd: {
          name: 'MACD',
          calculateFN: CIQ.Studies.calculateMACD,
          seriesFN: CIQ.Studies.displayHistogramWithSeries,
          inputs: { 'Fast MA Period': 12, 'Slow MA Period': 26, 'Signal Period': 9 },
          outputs: { MACD: 'auto', Signal: '#FF0000', 'Increasing Bar': '#00DD00', 'Decreasing Bar': '#FF0000' },
        },
        stochastics: {
          name: 'Stochastics',
          range: '0 to 100',
          initializeFN: CIQ.Studies.initializeStochastics,
          calculateFN: CIQ.Studies.calculateStochastics,
          inputs: { Period: 14, Smooth: true },
          outputs: { Fast: 'auto', Slow: '#FF0000' },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 80,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: 20,
              studyOverSoldColor: 'auto',
            },
          },
        },
        Aroon: {
          name: 'Aroon',
          range: '0 to 100',
          calculateFN: CIQ.Studies.calculateAroon,
          outputs: { 'Aroon Up': '#00DD00', 'Aroon Down': '#FF0000' },
        },
        'Aroon Osc': {
          name: 'Aroon Oscillator',
          calculateFN: CIQ.Studies.calculateAroon,
          outputs: { 'Aroon Oscillator': 'auto' },
        },
        'Lin R2': {
          name: 'Linear Reg R2',
          calculateFN: CIQ.Studies.calculateLinearRegressionIndicator,
          inputs: { Period: 14, Field: 'field' },
          outputs: { RSquared: 'auto' },
        },
        'Lin Fcst': {
          name: 'Linear Reg Forecast',
          overlay: true,
          calculateFN: CIQ.Studies.calculateLinearRegressionIndicator,
          inputs: { Period: 14, Field: 'field' },
          outputs: { Forecast: 'auto' },
        },
        'Lin Incpt': {
          name: 'Linear Reg Intercept',
          overlay: true,
          calculateFN: CIQ.Studies.calculateLinearRegressionIndicator,
          inputs: { Period: 14, Field: 'field' },
          outputs: { Intercept: 'auto' },
        },
        'Time Fcst': {
          name: 'Time Series Forecast',
          overlay: true,
          calculateFN: CIQ.Studies.calculateLinearRegressionIndicator,
          inputs: { Period: 14, Field: 'field' },
          outputs: { Forecast: 'auto' },
        },
        'VT HZ Filter': {
          name: 'Vertical Horizontal Filter',
          calculateFN: CIQ.Studies.calculateVerticalHorizontalFilter,
          inputs: { Period: 28 },
        },
        TRIX: {
          name: 'TRIX',
          calculateFN: CIQ.Studies.calculateTRIX,
        },
        'STD Dev': {
          name: 'Standard Deviation',
          calculateFN: CIQ.Studies.calculateStandardDeviation,
          inputs: { Period: 14, Field: 'field', 'Standard Deviations': 2, 'Moving Average Type': 'ma' },
          attributes: {
            'Standard Deviations': { min: 0.1, step: 0.1 },
          },
        },
        'Trade Vol': {
          name: 'Trade Volume Index',
          calculateFN: CIQ.Studies.calculateOnBalanceVolume,
          inputs: { 'Min Tick Value': 0.5 },
        },
        Swing: {
          name: 'Swing Index',
          calculateFN: CIQ.Studies.calculateSwingIndex,
          inputs: { 'Limit Move Value': 0.5 },
        },
        'Acc Swing': {
          name: 'Accumulative Swing Index',
          calculateFN: CIQ.Studies.calculateSwingIndex,
          inputs: { 'Limit Move Value': 0.5 },
        },
        'Price ROC': {
          name: 'Price Rate of Change',
          calculateFN: CIQ.Studies.calculateRateOfChange,
          inputs: { Field: 'field', Period: 14 },
        },
        'Vol ROC': {
          name: 'Volume Rate of Change',
          calculateFN: CIQ.Studies.calculateRateOfChange,
        },
        Momentum: {
          name: 'Momentum Indicator',
          calculateFN: CIQ.Studies.calculateRateOfChange,
          inputs: { Period: 14 },
          centerline: 0,
        },
        'Price Vol': {
          name: 'Price Volume Trend',
          calculateFN: CIQ.Studies.calculatePriceVolumeTrend,
          inputs: { Field: 'field' },
        },
        'Pos Vol': {
          name: 'Positive Volume Index',
          calculateFN: CIQ.Studies.calculateVolumeIndex,
          inputs: { Field: 'field', 'Moving Average Type': 'ma', Period: 255 },
          outputs: { Index: 'auto', MA: '#FF0000' },
        },
        'Neg Vol': {
          name: 'Negative Volume Index',
          calculateFN: CIQ.Studies.calculateVolumeIndex,
          inputs: { Field: 'field', 'Moving Average Type': 'ma', Period: 255 },
          outputs: { Index: 'auto', MA: '#FF0000' },
        },
        'On Bal Vol': {
          name: 'On Balance Volume',
          calculateFN: CIQ.Studies.calculateOnBalanceVolume,
          inputs: {},
        },
        'Stch Mtm': {
          name: 'Stochastic Momentum Index',
          calculateFN: CIQ.Studies.calculateStochMomentum,
          inputs: {
            '%K Periods': 10,
            '%K Smoothing Periods': 3,
            '%K Double Smoothing Periods': 3,
            '%D Periods': 10,
            '%D Moving Average Type': 'ema',
          },
          outputs: { '%K': 'auto', '%D': '#FF0000' },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 40,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: -40,
              studyOverSoldColor: 'auto',
            },
          },
        },
        'Hist Vol': {
          name: 'Historical Volatility',
          calculateFN: CIQ.Studies.calculateHistoricalVolatility,
          inputs: { Field: 'field', Period: 10, 'Days Per Year': [252, 365], 'Standard Deviations': 1 },
          attributes: {
            'Standard Deviations': { min: 0.1, step: 0.1 },
          },
        },
        'Pretty Good': {
          name: 'Pretty Good Oscillator',
          seriesFN: CIQ.Studies.displayPrettyGoodOscillator,
          calculateFN: CIQ.Studies.calculatePrettyGoodOscillator,
        },
        Ultimate: {
          name: 'Ultimate Oscillator',
          calculateFN: CIQ.Studies.calculateUltimateOscillator,
          inputs: { 'Cycle 1': 7, 'Cycle 2': 14, 'Cycle 3': 28 },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 70,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: 30,
              studyOverSoldColor: 'auto',
            },
          },
        },
        'Vol Osc': {
          name: 'Volume Oscillator',
          calculateFN: CIQ.Studies.calculatePriceOscillator,
          inputs: { 'Short Cycle': 12, 'Long Cycle': 26, 'Points Or Percent': ['Points', 'Percent'] },
          parameters: {
            init: { isVolume: true },
          },
        },
        Twiggs: {
          name: 'Twiggs Money Flow',
          calculateFN: CIQ.Studies.calculateTwiggsMoneyFlow,
          inputs: { Period: 21 },
        },
        'Chaikin MF': {
          name: 'Chaikin Money Flow',
          calculateFN: CIQ.Studies.calculateChaikinMoneyFlow,
          inputs: { Period: 20 },
        },
        'Chaikin Vol': {
          name: 'Chaikin Volatility',
          calculateFN: CIQ.Studies.calculateChaikinVolatility,
          inputs: { Period: 14, 'Rate Of Change': 2, 'Moving Average Type': 'ma' },
        },
        'Price Osc': {
          name: 'Price Oscillator',
          calculateFN: CIQ.Studies.calculatePriceOscillator,
          inputs: {
            Field: 'field',
            'Long Cycle': 26,
            'Short Cycle': 12,
            'Moving Average Type': 'ema',
            'Points Or Percent': ['Points', 'Percent'],
          },
        },
        EOM: {
          name: 'Ease of Movement',
          calculateFN: CIQ.Studies.calculateEaseOfMovement,
          inputs: { Period: 14, 'Moving Average Type': 'ma' },
        },
        CCI: {
          name: 'Commodity Channel Index',
          calculateFN: CIQ.Studies.calculateCCI,
          inputs: { Period: 20 },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 100,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: -100,
              studyOverSoldColor: 'auto',
            },
          },
        },
        Detrended: {
          name: 'Detrended Price Oscillator',
          calculateFN: CIQ.Studies.calculateDetrendedPrice,
          inputs: { Field: 'field', Period: 14, 'Moving Average Type': 'ma' },
        },
        'True Range': {
          name: 'True Range',
          calculateFN: CIQ.Studies.calculateStudyATR,
          inputs: {},
          outputs: { 'True Range': 'auto' },
        },
        ATR: {
          name: 'Average True Range',
          calculateFN: CIQ.Studies.calculateStudyATR,
          outputs: { ATR: 'auto' },
        },
        'Ehler Fisher': {
          name: 'Ehler Fisher Transform',
          calculateFN: CIQ.Studies.calculateEhlerFisher,
          inputs: { Period: 10 },
          outputs: { EF: 'auto', 'EF Trigger': '#FF0000' },
        },
        Schaff: {
          name: 'Schaff Trend Cycle',
          range: '0 to 100',
          calculateFN: CIQ.Studies.calculateSchaff,
          inputs: { Field: 'field', Period: 10, 'Short Cycle': 23, 'Long Cycle': 50, 'Moving Average Type': 'ema' },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 75,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: 25,
              studyOverSoldColor: 'auto',
            },
          },
        },
        QStick: {
          name: '',
          calculateFN: CIQ.Studies.calculateQStick,
          inputs: { Period: 8, 'Moving Average Type': 'ma' },
        },
        Coppock: {
          name: 'Coppock Curve',
          calculateFN: CIQ.Studies.calculateCoppock,
          inputs: { Field: 'field', 'Short RoC': 11, 'Long RoC': 14, Period: 10 },
        },
        'Chande Mtm': {
          name: 'Chande Momentum Oscillator',
          calculateFN: CIQ.Studies.calculateChandeMomentum,
          inputs: { Period: 9 },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 50,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: -50,
              studyOverSoldColor: 'auto',
            },
          },
        },
        'Chande Fcst': {
          name: 'Chande Forecast Oscillator',
          calculateFN: CIQ.Studies.calculateChandeForecast,
          inputs: { Field: 'field', Period: 14 },
        },
        'Intraday Mtm': {
          name: 'Intraday Momentum Index',
          calculateFN: CIQ.Studies.calculateIntradayMomentum,
          inputs: { Period: 20 },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 70,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: 30,
              studyOverSoldColor: 'auto',
            },
          },
        },
        RAVI: {
          name: 'RAVI',
          seriesFN: CIQ.Studies.displayRAVI,
          calculateFN: CIQ.Studies.calculatePriceOscillator,
          inputs: { Field: 'field', 'Moving Average Type': 'vdma', 'Short Cycle': 7, 'Long Cycle': 65 },
          outputs: { 'Increasing Bar': '#00DD00', 'Decreasing Bar': '#FF0000' },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 3,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: -3,
              studyOverSoldColor: 'auto',
            },
          },
        },
        'Random Walk': {
          name: 'Random Walk Index',
          calculateFN: CIQ.Studies.calculateRandomWalk,
          outputs: { 'Random Walk High': '#FF0000', 'Random Walk Low': '#0000FF' },
        },
        ADX: {
          name: 'ADX/DMS',
          calculateFN: CIQ.Studies.calculateADX,
          seriesFN: CIQ.Studies.displayADX,
          inputs: { Period: 14, 'Smoothing Period': 14, Series: true, Shading: false, Histogram: false },
          outputs: {
            '+DI': '#00FF00',
            '-DI': '#FF0000',
            ADX: 'auto',
            'Positive Bar': '#00DD00',
            'Negative Bar': '#FF0000',
          },
        },
        Directional: {
          name: 'ADX/DMS',
          calculateFN: CIQ.Studies.calculateADX,
          outputs: { '+DI': '#00FF00', '-DI': '#FF0000', ADX: 'auto' },
        },
        'High Low': {
          name: 'High Low Bands',
          overlay: true,
          seriesFN: CIQ.Studies.displayChannel,
          calculateFN: function(stx, sd) {
            sd.inputs['Moving Average Type'] = 'triangular'
            CIQ.Studies.calculateMAEnvelope(stx, sd)
          },
          inputs: { Field: 'field', Period: 10, 'Shift Percentage': 5, 'Channel Fill': true },
          outputs: { 'High Low Top': 'auto', 'High Low Median': 'auto', 'High Low Bottom': 'auto' },
          attributes: {
            'Shift Percentage': { min: 0.1, step: 0.1 },
          },
        },
        'High-Low': {
          name: 'High Minus Low',
          calculateFN: function(stx, sd) {
            var quotes = sd.chart.scrubbed
            for (var i = 0; i < quotes.length; i++) {
              quotes[i]['Result ' + sd.name] = quotes[i].High - quotes[i].Low
            }
          },
          inputs: {},
        },
        'Med Price': {
          name: 'Median Price',
          calculateFN: CIQ.Studies.calculateMedianPrice,
          inputs: { Period: 14, Overlay: false },
        },
        'MA Env': {
          name: 'Moving Average Envelope',
          overlay: true,
          seriesFN: CIQ.Studies.displayChannel,
          calculateFN: CIQ.Studies.calculateMAEnvelope,
          inputs: {
            Field: 'field',
            Period: 50,
            'Shift Type': ['percent', 'points'],
            Shift: 5,
            'Moving Average Type': 'ma',
            'Channel Fill': true,
          },
          outputs: { 'MA Env Top': 'auto', 'MA Env Median': 'auto', 'MA Env Bottom': 'auto' },
          attributes: {
            Shift: { min: 0.1, step: 0.1 },
          },
        },
        'Fractal Chaos Bands': {
          name: 'Fractal Chaos Bands',
          overlay: true,
          calculateFN: CIQ.Studies.calculateFractalChaos,
          seriesFN: CIQ.Studies.displayChannel,
          inputs: { 'Channel Fill': true },
          outputs: { 'Fractal High': 'auto', 'Fractal Low': 'auto', 'Fractal Channel': 'auto' },
        },
        'Fractal Chaos': {
          name: 'Fractal Chaos Oscillator',
          range: '-1 to 1',
          calculateFN: CIQ.Studies.calculateFractalChaos,
          inputs: {},
          centerline: 20, //so centerline is "off the chart" and not visible
        },
        GAPO: {
          name: 'Gopalakrishnan Range Index',
          calculateFN: CIQ.Studies.calculateMaxHighMinLow,
        },
        Gopala: {
          name: 'Gopalakrishnan Range Index',
          calculateFN: CIQ.Studies.calculateMaxHighMinLow,
        },
        'Prime Number Bands': {
          name: 'Prime Number Bands',
          overlay: true,
          calculateFN: CIQ.Studies.calculatePrimeNumber,
          seriesFN: CIQ.Studies.displayChannel,
          inputs: { 'Channel Fill': true },
          outputs: { 'Prime Bands Top': 'auto', 'Prime Bands Bottom': 'auto', 'Prime Bands Channel': 'auto' },
        },
        'Prime Number': {
          name: 'Prime Number Oscillator',
          range: '-1 to 1',
          calculateFN: CIQ.Studies.calculatePrimeNumber,
          inputs: { 'Tolerance Percentage': 5 },
          attributes: {
            'Tolerance Percentage': { min: 0.1, step: 0.1 },
          },
        },
        'Bollinger Bands': {
          name: 'Bollinger Bands',
          overlay: true,
          initializeFN: CIQ.Studies.convertOldBollinger,
          calculateFN: CIQ.Studies.calculateBollinger,
          seriesFN: CIQ.Studies.displayChannel,
          inputs: {
            Field: 'field',
            Period: 20,
            'Standard Deviations': 2,
            'Moving Average Type': 'ma',
            'Channel Fill': true,
          },
          outputs: {
            'Bollinger Bands Top': 'auto',
            'Bollinger Bands Median': 'auto',
            'Bollinger Bands Bottom': 'auto',
          },
          attributes: {
            'Standard Deviations': { min: 0.1, step: 0.1 },
          },
        },
        'Donchian Channel': {
          name: 'Donchian Channel',
          overlay: true,
          calculateFN: CIQ.Studies.calculateMaxHighMinLow,
          seriesFN: CIQ.Studies.displayChannel,
          inputs: { 'High Period': 20, 'Low Period': 20, 'Channel Fill': true },
          outputs: { 'Donchian High': 'auto', 'Donchian Median': 'auto', 'Donchian Low': 'auto' },
        },
        HHV: {
          name: 'Highest High Value',
          calculateFN: CIQ.Studies.calculateMaxHighMinLow,
          inputs: { Period: 14 },
        },
        LLV: {
          name: 'Lowest Low Value',
          calculateFN: CIQ.Studies.calculateMaxHighMinLow,
          inputs: { Period: 14 },
        },
        'Mass Idx': {
          name: 'Mass Index',
          seriesFN: CIQ.Studies.displayMassIndex,
          calculateFN: CIQ.Studies.calculateMassIndex,
          inputs: { Period: 25, 'Bulge Threshold': 27 },
          attributes: {
            'Bulge Threshold': { min: 20, max: 35, step: 0.1 },
          },
        },
        Keltner: {
          name: 'Keltner Channel',
          overlay: true,
          seriesFN: CIQ.Studies.displayChannel,
          calculateFN: CIQ.Studies.calculateKeltner,
          inputs: { Period: 50, Shift: 5, 'Moving Average Type': 'ema', 'Channel Fill': true },
          outputs: { 'Keltner Top': 'auto', 'Keltner Median': 'auto', 'Keltner Bottom': 'auto' },
          attributes: {
            Shift: { min: 0.1, step: 0.1 },
          },
        },
        PSAR: {
          name: 'Parabolic SAR',
          overlay: true,
          calculateFN: CIQ.Studies.calculatePSAR,
          seriesFN: CIQ.Studies.displayPSAR2,
          inputs: { 'Minimum AF': 0.02, 'Maximum AF': 0.2 },
        },
        Klinger: {
          name: 'Klinger Volume Oscillator',
          seriesFN: CIQ.Studies.displayHistogramWithSeries,
          calculateFN: CIQ.Studies.calculateKlinger,
          inputs: { 'Signal Periods': 13, 'Short Cycle': 34, 'Long Cycle': 55 },
          outputs: {
            Klinger: 'auto',
            KlingerSignal: '#FF0000',
            'Increasing Bar': '#00DD00',
            'Decreasing Bar': '#FF0000',
          },
        },
        'Elder Ray': {
          name: 'Elder Ray Index',
          seriesFN: CIQ.Studies.displayElderRay,
          calculateFN: CIQ.Studies.calculateElderRay,
          inputs: { Period: 13 },
          outputs: { 'Elder Bull Power': '#00DD00', 'Elder Bear Power': '#FF0000' },
        },
        'Elder Force': {
          name: 'Elder Force Index',
          calculateFN: CIQ.Studies.calculateElderForce,
          seriesFN: CIQ.Studies.displayElderForce,
          inputs: { Period: 13 },
        },
        'LR Slope': {
          name: 'Linear Reg Slope',
          calculateFN: CIQ.Studies.calculateLinearRegressionIndicator,
          inputs: { Period: 14, Field: 'field' },
          outputs: { Slope: 'auto' },
        },
        COG: {
          name: 'Center Of Gravity',
          calculateFN: CIQ.Studies.calculateCenterOfGravity,
          inputs: { Period: 10, Field: 'field' },
        },
        'Typical Price': {
          name: 'Typical Price',
          calculateFN: CIQ.Studies.calculateTypicalPrice,
          inputs: { Period: 14, Overlay: false },
        },
        'Weighted Close': {
          name: 'Weighted Close',
          calculateFN: CIQ.Studies.calculateWeightedClose,
          inputs: { Period: 14, Overlay: false },
        },
        'M Flow': {
          name: 'Money Flow Index',
          range: '0 to 100',
          calculateFN: CIQ.Studies.calculateMoneyFlowIndex,
          inputs: { Period: 14 },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: 80,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: 20,
              studyOverSoldColor: 'auto',
            },
          },
        },
        'Williams %R': {
          name: 'Williams %R',
          calculateFN: CIQ.Studies.calculateMaxHighMinLow,
          inputs: { Period: 14 },
          parameters: {
            template: 'studyOverZones',
            init: {
              studyOverZonesEnabled: true,
              studyOverBoughtValue: -20,
              studyOverBoughtColor: 'auto',
              studyOverSoldValue: -80,
              studyOverSoldColor: 'auto',
            },
          },
        },
        'W Acc Dist': {
          name: 'Accumulation/Distribution',
          calculateFN: CIQ.Studies.calculateAccumulationDistribution,
          inputs: { 'Use Volume': false },
        },
        vchart: {
          name: 'Volume Chart',
          display: 'Volume',
          range: '0 to max',
          //"yAxis": {"initialMarginBottom":10,"initialMarginTop":0}, // use this one to see the bottom value on axis.
          yAxis: { ground: true, initialMarginTop: 0 },
          seriesFN: CIQ.Studies.createVolumeChart,
          calculateFN: CIQ.Studies.calculateVolume,
          inputs: {},
          outputs: { 'Up Volume': '#8cc176', 'Down Volume': '#b82c0c' },
          parameters: {
            zoom: 0,
          },
        },
        volume: {
          name: 'Volume Chart',
          display: 'Volume',
          range: '0 to max',
          yAxis: { ground: true, initialMarginTop: 0 },
          seriesFN: CIQ.Studies.createVolumeChart,
          calculateFN: CIQ.Studies.calculateVolume,
          inputs: {},
          outputs: { 'Up Volume': '#8cc176', 'Down Volume': '#b82c0c' },
          parameters: {
            zoom: 0,
          },
        },
        'vol undr': {
          name: 'Volume Underlay',
          underlay: true,
          seriesFN: CIQ.Studies.volUnderlay,
          calculateFN: CIQ.Studies.calculateVolume,
          inputs: {},
          outputs: { 'Up Volume': '#8cc176', 'Down Volume': '#b82c0c' },
          customRemoval: true,
          removeFN: function(stx, sd) {
            stx.layout.volumeUnderlay = false
            stx.changeOccurred('layout')
          },
          parameters: {
            init: { heightPercentage: 0.25 },
          },
        },
      }

      return _exports
    }

  var __js_advanced_drawingAdvanced_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
       * Channel drawing tool. Creates a channel within 2 parallel line segments.
       *
       * It inherits its properties from {@link CIQ.Drawing.segment}.
       * @constructor
       * @name  CIQ.Drawing.channel
       * @version ChartIQ Advanced Package
       */
      CIQ.Drawing.channel = function() {
        this.name = 'channel'
        this.dragToDraw = false
        this.p2 = null
      }

      CIQ.Drawing.channel.ciqInheritsFrom(CIQ.Drawing.segment)

      CIQ.Drawing.channel.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.fillColor = this.stx.currentVectorParameters.fillColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.pattern = this.stx.currentVectorParameters.pattern
      }

      CIQ.Drawing.channel.prototype.move = function(context, tick, value) {
        if (!this.penDown) return

        this.copyConfig()
        if (this.p2 === null) this.p1 = [tick, value]
        else {
          var y = value - ((this.p1[1] - this.p0[1]) / (this.p1[0] - this.p0[0])) * (tick - this.p1[0])
          this.p2 = [this.p1[0], y]
        }
        this.render(context)
      }

      CIQ.Drawing.channel.prototype.click = function(context, tick, value) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.copyConfig()
        if (!this.penDown) {
          this.setPoint(0, tick, value, panel.chart)
          this.penDown = true
          return false
        }
        if (this.accidentalClick(tick, value)) {
          this.stx.undo() //abort
          return true
        }

        if (this.p2 !== null) {
          this.setPoint(2, this.p2[0], this.p2[1], panel.chart)
          return true
        }
        this.setPoint(1, tick, value, panel.chart)
        this.p2 = [this.p1[0], this.p1[1]]
        return false
      }

      CIQ.Drawing.channel.prototype.boxIntersection = function(tick, value) {
        if (!this.p0 || !this.p1 || !this.p2) return false
        if (tick > Math.max(this.p0[0], this.p1[0]) || tick < Math.min(this.p0[0], this.p1[0])) return false

        // http://stackoverflow.com/questions/1560492/how-to-tell-whether-a-point-is-to-the-right-or-left-side-of-a-line
        var s1 = (this.p1[0] - this.p0[0]) * (value - this.p0[1]) - (this.p1[1] - this.p0[1]) * (tick - this.p0[0])
        var s2 =
          (this.p2[0] - this.p0[0]) * (value - (this.p0[1] + this.p2[1] - this.p1[1])) -
          (this.p1[1] - this.p0[1]) * (tick - this.p0[0])
        return s1 * s2 < 0
      }

      CIQ.Drawing.channel.prototype.intersected = function(tick, value, box) {
        if (!this.p0 || !this.p1 || !this.p2) return null // in case invalid drawing (such as from panel that no longer exists)
        if (this.pointIntersection(this.p0[0], this.p0[1], box)) {
          this.highlighted = 'p0'
          return {
            action: 'drag',
            point: 'p0',
          }
        } else if (this.pointIntersection(this.p1[0], this.p1[1], box)) {
          this.highlighted = 'p1'
          return {
            action: 'drag',
            point: 'p1',
          }
        } else if (this.pointIntersection(this.p2[0], this.p2[1], box)) {
          this.highlighted = 'p2'
          return {
            action: 'drag',
            point: 'p2',
          }
        }
        if (this.boxIntersection(tick, value)) {
          this.highlighted = true
          // This object will be used for repositioning
          return {
            action: 'move',
            p0: CIQ.clone(this.p0),
            p1: CIQ.clone(this.p1),
            p2: CIQ.clone(this.p2),
            tick: tick, // save original tick
            value: value, // save original value
          }
        } else {
          return null
        }
      }

      CIQ.Drawing.channel.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
        var y = null
        if (this.p2) {
          y = this.stx.pixelFromValueAdjusted(panel, this.p2[0], this.p2[1])
        }

        var color = this.color
        if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
        var width = this.lineWidth
        if (this.highlighted) {
          color = this.stx.getCanvasColor('stx_highlight_vector')
        }

        var fillColor = this.fillColor
        if (this.p2 && fillColor && !CIQ.isTransparent(fillColor) && fillColor != 'auto') {
          context.beginPath()
          context.moveTo(x0, y0)
          context.lineTo(x1, y1)
          context.lineTo(x1, y)
          context.lineTo(x0, y0 + (y - y1))
          context.closePath()
          context.globalAlpha = 0.2
          context.fillStyle = fillColor
          context.fill()
          context.globalAlpha = 1
        }

        var parameters = {
          pattern: this.pattern,
          lineWidth: width,
        }
        this.stx.plotLine(x0, x1, y0, y1, color, 'segment', context, panel, parameters)
        if (this.p2) this.stx.plotLine(x0, x1, y0 + (y - y1), y, color, 'segment', context, panel, parameters)

        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          var p2Fill = this.highlighted == 'p2' ? true : false
          this.littleCircle(context, x0, y0, p0Fill)
          this.littleCircle(context, x1, y1, p1Fill)
          this.littleCircle(context, x1, y, p2Fill)
        }
      }

      CIQ.Drawing.channel.prototype.reposition = function(context, repositioner, tick, value) {
        var panel = this.stx.panels[this.panelName]
        var tickDiff = repositioner.tick - tick
        var valueDiff = repositioner.value - value
        if (repositioner.action == 'move') {
          this.setPoint(0, repositioner.p0[0] - tickDiff, repositioner.p0[1] - valueDiff, panel.chart)
          this.setPoint(1, repositioner.p1[0] - tickDiff, repositioner.p1[1] - valueDiff, panel.chart)
          this.setPoint(2, repositioner.p2[0] - tickDiff, repositioner.p2[1] - valueDiff, panel.chart)
          this.render(context)
        } else if (repositioner.action == 'drag') {
          this[repositioner.point] = [tick, value]
          this.setPoint(0, this.p0[0], this.p0[1], panel.chart)
          this.setPoint(1, this.p1[0], this.p1[1], panel.chart)
          this.setPoint(2, this.p2[0], this.p2[1], panel.chart)
          this.render(context)
        }
      }

      CIQ.Drawing.channel.prototype.adjust = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.setPoint(1, this.d1, this.v1, panel.chart)
        this.setPoint(2, this.d1, this.v2, panel.chart) //not an error, should be d1 here
      }

      /**
       * Reconstruct a channel
       * @memberOf CIQ.Drawing.channel
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The line color
       * @param {string} [obj.fc] The fill color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.v1] Value (price) for the second point
       * @param {number} [obj.v2] Value (price) for the second point of the opposing parallel channel line
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {number} [obj.d1] Date (string form) for the second point
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
       */
      CIQ.Drawing.channel.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.fillColor = obj.fc
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.d0 = obj.d0
        this.d1 = obj.d1
        this.tzo0 = obj.tzo0
        this.tzo1 = obj.tzo1
        this.v0 = obj.v0
        this.v1 = obj.v1
        this.v2 = obj.v2
        this.adjust()
      }

      CIQ.Drawing.channel.prototype.serialize = function() {
        return {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          fc: this.fillColor,
          ptrn: this.pattern,
          lw: this.lineWidth,
          d0: this.d0,
          d1: this.d1,
          tzo0: this.tzo0,
          tzo1: this.tzo1,
          v0: this.v0,
          v1: this.v1,
          v2: this.v2,
        }
      }

      /**
       * Andrews' Pitchfork drawing tool. A Pitchfork is defined by three parallel rays.  The center ray is equidistant from the two outer rays.
       *
       * It inherits its properties from {@link CIQ.Drawing.channel}.
       * @constructor
       * @name  CIQ.Drawing.pitchfork
       * @version ChartIQ Advanced Package
       */
      CIQ.Drawing.pitchfork = function() {
        this.name = 'pitchfork'
        this.dragToDraw = false
        this.p2 = null
      }

      CIQ.Drawing.pitchfork.ciqInheritsFrom(CIQ.Drawing.channel)

      CIQ.Drawing.pitchfork.prototype.move = function(context, tick, value) {
        if (!this.penDown) return

        this.copyConfig()
        if (this.p2 === null) this.p1 = [tick, value]
        else this.p2 = [tick, value]
        this.render(context)
      }

      CIQ.Drawing.pitchfork.prototype.lineIntersection = function(tick, value, box, type) {
        if (!this.p0 || !this.p1) return false
        if (this.stx.layout.semiLog || this.stx.layout.chartScale == 'log') {
          return CIQ.boxIntersects(
            box.x0,
            CIQ.log10(box.y0),
            box.x1,
            CIQ.log10(box.y1),
            this.p0[0],
            CIQ.log10(this.p0[1]),
            (this.p1[0] + this.p2[0]) / 2,
            CIQ.log10((this.p1[1] + this.p2[1]) / 2),
            type,
          )
        } else {
          return CIQ.boxIntersects(
            box.x0,
            box.y0,
            box.x1,
            box.y1,
            this.p0[0],
            this.p0[1],
            (this.p1[0] + this.p2[0]) / 2,
            (this.p1[1] + this.p2[1]) / 2,
            type,
          )
        }
      }

      CIQ.Drawing.pitchfork.prototype.intersected = function(tick, value, box) {
        if (!this.p0 || !this.p1 || !this.p2) return null // in case invalid drawing (such as from panel that no longer exists)
        if (this.pointIntersection(this.p0[0], this.p0[1], box)) {
          this.highlighted = 'p0'
          return {
            action: 'drag',
            point: 'p0',
          }
        } else if (this.pointIntersection(this.p1[0], this.p1[1], box)) {
          this.highlighted = 'p1'
          return {
            action: 'drag',
            point: 'p1',
          }
        } else if (this.pointIntersection(this.p2[0], this.p2[1], box)) {
          this.highlighted = 'p2'
          return {
            action: 'drag',
            point: 'p2',
          }
        }
        var isIntersected = this.lineIntersection(tick, value, box, 'ray')
        if (isIntersected) {
          this.highlighted = true
          // This object will be used for repositioning
          return {
            action: 'move',
            p0: CIQ.clone(this.p0),
            p1: CIQ.clone(this.p1),
            p2: CIQ.clone(this.p2),
            tick: tick, // save original tick
            value: value, // save original value
          }
        } else {
          return null
        }
      }

      CIQ.Drawing.pitchfork.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var p2 = this.p2
        if (!p2) p2 = this.p1
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var x2 = this.stx.pixelFromTick(p2[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
        var y2 = this.stx.pixelFromValueAdjusted(panel, p2[0], p2[1])

        var color = this.color
        if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
        var width = this.lineWidth
        if (this.highlighted) {
          color = this.stx.getCanvasColor('stx_highlight_vector')
        }

        var parameters = {
          pattern: this.pattern,
          lineWidth: width,
        }
        var z = 50
        var yp = 2 * y0 - y1 - y2
        var denom = 2 * x0 - x1 - x2
        if (denom < 0) z *= -1
        yp = (z * yp) / denom
        this.stx.plotLine(x0, (x1 + x2) / 2, y0, (y1 + y2) / 2, color, 'ray', context, panel, parameters)
        this.stx.plotLine(x1, x2, y1, y2, color, 'segment', context, panel, parameters)
        if (!(x1 == x2 && y1 == y2)) {
          this.stx.plotLine(x1, x1 - z, y1, y1 - yp, color, 'ray', context, panel, parameters)
          this.stx.plotLine(x2, x2 - z, y2, y2 - yp, color, 'ray', context, panel, parameters)
        }
        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          var p2Fill = this.highlighted == 'p2' ? true : false
          this.littleCircle(context, x0, y0, p0Fill)
          this.littleCircle(context, x1, y1, p1Fill)
          this.littleCircle(context, x2, y2, p2Fill)
        }
      }

      CIQ.Drawing.pitchfork.prototype.adjust = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.setPoint(1, this.d1, this.v1, panel.chart)
        this.setPoint(2, this.d2, this.v2, panel.chart)
      }

      /**
       * Reconstruct a pitchfork
       * @memberOf CIQ.Drawing.pitchfork
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The line color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.v1] Value (price) for the second point
       * @param {number} [obj.v2] Value (price) for the third point
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {number} [obj.d1] Date (string form) for the second point
       * @param {number} [obj.d2] Date (string form) for the third point
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
       * @param {number} [obj.tzo2] Offset of UTC from d2 in minutes
       */
      CIQ.Drawing.pitchfork.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.d0 = obj.d0
        this.d1 = obj.d1
        this.d2 = obj.d2
        this.tzo0 = obj.tzo0
        this.tzo1 = obj.tzo1
        this.tzo2 = obj.tzo2
        this.v0 = obj.v0
        this.v1 = obj.v1
        this.v2 = obj.v2
        this.adjust()
      }

      CIQ.Drawing.pitchfork.prototype.serialize = function() {
        return {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          ptrn: this.pattern,
          lw: this.lineWidth,
          d0: this.d0,
          d1: this.d1,
          d2: this.d2,
          tzo0: this.tzo0,
          tzo1: this.tzo1,
          tzo2: this.tzo2,
          v0: this.v0,
          v1: this.v1,
          v2: this.v2,
        }
      }

      /**
       * Gartley drawing tool. Creates a series of four connected line segments, each one completed with a user click.
       * Will adhere to Gartley requirements vis-a-vis fibonacci levels etc..
       *
       * It inherits its properties from {@link CIQ.Drawing.continuous}.
       * @constructor
       * @name  CIQ.Drawing.gartley
       * @version ChartIQ Advanced Package
       * @since 04-2015-15
       */
      CIQ.Drawing.gartley = function() {
        this.name = 'gartley'
        this.dragToDraw = false
        this.maxSegments = 4
        this.shape = null
        this.points = []
      }

      CIQ.Drawing.gartley.ciqInheritsFrom(CIQ.Drawing.continuous)

      CIQ.Drawing.gartley.prototype.check = function(first, second) {
        if (!second) return true
        if (first[0] >= second[0] || first[1] == second[1]) return false
        if (this.segment == 1) {
          if (first[1] < second[1]) this.shape = 'M'
          else this.shape = 'W'
        } else if (this.segment == 2) {
          if (this.shape == 'M' && first[1] < second[1]) return false
          else if (this.shape == 'W' && first[1] > second[1]) return false
          else if ((second[1] - first[1]) / (this.points[0][1] - first[1]) < 0.618) return false
          else if ((second[1] - first[1]) / (this.points[0][1] - first[1]) >= 0.786) return false
        } else if (this.segment == 3) {
          if (this.shape == 'M' && first[1] > second[1]) return false
          else if (this.shape == 'W' && first[1] < second[1]) return false
          else if ((second[1] - first[1]) / (this.points[1][1] - first[1]) < 0.618) return false
          else if ((second[1] - first[1]) / (this.points[1][1] - first[1]) >= 0.786) return false
        } else if (this.segment == 4) {
          if (this.shape == 'M' && (first[1] < second[1] || second[1] < this.points[0][1])) return false
          else if (this.shape == 'W' && (first[1] > second[1] || second[1] > this.points[0][1])) return false
          else if ((this.points[1][1] - second[1]) / (this.points[1][1] - this.points[2][1]) < 1.27) return false
          else if ((this.points[1][1] - second[1]) / (this.points[1][1] - this.points[2][1]) >= 1.618) return false
        }
        return true
      }

      CIQ.Drawing.gartley.prototype.click = function(context, tick, value) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.copyConfig()
        if (!this.penDown) {
          this.setPoint(0, tick, value, panel.chart)
          this.pts = []
          this.penDown = true
          this.segment = 1
          return false
        }
        if (this.accidentalClick(tick, value)) {
          this.penDown = true
          return false
        }
        if (this.check(this.p0, this.p1)) {
          if (this.segment == 1) this.points.push(this.p0)
          this.points.push(this.p1)
          this.drawDropZones = true
          this.setPoint(1, tick, value, panel.chart)
          this.segment++

          if (this.segment > this.maxSegments) {
            this.setPoint(0, this.points[0][0], this.points[0][1], panel.chart)
            return true
          }
          this.pts.push(this.d1, this.tzo1, this.v1)
          this.setPoint(0, tick, value, panel.chart) // reset initial point for next segment, copy by value
        }
        return false
      }

      CIQ.Drawing.gartley.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])

        if (this.segment == 2) {
          this.drawDropZone(
            context,
            0.618 * this.points[0][1] + 0.382 * this.p0[1],
            0.786 * this.points[0][1] + 0.214 * this.p0[1],
            this.p0[0],
          )
        } else if (this.segment == 3) {
          this.drawDropZone(
            context,
            0.618 * this.points[1][1] + 0.382 * this.p0[1],
            0.786 * this.points[1][1] + 0.214 * this.p0[1],
            this.p0[0],
          )
        } else if (this.segment == 4) {
          var bound = 1.618 * this.points[2][1] - 0.618 * this.points[1][1]
          if (this.shape == 'M') bound = Math.max(bound, this.points[0][1])
          else bound = Math.min(bound, this.points[0][1])
          this.drawDropZone(context, bound, 1.27 * this.points[2][1] - 0.27 * this.points[1][1], this.p0[0])
        }

        var color = this.color
        if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
        var width = this.lineWidth
        if (this.highlighted) {
          color = this.stx.getCanvasColor('stx_highlight_vector')
        }

        var parameters = {
          pattern: this.pattern,
          lineWidth: width,
        }
        if (this.segment <= this.maxSegments)
          this.stx.plotLine(x0, x1, y0, y1, color, this.name, context, panel, parameters)

        var fillColor = this.fillColor
        var coords = []
        if (this.points.length) {
          context.beginPath()
          for (var fp = 1; fp < this.points.length && fp <= 4; fp++) {
            var xx0 = this.stx.pixelFromTick(this.points[fp - 1][0], panel.chart)
            var xx1 = this.stx.pixelFromTick(this.points[fp][0], panel.chart)
            var yy0 = this.stx.pixelFromValueAdjusted(panel, this.points[fp - 1][0], this.points[fp - 1][1])
            var yy1 = this.stx.pixelFromValueAdjusted(panel, this.points[fp][0], this.points[fp][1])
            if (fp == 1) coords.push(xx0, yy0)
            coords.push(xx1, yy1)
            this.stx.plotLine(xx0, xx1, yy0, yy1, color, this.name, context, panel, parameters)
          }
          if (this.points.length == 2 || this.points.length == 4) {
            coords.push(x1, y1)
          }
          if (this.points[2]) {
            coords.push(
              this.stx.pixelFromTick(this.points[2][0], panel.chart),
              this.stx.pixelFromValueAdjusted(panel, this.points[2][0], this.points[2][1]),
            )
          }
          if (fillColor && fillColor != 'auto' && !CIQ.isTransparent(fillColor)) {
            for (var c = 0; c < coords.length; c += 2) {
              if (c === 0) context.moveTo(coords[0], coords[1])
              context.lineTo(coords[c], coords[c + 1])
            }
            context.fillStyle = fillColor
            context.globalAlpha = 0.2
            context.closePath()
            context.fill()
            context.globalAlpha = 1
          }
        }

        /*if(this.highlighted){
			var p0Fill=this.highlighted=="p0"?true:false;
			var p1Fill=this.highlighted=="p1"?true:false;
			this.littleCircle(context, x0, y0, p0Fill);
			this.littleCircle(context, x1, y1, p1Fill);
		}*/
      }

      CIQ.Drawing.gartley.prototype.lineIntersection = function(tick, value, box, type) {
        if (this.points.length != this.maxSegments + 1) return false
        for (var pt = 0; pt < this.points.length - 1; pt++) {
          if (this.stx.layout.semiLog || this.stx.layout.chartScale == 'log') {
            if (
              CIQ.boxIntersects(
                box.x0,
                CIQ.log10(box.y0),
                box.x1,
                CIQ.log10(box.y1),
                this.points[pt][0],
                CIQ.log10(this.points[pt][1]),
                this.points[pt + 1][0],
                CIQ.log10(this.points[pt + 1][1]),
                'segment',
              )
            )
              return true
          } else {
            if (
              CIQ.boxIntersects(
                box.x0,
                box.y0,
                box.x1,
                box.y1,
                this.points[pt][0],
                this.points[pt][1],
                this.points[pt + 1][0],
                this.points[pt + 1][1],
                'segment',
              )
            )
              return true
          }
        }
        return false
      }

      CIQ.Drawing.gartley.prototype.boxIntersection = function(tick, value) {
        if (!this.p0 || !this.p1) return false
        if (tick > Math.max(this.p0[0], this.p1[0]) || tick < Math.min(this.p0[0], this.p1[0])) return false
        var lowPoint = Math.min(this.p0[1], this.p1[1])
        var highPoint = Math.max(this.p0[1], this.p1[1])
        for (var pt = 0; pt < this.points.length; pt++) {
          lowPoint = Math.min(lowPoint, this.points[pt][1])
          highPoint = Math.max(highPoint, this.points[pt][1])
        }
        if (value > highPoint || value < lowPoint) return false
        return true
      }

      CIQ.Drawing.gartley.prototype.reposition = function(context, repositioner, tick, value) {
        var panel = this.stx.panels[this.panelName]
        var tickDiff = repositioner.tick - tick
        repositioner.tick = tick
        var valueDiff = repositioner.value - value
        repositioner.value = value
        if (repositioner.action == 'move') {
          this.pts = []
          for (var pt = 0; pt < this.points.length; pt++) {
            this.points[pt][0] -= tickDiff
            this.points[pt][1] -= valueDiff
            this.setPoint(1, this.points[pt][0], this.points[pt][1], panel.chart)
            if (pt && pt < this.points.length - 1) this.pts.push(this.d1, this.tzo1, this.v1)
            this.points[pt] = this.p1
          }
          this.setPoint(0, this.points[0][0], this.points[0][1], panel.chart)
          this.render(context)
          /*}else if(repositioner.action=="drag"){
			this[repositioner.point]=[tick, value];
			this.setPoint(0, this.p0[0], this.p0[1], panel.chart);
			this.setPoint(1, this.p1[0], this.p1[1], panel.chart);
			this.render(context);*/
        }
      }

      CIQ.Drawing.gartley.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.fillColor = this.stx.currentVectorParameters.fillColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.pattern = this.stx.currentVectorParameters.pattern
      }

      CIQ.Drawing.gartley.prototype.drawDropZone = function(context, hBound1, hBound2, leftBound) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var y0 = this.stx.pixelFromPrice(hBound1, panel)
        var y1 = this.stx.pixelFromPrice(hBound2, panel) - y0
        var x0 = this.stx.pixelFromTick(leftBound, panel.chart)
        var x1 = this.stx.chart.width - x0
        context.fillStyle = '#008000'
        context.globalAlpha = 0.2
        context.fillRect(x0, y0, x1, y1)
        context.globalAlpha = 1
      }

      CIQ.Drawing.gartley.prototype.adjust = function() {
        // If the drawing's panel doesn't exist then we'll check to see
        // whether the panel has been added. If not then there's no way to adjust
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.reconstructPoints()

        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.points.unshift(this.p0)

        this.setPoint(1, this.d1, this.v1, panel.chart)
        this.points.push(this.p1)
      }

      CIQ.Drawing.gartley.prototype.reconstructPoints = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.points = []
        for (var a = 0; a < this.pts.length; a += 3) {
          var d = CIQ.strToDateTime(this.pts[a])
          d.setMinutes(d.getMinutes() + Number(this.pts[a + 1]) - d.getTimezoneOffset())
          this.points.push([this.stx.tickFromDate(CIQ.yyyymmddhhmmssmmm(d), panel.chart), this.pts[a + 2]])
        }
      }

      /**
       * Reconstruct a gartley
       * @memberOf CIQ.Drawing.gartley
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The line color
       * @param {string} [obj.fc] The fill color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.v1] Value (price) for the last point
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {number} [obj.d1] Date (string form) for the last point
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
       * @param {number} [obj.pts] a serialized list of dates,offsets,values for the 3 intermediate points of the gartley (should be 9 items in list)
       */
      CIQ.Drawing.gartley.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.fillColor = obj.fc
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.d0 = obj.d0
        this.d1 = obj.d1
        this.tzo0 = obj.tzo0
        this.tzo1 = obj.tzo1
        this.v0 = obj.v0
        this.v1 = obj.v1
        this.pts = obj.pts.split(',')
        this.adjust()
      }

      CIQ.Drawing.gartley.prototype.serialize = function() {
        return {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          fc: this.fillColor,
          ptrn: this.pattern,
          lw: this.lineWidth,
          d0: this.d0,
          d1: this.d1,
          tzo0: this.tzo0,
          tzo1: this.tzo1,
          v0: this.v0,
          v1: this.v1,
          pts: this.pts.join(','),
        }
      }

      /**
       * Freeform drawing tool. Set splineTension to a value from 0 to 1 (default .3). This is a dragToDraw function
       * and automatically disables the crosshairs while enabled.
       *
       * It inherits its properties from {@link CIQ.Drawing.segment}.
       * @constructor
       * @name  CIQ.Drawing.freeform
       * @version ChartIQ Advanced Package
       */
      CIQ.Drawing.freeform = function() {
        this.name = 'freeform'
        this.splineTension = 0.3 //set to -1 to not use splines at all
        this.dragToDraw = true
      }

      CIQ.Drawing.freeform.ciqInheritsFrom(CIQ.Drawing.segment)

      CIQ.Drawing.freeform.prototype.measure = function() {}

      CIQ.Drawing.freeform.prototype.intersected = function(tick, value, box) {
        if (tick > this.hiX || tick < this.lowX) return false
        if (value > this.hiY || value < this.lowY) return false
        return true
      }

      CIQ.Drawing.freeform.prototype.click = function(context, tick, value) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return

        if (this.penDown === false) {
          this.copyConfig()
          this.startX = Math.round(this.stx.resolveX(this.stx.pixelFromTick(tick, panel.chart)))
          this.startY = Math.round(this.stx.resolveY(this.stx.pixelFromValueAdjusted(panel, tick, value)))
          var d = this.stx.dateFromTick(tick, panel.chart, true)
          this.d0 = CIQ.yyyymmddhhmmssmmm(d)
          this.tzo0 = d.getTimezoneOffset()
          this.v0 = value
          this.p0 = [CIQ.ChartEngine.crosshairX - this.startX, CIQ.ChartEngine.crosshairY - this.startY]
          this.nodes = [this.p0[0], this.p0[1]]
          this.pNodes = [this.p0]
          this.candleWidth = this.stx.layout.candleWidth
          this.multiplier = panel.yAxis.multiplier
          this.interval = this.stx.layout.interval
          this.periodicity = this.stx.layout.periodicity
          this.tempSplineTension = this.splineTension
          this.splineTension = -1
          document.body.style.cursor = 'pointer'
          this.penDown = true
          return false
        } else {
          this.penDown = false
          this.splineTension = this.tempSplineTension
          document.body.style.cursor = 'auto'
          //this.adjust(); //moved to drawingClick - Gus
          return true
        }
      }

      CIQ.Drawing.freeform.prototype.move = function(context, tick, value) {
        if (!this.penDown) return

        var panel = this.stx.panels[this.panelName]
        var d1 = this.stx.dateFromTick(tick, panel.chart, true)
        this.d1 = CIQ.yyyymmddhhmmssmmm(d1)
        this.tzo1 = d1.getTimezoneOffset()
        this.v1 = value
        this.p1 = [CIQ.ChartEngine.crosshairX - this.startX, CIQ.ChartEngine.crosshairY - this.startY]

        if (this.pNodes.length > 2) {
          if (
            this.p1[0] == this.pNodes[this.pNodes.length - 2][0] &&
            this.p1[0] == this.pNodes[this.pNodes.length - 1][0]
          ) {
            this.pNodes.length--
            this.nodes.length -= 2
          } else if (
            this.p1[1] == this.pNodes[this.pNodes.length - 2][1] &&
            this.p1[1] == this.pNodes[this.pNodes.length - 1][1]
          ) {
            this.pNodes.length--
            this.nodes.length -= 2
          }
        }

        this.nodes.push(this.p1[0], this.p1[1])
        this.pNodes.push(this.p1)

        this.render(context)
        return false
      }

      //TODO: make more exact, and relocate this to somewhere useful
      CIQ.Drawing.freeform.prototype.intervalRatio = function(
        oldInterval,
        newInterval,
        oldPeriodicity,
        newPeriodicity,
        startDate,
        symbol,
      ) {
        //approximating functions
        function weeksInMonth(startDate, symbol) {
          return 5
        }
        function daysInWeek(startDate, symbol) {
          return 5
        }
        function daysInMonth(startDate, symbol) {
          return 30
        }
        function minPerDay(startDate, symbol) {
          if (CIQ.Market.Symbology.isForexSymbol(symbol)) return 1440
          else return 390
        }
        //1,3,5,10,15,30,"day","week","month"
        var returnValue = 0
        if (oldInterval == newInterval) returnValue = 1
        else if (!isNaN(oldInterval) && !isNaN(newInterval)) returnValue = oldInterval / newInterval
        //two intraday intervals
        else if (isNaN(oldInterval)) {
          //was daily
          if (oldInterval == 'month') {
            if (newInterval == 'week') returnValue = weeksInMonth(startDate, symbol)
            else if (newInterval == 'day') returnValue = daysInMonth(startDate, symbol)
            else if (!isNaN(newInterval))
              returnValue = (daysInMonth(startDate, symbol) * minPerDay(startDate, symbol)) / newInterval
          } else if (oldInterval == 'week') {
            if (newInterval == 'month') returnValue = 1 / weeksInMonth(startDate, symbol)
            if (newInterval == 'day') returnValue = daysInWeek(startDate, symbol)
            else if (!isNaN(newInterval))
              returnValue = (daysInWeek(startDate, symbol) * minPerDay(startDate, symbol)) / newInterval
          } else if (oldInterval == 'day') {
            if (newInterval == 'week') returnValue = 1 / daysInWeek(startDate, symbol)
            else if (newInterval == 'month') returnValue = 1 / daysInMonth(startDate, symbol)
            else if (!isNaN(newInterval)) returnValue = minPerDay(startDate, symbol) / newInterval
          }
        } else if (!isNaN(oldInterval)) {
          //switching from intraday to daily
          if (newInterval == 'month')
            returnValue = oldInterval / (daysInMonth(startDate, symbol) * minPerDay(startDate, symbol))
          else if (newInterval == 'week')
            returnValue = oldInterval / (daysInWeek(startDate, symbol) * minPerDay(startDate, symbol))
          else if (newInterval == 'day') returnValue = oldInterval / minPerDay(startDate, symbol)
        }
        returnValue *= oldPeriodicity / newPeriodicity
        return returnValue
      }

      CIQ.Drawing.freeform.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return

        var intvl = this.intervalRatio(
          this.interval,
          this.stx.layout.interval,
          this.periodicity,
          this.stx.layout.periodicity,
          this.d0,
          panel.chart.symbol,
        )
        if (intvl === 0) return

        var cwr = this.stx.layout.candleWidth / this.candleWidth
        var mlt = panel.yAxis.multiplier / this.multiplier
        this.setPoint(0, this.d0, this.v0, panel.chart)
        var spx = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var spy = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var arrPoints = []

        var color = this.color
        var width = this.lineWidth
        if (this.highlighted) {
          color = this.stx.getCanvasColor('stx_highlight_vector')
        }

        var parameters = {
          pattern: this.pattern,
          lineWidth: width,
        }

        for (var n = 0; n < this.pNodes.length; n++) {
          var x0 = intvl * cwr * this.pNodes[n][0] + spx
          var y0 = mlt * this.pNodes[n][1] + spy
          arrPoints.push(x0, y0)
        }

        if (!arrPoints.length) return
        if (this.splineTension < 0) {
          this.stx.connectTheDots(arrPoints, color, this.name, context, panel, parameters)
        } else {
          this.stx.plotSpline(arrPoints, this.splineTension, color, this.name, context, true, parameters)
        }
      }

      CIQ.Drawing.freeform.prototype.adjust = function() {
        // If the drawing's panel doesn't exist then we'll check to see
        // whether the panel has been added. If not then there's no way to adjust
        var panel = this.stx.panels[this.panelName]
        if (!panel) return

        var p0 = [this.nodes[0], this.nodes[1]]
        this.pNodes = [p0]
        this.lowX = this.nodes[0]
        this.hiX = this.nodes[0]
        this.lowY = this.nodes[1]
        this.hiY = this.nodes[1]

        for (var n = 2; n < this.nodes.length; n += 2) {
          var p1 = [this.nodes[n], this.nodes[n + 1]]
          this.pNodes.push(p1)
          this.lowX = Math.min(this.lowX, p1[0])
          this.hiX = Math.max(this.hiX, p1[0])
          this.lowY = Math.max(this.lowY, p1[1]) //reversed because price axis goes bottom to top
          this.hiY = Math.min(this.hiY, p1[1])
        }

        var intvl = this.intervalRatio(
          this.interval,
          this.stx.layout.interval,
          this.periodicity,
          this.stx.layout.periodicity,
          this.d0,
          panel.chart.symbol,
        )
        if (intvl === 0) return

        var cwr = this.stx.layout.candleWidth / this.candleWidth
        var mlt = panel.yAxis.multiplier / this.multiplier
        this.setPoint(0, this.d0, this.v0, panel.chart)
        var spx = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var spy = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])

        this.lowX = this.stx.tickFromPixel(Math.floor(intvl * cwr * this.lowX) + spx, panel.chart)
        this.hiX = this.stx.tickFromPixel(Math.ceil(intvl * cwr * this.hiX) + spx, panel.chart)
        this.lowY = this.stx.valueFromPixel(Math.floor(mlt * this.lowY) + spy, panel)
        this.hiY = this.stx.valueFromPixel(Math.ceil(mlt * this.hiY) + spy, panel)
      }

      CIQ.Drawing.freeform.prototype.serialize = function() {
        return {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          ptrn: this.pattern,
          lw: this.lineWidth,
          cw: Number(this.candleWidth.toFixed(4)),
          mlt: Number(this.multiplier.toFixed(4)),
          d0: this.d0,
          tzo0: this.tzo0,
          v0: this.v0,
          inter: this.interval,
          pd: this.periodicity,
          nodes: this.nodes,
        }
      }

      /**
       * Reconstruct a freeform drawing. It is not recommended to do this programatically.
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The line color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.cw] Candle width from original drawing
       * @param {number} [obj.mlt] Y-axis multiplier from original drawing
       * @param {number} [obj.v0] Value (price) for the first point
       * @param {number} [obj.d0] Date (string form) for the first point
       * @param {number} [obj.int] Interval from original drawing
       * @param {number} [obj.pd] Periodicity from original drawing
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {array} [obj.nodes] An array of nodes in form [x0a,x0b,y0a,y0b, x1a, x1b, y1a, y1b, ....]
       * @memberOf CIQ.Drawing.freeform
       */
      CIQ.Drawing.freeform.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.candleWidth = obj.cw
        this.multiplier = obj.mlt
        this.d0 = obj.d0
        this.tzo0 = obj.tzo0
        this.v0 = obj.v0
        this.interval = obj.inter
        this.periodicity = obj.pd
        this.nodes = obj.nodes
        this.adjust()
      }

      /**
       * Callout drawing tool.  This is like an annotation except it draws a stem and offers a background color and line style.
       *
       * @constructor
       * @name  CIQ.Drawing.callout
       * @since 2015-11-1
       * @version ChartIQ Advanced Package
       * @see {@link CIQ.Drawing.annotation}
       */
      CIQ.Drawing.callout = function() {
        this.name = 'callout'
        this.arr = []
        this.w = 0
        this.h = 0
        this.padding = 4
        this.text = ''
        this.ta = null
        this.fontSize = 0
        this.font = {}
        this.stemEntry = ''
        this.defaultWidth = 50
        this.defaultHeight = 10
        //this.dragToDraw=true;
      }

      CIQ.Drawing.callout.ciqInheritsFrom(CIQ.Drawing.annotation)

      CIQ.Drawing.callout.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.borderColor = this.stx.currentVectorParameters.currentColor
        this.backgroundColor = this.stx.currentVectorParameters.fillColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.pattern = this.stx.currentVectorParameters.pattern
        this.font = CIQ.clone(this.stx.currentVectorParameters.annotation.font)
      }

      CIQ.Drawing.callout.prototype.move = function(context, tick, value) {
        if (!this.penDown) return

        this.copyConfig()
        this.p0 = [tick, value]
        this.render(context)
      }

      CIQ.Drawing.callout.prototype.onChange = function(e) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var textarea = e.target
        this.w = textarea.clientWidth
        this.h = textarea.clientHeight
        //textarea.style.left=(this.stx.pixelFromTick(this.p0[0])-this.w/2) + "px";
        //textarea.style.top=(this.stx.pixelFromPrice(this.p0[1],panel)-this.h/2) + "px";
        var context = this.context || this.stx.chart.tempCanvas.context
        CIQ.clearCanvas(context.canvas, this.stx)
        this.render(context)
        this.edit(context)
      }

      CIQ.Drawing.callout.prototype.render = function(context) {
        this.context = context // remember last context
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        if (isNaN(y0)) return

        context.font = this.fontString
        context.textBaseline = 'top'
        var x = x0
        var y = y0
        var w = this.w / 2
        var h = this.h / 2
        if (this.penDown) {
          w = this.defaultWidth
          h = this.defaultHeight
          if (!h) h = this.fontSize
        }
        var lineWidth = this.lineWidth
        if (!lineWidth) lineWidth = 1.1
        var color = this.color
        if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
        var borderColor = this.borderColor
        if (borderColor == 'auto' || CIQ.isTransparent(borderColor)) borderColor = this.stx.defaultColor
        var parameters = {
          pattern: this.pattern,
          lineWidth: lineWidth,
        }
        if (this.highlighted) borderColor = this.stx.getCanvasColor('stx_highlight_vector')
        var sx0, sx1, sy0, sy1
        var r = Math.min(Math.min(w, h) / 2, 8)
        if (this.stem) {
          if (this.stem.d) {
            // absolute positioning of stem
            sx0 = this.stx.pixelFromTick(this.stem.t) // bottom of stem
            sy0 = this.stx.pixelFromValueAdjusted(panel, this.stem.t, this.stem.v)
          } else if (this.stem.x) {
            // stem with relative offset positioning
            sx0 = x
            sy0 = y
            x += this.stem.x
            y += this.stem.y
          }

          var state = ''
          if (sx0 >= x + w) {
            sx1 = x + w
            state = 'r'
          } // right of text
          else if (sx0 > x - w && sx0 < x + w) {
            sx1 = x
            state = 'c'
          } // center of text
          else if (sx0 <= x - w) {
            sx1 = x - w
            state = 'l'
          } // left of text

          if (sy0 >= y + h) {
            sy1 = y + h
            state += 'b'
          } // bottom of text
          else if (sy0 > y - h && sy0 < y + h) {
            sy1 = y
            state += 'm'
          } // middle of text
          else if (sy0 <= y - h) {
            sy1 = y - h
            state += 't'
          } // top of text

          this.stemEntry = state

          if (sx1 != x || sy1 != y) {
            // make sure stem does not originate underneath the annotation
            sx0 = Math.round(sx0)
            sx1 = Math.round(sx1)
            sy0 = Math.round(sy0)
            sy1 = Math.round(sy1)
          }
        }
        if (this.highlighted) {
          this.stx.canvasColor('stx_annotation_highlight_bg', context)
        } else {
          if (this.fillColor) {
            context.fillStyle = this.fillColor
            context.globalAlpha = 0.4
          } else if (this.stem) {
            // If there's a stem then use the container color otherwise the stem will show through
            context.fillStyle = this.stx.containerColor
          }
        }
        context.strokeStyle = borderColor
        if (context.setLineDash) {
          var lineDashArray = [] //array of dash, space, dash, space, etc
          if (this.pattern == 'dotted') lineDashArray = [lineWidth, lineWidth]
          else if (this.pattern == 'dashed') lineDashArray = [lineWidth * 5, lineWidth * 5]
          context.setLineDash(lineDashArray)
          context.lineDashOffset = 0 //start point in array
        }

        if (borderColor) {
          context.beginPath()
          context.lineWidth = lineWidth
          context.moveTo(x + w - r, y - h)
          if (this.stemEntry != 'rt') {
            context.quadraticCurveTo(x + w, y - h, x + w, y - h + r) //top right
          } else {
            context.lineTo(sx0, sy0)
            context.lineTo(x + w, y - h + r)
          }
          context.lineTo(x + w, y - r / 2)
          if (this.stemEntry == 'rm') context.lineTo(sx0, sy0)
          context.lineTo(x + w, y + r / 2)
          context.lineTo(x + w, y + h - r)
          if (this.stemEntry != 'rb') {
            context.quadraticCurveTo(x + w, y + h, x + w - r, y + h) //bottom right
          } else {
            context.lineTo(sx0, sy0)
            context.lineTo(x + w - r, y + h)
          }
          context.lineTo(x + r / 2, y + h)
          if (this.stemEntry == 'cb') context.lineTo(sx0, sy0)
          context.lineTo(x - r / 2, y + h)
          context.lineTo(x - w + r, y + h)
          if (this.stemEntry != 'lb') {
            context.quadraticCurveTo(x - w, y + h, x - w, y + h - r) //bottom left
          } else {
            context.lineTo(sx0, sy0)
            context.lineTo(x - w, y + h - r)
          }
          context.lineTo(x - w, y + r / 2)
          if (this.stemEntry == 'lm') context.lineTo(sx0, sy0)
          context.lineTo(x - w, y - r / 2)
          context.lineTo(x - w, y - h + r)
          if (this.stemEntry != 'lt') {
            context.quadraticCurveTo(x - w, y - h, x - w + r, y - h) //top left
          } else {
            context.lineTo(sx0, sy0)
            context.lineTo(x - w + r, y - h)
          }
          context.lineTo(x - r / 2, y - h)
          if (this.stemEntry == 'ct') context.lineTo(sx0, sy0)
          context.lineTo(x + r / 2, y - h)
          context.lineTo(x + w - r, y - h)
          context.fill()
          context.globalAlpha = 1
          context.stroke()
        }
        if (this.highlighted) {
          this.stx.canvasColor('stx_annotation_highlight', context)
        } else {
          context.fillStyle = color
        }
        y += this.padding
        for (var i = 0; i < this.arr.length; i++) {
          context.fillText(this.arr[i], x - w + this.padding, y - h)
          y += this.fontSize
        }
        context.textBaseline = 'alphabetic'

        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          this.littleCircle(context, sx0, sy0, p0Fill)
        }
        /*if(this.penDown){
			context.globalAlpha=0.2;
			context.fillText("[Your text here]", x-w+this.padding, y-h);
			context.globalAlpha=1;
		}*/
      }

      CIQ.Drawing.callout.prototype.click = function(context, tick, value) {
        //don't allow user to add callout on the axis.
        if (this.stx.overXAxis || this.stx.overYAxis) return
        var panel = this.stx.panels[this.panelName]
        this.copyConfig()
        this.getFontString()
        this.setPoint(0, tick, value, panel.chart)
        if (!this.penDown) {
          this.stem = {
            d: this.d0,
            v: this.v0,
          }
          this.penDown = true
          this.adjust()
          return false
        }
        this.adjust()
        this.edit(context)
        this.penDown = false
        return false
      }

      CIQ.Drawing.callout.prototype.reposition = function(context, repositioner, tick, value) {
        if (!repositioner) return
        var panel = this.stx.panels[this.panelName]
        var tickDiff = repositioner.tick - tick
        var valueDiff = repositioner.value - value
        if (repositioner.stem) {
          if (repositioner.action == 'drag') {
            this.stem = {
              d: this.stx.dateFromTick(tick, panel.chart, true),
              v: value,
            }
          } else if (repositioner.action == 'move') {
            this.setPoint(0, repositioner.p0[0] - tickDiff, repositioner.p0[1] - valueDiff, panel.chart)
            this.stem = {
              d: this.stx.dateFromTick(this.stx.tickFromDate(repositioner.stem.d, panel.chart) - tickDiff),
              v: repositioner.stem.v - valueDiff,
            }
          }
          this.adjust()
        } else {
          this.setPoint(0, repositioner.p0[0] - tickDiff, repositioner.p0[1] - valueDiff, panel.chart)
        }
        this.render(context)
      }

      CIQ.Drawing.callout.prototype.lineIntersection = function(tick, value, box, type) {
        var panel = this.stx.panels[this.panelName]
        if (!this.p0 || !this.stem) return false
        var stemTick = this.stx.tickFromDate(this.stem.d, panel.chart)
        if (this.stx.layout.semiLog || this.stx.layout.chartScale == 'log') {
          return CIQ.boxIntersects(
            box.x0,
            CIQ.log10(box.y0),
            box.x1,
            CIQ.log10(box.y1),
            this.p0[0],
            CIQ.log10(this.p0[1]),
            stemTick,
            CIQ.log10(this.stem.v),
            type,
          )
        } else {
          return CIQ.boxIntersects(box.x0, box.y0, box.x1, box.y1, this.p0[0], this.p0[1], stemTick, this.stem.v, type)
        }
      }

      CIQ.Drawing.callout.prototype.intersected = function(tick, value, box) {
        var panel = this.stx.panels[this.panelName]
        if (!this.p0) return null // in case invalid drawing (such as from panel that no longer exists)
        if (this.pointIntersection(this.stem.t, this.stem.v, box)) {
          this.highlighted = 'p0'
          return {
            action: 'drag',
            stem: true,
          }
        }
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart) - this.w / 2
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1]) - this.h / 2
        var x1 = x0 + this.w
        var y1 = y0 + this.h
        if (this.stem && this.stem.x) {
          x0 += this.stem.x
          x1 += this.stem.x
          y0 += this.stem.y
          y1 += this.stem.y
        }
        var x = this.stx.pixelFromTick(tick, panel.chart)
        var y = this.stx.pixelFromValueAdjusted(panel, tick, value)
        if (x >= x0 && x <= x1 && y >= y0 && y <= y1)
          return {
            p0: CIQ.clone(this.p0),
            tick: tick,
            value: value,
          }
        var isIntersected = this.lineIntersection(tick, value, box, 'segment')
        if (isIntersected) {
          this.highlighted = true
          // This object will be used for repositioning
          return {
            action: 'move',
            stem: CIQ.clone(this.stem),
            p0: CIQ.clone(this.p0),
            tick: tick, // save original tick
            value: value, // save original value
          }
        } else {
          return null
        }
      }

      /**
       * Fibonacci Arc drawing tool.
       *
       * It inherits its properties from {@link CIQ.Drawing.fibonacci}
       * @constructor
       * @name  CIQ.Drawing.fibarc
       * @since 2015-11-1
       * @version ChartIQ Advanced Package
       */
      CIQ.Drawing.fibarc = function() {
        this.name = 'fibarc'
        //this.dragToDraw=true;
      }

      CIQ.Drawing.fibarc.ciqInheritsFrom(CIQ.Drawing.fibonacci)

      CIQ.Drawing.fibarc.prototype.setOuter = function() {
        this.outer = {
          p0: CIQ.clone(this.p0),
          p1: CIQ.clone(this.p1),
        }
        var y0 = this.p0[1]
        var y1 = this.p1[1]
        var x0 = this.p0[0]
        var x1 = this.p1[0]

        var val = (y0 - y1) * 2 + y1
        var x = CIQ.xIntersection({ x0: x0, x1: x1, y0: y0, y1: y1 }, val)
        this.outer.p0[1] = val
        this.outer.p0[0] = x
      }

      CIQ.Drawing.fibarc.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var yAxis = panel.yAxis
        if (!this.p1) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
        var isUpTrend = y1 < y0
        var factor = Math.abs((y1 - y0) / (x1 - x0))

        var trendLineColor = this.parameters.trend.color
        if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
        if (this.highlighted) {
          trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
        }
        context.textBaseline = 'middle'
        this.stx.canvasFont('stx_yaxis', context) // match font from y axis so it looks cohesive
        var w = context.measureText('161.8%').width // give it extra space so it does not overlap with the price labels.
        var txtColor = this.color
        if (txtColor == 'auto' || CIQ.isTransparent(txtColor)) txtColor = this.stx.defaultColor
        for (var i = 0; i < this.parameters.fibs.length; i++) {
          context.fillStyle = txtColor
          var fib = this.parameters.fibs[i]
          if (fib.level < 0) continue
          var radius = Math.abs(this.p1[1] - this.p0[1]) * Math.sqrt(2) * fib.level
          var value = this.p1[1] + radius * (isUpTrend ? -1 : 1)
          var y = this.stx.pixelFromValueAdjusted(panel, this.p0[0], value)
          var x = CIQ.xIntersection({ x0: x0, x1: x1, y0: y0, y1: y1 }, y)
          if (this.parameters.printLevels) {
            context.textAlign = 'center'
            var txt = Math.round(fib.level * 1000) / 10 + '%'
            if (this.parameters.printValues) {
              context.fillStyle = txtColor // the price labels screw up the color and font size...so  reset before rendering the text
              this.stx.canvasFont('stx_yaxis', context) // use the same context as the y axis so they match.
            }
            context.fillText(txt, x1, Math.round(y - 5))
          }
          context.textAlign = 'left'
          if (this.parameters.printValues) {
            if (x < this.stx.chart.width) {
              // just use the actual price that segment will render on regardless of 'isUpTrend' since the values must match the prices on the y axis, and can not be reversed.
              var price = value
              if (yAxis.priceFormatter) {
                price = yAxis.priceFormatter(this.stx, panel, price)
              } else {
                price = this.stx.formatYAxisPrice(price, panel)
              }
              if (context == this.stx.chart.context) this.stx.endClip()
              this.stx.createYAxisLabel(panel, price, y, txtColor, null, context)
              if (context == this.stx.chart.context) this.stx.startClip(panel.name)
            }
          }
          var fibColor = fib.color
          if (fibColor == 'auto' || CIQ.isTransparent(fibColor)) fibColor = this.color
          if (fibColor == 'auto' || CIQ.isTransparent(fibColor)) fibColor = this.stx.defaultColor
          context.strokeStyle = fibColor
          var fillColor = fib.color
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.fillColor
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor
          context.fillStyle = fillColor
          context.globalAlpha = fib.parameters.opacity
          context.lineWidth = fib.parameters.lineWidth
          if (context.setLineDash) {
            var lineDashArray = [] //array of dash, space, dash, space, etc
            if (fib.parameters.pattern == 'dotted') lineDashArray = [context.lineWidth, context.lineWidth]
            else if (fib.parameters.pattern == 'dashed') lineDashArray = [context.lineWidth * 5, context.lineWidth * 5]
            context.setLineDash(lineDashArray)
            context.lineDashOffset = 0 //start point in array
          }
          context.save()
          context.beginPath()
          context.scale(1 / factor, 1)
          context.arc(x1 * factor, y1, Math.abs(y - y1), 0, Math.PI, !isUpTrend)
          context.stroke()
          context.globalAlpha = 0.05
          context.fill()
          context.restore()
          if (context.setLineDash) context.setLineDash([])
          context.globalAlpha = 1
        }
        context.textAlign = 'left'
        // ensure we at least draw trend line from zero to 100
        this.stx.plotLine(
          x1,
          2 * x0 - x1,
          y1,
          2 * y0 - y1,
          trendLineColor,
          'segment',
          context,
          panel,
          this.parameters.trend.parameters,
        )
        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          this.littleCircle(context, x0, y0, p0Fill)
          this.littleCircle(context, x1, y1, p1Fill)
        }
      }

      /**
       * Fibonacci Fan drawing tool.
       *
       * It inherits its properties from {@link CIQ.Drawing.fibonacci}
       * @constructor
       * @name  CIQ.Drawing.fibfan
       * @since 2015-11-1
       * @version ChartIQ Advanced Package
       */
      CIQ.Drawing.fibfan = function() {
        this.name = 'fibfan'
        //this.dragToDraw=true;
      }

      CIQ.Drawing.fibfan.ciqInheritsFrom(CIQ.Drawing.fibonacci)

      CIQ.Drawing.fibfan.prototype.setOuter = function() {
        this.outer = {
          p0: CIQ.clone(this.p0),
          p1: CIQ.clone(this.p1),
        }
        var y0 = this.p0[1]
        var y1 = this.p1[1]
        var x0 = this.p0[0]
        var x1 = this.p1[0]

        var min = 0
        for (var i = 0; i < this.parameters.fibs.length; i++) {
          var fib = this.parameters.fibs[i]
          if (fib.level >= min) continue
          var val = (y0 - y1) * fib.level + y1
          var x = CIQ.xIntersection({ x0: x0, x1: x1, y0: y0, y1: y1 }, val)
          min = fib.level
          this.outer.p1[1] = val
          this.outer.p1[0] = x
        }
      }

      CIQ.Drawing.fibfan.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var yAxis = panel.yAxis
        if (!this.p1) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
        var top = Math.min(y1, y0)
        var bottom = Math.max(y1, y0)
        var height = bottom - top
        var isUpTrend = (y1 - y0) / (x1 - x0) > 0

        var trendLineColor = this.parameters.trend.color
        if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
        if (this.highlighted) {
          trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
        }
        context.textBaseline = 'middle'
        this.stx.canvasFont('stx_yaxis', context) // match font from y axis so it looks cohesive
        var w = context.measureText('161.8%').width + 10 // give it extra space so it does not overlap with the price labels.
        var minX = Number.MAX_VALUE,
          minY = Number.MAX_VALUE,
          maxX = Number.MAX_VALUE * -1,
          maxY = Number.MAX_VALUE * -1
        var txtColor = this.color
        if (txtColor == 'auto' || CIQ.isTransparent(txtColor)) txtColor = this.stx.defaultColor
        for (var i = 0; i < this.parameters.fibs.length; i++) {
          context.fillStyle = txtColor
          var fib = this.parameters.fibs[i]
          //var y=(y0-y1)*fib.level+y1;
          var y = this.stx.pixelFromValueAdjusted(panel, this.p0[0], (this.p0[1] - this.p1[1]) * fib.level + this.p1[1])
          var x = CIQ.xIntersection({ x0: x1, x1: x1, y0: y0, y1: y1 }, y)
          var farX = this.stx.chart.left
          if (x1 > x0) farX += this.stx.chart.width
          var farY = ((farX - x0) * (y - y0)) / (x - x0) + y0
          if (x0 > farX - (this.parameters.printLevels ? w + 5 : 0) && x1 > x0) continue
          else if (x0 < farX + (this.parameters.printLevels ? w + 5 : 0) && x1 < x0) continue
          if (this.parameters.printLevels) {
            var txt = Math.round(fib.level * 1000) / 10 + '%'
            if (x1 > x0) {
              farX -= w
              context.textAlign = 'left'
            } else {
              farX += w
              context.textAlign = 'right'
            }
            if (this.parameters.printValues) {
              context.fillStyle = txtColor // the price labels screw up the color and font size...so reset before rendering the text
              this.stx.canvasFont('stx_yaxis', context) // use the same context as the y axis so they match.
            }
            farY = ((farX - x0) * (y - y0)) / (x - x0) + y0
            context.fillText(txt, farX, farY)
            if (x1 > x0) farX -= 5
            else farX += 5
          }
          context.textAlign = 'left'
          if (this.parameters.printValues) {
            if (x < this.stx.chart.width) {
              // just use the actual price that segment will render on regardless of 'isUpTrend' since the values must match the prices on the y axis, and can not be reversed.
              var price = this.stx.valueFromPixel(y, panel)
              if (yAxis.priceFormatter) {
                price = yAxis.priceFormatter(this.stx, panel, price)
              } else {
                price = this.stx.formatYAxisPrice(price, panel)
              }
              if (context == this.stx.chart.context) this.stx.endClip()
              this.stx.createYAxisLabel(panel, price, y, txtColor, null, context)
              if (context == this.stx.chart.context) this.stx.startClip(panel.name)
            }
          }
          var fibColor = fib.color
          if (fibColor == 'auto' || CIQ.isTransparent(fibColor)) fibColor = this.color
          if (fibColor == 'auto' || CIQ.isTransparent(fibColor)) fibColor = this.stx.defaultColor
          var fillColor = fib.color
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.fillColor
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor
          context.fillStyle = fillColor
          if (this.parameters.printLevels) farY = ((farX - x0) * (y - y0)) / (x - x0) + y0
          this.stx.plotLine(
            x0,
            farX,
            y0,
            farY,
            fib.level || !this.highlighted ? fibColor : trendLineColor,
            'segment',
            context,
            panel,
            fib.parameters,
          )
          context.globalAlpha = 0.05
          context.beginPath()
          context.moveTo(farX, farY)
          context.lineTo(x0, y0)
          context.lineTo(farX, y0)
          context.fill()
          context.globalAlpha = 1
          if (y < minY) {
            minX = x
            minY = y
          }
          if (y > maxY) {
            maxX = x
            maxY = y
          }
        }
        // ensure we at least draw trend line from zero to 100
        for (var level in { 0: 0, 1: 1 }) {
          var yy = isUpTrend ? bottom - height * level : top + height * level
          yy = Math.round(yy)
          if (yy < minY) {
            minX = CIQ.xIntersection({ x0: x1, x1: x1, y0: y0, y1: y1 }, yy)
            minY = yy
          }
          if (yy > maxY) {
            maxX = CIQ.xIntersection({ x0: x1, x1: x1, y0: y0, y1: y1 }, yy)
            maxY = yy
          }
        }
        //this.stx.plotLine(minX, maxX, minY, maxY, trendLineColor, "segment", context, panel, this.parameters.trend.parameters);
        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          this.littleCircle(context, x0, y0, p0Fill)
          this.littleCircle(context, x1, y1, p1Fill)
        }
      }

      /**
       * Fibonacci Time Zone drawing tool.
       *
       * It inherits its properties from {@link CIQ.Drawing.fibonacci}
       * @constructor
       * @name  CIQ.Drawing.fibtimezone
       * @since 2015-11-1
       * @version ChartIQ Advanced Package
       */
      CIQ.Drawing.fibtimezone = function() {
        this.name = 'fibtimezone'
        //this.dragToDraw=true;
      }

      CIQ.Drawing.fibtimezone.ciqInheritsFrom(CIQ.Drawing.fibonacci)

      CIQ.Drawing.fibtimezone.prototype.render = function(context) {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        if (!this.p1) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
        var fibs = [1, 0]

        var trendLineColor = this.parameters.trend.color
        if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
        if (this.highlighted) {
          trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
        }
        context.textBaseline = 'middle'
        this.stx.canvasFont('stx_yaxis', context) // match font from y axis so it looks cohesive
        var h = 20 // give it extra space so it does not overlap with the date labels.
        var mult = this.p1[0] - this.p0[0]
        var txtColor = this.color
        if (txtColor == 'auto' || CIQ.isTransparent(txtColor)) txtColor = this.stx.defaultColor
        context.textAlign = 'center'

        x = x0
        var farY = this.stx.chart.panel.yAxis.height
        var txt = 0
        var fibColor = this.parameters.timezone.color
        if (fibColor == 'auto' || CIQ.isTransparent(fibColor)) fibColor = this.color
        if (fibColor == 'auto' || CIQ.isTransparent(fibColor)) fibColor = this.stx.defaultColor
        var fillColor = this.parameters.timezone.color
        if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.fillColor
        if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor

        if (this.parameters.printLevels) farY -= h - 7

        do {
          x = this.stx.pixelFromTick(this.p0[0] + txt * mult, panel.chart)
          //if(x<this.stx.chart.left || x>this.stx.chart.left+this.stx.chart.width) break;
          if (x0 < x1 && x > this.stx.chart.left + this.stx.chart.width) break
          else if (x0 > x1 && x < this.stx.chart.left) break
          if (this.parameters.printLevels) {
            context.fillStyle = txtColor
            context.fillText(x1 > x0 ? txt : txt * -1, x, farY + 7)
          }
          context.fillStyle = fillColor
          this.stx.plotLine(x, x, 0, farY, fibColor, 'segment', context, panel, this.parameters.timezone.parameters)
          context.globalAlpha = 0.05
          context.beginPath()
          context.moveTo(x0, 0)
          context.lineTo(x, 0)
          context.lineTo(x, farY)
          context.lineTo(x0, farY)
          context.fill()
          context.globalAlpha = 1
          txt = fibs[0] + fibs[1]
          fibs.unshift(txt)
        } while (mult)
        context.textAlign = 'left'
        this.stx.plotLine(x0, x1, y0, y1, trendLineColor, 'segment', context, panel, this.parameters.trend.parameters)
        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          this.littleCircle(context, x0, y0, p0Fill)
          this.littleCircle(context, x1, y1, p1Fill)
        }
      }

      /**
       * shape is a default implementation of a {@link CIQ.Drawing.BaseTwoPoint} drawing
       * which places a "shape" on the canvas.  It can be rotated and/or stretched.
       * It is meant to be overridden with specific shape designs, such as arrows....
       * @constructor
       * @name  CIQ.Drawing.shape
       * @since 2015-11-1
       * @version ChartIQ Advanced Package
       */
      CIQ.Drawing.shape = function() {
        this.name = 'shape'
        this.radians = 0
        this.a = 0
        this.rotating = false
        this.textMeasure = false
        this.configurator = 'shape' //forces all derived classes to default to shape drawing tools
        this.dimension = [0, 0]
        this.points = []
      }

      CIQ.Drawing.shape.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint)

      CIQ.Drawing.shape.prototype.measure = function() {}

      CIQ.Drawing.shape.prototype.render = function(context) {
        if (!this.points.length) return
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        if (this.p1) {
          var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
          var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])

          context.globalAlpha = 0.5
          context.fillStyle = '#000000'
          if (this.rotating) {
            this.radians = Math.atan((y1 - y0) / (x1 - x0))
            if (x1 < x0) this.radians += Math.PI
            else if (y1 < y0) this.radians += 2 * Math.PI
            this.a = parseInt(((this.radians * 36) / Math.PI).toFixed(0), 10) * 5
            this.a %= 360
            this.radians = (this.a * Math.PI) / 180
            if (this.textMeasure) context.fillText(this.a + '\u00b0', x1 + 10, y1 + 10)
          } else if (this.penDown) {
            this.sx = Math.max(1, parseFloat(Math.abs((2 * (x1 - x0)) / this.dimension[0]).toFixed(1)))
            if (x1 < x0) this.sx *= -1
            this.sy = Math.max(1, parseFloat(Math.abs((2 * (y1 - y0)) / this.dimension[1]).toFixed(1)))
            if (y1 < y0) this.sy *= -1
            if (this.textMeasure) context.fillText(this.sx + 'x,' + this.sy + 'x', x1 + this.sx + 5, y1 + this.sy + 5)
          }
          context.globalAlpha = 1
        }

        var lineWidth = this.lineWidth
        if (!lineWidth) lineWidth = 1.1

        var parameters = {
          pattern: this.pattern,
          lineWidth: lineWidth,
        }
        if (this.highlighted && parameters.pattern == 'none') {
          parameters.pattern = 'solid'
          if (parameters.lineWidth == 0.1) parameters.lineWidth = 1
        }
        var edgeColor = this.color
        if (edgeColor == 'auto' || CIQ.isTransparent(edgeColor)) edgeColor = this.stx.defaultColor
        if (this.highlighted) {
          edgeColor = this.stx.getCanvasColor('stx_highlight_vector')
          if (lineWidth == 0.1) lineWidth = 1.1
        }
        var fillColor = this.fillColor
        lineWidth /= (Math.abs(this.sx * this.sy) * 2) / (Math.abs(this.sx) + Math.abs(this.sy))

        context.save()
        context.translate(x0, y0)
        context.rotate(this.radians)
        context.scale(this.sx, this.sy)

        var subshape, point
        for (subshape = 0; subshape < this.points.length; subshape++) {
          context.beginPath()
          for (point = 0; point < this.points[subshape].length; point++) {
            var x, y, cx1, cx2, cy1, cy2
            if (this.points[subshape][point] == 'M') {
              //move
              x = this.points[subshape][++point] - (this.dimension[0] - 1) / 2
              y = this.points[subshape][++point] - (this.dimension[1] - 1) / 2
              context.moveTo(x, y)
            } else if (this.points[subshape][point] == 'L') {
              //line
              x = this.points[subshape][++point] - (this.dimension[0] - 1) / 2
              y = this.points[subshape][++point] - (this.dimension[1] - 1) / 2
              context.lineTo(x, y)
            } else if (this.points[subshape][point] == 'Q') {
              //quadratic
              cx1 = this.points[subshape][++point] - (this.dimension[0] - 1) / 2
              cy1 = this.points[subshape][++point] - (this.dimension[1] - 1) / 2
              x = this.points[subshape][++point] - (this.dimension[0] - 1) / 2
              y = this.points[subshape][++point] - (this.dimension[1] - 1) / 2
              context.quadraticCurveTo(cx1, cy1, x, y)
            } else if (this.points[subshape][point] == 'B') {
              //bezier
              cx1 = this.points[subshape][++point] - (this.dimension[0] - 1) / 2
              cy1 = this.points[subshape][++point] - (this.dimension[1] - 1) / 2
              cx2 = this.points[subshape][++point] - (this.dimension[0] - 1) / 2
              cy2 = this.points[subshape][++point] - (this.dimension[1] - 1) / 2
              x = this.points[subshape][++point] - (this.dimension[0] - 1) / 2
              y = this.points[subshape][++point] - (this.dimension[1] - 1) / 2
              context.bezierCurveTo(cx1, cy1, cx2, cy2, x, y)
            }
          }
          context.closePath()

          if (fillColor && !CIQ.isTransparent(fillColor) && fillColor != 'auto') {
            //context.globalAlpha=0.4;
            context.fillStyle = fillColor
            context.fill()
            //context.globalAlpha=1;
          }
          if (edgeColor && this.pattern != 'none') {
            context.strokeStyle = edgeColor
            context.lineWidth = lineWidth
            if (context.setLineDash) {
              var lineDashArray = [] //array of dash, space, dash, space, etc
              if (this.pattern == 'dotted') lineDashArray = [lineWidth, lineWidth]
              else if (this.pattern == 'dashed') lineDashArray = [lineWidth * 5, lineWidth * 5]
              context.setLineDash(lineDashArray)
              context.lineDashOffset = 0 //start point in array
            }
            context.stroke()
          }
        }

        //context.strokeRect(-(this.dimension[0]-1)/2,-(this.dimension[1]-1)/2,this.dimension[0]-1,this.dimension[1]-1);

        context.restore()
        context.save()
        context.translate(x0, y0)
        context.rotate(this.radians)

        if (this.highlighted) {
          var p0Fill = this.highlighted == 'p0' ? true : false
          var p1Fill = this.highlighted == 'p1' ? true : false
          var p2Fill = this.highlighted == 'p2' ? true : false
          this.littleCircle(context, 0, 0, p0Fill)
          this.mover(context, 0, 0, p0Fill)
          this.littleCircle(context, (this.sx * this.dimension[0]) / 2, (this.sy * this.dimension[1]) / 2, p1Fill)
          this.resizer(context, (this.sx * this.dimension[0]) / 2, (this.sy * this.dimension[1]) / 2, p1Fill)
          this.littleCircle(context, (this.sx * this.dimension[0]) / 2, 0, p2Fill)
          this.rotator(context, (this.sx * this.dimension[0]) / 2, 0, p2Fill)
          context.globalAlpha = 0.5
          context.fillStyle = '#000000'
          if (this.textMeasure) {
            context.fillText(
              this.sx + 'x,' + this.sy + 'x',
              (this.sx * this.dimension[0]) / 2 + 12,
              (this.sy * this.dimension[1]) / 2 + 5,
            )
            context.fillText(this.a + '\u00b0', (this.sx * this.dimension[0]) / 2 + 12, 5)
          }
          context.globalAlpha = 1
        } else if (this.penDown) {
          if (this.rotating) {
            this.rotator(context, (this.sx * this.dimension[0]) / 2, 0, true)
          } else {
            this.resizer(context, (this.sx * this.dimension[0]) / 2, (this.sy * this.dimension[1]) / 2, true)
          }
        }
        context.restore()
      }

      CIQ.Drawing.shape.prototype.reposition = function(context, repositioner, tick, value) {
        var panel = this.stx.panels[this.panelName]
        if (repositioner.action == 'move') {
          var tickDiff = repositioner.tick - tick
          var valueDiff = repositioner.value - value
          this.setPoint(0, repositioner.p0[0] - tickDiff, repositioner.p0[1] - valueDiff, panel.chart)
          this.render(context)
        } else {
          var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
          var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
          var x1 = this.stx.pixelFromTick(tick, panel.chart)
          var y1 = this.stx.pixelFromValueAdjusted(panel, tick, value)
          if (repositioner.action == 'scale') {
            this[repositioner.point] = [tick, value]
            this.sx = parseFloat(
              (
                ((x1 - x0) * Math.cos(this.radians) + (y1 - y0) * Math.sin(this.radians)) /
                (this.dimension[0] / 2)
              ).toFixed(1),
            )
            if (Math.abs(this.sx) < 1) this.sx /= Math.abs(this.sy)
            this.sy = parseFloat(
              (
                ((y1 - y0) * Math.cos(this.radians) - (x1 - x0) * Math.sin(this.radians)) /
                (this.dimension[1] / 2)
              ).toFixed(1),
            )
            if (Math.abs(this.sy) < 1) this.sy /= Math.abs(this.sy)
            this.render(context)
          } else if (repositioner.action == 'rotate') {
            this[repositioner.point] = [tick, value]
            this.radians = Math.atan((y1 - y0) / (x1 - x0))
            if (x1 < x0) this.radians += Math.PI
            else if (y1 < y0) this.radians += 2 * Math.PI
            this.a = parseInt(((this.radians * 36) / Math.PI).toFixed(0), 10) * 5
            if (this.sx < 0) this.a = this.a + 180
            this.a %= 360
            this.radians = (this.a * Math.PI) / 180
            this.render(context)
          }
        }
      }

      CIQ.Drawing.shape.prototype.intersected = function(tick, value, box) {
        if (!this.p0) return null // in case invalid drawing (such as from panel that no longer exists)
        if (this.stx.repositioningDrawing == this && this.stx.repositioningDrawing.repositioner)
          return this.stx.repositioningDrawing.repositioner
        this.whichPoint = null

        var panel = this.stx.panels[this.panelName]
        var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
        var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
        var x1 = this.stx.pixelFromTick(tick, panel.chart)
        var y1 = this.stx.pixelFromValueAdjusted(panel, tick, value)

        x1 -= x0
        y1 -= y0
        var y1t = y1,
          x1t = x1
        x1 = Math.cos(this.radians) * x1t + Math.sin(this.radians) * y1t
        y1 = Math.cos(this.radians) * y1t - Math.sin(this.radians) * x1t
        x1 /= this.sx
        y1 /= this.sy
        var circleR2 = Math.pow(5 + this.littleCircleRadius(), 2)
        var scaledCircleR2 = Math.abs(circleR2 / (this.sx * this.sy))
        var overShape =
          Math.pow(this.dimension[0] / 2, 2) + Math.pow(this.dimension[1] / 2, 2) > Math.pow(x1, 2) + Math.pow(y1, 2)
        var moveProximity =
          (circleR2 - (Math.pow(x1 * this.sx, 2) + Math.pow(y1 * this.sy, 2))) / Math.abs(this.sx * this.sy)
        var scaleProximity =
          scaledCircleR2 - (Math.pow(x1 - this.dimension[0] / 2, 2) + Math.pow(y1 - this.dimension[1] / 2, 2))
        var rotateProximity = scaledCircleR2 - (Math.pow(x1 - this.dimension[0] / 2, 2) + Math.pow(y1, 2))
        //console.log("s:"+scaleProximity+" r:"+rotateProximity+" m:"+moveProximity);
        if (scaleProximity > 0 && scaleProximity >= rotateProximity && scaleProximity >= moveProximity) {
          this.highlighted = 'p1'
          return {
            action: 'scale',
          }
        } else if (rotateProximity > 0 && rotateProximity >= scaleProximity && rotateProximity >= moveProximity) {
          this.highlighted = 'p2'
          return {
            action: 'rotate',
          }
        } else if (moveProximity > 0 && moveProximity >= scaleProximity && moveProximity >= rotateProximity) {
          this.highlighted = 'p0'
          return {
            action: 'move',
            p0: CIQ.clone(this.p0),
            tick: tick,
            value: value,
          }
        } else if (overShape) {
          this.highlighted = 'p0'
          return {}
        }
        return null
      }

      CIQ.Drawing.shape.prototype.copyConfig = function() {
        this.color = this.stx.currentVectorParameters.currentColor
        this.fillColor = this.stx.currentVectorParameters.fillColor
        this.lineWidth = this.stx.currentVectorParameters.lineWidth
        this.pattern = this.stx.currentVectorParameters.pattern
      }

      CIQ.Drawing.shape.prototype.littleCircleRadius = function() {
        return 3
      }

      CIQ.Drawing.shape.prototype.click = function(context, tick, value) {
        if (!this.points.length) return false
        this.copyConfig()
        var panel = this.stx.panels[this.panelName]
        if (!this.penDown) {
          this.setPoint(0, tick, value, panel.chart)
          this.penDown = true
          return false
        }
        //if(this.accidentalClick(tick, value)) return this.dragToDraw;

        this.setPoint(1, tick, value, panel.chart)

        if (this.rotating) {
          this.penDown = false
          this.rotating = false
          return true // kernel will call render after this
        }
        this.rotating = true
        return false
      }

      CIQ.Drawing.shape.prototype.adjust = function() {
        var panel = this.stx.panels[this.panelName]
        if (!panel) return
        this.setPoint(0, this.d0, this.v0, panel.chart)
        this.radians = (Math.round(this.a / 5) * Math.PI) / 36
      }

      /**
       * Reconstruct a shape
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {object} [obj] A drawing descriptor
       * @param {string} [obj.col] The border color
       * @param {string} [obj.fc] The fill color
       * @param {string} [obj.pnl] The panel name
       * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
       * @param {number} [obj.lw] Optional line width. Defaults to 1.
       * @param {number} [obj.v0] Value (price) for the center point
       * @param {number} [obj.d0] Date (string form) for the center point
       * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
       * @param {number} [obj.a] Angle of the rotation in degrees
       * @param {number} [obj.sx] Horizontal scale factor
       * @param {number} [obj.sy] Vertical scale factor
       * @memberOf CIQ.Drawing.shape
       */
      CIQ.Drawing.shape.prototype.reconstruct = function(stx, obj) {
        this.stx = stx
        this.color = obj.col
        this.fillColor = obj.fc
        this.panelName = obj.pnl
        this.pattern = obj.ptrn
        this.lineWidth = obj.lw
        this.d0 = obj.d0
        this.v0 = obj.v0
        this.tzo0 = obj.tzo0
        this.a = obj.a
        this.sx = obj.sx
        this.sy = obj.sy
        this.adjust()
      }

      CIQ.Drawing.shape.prototype.serialize = function() {
        return {
          name: this.name,
          pnl: this.panelName,
          col: this.color,
          fc: this.fillColor,
          ptrn: this.pattern,
          lw: this.lineWidth,
          d0: this.d0,
          v0: this.v0,
          tzo0: this.tzo0,
          a: this.a,
          sx: this.sx,
          sy: this.sy,
        }
      }

      /* Drawing specific shapes
       *
       * this.dimension: overall dimension of shape as designed, as a pair [dx,dy] where dx is length and dy is width, in pixels
       * this.points: array of arrays.  Each array represents a closed loop subshape.
       * 	within each array is a series of values representing coordinates.
       * 	For example, ["M",0,0,"L",1,1,"L",2,1,"Q",3,3,4,1,"B",5,5,0,0,3,3]
       * 	The array will be parsed by the render function:
       * 		"M" - move to the xy coordinates represented by the next 2 array elements
       * 		"L" - draw line to xy coordinates represented by the next 2 array elements
       * 		"Q" - draw quadratic curve where next 2 elements are the control point and following 2 elements are the end coordinates
       * 		"B" - draw bezier curve where next 2 elements are first control point, next 2 elements are second control point, and next 2 elements are the end coordinates
       * See sample shapes below.
       *
       */

      CIQ.Drawing.xcross = function() {
        this.name = 'xcross'
        this.dimension = [7, 7]
        this.points = [
          [
            'M',
            1,
            0,
            'L',
            3,
            2,
            'L',
            5,
            0,
            'L',
            6,
            1,
            'L',
            4,
            3,
            'L',
            6,
            5,
            'L',
            5,
            6,
            'L',
            3,
            4,
            'L',
            1,
            6,
            'L',
            0,
            5,
            'L',
            2,
            3,
            'L',
            0,
            1,
            'L',
            1,
            0,
          ],
        ]
      }
      CIQ.Drawing.xcross.ciqInheritsFrom(CIQ.Drawing.shape)

      CIQ.Drawing.arrow = function() {
        this.name = 'arrow'
        this.dimension = [11, 11]
        this.points = [['M', 3, 0, 'L', 7, 0, 'L', 7, 5, 'L', 10, 5, 'L', 5, 10, 'L', 0, 5, 'L', 3, 5, 'L', 3, 0]]
      }
      CIQ.Drawing.arrow.ciqInheritsFrom(CIQ.Drawing.shape)

      CIQ.Drawing.check = function() {
        this.name = 'check'
        this.dimension = [8, 9]
        this.points = [['M', 1, 5, 'L', 0, 6, 'L', 2, 8, 'L', 7, 1, 'L', 6, 0, 'L', 2, 6, 'L', 1, 5]]
      }
      CIQ.Drawing.check.ciqInheritsFrom(CIQ.Drawing.shape)

      CIQ.Drawing.star = function() {
        this.name = 'star'
        this.dimension = [12, 12]
        this.points = [
          [
            'M',
            0,
            4,
            'L',
            4,
            4,
            'L',
            5.5,
            0,
            'L',
            7,
            4,
            'L',
            11,
            4,
            'L',
            8,
            7,
            'L',
            9,
            11,
            'L',
            5.5,
            9,
            'L',
            2,
            11,
            'L',
            3,
            7,
            'L',
            0,
            4,
          ],
        ]
      }
      CIQ.Drawing.star.ciqInheritsFrom(CIQ.Drawing.shape)

      CIQ.Drawing.heart = function() {
        this.name = 'heart'
        this.dimension = [23, 20]
        this.points = [
          [
            'M',
            11,
            3,
            'B',
            11,
            2.4,
            10,
            0,
            6,
            0,
            'B',
            0,
            0,
            0,
            7.5,
            0,
            7.5,
            'B',
            0,
            11,
            4,
            15.4,
            11,
            19,
            'B',
            18,
            15.4,
            22,
            11,
            22,
            7.5,
            'B',
            22,
            7.5,
            22,
            0,
            16,
            0,
            'B',
            13,
            0,
            11,
            2.4,
            11,
            3,
          ],
        ]
      }
      CIQ.Drawing.heart.ciqInheritsFrom(CIQ.Drawing.shape)

      CIQ.Drawing.focusarrow = function() {
        this.name = 'focusarrow'
        this.dimension = [7, 5]
        this.points = [['M', 0, 0, 'L', 2, 2, 'L', 0, 4, 'L', 0, 0], ['M', 6, 0, 'L', 4, 2, 'L', 6, 4, 'L', 6, 0]]
      }
      CIQ.Drawing.focusarrow.ciqInheritsFrom(CIQ.Drawing.shape)

      CIQ.Drawing.crossline = function() {
        this.name = 'crossline'
      }
      CIQ.Drawing.crossline.ciqInheritsFrom(CIQ.Drawing.horizontal)
      CIQ.extend(CIQ.Drawing.crossline.prototype, {
        measure: function() {},
        accidentalClick: function(tick, value) {
          return false
        },
        adjust: function() {
          var panel = this.stx.panels[this.panelName]
          if (!panel) return
          this.setPoint(0, this.d0, this.v0, panel.chart)
          this.p1 = CIQ.clone(this.p0)
        },
        intersected: function(tick, value, box) {
          if (!this.p0 || !this.p1) return null
          this.p1[0] += 1
          var isIntersected = this.lineIntersection(tick, value, box, 'horizontal')
          this.p1 = CIQ.clone(this.p0)
          if (!isIntersected) {
            this.p1[1] += 1
            isIntersected = this.lineIntersection(tick, value, box, 'vertical')
            this.p1 = CIQ.clone(this.p0)
            if (!isIntersected) return null
          }
          this.highlighted = true
          // This object will be used for repositioning
          return {
            action: 'move',
            p0: CIQ.clone(this.p0),
            p1: CIQ.clone(this.p1),
            tick: tick, // save original tick
            value: value, // save original value
          }
        },
        render: function(context) {
          var panel = this.stx.panels[this.panelName]
          if (!panel) return
          var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
          var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])

          var color = this.color
          if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
          if (this.highlighted) {
            color = this.stx.getCanvasColor('stx_highlight_vector')
          }

          var parameters = {
            pattern: this.pattern,
            lineWidth: this.lineWidth,
          }
          this.stx.plotLine(x0, x0 + 100, y0, y0, color, 'horizontal', context, panel, parameters)
          this.stx.plotLine(x0, x0, y0, y0 + 100, color, 'vertical', context, panel, parameters)

          if (this.axisLabel && !this.highlighted) {
            this.stx.endClip()
            var txt = this.p0[1]
            if (panel.chart.transformFunc) txt = panel.chart.transformFunc(this.stx, panel.chart, txt)
            if (panel.yAxis.priceFormatter) txt = panel.yAxis.priceFormatter(this.stx, panel, txt)
            else txt = this.stx.formatYAxisPrice(txt, panel)
            this.stx.createYAxisLabel(panel, txt, y0, color)
            this.stx.startClip(panel.name)
            if (!CIQ.ChartEngine.hideDates()) {
              var dt, newDT
              /* set d0 to the right timezone */
              dt = this.stx.dateFromTick(this.p0[0], panel.chart, true)
              if (!this.stx.isDailyInterval(this.stx.layout.interval)) {
                var milli = dt.getSeconds() * 1000 + dt.getMilliseconds()
                if (this.stx.dataZone) {
                  // this creates a date in the right quote feed date
                  newDT = new timezoneJS.Date(
                    dt.getFullYear(),
                    dt.getMonth(),
                    dt.getDate(),
                    dt.getHours(),
                    dt.getMinutes(),
                    this.stx.dataZone,
                  )
                  dt = new Date(newDT.getTime() + milli)
                }
                if (this.stx.displayZone) {
                  // this converts from the quote feed timezone to the chart specified time zone
                  newDT = new timezoneJS.Date(dt.getTime(), this.stx.displayZone)
                  dt = new Date(
                    newDT.getFullYear(),
                    newDT.getMonth(),
                    newDT.getDate(),
                    newDT.getHours(),
                    newDT.getMinutes(),
                  )
                  dt = new Date(dt.getTime() + milli)
                }
              }
              var myDate = CIQ.mmddhhmm(CIQ.yyyymmddhhmm(dt))
              /***********/
              if (panel.chart.xAxis.formatter) {
                myDate = panel.chart.xAxis.formatter(dt)
              } else if (this.stx.internationalizer) {
                var str
                if (dt.getHours() !== 0 || dt.getMinutes() !== 0) {
                  str = this.stx.internationalizer.monthDay.format(dt)
                  str += ' ' + this.stx.internationalizer.hourMinute.format(dt)
                } else {
                  str = this.stx.internationalizer.yearMonthDay.format(dt)
                }
                myDate = str
              }
              this.stx.endClip()
              this.stx.createXAxisLabel(panel, myDate, x0, color, null, true)
              this.stx.startClip(panel.name)
            }
          }
        },
      })

      CIQ.Drawing.speedarc = function() {
        this.name = 'speedarc'
        this.printLevels = true
      }
      CIQ.Drawing.speedarc.ciqInheritsFrom(CIQ.Drawing.segment)
      CIQ.extend(CIQ.Drawing.speedarc.prototype, {
        lineIntersection: function(tick, value, box, type) {
          if (!this.p0 || !this.p1) return false
          if (this.stx.layout.semiLog || this.stx.layout.chartScale == 'log') {
            return CIQ.boxIntersects(
              box.x0,
              CIQ.log10(box.y0),
              box.x1,
              CIQ.log10(box.y1),
              this.p0[0],
              CIQ.log10(this.p0[1]),
              this.p1[0],
              CIQ.log10(this.p1[1]),
              'segment',
            )
          } else {
            return CIQ.boxIntersects(
              box.x0,
              box.y0,
              box.x1,
              box.y1,
              this.p0[0],
              this.p0[1],
              this.p1[0],
              this.p1[1],
              'segment',
            )
          }
        },
        copyConfig: function() {
          this.color = this.stx.currentVectorParameters.currentColor
          this.fillColor = this.stx.currentVectorParameters.fillColor
          this.lineWidth = this.stx.currentVectorParameters.lineWidth
          this.pattern = this.stx.currentVectorParameters.pattern
        },
        render: function(context) {
          var panel = this.stx.panels[this.panelName]
          if (!panel) return
          var yAxis = panel.yAxis
          if (!this.p1) return
          var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
          var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
          var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
          var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
          var isUpTrend = y1 < y0
          var factor = Math.abs((y1 - y0) / (x1 - x0))

          var color = this.color
          if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
          context.strokeStyle = color
          var fillColor = this.fillColor
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor
          context.fillStyle = fillColor
          if (context.setLineDash) {
            var lineDashArray = [] //array of dash, space, dash, space, etc
            if (this.pattern == 'dotted') lineDashArray = [this.lineWidth, this.lineWidth]
            else if (this.pattern == 'dashed') lineDashArray = [this.lineWidth * 5, this.lineWidth * 5]
            context.setLineDash(lineDashArray)
            context.lineDashOffset = 0 //start point in array
          }
          this.stx.canvasFont('stx_yaxis', context)
          for (var i = 1; i < 3; i++) {
            var radius = (Math.abs(this.p1[1] - this.p0[1]) * Math.sqrt(2) * i) / 3
            var value = this.p1[1] + radius * (isUpTrend ? -1 : 1)
            var y = this.stx.pixelFromValueAdjusted(panel, this.p0[0], value)

            context.save()
            context.beginPath()
            context.scale(1 / factor, 1)
            context.arc(x1 * factor, y1, Math.abs(y - y1), 0, Math.PI, !isUpTrend)
            context.stroke()
            context.globalAlpha = 0.1
            context.fill()
            context.restore()
            context.globalAlpha = 1
            if (this.printLevels) {
              context.fillStyle = color
              context.textAlign = 'center'
              var txt = i + '/3'
              context.fillText(txt, x1, Math.round(y - 5))
              context.fillStyle = fillColor
            }
          }
          context.textAlign = 'left'
          var trendLineColor = this.color
          if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
          if (this.highlighted) {
            trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
          }
          var parameters = {
            pattern: this.pattern,
            lineWidth: this.lineWidth,
          }
          this.stx.plotLine(x0, x1, y0, y1, trendLineColor, 'segment', context, panel, parameters)
          if (context.setLineDash) context.setLineDash([])
          if (this.highlighted) {
            var p0Fill = this.highlighted == 'p0' ? true : false
            var p1Fill = this.highlighted == 'p1' ? true : false
            this.littleCircle(context, x0, y0, p0Fill)
            this.littleCircle(context, x1, y1, p1Fill)
          }
        },
        reconstruct: function(stx, obj) {
          this.stx = stx
          this.color = obj.col
          this.fillColor = obj.fc
          this.panelName = obj.pnl
          this.pattern = obj.ptrn
          this.lineWidth = obj.lw
          this.d0 = obj.d0
          this.d1 = obj.d1
          this.tzo0 = obj.tzo0
          this.tzo1 = obj.tzo1
          this.v0 = obj.v0
          this.v1 = obj.v1
          this.adjust()
        },
        serialize: function() {
          return {
            name: this.name,
            pnl: this.panelName,
            col: this.color,
            fc: this.fillColor,
            ptrn: this.pattern,
            lw: this.lineWidth,
            d0: this.d0,
            d1: this.d1,
            tzo0: this.tzo0,
            tzo1: this.tzo1,
            v0: this.v0,
            v1: this.v1,
          }
        },
      })

      CIQ.Drawing.speedline = function() {
        this.name = 'speedline'
        this.printLevels = true
      }
      CIQ.Drawing.speedline.ciqInheritsFrom(CIQ.Drawing.speedarc)
      CIQ.extend(CIQ.Drawing.speedline.prototype, {
        render: function(context) {
          var panel = this.stx.panels[this.panelName]
          if (!panel) return
          var yAxis = panel.yAxis
          if (!this.p1) return
          var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
          var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
          var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
          var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
          var top = Math.min(y1, y0)
          var bottom = Math.max(y1, y0)
          var height = bottom - top
          var isUpTrend = (y1 - y0) / (x1 - x0) > 0
          this.stx.canvasFont('stx_yaxis', context) // match font from y axis so it looks cohesive
          var trendLineColor = this.color
          if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
          if (this.highlighted) {
            trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
          }
          var color = this.color
          if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
          context.strokeStyle = color
          var fillColor = this.fillColor
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor
          context.fillStyle = fillColor
          var parameters = {
            pattern: this.pattern,
            lineWidth: this.lineWidth,
          }
          var farX0, farY0
          var levels = ['1', '2/3', '1/3', '3/2', '3']
          var levelValues = [1, 2 / 3, 1 / 3, 3 / 2, 3]
          var grids = []
          for (var i = 0; i < levelValues.length; i++) {
            var level = levelValues[i]
            if (level > 1 && !this.extension) continue
            var y = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1] - (this.p0[1] - this.p1[1]) * level)
            var x
            if (level > 1) {
              x = CIQ.xIntersection({ x0: x0, x1: x1, y0: y0, y1: y }, y1)
              grids.push(x)
            } else {
              x = CIQ.xIntersection({ x0: x1, x1: x1, y0: y0, y1: y1 }, y)
              grids.push(y)
            }
            //var x=x0+(x1-x0)/level;
            //var y=y0-level*(y0-y1);
            var farX = level > 1 ? x : x1
            var farY = level > 1 ? y1 : y
            if (!this.confineToGrid) {
              farX = this.stx.chart.left
              if (x1 > x0) farX += this.stx.chart.width
              farY = ((farX - x0) * (y - y0)) / (x1 - x0) + y0
            }
            if (this.printLevels) {
              if (level != 1 || this.extension) {
                context.fillStyle = color
                var perturbX = 0
                perturbY = 0
                if (y0 > y1) {
                  perturbY = -5
                  context.textBaseline = 'bottom'
                } else {
                  perturbY = 5
                  context.textBaseline = 'top'
                }
                if (x0 > x1) {
                  perturbX = 5
                  context.textAlign = 'right'
                } else {
                  perturbX = -5
                  context.textAlign = 'left'
                }
                if (level > 1) context.fillText(levels[i], x + (this.confineToGrid ? 0 : perturbX), y1)
                else context.fillText(levels[i], x1, y + (this.confineToGrid ? 0 : perturbY))
                context.fillStyle = fillColor
              }
            }
            this.stx.plotLine(
              x0,
              farX,
              y0,
              farY,
              i || !this.highlighted ? color : trendLineColor,
              'segment',
              context,
              panel,
              parameters,
            )
            if (level == 1) {
              farX0 = farX
              farY0 = farY
            }
            context.globalAlpha = 0.1
            context.beginPath()
            context.moveTo(farX, farY)
            context.lineTo(x0, y0)
            context.lineTo(farX0, farY0)
            context.fill()
            context.globalAlpha = 1
          }
          context.textAlign = 'left'
          context.textBaseline = 'middle'
          if (this.confineToGrid) {
            context.globalAlpha = 0.3
            context.beginPath()
            context.moveTo(x0, y0)
            context.lineTo(x0, y1)
            context.lineTo(x1, y1)
            context.lineTo(x1, y0)
            context.lineTo(x0, y0)
            context.moveTo(x0, grids[1])
            context.lineTo(x1, grids[1])
            context.moveTo(x0, grids[2])
            context.lineTo(x1, grids[2])
            if (this.extension) {
              context.moveTo(grids[3], y0)
              context.lineTo(grids[3], y1)
              context.moveTo(grids[4], y0)
              context.lineTo(grids[4], y1)
            }
            context.stroke()
            context.globalAlpha = 1
          }
          if (this.highlighted) {
            var p0Fill = this.whichPoint == 'p0' ? true : false
            var p1Fill = this.whichPoint == 'p1' ? true : false
            this.littleCircle(context, x0, y0, p0Fill)
            this.littleCircle(context, x1, y1, p1Fill)
          }
        },
      })

      CIQ.Drawing.gannfan = function() {
        this.name = 'gannfan'
        this.printLevels = true
      }
      CIQ.Drawing.gannfan.ciqInheritsFrom(CIQ.Drawing.speedarc)
      CIQ.extend(CIQ.Drawing.gannfan.prototype, {
        render: function(context) {
          var panel = this.stx.panels[this.panelName]
          if (!panel) return
          var yAxis = panel.yAxis
          if (!this.p1) return
          var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
          var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
          var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
          var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
          var top = Math.min(y1, y0)
          var bottom = Math.max(y1, y0)
          var height = bottom - top
          var isUpTrend = (y1 - y0) / (x1 - x0) > 0
          this.stx.canvasFont('stx_yaxis', context) // match font from y axis so it looks cohesive
          var trendLineColor = this.color
          if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
          if (this.highlighted) {
            trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
          }
          var color = this.color
          if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
          context.strokeStyle = color
          var fillColor = this.fillColor
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor
          context.fillStyle = fillColor
          var parameters = {
            pattern: this.pattern,
            lineWidth: this.lineWidth,
          }
          var farX0, farY0
          var levels = [1, 2, 3, 4, 8, 1 / 2, 1 / 3, 1 / 4, 1 / 8]
          for (var i = 0; i < levels.length; i++) {
            var level = levels[i]
            var x = x0 + (x1 - x0) / level
            var y = y0 - level * (y0 - y1)
            var farX = this.stx.chart.left
            if (x1 > x0) farX += this.stx.chart.width
            var farY = ((farX - x0) * (y - y0)) / (x1 - x0) + y0
            if (this.printLevels) {
              context.fillStyle = color
              var perturbX = 0
              perturbY = 0
              if (y0 > y1) {
                perturbY = 5
                context.textBaseline = 'top'
              } else {
                perturbY = -5
                context.textBaseline = 'botttom'
              }
              if (x0 > x1) {
                perturbX = 5
                context.textAlign = 'left'
              } else {
                perturbX = -5
                context.textAlign = 'right'
              }
              if (level > 1) context.fillText(level + 'x1', x + perturbX, y1)
              else context.fillText('1x' + 1 / level, x1, y + perturbY)
              context.fillStyle = fillColor
            }
            this.stx.plotLine(
              x0,
              farX,
              y0,
              farY,
              i || !this.highlighted ? color : trendLineColor,
              'segment',
              context,
              panel,
              parameters,
            )
            if (level == 1) {
              farX0 = farX
              farY0 = farY
            }
            context.globalAlpha = 0.1
            context.beginPath()
            context.moveTo(farX, farY)
            context.lineTo(x0, y0)
            context.lineTo(farX0, farY0)
            context.fill()
            context.globalAlpha = 1
          }
          context.textAlign = 'left'
          context.textBaseline = 'middle'
          if (this.highlighted) {
            var p0Fill = this.highlighted == 'p0' ? true : false
            var p1Fill = this.highlighted == 'p1' ? true : false
            this.littleCircle(context, x0, y0, p0Fill)
            this.littleCircle(context, x1, y1, p1Fill)
          }
        },
      })

      CIQ.Drawing.timecycle = function() {
        this.name = 'timecycle'
        this.printLevels = true
      }
      CIQ.Drawing.timecycle.ciqInheritsFrom(CIQ.Drawing.speedarc)
      CIQ.extend(CIQ.Drawing.timecycle.prototype, {
        render: function(context) {
          var panel = this.stx.panels[this.panelName]
          if (!panel) return
          if (!this.p1) return
          var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
          var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)
          var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], this.p0[1])
          var y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], this.p1[1])
          var count = 0

          var trendLineColor = this.color
          if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
          if (this.highlighted) {
            trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
          }
          context.textBaseline = 'middle'
          this.stx.canvasFont('stx_yaxis', context) // match font from y axis so it looks cohesive
          var h = 20 // give it extra space so it does not overlap with the date labels.
          var mult = this.p1[0] - this.p0[0]
          context.textAlign = 'center'

          x = x0
          var farY = this.stx.chart.panel.yAxis.height
          var color = this.color
          if (color == 'auto' || CIQ.isTransparent(color)) color = this.stx.defaultColor
          var fillColor = this.fillColor
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor

          if (this.printLevels) farY -= h - 7

          var parameters = {
            pattern: this.pattern,
            lineWidth: this.lineWidth,
          }

          var x_s = []
          context.save()
          context.fillStyle = fillColor
          context.globalAlpha = 0.1
          context.globalCompositeOperation = 'destination-over'
          do {
            x = this.stx.pixelFromTick(this.p0[0] + count * mult, panel.chart)
            count++
            if (x0 < x1 && x > this.stx.chart.left + this.stx.chart.width) break
            else if (x0 > x1 && x < this.stx.chart.left) break
            else if (x < this.stx.chart.left || x > this.stx.chart.left + this.stx.chart.width) continue

            context.beginPath()
            context.moveTo(x0, 0)
            context.lineTo(x, 0)
            context.lineTo(x, farY)
            context.lineTo(x0, farY)
            context.fill()
            x_s.push({ c: count, x: x })
          } while (mult)
          context.globalAlpha = 1
          var slack = 0
          for (var pt = 0; pt < x_s.length; pt++) {
            this.stx.plotLine(x_s[pt].x, x_s[pt].x, 0, farY, color, 'segment', context, panel, parameters)
            if (this.printLevels) {
              context.fillStyle = color
              var m = this.stx.chart.context.measureText(x_s[pt].c).width + 3
              if (m < this.stx.layout.candleWidth + slack) {
                context.fillText(x_s[pt].c, x_s[pt].x, farY + 7)
                slack = 0
              } else {
                slack += this.stx.layout.candleWidth
              }
            }
          }
          context.restore()
          context.textAlign = 'left'
          this.stx.plotLine(x0, x1, y0, y1, trendLineColor, 'segment', context, panel, parameters)
          if (this.highlighted) {
            var p0Fill = this.highlighted == 'p0' ? true : false
            var p1Fill = this.highlighted == 'p1' ? true : false
            this.littleCircle(context, x0, y0, p0Fill)
            this.littleCircle(context, x1, y1, p1Fill)
          }
        },
      })

      CIQ.Drawing.regression = function() {
        this.name = 'regression'
      }
      CIQ.Drawing.regression.ciqInheritsFrom(CIQ.Drawing.segment)
      CIQ.extend(CIQ.Drawing.regression.prototype, {
        click: function(context, tick, value) {
          if (tick < 0) return
          this.copyConfig()
          var panel = this.stx.panels[this.panelName]
          if (!this.penDown) {
            this.setPoint(0, tick, value, panel.chart)
            this.penDown = true
            return false
          }
          if (this.accidentalClick(tick, value)) return this.dragToDraw

          this.setPoint(1, tick, value, panel.chart)
          this.penDown = false
          return true // kernel will call render after this
        },
        lineIntersection: function(tick, value, box, type) {
          if (!this.p0 || !this.p1) return false
          if (this.stx.layout.semiLog || this.stx.layout.chartScale == 'log') {
            return CIQ.boxIntersects(
              box.x0,
              CIQ.log10(box.y0),
              box.x1,
              CIQ.log10(box.y1),
              this.p0[0],
              CIQ.log10(this.p0[1]),
              this.p1[0],
              CIQ.log10(this.p1[1]),
              'segment',
            )
          } else {
            return CIQ.boxIntersects(
              box.x0,
              box.y0,
              box.x1,
              box.y1,
              this.p0[0],
              this.p0[1],
              this.p1[0],
              this.p1[1],
              'segment',
            )
          }
        },
        render: function(context) {
          var panel = this.stx.panels[this.panelName]
          if (!panel) return
          if (!this.p1) return
          if (this.p0[0] < 0) this.p0[0] = 0
          if (this.p1[0] < 0) this.p1[0] = 0
          var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
          var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)

          var prices = []
          var sumCloses = 0
          var sumWeightedCloses = 0
          var sumClosesSquared = 0
          var rawTicks = 0
          for (var i = Math.min(this.p1[0], this.p0[0]); i <= Math.max(this.p1[0], this.p0[0]); i++) {
            if (this.stx.chart.dataSet[i]) {
              var price = this.stx.chart.dataSet[i].Close
              if (price || price === 0) {
                prices.push(price)
              }
            }
            rawTicks++
          }
          for (i = 0; i < prices.length; i++) {
            sumWeightedCloses += prices.length * prices[i] - sumCloses
            sumCloses += prices[i]
            sumClosesSquared += Math.pow(prices[i], 2)
          }
          var ticks = prices.length
          var sumWeights = (ticks * (ticks + 1)) / 2
          var squaredSumWeights = Math.pow(sumWeights, 2)
          var sumWeightsSquared = (sumWeights * (2 * ticks + 1)) / 3
          var slope =
            (ticks * sumWeightedCloses - sumWeights * sumCloses) / (ticks * sumWeightsSquared - squaredSumWeights)
          var intercept = (sumCloses - slope * sumWeights) / ticks
          var y0, y1
          if (this.p0[0] < this.p1[0]) {
            y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], intercept)
            y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], slope * rawTicks + intercept)
          } else {
            y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], slope * rawTicks + intercept)
            y1 = this.stx.pixelFromValueAdjusted(panel, this.p1[0], intercept)
          }
          var trendLineColor = this.color
          if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
          if (this.highlighted) {
            trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
          }
          var parameters = {
            pattern: this.pattern,
            lineWidth: this.lineWidth,
          }
          this.stx.plotLine(x0, x1, y0, y1, trendLineColor, 'segment', context, panel, parameters)
          this.stx.plotLine(x0, x0, y0 - 20, y0 + 20, trendLineColor, 'segment', context, panel, parameters)
          this.stx.plotLine(x1, x1, y1 - 20, y1 + 20, trendLineColor, 'segment', context, panel, parameters)

          if (!this.highlighted) {
            //move points
            if (this.p0[0] < this.p1[0]) {
              this.setPoint(0, this.p0[0], intercept, panel.chart)
              this.setPoint(1, this.p1[0], slope * rawTicks + intercept, panel.chart)
            } else {
              this.setPoint(0, this.p0[0], slope * rawTicks + intercept, panel.chart)
              this.setPoint(1, this.p1[0], intercept, panel.chart)
            }
          } else {
            var p0Fill = this.highlighted == 'p0' ? true : false
            var p1Fill = this.highlighted == 'p1' ? true : false
            this.littleCircle(context, x0, y0, p0Fill)
            this.littleCircle(context, x1, y1, p1Fill)
          }
        },
      })

      CIQ.Drawing.quadrant = function() {
        this.name = 'quadrant'
      }
      CIQ.Drawing.quadrant.ciqInheritsFrom(CIQ.Drawing.speedarc)
      CIQ.extend(CIQ.Drawing.quadrant.prototype, {
        render: function(context) {
          var panel = this.stx.panels[this.panelName]
          if (!panel) return
          if (!this.p1) return
          var x0 = this.stx.pixelFromTick(this.p0[0], panel.chart)
          var x1 = this.stx.pixelFromTick(this.p1[0], panel.chart)

          var highest = null,
            lowest = null
          for (var i = Math.min(this.p1[0], this.p0[0]); i <= Math.max(this.p1[0], this.p0[0]); i++) {
            if (this.stx.chart.dataSet[i]) {
              var price = this.stx.chart.dataSet[i].Close
              if (price || price === 0) {
                if (highest === null || price > highest) highest = price
                if (lowest === null || price < lowest) lowest = price
              }
            }
          }
          var avg = (highest + lowest) / 2
          var y0 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], highest)
          var y25 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], (highest + avg) / 2)
          var y33 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], (2 * highest + lowest) / 3)
          var y50 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], avg)
          var y66 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], (highest + 2 * lowest) / 3)
          var y75 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], (lowest + avg) / 2)
          var y100 = this.stx.pixelFromValueAdjusted(panel, this.p0[0], lowest)

          var trendLineColor = this.color
          if (trendLineColor == 'auto' || CIQ.isTransparent(trendLineColor)) trendLineColor = this.stx.defaultColor
          if (this.highlighted) {
            trendLineColor = this.stx.getCanvasColor('stx_highlight_vector')
          }
          var fillColor = this.fillColor
          if (fillColor == 'auto' || CIQ.isTransparent(fillColor)) fillColor = this.stx.defaultColor
          context.fillStyle = fillColor

          var parameters = {
            pattern: this.pattern,
            lineWidth: this.lineWidth,
          }
          this.stx.plotLine(x0, x1, y0, y0, trendLineColor, 'segment', context, panel, parameters)
          this.stx.plotLine(x0, x1, y100, y100, trendLineColor, 'segment', context, panel, parameters)
          if (this.name == 'quadrant') {
            this.stx.plotLine(x0, x1, y25, y25, trendLineColor, 'segment', context, panel, parameters)
            this.stx.plotLine(x0, x1, y75, y75, trendLineColor, 'segment', context, panel, parameters)
          } else if (this.name == 'tirone') {
            this.stx.plotLine(x0, x1, y33, y33, trendLineColor, 'segment', context, panel, parameters)
            this.stx.plotLine(x0, x1, y66, y66, trendLineColor, 'segment', context, panel, parameters)
          }
          this.stx.plotLine(x0, x0, y0, y100, trendLineColor, 'segment', context, panel, parameters)
          this.stx.plotLine(x1, x1, y0, y100, trendLineColor, 'segment', context, panel, parameters)
          this.stx.plotLine(
            x0,
            x1,
            y50,
            y50,
            trendLineColor,
            'segment',
            context,
            panel,
            CIQ.extend(parameters, { opacity: this.name == 'tirone' ? 0.2 : 1 }),
          )

          context.globalAlpha = 0.1
          context.beginPath()
          context.fillRect(x0, y0, x1 - x0, y100 - y0)
          if (this.name == 'quadrant') {
            context.fillRect(x0, y25, x1 - x0, y75 - y25)
          } else if (this.name == 'tirone') {
            context.fillRect(x0, y33, x1 - x0, y66 - y33)
          }
          context.globalAlpha = 1

          if (!this.highlighted) {
            //move points
            this.setPoint(0, this.p0[0], avg, panel.chart)
            this.setPoint(1, this.p1[0], avg, panel.chart)
          } else {
            var p0Fill = this.highlighted == 'p0' ? true : false
            var p1Fill = this.highlighted == 'p1' ? true : false
            this.littleCircle(context, x0, y50, p0Fill)
            this.littleCircle(context, x1, y50, p1Fill)
          }
        },
      })

      CIQ.Drawing.tirone = function() {
        this.name = 'tirone'
      }
      CIQ.Drawing.tirone.ciqInheritsFrom(CIQ.Drawing.quadrant)

      return _exports
    }

  var __js_advanced_equations_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      //JavaScript Expression Evaluator: https://silentmatt.com/javascript-expression-evaluator/
      /*!
	 Based on ndef.parser, by Raphael Graf(r@undefined.ch)
	 http://www.undefined.ch/mparser/index.html
	 Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)
	 You are free to use and modify this code in anyway you find useful. Please leave this comment in the code
	 to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,
	 but don't feel like you have to let me know or ask permission.
	*/

      var Parser = function() {
        function object(o) {
          function F() {}
          F.prototype = o
          return new F()
        }

        var TNUMBER = 0
        var TOP1 = 1
        var TOP2 = 2
        var TVAR = 3
        var TFUNCALL = 4

        function Token(type_, index_, prio_, number_) {
          this.type_ = type_
          this.index_ = index_ || 0
          this.prio_ = prio_ || 0
          this.number_ = number_ !== undefined && number_ !== null ? number_ : 0
          this.toString = function() {
            switch (this.type_) {
              case TNUMBER:
                return this.number_
              case TOP1:
              case TOP2:
              case TVAR:
                return this.index_
              case TFUNCALL:
                return 'CALL'
              default:
                return 'Invalid Token'
            }
          }
        }

        function Expression(tokens, ops1, ops2, functions) {
          this.tokens = tokens
          this.ops1 = ops1
          this.ops2 = ops2
          this.functions = functions
        }

        // Based on http://www.json.org/json2.js
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          escapable = /[\\\'\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            "'": "\\'",
            '\\': '\\\\',
          }

        function escapeValue(v) {
          if (typeof v === 'string') {
            escapable.lastIndex = 0
            return escapable.test(v)
              ? "'" +
                  v.replace(escapable, function(a) {
                    var c = meta[a]
                    return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)
                  }) +
                  "'"
              : "'" + v + "'"
          }
          return v
        }

        Expression.prototype = {
          simplify: function(values) {
            values = values || {}
            var nstack = []
            var newexpression = []
            var n1
            var n2
            var f
            var L = this.tokens.length
            var item
            var i = 0
            for (i = 0; i < L; i++) {
              item = this.tokens[i]
              var type_ = item.type_
              if (type_ === TNUMBER) {
                nstack.push(item)
              } else if (type_ === TVAR && item.index_ in values) {
                item = new Token(TNUMBER, 0, 0, values[item.index_])
                nstack.push(item)
              } else if (type_ === TOP2 && nstack.length > 1) {
                n2 = nstack.pop()
                n1 = nstack.pop()
                f = this.ops2[item.index_]
                item = new Token(TNUMBER, 0, 0, f(n1.number_, n2.number_))
                nstack.push(item)
              } else if (type_ === TOP1 && nstack.length > 0) {
                n1 = nstack.pop()
                f = this.ops1[item.index_]
                item = new Token(TNUMBER, 0, 0, f(n1.number_))
                nstack.push(item)
              } else {
                while (nstack.length > 0) {
                  newexpression.push(nstack.shift())
                }
                newexpression.push(item)
              }
            }
            while (nstack.length > 0) {
              newexpression.push(nstack.shift())
            }

            return new Expression(newexpression, object(this.ops1), object(this.ops2), object(this.functions))
          },

          substitute: function(variable, expr) {
            if (!(expr instanceof Expression)) {
              expr = new Parser().parse(String(expr))
            }
            var newexpression = []
            var L = this.tokens.length
            var item
            var i = 0
            for (i = 0; i < L; i++) {
              item = this.tokens[i]
              var type_ = item.type_
              if (type_ === TVAR && item.index_ === variable) {
                for (var j = 0; j < expr.tokens.length; j++) {
                  var expritem = expr.tokens[j]
                  var replitem = new Token(expritem.type_, expritem.index_, expritem.prio_, expritem.number_)
                  newexpression.push(replitem)
                }
              } else {
                newexpression.push(item)
              }
            }

            var ret = new Expression(newexpression, object(this.ops1), object(this.ops2), object(this.functions))
            return ret
          },

          evaluate: function(values) {
            values = values || {}
            var nstack = []
            var n1
            var n2
            var f
            var L = this.tokens.length
            var item
            var i = 0
            for (i = 0; i < L; i++) {
              item = this.tokens[i]
              var type_ = item.type_
              if (type_ === TNUMBER) {
                nstack.push(item.number_)
              } else if (type_ === TOP2) {
                n2 = nstack.pop()
                n1 = nstack.pop()
                f = this.ops2[item.index_]
                nstack.push(f(n1, n2))
              } else if (type_ === TVAR) {
                if (item.index_ in values) {
                  nstack.push(values[item.index_])
                } else if (item.index_ in this.functions) {
                  nstack.push(this.functions[item.index_])
                } else {
                  throw new Error('undefined variable: ' + item.index_)
                }
              } else if (type_ === TOP1) {
                n1 = nstack.pop()
                f = this.ops1[item.index_]
                nstack.push(f(n1))
              } else if (type_ === TFUNCALL) {
                n1 = nstack.pop()
                f = nstack.pop()
                if (f.apply && f.call) {
                  if (Object.prototype.toString.call(n1) == '[object Array]') {
                    nstack.push(f.apply(undefined, n1))
                  } else {
                    nstack.push(f.call(undefined, n1))
                  }
                } else {
                  throw new Error(f + ' is not a function')
                }
              } else {
                throw new Error('invalid Expression')
              }
            }
            if (nstack.length > 1) {
              throw new Error('invalid Expression (parity)')
            }
            return nstack[0]
          },

          toString: function(toJS) {
            var nstack = []
            var n1
            var n2
            var f
            var L = this.tokens.length
            var item
            var i = 0
            for (i = 0; i < L; i++) {
              item = this.tokens[i]
              var type_ = item.type_
              if (type_ === TNUMBER) {
                nstack.push(escapeValue(item.number_))
              } else if (type_ === TOP2) {
                n2 = nstack.pop()
                n1 = nstack.pop()
                f = item.index_
                if (toJS && f == '^') {
                  nstack.push('Math.pow(' + n1 + ',' + n2 + ')')
                } else {
                  nstack.push('(' + n1 + f + n2 + ')')
                }
              } else if (type_ === TVAR) {
                nstack.push(item.index_)
              } else if (type_ === TOP1) {
                n1 = nstack.pop()
                f = item.index_
                if (f === '-') {
                  nstack.push('(' + f + n1 + ')')
                } else {
                  nstack.push(f + '(' + n1 + ')')
                }
              } else if (type_ === TFUNCALL) {
                n1 = nstack.pop()
                f = nstack.pop()
                nstack.push(f + '(' + n1 + ')')
              } else {
                throw new Error('invalid Expression')
              }
            }
            if (nstack.length > 1) {
              throw new Error('invalid Expression (parity)')
            }
            return nstack[0]
          },

          variables: function() {
            var L = this.tokens.length
            var vars = []
            for (var i = 0; i < L; i++) {
              var item = this.tokens[i]
              if (item.type_ === TVAR && vars.indexOf(item.index_) == -1) {
                vars.push(item.index_)
              }
            }

            return vars
          } /*,

			toJSFunction: function (param, variables) {
				var f = new Function(param, "with(Parser.values) { return " + this.simplify(variables).toString(true) + "; }");
				return f;
			}*/,
        }

        function add(a, b) {
          return Number(a) + Number(b)
        }
        function sub(a, b) {
          return a - b
        }
        function mul(a, b) {
          return a * b
        }
        function div(a, b) {
          return a / b
        }
        function mod(a, b) {
          return a % b
        }
        function concat(a, b) {
          return '' + a + b
        }
        function equal(a, b) {
          return a == b
        }
        function notEqual(a, b) {
          return a != b
        }
        function greaterThan(a, b) {
          return a > b
        }
        function lessThan(a, b) {
          return a < b
        }
        function greaterThanEqual(a, b) {
          return a >= b
        }
        function lessThanEqual(a, b) {
          return a <= b
        }
        function andOperator(a, b) {
          return Boolean(a && b)
        }
        function orOperator(a, b) {
          return Boolean(a || b)
        }
        function sinh(a) {
          return Math.sinh ? Math.sinh(a) : (Math.exp(a) - Math.exp(-a)) / 2
        }
        function cosh(a) {
          return Math.cosh ? Math.cosh(a) : (Math.exp(a) + Math.exp(-a)) / 2
        }
        function tanh(a) {
          if (Math.tanh) return Math.tanh(a)
          if (a === Infinity) return 1
          if (a === -Infinity) return -1
          return (Math.exp(a) - Math.exp(-a)) / (Math.exp(a) + Math.exp(-a))
        }
        function asinh(a) {
          if (Math.asinh) return Math.asinh(a)
          if (a === -Infinity) return a
          return Math.log(a + Math.sqrt(a * a + 1))
        }
        function acosh(a) {
          return Math.acosh ? Math.acosh(a) : Math.log(a + Math.sqrt(a * a - 1))
        }
        function atanh(a) {
          return Math.atanh ? Math.atanh(a) : Math.log((1 + a) / (1 - a)) / 2
        }
        function log10(a) {
          return Math.log(a) * Math.LOG10E
        }
        function neg(a) {
          return -a
        }
        function trunc(a) {
          if (Math.trunc) return Math.trunc(a)
          else return a < 0 ? Math.ceil(a) : Math.floor(a)
        }
        function random(a) {
          return Math.random() * (a || 1)
        }
        function fac(a) {
          //a!
          a = Math.floor(a)
          var b = a
          while (a > 1) {
            b = b * --a
          }
          return b
        }

        // TODO: use hypot that doesn't overflow
        function hypot() {
          if (Math.hypot) return Math.hypot.apply(this, arguments)
          var y = 0
          var length = arguments.length
          for (var i = 0; i < length; i++) {
            if (arguments[i] === Infinity || arguments[i] === -Infinity) {
              return Infinity
            }
            y += arguments[i] * arguments[i]
          }
          return Math.sqrt(y)
        }

        function condition(cond, yep, nope) {
          return cond ? yep : nope
        }

        function append(a, b) {
          if (Object.prototype.toString.call(a) != '[object Array]') {
            return [a, b]
          }
          a = a.slice()
          a.push(b)
          return a
        }

        function Parser() {
          this.success = false
          this.errormsg = ''
          this.expression = ''

          this.pos = 0

          this.tokennumber = 0
          this.tokenprio = 0
          this.tokenindex = 0
          this.tmpprio = 0

          this.ops1 = {
            sin: Math.sin,
            cos: Math.cos,
            tan: Math.tan,
            asin: Math.asin,
            acos: Math.acos,
            atan: Math.atan,
            sinh: sinh,
            cosh: cosh,
            tanh: tanh,
            asinh: asinh,
            acosh: acosh,
            atanh: atanh,
            sqrt: Math.sqrt,
            log: Math.log,
            lg: log10,
            log10: log10,
            abs: Math.abs,
            ceil: Math.ceil,
            floor: Math.floor,
            round: Math.round,
            trunc: trunc,
            '-': neg,
            exp: Math.exp,
          }

          this.ops2 = {
            '+': add,
            '-': sub,
            '*': mul,
            '/': div,
            '%': mod,
            '^': Math.pow,
            ',': append,
            '||': concat,
            '==': equal,
            '!=': notEqual,
            '>': greaterThan,
            '<': lessThan,
            '>=': greaterThanEqual,
            '<=': lessThanEqual,
            and: andOperator,
            or: orOperator,
          }

          this.functions = {
            random: random,
            fac: fac,
            min: Math.min,
            max: Math.max,
            hypot: hypot,
            pyt: hypot, // backward compat
            pow: Math.pow,
            atan2: Math.atan2,
            if: condition,
          }

          this.consts = {
            E: Math.E,
            PI: Math.PI,
          }
        }

        Parser.parse = function(expr) {
          return new Parser().parse(expr)
        }

        Parser.evaluate = function(expr, variables) {
          return Parser.parse(expr).evaluate(variables)
        }

        Parser.Expression = Expression

        Parser.values = {
          sin: Math.sin,
          cos: Math.cos,
          tan: Math.tan,
          asin: Math.asin,
          acos: Math.acos,
          atan: Math.atan,
          sinh: sinh,
          cosh: cosh,
          tanh: tanh,
          asinh: asinh,
          acosh: acosh,
          atanh: atanh,
          sqrt: Math.sqrt,
          log: Math.log,
          lg: log10,
          log10: log10,
          abs: Math.abs,
          ceil: Math.ceil,
          floor: Math.floor,
          round: Math.round,
          trunc: trunc,
          random: random,
          fac: fac,
          exp: Math.exp,
          min: Math.min,
          max: Math.max,
          hypot: hypot,
          pyt: hypot, // backward compat
          pow: Math.pow,
          atan2: Math.atan2,
          if: condition,
          E: Math.E,
          PI: Math.PI,
        }

        var PRIMARY = 1 << 0
        var OPERATOR = 1 << 1
        var FUNCTION = 1 << 2
        var LPAREN = 1 << 3
        var RPAREN = 1 << 4
        var COMMA = 1 << 5
        var SIGN = 1 << 6
        var CALL = 1 << 7
        var NULLARY_CALL = 1 << 8

        Parser.prototype = {
          parse: function(expr) {
            this.errormsg = ''
            this.success = true
            var operstack = []
            var tokenstack = []
            this.tmpprio = 0
            var expected = PRIMARY | LPAREN | FUNCTION | SIGN
            var noperators = 0
            this.expression = expr
            this.pos = 0

            while (this.pos < this.expression.length) {
              var token
              if (this.isOperator()) {
                if (this.isSign() && expected & SIGN) {
                  if (this.isNegativeSign()) {
                    this.tokenprio = 2
                    this.tokenindex = '-'
                    noperators++
                    this.addfunc(tokenstack, operstack, TOP1)
                  }
                  expected = PRIMARY | LPAREN | FUNCTION | SIGN
                } else if (this.isComment()) {
                } else {
                  if ((expected & OPERATOR) === 0) {
                    this.error_parsing(this.pos, 'unexpected operator')
                  }
                  noperators += 2
                  this.addfunc(tokenstack, operstack, TOP2)
                  expected = PRIMARY | LPAREN | FUNCTION | SIGN
                }
              } else if (this.isNumber()) {
                if ((expected & PRIMARY) === 0) {
                  this.error_parsing(this.pos, 'unexpected number')
                }
                token = new Token(TNUMBER, 0, 0, this.tokennumber)
                tokenstack.push(token)

                expected = OPERATOR | RPAREN | COMMA
              } else if (this.isString()) {
                if ((expected & PRIMARY) === 0) {
                  this.error_parsing(this.pos, 'unexpected string')
                }
                token = new Token(TNUMBER, 0, 0, this.tokennumber)
                tokenstack.push(token)

                expected = OPERATOR | RPAREN | COMMA
              } else if (this.isLeftParenth()) {
                if ((expected & LPAREN) === 0) {
                  this.error_parsing(this.pos, 'unexpected "("')
                }

                if (expected & CALL) {
                  noperators += 2
                  this.tokenprio = -2
                  this.tokenindex = -1
                  this.addfunc(tokenstack, operstack, TFUNCALL)
                }

                expected = PRIMARY | LPAREN | FUNCTION | SIGN | NULLARY_CALL
              } else if (this.isRightParenth()) {
                if (expected & NULLARY_CALL) {
                  token = new Token(TNUMBER, 0, 0, [])
                  tokenstack.push(token)
                } else if ((expected & RPAREN) === 0) {
                  this.error_parsing(this.pos, 'unexpected ")"')
                }

                expected = OPERATOR | RPAREN | COMMA | LPAREN | CALL
              } else if (this.isComma()) {
                if ((expected & COMMA) === 0) {
                  this.error_parsing(this.pos, 'unexpected ","')
                }
                this.addfunc(tokenstack, operstack, TOP2)
                noperators += 2
                expected = PRIMARY | LPAREN | FUNCTION | SIGN
              } else if (this.isConst()) {
                if ((expected & PRIMARY) === 0) {
                  this.error_parsing(this.pos, 'unexpected constant')
                }
                var consttoken = new Token(TNUMBER, 0, 0, this.tokennumber)
                tokenstack.push(consttoken)
                expected = OPERATOR | RPAREN | COMMA
              } else if (this.isOp2()) {
                if ((expected & FUNCTION) === 0) {
                  this.error_parsing(this.pos, 'unexpected function')
                }
                this.addfunc(tokenstack, operstack, TOP2)
                noperators += 2
                expected = LPAREN
              } else if (this.isOp1()) {
                if ((expected & FUNCTION) === 0) {
                  this.error_parsing(this.pos, 'unexpected function')
                }
                this.addfunc(tokenstack, operstack, TOP1)
                noperators++
                expected = LPAREN
              } else if (this.isVar()) {
                if ((expected & PRIMARY) === 0) {
                  this.error_parsing(this.pos, 'unexpected variable')
                }
                var vartoken = new Token(TVAR, this.tokenindex, 0, 0)
                tokenstack.push(vartoken)

                expected = OPERATOR | RPAREN | COMMA | LPAREN | CALL
              } else if (this.isWhite()) {
              } else {
                if (this.errormsg === '') {
                  this.error_parsing(this.pos, 'unknown character')
                } else {
                  this.error_parsing(this.pos, this.errormsg)
                }
              }
            }
            if (this.tmpprio < 0 || this.tmpprio >= 10) {
              this.error_parsing(this.pos, 'unmatched "()"')
            }
            while (operstack.length > 0) {
              var tmp = operstack.pop()
              tokenstack.push(tmp)
            }
            if (noperators + 1 !== tokenstack.length) {
              //print(noperators + 1);
              //print(tokenstack);
              this.error_parsing(this.pos, 'parity')
            }

            return new Expression(tokenstack, object(this.ops1), object(this.ops2), object(this.functions))
          },

          evaluate: function(expr, variables) {
            return this.parse(expr).evaluate(variables)
          },

          error_parsing: function(column, msg) {
            this.success = false
            this.errormsg = 'parse error [column ' + column + ']: ' + msg
            this.column = column
            throw new Error(this.errormsg)
          },

          //\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

          addfunc: function(tokenstack, operstack, type_) {
            var operator = new Token(type_, this.tokenindex, this.tokenprio + this.tmpprio, 0)
            while (operstack.length > 0) {
              if (operator.prio_ <= operstack[operstack.length - 1].prio_) {
                tokenstack.push(operstack.pop())
              } else {
                break
              }
            }
            operstack.push(operator)
          },

          isNumber: function() {
            var r = false
            var str = ''
            while (this.pos < this.expression.length) {
              var code = this.expression.charCodeAt(this.pos)
              if ((code >= 48 && code <= 57) || code === 46) {
                str += this.expression.charAt(this.pos)
                this.pos++
                this.tokennumber = parseFloat(str)
                r = true
              } else {
                break
              }
            }
            return r
          },

          // Ported from the yajjl JSON parser at http://code.google.com/p/yajjl/
          unescape: function(v, pos) {
            var buffer = []
            var escaping = false

            for (var i = 0; i < v.length; i++) {
              var c = v.charAt(i)

              if (escaping) {
                switch (c) {
                  case "'":
                    buffer.push("'")
                    break
                  case '\\':
                    buffer.push('\\')
                    break
                  case '/':
                    buffer.push('/')
                    break
                  case 'b':
                    buffer.push('\b')
                    break
                  case 'f':
                    buffer.push('\f')
                    break
                  case 'n':
                    buffer.push('\n')
                    break
                  case 'r':
                    buffer.push('\r')
                    break
                  case 't':
                    buffer.push('\t')
                    break
                  case 'u':
                    // interpret the following 4 characters as the hex of the unicode code point
                    var codePoint = parseInt(v.substring(i + 1, i + 5), 16)
                    buffer.push(String.fromCharCode(codePoint))
                    i += 4
                    break
                  default:
                    throw this.error_parsing(pos + i, "Illegal escape sequence: '\\" + c + "'")
                }
                escaping = false
              } else {
                if (c == '\\') {
                  escaping = true
                } else {
                  buffer.push(c)
                }
              }
            }

            return buffer.join('')
          },

          isString: function() {
            var r = false
            var str = ''
            var startpos = this.pos
            if (this.pos < this.expression.length && this.expression.charAt(this.pos) == "'") {
              this.pos++
              while (this.pos < this.expression.length) {
                var code = this.expression.charAt(this.pos)
                if (code != "'" || str.slice(-1) == '\\') {
                  str += this.expression.charAt(this.pos)
                  this.pos++
                } else {
                  this.pos++
                  this.tokennumber = this.unescape(str, startpos)
                  r = true
                  break
                }
              }
            }
            return r
          },

          isConst: function() {
            var str
            for (var i in this.consts) {
              if (true) {
                var L = i.length
                str = this.expression.substr(this.pos, L)
                if (i === str) {
                  this.tokennumber = this.consts[i]
                  this.pos += L
                  return true
                }
              }
            }
            return false
          },

          isOperator: function() {
            var code = this.expression.charCodeAt(this.pos)
            if (code === 43) {
              // +
              this.tokenprio = 2
              this.tokenindex = '+'
            } else if (code === 45) {
              // -
              this.tokenprio = 2
              this.tokenindex = '-'
            } else if (code === 62) {
              // >
              if (this.expression.charCodeAt(this.pos + 1) === 61) {
                this.pos++
                this.tokenprio = 1
                this.tokenindex = '>='
              } else {
                this.tokenprio = 1
                this.tokenindex = '>'
              }
            } else if (code === 60) {
              // <
              if (this.expression.charCodeAt(this.pos + 1) === 61) {
                this.pos++
                this.tokenprio = 1
                this.tokenindex = '<='
              } else {
                this.tokenprio = 1
                this.tokenindex = '<'
              }
            } else if (code === 124) {
              // |
              if (this.expression.charCodeAt(this.pos + 1) === 124) {
                this.pos++
                this.tokenprio = 1
                this.tokenindex = '||'
              } else {
                return false
              }
            } else if (code === 61) {
              // =
              if (this.expression.charCodeAt(this.pos + 1) === 61) {
                this.pos++
                this.tokenprio = 1
                this.tokenindex = '=='
              } else {
                return false
              }
            } else if (code === 33) {
              // !
              if (this.expression.charCodeAt(this.pos + 1) === 61) {
                this.pos++
                this.tokenprio = 1
                this.tokenindex = '!='
              } else {
                return false
              }
            } else if (code === 97) {
              // a
              if (
                this.expression.charCodeAt(this.pos + 1) === 110 &&
                this.expression.charCodeAt(this.pos + 2) === 100
              ) {
                // n && d
                this.pos++
                this.pos++
                this.tokenprio = 0
                this.tokenindex = 'and'
              } else {
                return false
              }
            } else if (code === 111) {
              // o
              if (this.expression.charCodeAt(this.pos + 1) === 114) {
                // r
                this.pos++
                this.tokenprio = 0
                this.tokenindex = 'or'
              } else {
                return false
              }
            } else if (code === 42 || code === 8729 || code === 8226) {
              // * or ∙ or •
              this.tokenprio = 3
              this.tokenindex = '*'
            } else if (code === 47) {
              // /
              this.tokenprio = 4
              this.tokenindex = '/'
            } else if (code === 37) {
              // %
              this.tokenprio = 4
              this.tokenindex = '%'
            } else if (code === 94) {
              // ^
              this.tokenprio = 5
              this.tokenindex = '^'
            } else {
              return false
            }
            this.pos++
            return true
          },

          isSign: function() {
            var code = this.expression.charCodeAt(this.pos - 1)
            if (code === 45 || code === 43) {
              // -
              return true
            }
            return false
          },

          isPositiveSign: function() {
            var code = this.expression.charCodeAt(this.pos - 1)
            if (code === 43) {
              // +
              return true
            }
            return false
          },

          isNegativeSign: function() {
            var code = this.expression.charCodeAt(this.pos - 1)
            if (code === 45) {
              // -
              return true
            }
            return false
          },

          isLeftParenth: function() {
            var code = this.expression.charCodeAt(this.pos)
            if (code === 40) {
              // (
              this.pos++
              this.tmpprio += 10
              return true
            }
            return false
          },

          isRightParenth: function() {
            var code = this.expression.charCodeAt(this.pos)
            if (code === 41) {
              // )
              this.pos++
              this.tmpprio -= 10
              return true
            }
            return false
          },

          isComma: function() {
            var code = this.expression.charCodeAt(this.pos)
            if (code === 44) {
              // ,
              this.pos++
              this.tokenprio = -1
              this.tokenindex = ','
              return true
            }
            return false
          },

          isWhite: function() {
            var code = this.expression.charCodeAt(this.pos)
            if (code === 32 || code === 9 || code === 10 || code === 13) {
              this.pos++
              return true
            }
            return false
          },

          isOp1: function() {
            var str = ''
            for (var i = this.pos; i < this.expression.length; i++) {
              var c = this.expression.charAt(i)
              if (c.toUpperCase() === c.toLowerCase()) {
                if (i === this.pos || (c != '_' && (c < '0' || c > '9'))) {
                  break
                }
              }
              str += c
            }
            if (str.length > 0 && str in this.ops1) {
              this.tokenindex = str
              this.tokenprio = 5
              this.pos += str.length
              return true
            }
            return false
          },

          isOp2: function() {
            var str = ''
            for (var i = this.pos; i < this.expression.length; i++) {
              var c = this.expression.charAt(i)
              if (c.toUpperCase() === c.toLowerCase()) {
                if (i === this.pos || (c != '_' && (c < '0' || c > '9'))) {
                  break
                }
              }
              str += c
            }
            if (str.length > 0 && str in this.ops2) {
              this.tokenindex = str
              this.tokenprio = 5
              this.pos += str.length
              return true
            }
            return false
          },

          isVar: function() {
            var str = ''
            for (var i = this.pos; i < this.expression.length; i++) {
              var c = this.expression.charAt(i)
              if (c.toUpperCase() === c.toLowerCase()) {
                if (i === this.pos || (c != '_' && (c < '0' || c > '9'))) {
                  break
                }
              }
              str += c
            }
            if (str.length > 0) {
              this.tokenindex = str
              this.tokenprio = 4
              this.pos += str.length
              return true
            }
            return false
          },

          isComment: function() {
            var code = this.expression.charCodeAt(this.pos - 1)
            if (code === 47 && this.expression.charCodeAt(this.pos) === 42) {
              this.pos = this.expression.indexOf('*/', this.pos) + 2
              if (this.pos === 1) {
                this.pos = this.expression.length
              }
              return true
            }
            return false
          },
        }
        return Parser
      }

      /**
       * Extracts symbols from an equation.  An equation can consist of symbols and the following operators: +-/*%()
       * PEMDAS order is followed.  Additionally, symbols can be enclosed in brackets [] to treat them as literal non-parseables.
       * @param {string} equation The equation to parse (e.g. IBM+GE)
       * @return  {object} Parsed equation, {equation: [formatted equation], symbols: [array of symbols found in the equation]}
       * @memberOf CIQ
       * @version ChartIQ Advanced Package
       */
      CIQ.formatEquation = function(equation) {
        var eq = ''
        var syms = []
        var thisSym = ''
        var lockSymbol = false
        for (var j = 1; j < equation.length; j++) {
          var c = equation[j].toUpperCase()
          if (c == '[' && !lockSymbol) {
            lockSymbol = true
          } else if (c == ']' && lockSymbol) {
            lockSymbol = false
            if (thisSym !== '') {
              syms.push(thisSym)
              eq += '[' + thisSym + ']'
            }
            thisSym = ''
          } else if (lockSymbol) {
            thisSym += c
          } else if (c == '+' || c == '-' || c == '*' || c == '/' || c == ':' || c == '%' || c == '(' || c == ')') {
            if (thisSym !== '' && isNaN(thisSym)) {
              syms.push(thisSym)
              eq += '[' + thisSym + ']'
            } else {
              eq += thisSym
            }
            if (c == ':') c = '/'
            eq += c
            thisSym = ''
          } else if (c != ' ') {
            thisSym += c
          }
        }
        if (thisSym !== '' && isNaN(thisSym)) {
          syms.push(thisSym)
          eq += '[' + thisSym + ']'
        } else {
          eq += thisSym
        }
        return { equation: eq, symbols: syms }
      }

      /**
       * Extracts symbols from an equation and fetches the quotes for them.
       * @param {object} params Parameters used for the fetch
       * @param  {function} cb Callback function once all quotes are fetched
       * @memberOf CIQ
       * @version ChartIQ Advanced Package
       */
      CIQ.fetchEquationChart = function(params, cb) {
        var formEq = CIQ.formatEquation(params.symbol)
        var syms = formEq.symbols
        var arr = []
        // jump through hoops with stx so that CIQ.clone doesn't choke on it
        var stx = params.stx
        params.stx = null
        for (var i = 0; i < syms.length; i++) {
          var newParams = CIQ.shallowClone(params)
          newParams.stx = stx
          newParams.symbol = syms[i]
          arr.push(newParams)
        }
        params.stx = stx
        // multi fetch the symbols we need
        stx.quoteDriver.quoteFeed.multiFetch(arr, function(results) {
          var map = {}
          params.loadMoreReplace = true
          var attribution = { charge: 0 }
          // error on any symbol then error out. Otherwise construct map.
          for (var i = 0; i < results.length; i++) {
            var result = results[i]
            if (result.dataCallback.error) {
              cb({ error: result.dataCallback.error })
              return
            }
            map[result.params.symbol] = result.dataCallback.quotes
            params.loadMoreReplace = params.loadMoreReplace && result.params.loadMoreReplace
            params.moreToLoad = params.moreToLoad || result.dataCallback.moreAvailable
            if (result.dataCallback.attribution.charge) attribution.charge += result.dataCallback.attribution.charge
            //TODO: determine proper attribution source/exchange from result.dataCallback.attribution and assign to attribution
          }
          // compute the result and then pass to the response
          if (arr.length || !(params.loadMore || params.update)) {
            try {
              var equQuotes = CIQ.computeEquationChart(formEq.equation, map)
              cb({ quotes: equQuotes, moreAvailable: params.moreToLoad, attribution: attribution })
            } catch (e) {
              var error = { error: 'Invalid equation: ' + formEq.equation }
              if (e.name && e.name == 'NoException') error.suppressAlert = true
              cb(error)
            }
          }
        })
      }

      /**
       * Computes an equation that may contain symbols and simple arithmetic operators.
       * Parentheses can be used to separate portions of the equation.
       * PEMDAS priority is observed.
       * Symbols can be optionally contained within brackets.
       * Valid examples: 3*IBM, 4+(IBM*2), (IBM-GM)/2
       * If the equation cannot be resolved an exception is thrown.
       * @param {string} equation The equation to compute.
       * @param  {Object} map An map of symbols to data
       * @return {Array}     A consolidated array of equation results
       * @memberOf CIQ
       * @version ChartIQ Advanced Package
       */
      CIQ.computeEquationChart = function(equation, map) {
        equation = equation.replace(/[:]/, '/').toUpperCase()
        var count = 0
        for (var sym in map) {
          var r = new RegExp(
            '\\[' +
              sym
                .replace('$', '\\$')
                .replace('^', '\\^')
                .replace(/[\+\-\*\/\%\(\)]/g, '\\$&') +
              '\\]',
            'g',
          )
          equation = equation.replace(r, 'symbol' + count)
          count++
        }
        var expr = Parser().parse(equation)
        var newArray = []
        var iters = {}
        var numSyms = 0,
          c
        var firstIter = null
        var priceRelative = false
        for (sym in map) {
          iters[sym] = { i: 0, s: sym }
          if (map[sym]) {
            numSyms++
            c = map[sym][0]
          } else if (numSyms == 1) {
            priceRelative = sym
          }
          if (!c.DT) c.DT = CIQ.strToDateTime(c.Date)
          iters[sym].d = c.DT
          if (!firstIter) firstIter = iters[sym]
        }
        var constant = numSyms === 0
        var computeHighLow = numSyms == 1 && equation.indexOf('%') == -1
        function incrementIterator(iterator) {
          iterator.i++
          if (map[iterator.s]) {
            if (iterator.i >= map[iterator.s].length) return 0
            c = map[iterator.s][iterator.i]
          }
          if (!c.DT) c.DT = CIQ.strToDateTime(c.Date)
          iterator.d = c.DT
          return 1
        }
        function isAllAligned() {
          var laggard = null
          var temp = null
          for (var iter in iters) {
            if (!temp) temp = iters[iter]
            else if (iters[iter].d.getTime() < temp.d.getTime()) {
              laggard = temp = iters[iter]
            } else if (iters[iter].d.getTime() > temp.d.getTime()) {
              laggard = temp
            }
          }
          if (laggard) {
            if (!incrementIterator(laggard)) return 0
            return -1
          }
          return 1
        }
        whileLoop: while (true) {
          var aligned = isAllAligned()
          if (!aligned) break
          if (aligned == 1) {
            var m
            if (priceRelative) {
              var close = expr.evaluate({
                symbol0: map[firstIter.s][firstIter.i].Close,
                symbol1: map[firstIter.s][firstIter.i][priceRelative],
              })
              close = Number(close.toFixed(8)) //Math.round(close*10000)/10000;
              m = { DT: firstIter.d, Close: close, Adj_Close: close }
              m[firstIter.s] = map[firstIter.s][firstIter.i].Close
              if (!isNaN(close)) newArray.push(m)
            } else if (constant) {
              var res = expr.evaluate({})
              CIQ.alert(equation + '=' + res)
              throw { name: 'NoException', message: '' }
            } else {
              count = 0
              var evaluators = { Adj_Close: {}, Close: {}, Open: {}, High: {}, Low: {}, Volume: {} }
              for (sym in map) {
                for (var e in evaluators) {
                  evaluators[e]['symbol' + count] = map[sym][iters[sym].i][e]
                }
                count++
              }
              m = { DT: firstIter.d }
              /*
					variation 1 (Stockcharts.com):
					m.Close/=c.Close;
					m.High/=c.Close;
					m.Low/=c.Close;
					m.Open/=c.Close;

					variation 2 (eSignal):
					m.Close/=c.Close;
					m.High/=c.High;
					m.Low/=c.Low;
					m.Open/=c.Open;
					m.High=Math.max(m.High,Math.max(m.Open,m.Close));
					m.Low=Math.min(m.Low,Math.min(m.Open,m.Close));
					*/

              m.Adj_Close = expr.evaluate(evaluators.Adj_Close)
              m.Close = expr.evaluate(evaluators.Close)
              m.Open = expr.evaluate(evaluators.Open)
              m.Volume = expr.evaluate(evaluators.Volume)
              if (isNaN(m.Volume)) m.Volume = 0

              if (computeHighLow) {
                m.High = expr.evaluate(evaluators.High)
                m.Low = expr.evaluate(evaluators.Low)
              } else {
                m.High = Math.max(m.Open, m.Close)
                m.Low = Math.min(m.Open, m.Close)
              }
              if (!isNaN(m.Close)) newArray.push(m)

              if (!isNaN(m.High)) m.High = Number(m.High.toFixed(8)) //Math.round(m.High*10000)/10000;
              if (!isNaN(m.Low)) m.Low = Number(m.Low.toFixed(8)) //Math.round(m.Low*10000)/10000;
              if (!isNaN(m.Open)) m.Open = Number(m.Open.toFixed(8)) //Math.round(m.Open*10000)/10000;
              if (!isNaN(m.Close)) m.Close = Number(m.Close.toFixed(8)) //Math.round(m.Close*10000)/10000;
              if (!isNaN(m.Adj_Close)) m.Adj_Close = Number(m.Adj_Close.toFixed(8))
              //Math.round(m.Adj_Close*10000)/10000;
              else m.Adj_Close = m.Close

              count = 0
              for (sym in map) {
                m[sym] = evaluators.Close['symbol' + count]
                count++
              }
            }
            for (sym in map) {
              if (!incrementIterator(iters[sym])) break whileLoop
            }
          }
        }
        return newArray
      }

      return _exports
    }

  var __js_advanced_renderersAdvanced_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
       * Creates a Shading renderer
       * This is just like Lines renderer except it will allow shading between lines.
       * Note: by default the renderer will display lines as underlays. As such, they will appear below the chart ticks and any other studies or drawings.
       *
       * See {@link CIQ.Renderer#construct} for parameters required by all renderers
       * @param {Object} config Config for renderer
       * @param  {object} [config.params] Parameters to control the renderer itself
       * @param  {number} [config.params.width] Width of the rendered line
       * @constructor
       * @name  CIQ.Renderer.Shading
       */
      CIQ.Renderer.Shading = function(config) {
        this.construct(config)
        this.shading = null
        this.errTimeout = null
      }
      CIQ.Renderer.Shading.ciqInheritsFrom(CIQ.Renderer.Lines, false)

      /**
       * Sets the shading scheme of the renderer
       * @param  {array} scheme single object or array of objects denoting shading
       * @param  {String} [scheme.primary] left series for comparison; if omitted, use chart.dataSegment[i].Close
       * @param  {String} [scheme.secondary] right series for comparison; if omitted, use first series in the seriesMap
       * @param  {String} [scheme.color] color in hex, rgb, rgba, etc to shade between primary and secondary
       * @param  {String} [scheme.greater] color in hex, rgb, rgba, etc to shade between primary and secondary if primary is greater in price than secondary
       * @param  {String} [scheme.lesser] color in hex, rgb, rgba, etc to shade between primary and secondary if primary is lesser in price than secondary
       * Note: if scheme.greater or scheme.lesser are omitted, scheme.color is used.
       * At a bare minimum, scheme.color is required.  It is not required if scheme.greater and scheme.lesser are supplied.
       * If scheme.primary is omitted, the shading will only occur if the series share the same axis as the chart.dataSegment[i].Close.
       * If shading cannot occur for any reason, series lines will still be drawn.
       * @memberOf CIQ.Renderer.Shading
       * @example
       * renderer.setShading([
       * 	{primary:'ibm', secondary:'ge', greater:'green', lesser:'red'}, // switches shading based on crossover of values
       * 	{primary:'t', secondary:'intc', color:'blue'}, // color always blue between them regardless of which is higher or lower
       * 	{secondary:'t', color:'yellow'}, // compares masterData with the named series
       * 	{color:'yellow'} // automatically shades between master and the first series
       * ]);
       */
      CIQ.Renderer.Shading.prototype.setShading = function(scheme) {
        if (scheme.constructor != Array) {
          scheme = [scheme]
        }
        this.shading = scheme
      }

      CIQ.Renderer.Shading.prototype.draw = function() {
        if (!this.shading) {
          if (!this.errTimeout) {
            console.log('Warning: no shading scheme set.  Use myRenderer.setShading(scheme) to set.')
            var self = this
            this.errTimeout = setTimeout(function() {
              self.errTimeout = null
            }, 10000)
          }
        }
        var chart = this.stx.panels[this.params.panel].chart
        var seriesMap = {}
        var s
        for (s = 0; s < this.seriesParams.length; s++) {
          if (chart.series[this.seriesParams[s].field]) {
            // make sure the series is still there.
            var defaultParams = CIQ.clone(chart.series[this.seriesParams[s].field].parameters)
            seriesMap[this.seriesParams[s].field] = {
              parameters: CIQ.extend(CIQ.extend(defaultParams, this.params), this.seriesParams[s]),
              yValueCache: this.caches[this.seriesParams[s].field],
              useChartLegend: false,
            }
          }
        }
        this.stx.drawSeries(chart, seriesMap, this.params.yAxis)
        for (s in seriesMap) {
          this.caches[s] = seriesMap[s].yValueCache
        }
        for (s = 0; s < this.shading.length; s++) {
          var scheme = this.shading[s]
          if (!scheme.greater) scheme.greater = scheme.color
          if (!scheme.lesser) scheme.lesser = scheme.color
          if (!scheme.primary) scheme.primary = 'Close'
          if (!scheme.secondary) scheme.secondary = this.seriesParams[0].field

          if (!scheme.secondary || !scheme.greater || !scheme.lesser) continue
          else if (!seriesMap[scheme.primary] && scheme.primary != 'Close') continue
          else if (!seriesMap[scheme.secondary]) continue
          else if (scheme.primary == 'Close' && this.params.yAxis != chart.yAxis) continue //don't allow shading across axes

          var sd = {
            panel: this.params.panel,
            outputs: { topBand: scheme.greater, bottomBand: scheme.lesser },
            outputMap: {},
          }
          sd.outputMap[scheme.primary] = 'topBand'
          sd.outputMap[scheme.secondary] = 'bottomBand'
          var parameters = {
            topBand: scheme.primary,
            topAxis: this.params.yAxis,
            bottomBand: scheme.secondary,
            bottomAxis: scheme.primary == 'Close' ? null : this.params.yAxis,
          }
          CIQ.fillIntersecting(this.stx, sd, chart.dataSegment, parameters)
        }
      }

      /**
	 * Creates a Histogram renderer
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {Object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {boolean} [config.params.defaultBorders] Whether to draw a border for each bar as a whole.  Can be overridden by a border set for a series.  Default: false.
	 * @param  {number} [config.params.widthFactor] Width of each bar as a percentage of the candleWidth. Valid values are 0.00-1.00. Default: .8
	 * @param  {number} [config.params.heightPercentage] The amount of vertical space to use, valid values are 0.00-1.00. Default: .7
	 * @param  {boolean} [config.params.bindToYAxis] Set to true to bind the rendering to the y-axis and to draw it. Automatically set if params.yAxis is present.
	 * @param  {string} [config.params.subtype="overlaid"] Subtype of rendering "stacked", "clustered", "overlaid"
	 * @constructor
	 * @name  CIQ.Renderer.Histogram
	 * 	@example
			// configure the histogram display
			var params={
				name:				"Sentiment Data",
				type:				"histogram",
				subtype:			"stacked",
				heightPercentage:	.7,	 // how high to go. 1 = 100%
				opacity:			.7,  // only needed if supporting IE8, otherwise can use rgba values in histMap instead
				widthFactor:		.8	 // to control space between bars. 1 = no space in between
			};

		 	//legend creation callback
			function histogramLegend(colors){
		        stxx.chart.legendRenderer(stxx,{legendColorMap:colors, coordinates:{x:260, y:stxx.panels["chart"].yAxis.top+30}, noBase:true});
		    }

			var histRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Histogram({params: params, callback: histogramLegend}));

			stxx.addSeries("^NIOALL", {display:"Symbol 1"});
			stxx.addSeries("^NIOAFN", {display:"Symbol 2"});
			stxx.addSeries("^NIOAMD", {display:"Symbol 3"});

      		histRenderer.removeAllSeries()
			.attachSeries("^NIOALL","#6B9CF7")
			.attachSeries("^NIOAFN","#95B7F6")
			.attachSeries("^NIOAMD","#B9D0F5")
			.ready();  //use ready() to immediately draw the histogram
	 *
	 * @example
		// this is an example on how completely remove a renderer and all associated data. This should only be necessary if you are also removing the chart itself
		// remove all series from the renderer including series data from the masterData
  		renderer.removeAllSeries(true);
  		// detach the series renderer from the chart.
  		stxx.removeSeriesRenderer(renderer);
  		// delete the renderer itself.
  		delete renderer;
	 */
      CIQ.Renderer.Histogram = function(config) {
        this.construct(config)
        this.params.type = 'histogram'
        this.params.highlightable = false
      }

      CIQ.Renderer.Histogram.ciqInheritsFrom(CIQ.Renderer, false)
      CIQ.Renderer.Histogram.prototype.performCalculations = function() {
        if (this.params.yAxis) {
          var panel = this.stx.panels[this.params.panel]
          var fields = []
          for (var i = 0; i < this.seriesParams.length; i++) {
            fields.push(this.seriesParams[i].field)
          }
          var minMax = this.stx.determineMinMax(
            this.stx.chart.dataSegment,
            fields,
            this.params.subtype == 'stacked',
            true,
          )
          this.stx.calculateYAxisRange(panel, this.params.yAxis, 0, minMax[1])
          var heightPercentage = this.params.heightPercentage ? this.params.heightPercentage : 1
          this.params.yAxis.high = minMax[1] / this.params.heightPercentage
          this.params.yAxis.min = 0 // So that zoom doesn't pull negative numbers in
          this.params.bindToYAxis = true
        }
      }

      CIQ.Renderer.Histogram.prototype.draw = function() {
        this.stx.drawHistogram(CIQ.clone(this.params), this.seriesParams)
      }

      /**
       * Creates a Heatmap renderer
       * See {@link CIQ.Renderer#construct} for parameters required by all renderers
       * @param {Object} config Config for renderer
       * @param  {object} [config.params] Parameters to control the renderer itself
       * @param  {number} [config.params.widthFactor] Width of each bar as a percentage of the candleWidth. Valid values are 0.00-1.00. Default: 1
       * @param  {number} [config.params.height] The amount of vertical space to use, in price units. For example, 2=>2 unit increments on yaxis.
       * @constructor
       * @name  CIQ.Renderer.Heatmap
       */
      CIQ.Renderer.Heatmap = function(config) {
        this.construct(config)
        this.params.type = 'heatmap'
        this.params.highlightable = false
      }

      CIQ.Renderer.Heatmap.ciqInheritsFrom(CIQ.Renderer, false)
      CIQ.Renderer.Heatmap.prototype.performCalculations = function() {
        var panel = this.stx.panels[this.params.panel]
        var yAxis = this.params.yAxis ? this.params.yAxis : panel.yAxis
        var fields = []
        for (var i = 0; i < this.seriesParams.length; i++) {
          fields.push(this.seriesParams[i].field)
        }
        var minMax = this.stx.determineMinMax(this.stx.chart.dataSegment, fields, false, true)
        if (this.params.yAxis) {
          this.stx.calculateYAxisRange(panel, yAxis, minMax[0], minMax[1])
        } else if (this.params.panel == this.stx.chart.panel.name) {
          this.stx.chart.lowValue = Math.min(this.stx.chart.lowValue, minMax[0])
          this.stx.chart.highValue = Math.max(this.stx.chart.highValue, minMax[1])
        } else {
          this.stx.calculateYAxisRange(panel, yAxis, minMax[0], minMax[1])
          panel.lowValue = panel.yAxis.low
          panel.highValue = panel.yAxis.high
        }
      }

      CIQ.Renderer.Heatmap.prototype.draw = function() {
        this.stx.drawHeatmap(CIQ.clone(this.params), this.seriesParams)
      }

      return _exports
    }

  var __js_advanced_share_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
       * Manages chart sharing and uploading.
       * @constructor
       * @name CIQ.Share
       */
      CIQ.Share = function() {}

      _exports.STXSocial = CIQ.Share

      /**
       * Base class for a decorator. A decorator adds custom branding to a chart image before it is rendered.
       *
       * The decoration function will be called right after the chart image is created to overlay any additional 'decorations' you may want to have on that image.
       * The default decoration function can be found in stx-share.js (CIQ.Share.defaultDecorator.decorate).
       * Feel free to modify as needed or create a new one based on it by setting `CIQ.Share.defaultDecorator.decorate` to the name of your custom decoration function.
       *
       * For example, if you want to have a watermark logo on the shared image but not the interactive chart,
       * you will have to do it as a decoration rather than using {@link CIQ.Share.brandMyChart}.
       *
       * To do this, first add a hidden div in your HTML to store the watermark picture.
       * Example (change the image link to whatever you will use):
       * ```
       * <img id="shareWatermark" src="img/helicopter.png" style="display:none">
       * ```
       * Then you can take the default decoration function in stx-share.js (CIQ.Share.defaultDecorator.decorate) and add the following to it:
       * ```
       * var img = document.getElementById("shareWatermark");
       * context.drawImage(img, 10, stx.panels.chart.height-50, 60,60);  //Parameters are: image. x axis, y axis, width, hight.
       * ```
       * Adjust the location and size as needed. You should be all set.
       *
       * Be sure to set the pixel count you want to use for the header and footer.
       * These amounts will be used to reduce the size of the chart and leave space for the additional decorations you will place as footer or headers.
       * This is done in the `CIQ.Share.defaultDecorator.initialize` function.
       * Feel free to modify as needed or create a new one based on it by setting `CIQ.Share.defaultDecorator.initialize` to the name of your custom initialization function.
       * The values to be set are:
       * ```
       * 	this.headerPX=headerSize;
       *	this.footerPX=footerSize;
       * ```
       *
       * @constructor
       * @name CIQ.Share.Decoration
       * @version ChartIQ plug-in
       */
      CIQ.Share.Decoration = function() {
        this.initialize = function(stx, canvas, widthPX, heightPX) {} // Override this with a function to calculate and store header and footer pixels
        this.headerPX = 0
        this.footerPX = 0
        this.decorate = function(stx, context) {} // Override this with a function to actually decorate the canvas
      }

      /**
       * Create a png image based on the current chart. If widthPX and heightPX are passed in
       * then the image will be scaled to the requested dimensions.
       * This function is asynchronous and requires a callback function. The callback will be passed
       * a data object which can be sent to a server or converted to an image.
       * [decorationObj]{@link CIQ.Share.Decoration} can be used to "decorate" the canvas. For instance, you can add a header
       * or footer to the canvas, or even brand it with an image if you only want the branding done on the shared image but not on the chart itself.
       * @param  {object}   stx           Chart object
       * @param  {number}   [widthPX]       Width of image to create. If passed then height will adjust to maintain ratio.
       * @param  {number}   [heightPX]      Height of image to create. If passed then width will adjust to maintain ratio.
       * @param  {object}   [decorationObj=defaultDecorator] A decorator to add custom branding. Pass {} to not use the defaultDecorator.
       * @param  {Function} cb            Callback when image is available fc(data) where data is the serialized image object
       * @memberOf CIQ.Share
       * @version ChartIQ plug-in
       */
      CIQ.Share.createImage = function(stx, widthPX, heightPX, decorationObj, cb) {
        if (!decorationObj) decorationObj = CIQ.Share.defaultDecorator
        if (!decorationObj.initialize) decorationObj = null

        // Compute and/or determine sizes of headers and footers for decorator
        if (decorationObj) {
          decorationObj.initialize(stx, stx.chart.canvas, widthPX, heightPX)
        }

        // Set background for any part of canvas that is currently transparent
        CIQ.fillTransparentCanvas(
          stx.chart.context,
          stx.containerColor,
          stx.chart.canvas.width,
          stx.chart.canvas.height,
        )

        // Render panel labels
        CIQ.Share.watermarkPanels(stx)

        // We use style height/width instead of the canvas width/height when the backing store is 2x on retina screens
        var renderedHeight = stx.chart.canvas.height
        var renderedWidth = stx.chart.canvas.width
        if (stx.chart.canvas.style.height) {
          renderedHeight = CIQ.stripPX(stx.chart.canvas.style.height)
          renderedWidth = CIQ.stripPX(stx.chart.canvas.style.width)
        }
        if (widthPX && heightPX) {
          renderedHeight = heightPX
          renderedWidth = widthPX
          if (decorationObj) {
            renderedHeight = renderedHeight - decorationObj.headerPX - decorationObj.footerPX
          }
        } else if (heightPX) {
          if (decorationObj) {
            renderedHeight = heightPX - decorationObj.headerPX - decorationObj.footerPX
          }
          renderedWidth = stx.chart.canvas.width * (renderedHeight / stx.chart.canvas.height)
        } else if (widthPX) {
          renderedWidth = widthPX
          renderedHeight = stx.chart.canvas.height * (widthPX / stx.chart.canvas.width)
          if (decorationObj) {
            renderedHeight = renderedHeight + decorationObj.headerPX + decorationObj.footerPX
          }
        }
        var totalHeight = renderedHeight
        var y = 0
        if (decorationObj) {
          totalHeight = totalHeight + decorationObj.headerPX + decorationObj.footerPX
          y = decorationObj.headerPX
        }

        // Render the canvas as an image
        var shareImage = document.createElement('img')
        shareImage.onload = function() {
          // Print the image on a new canvas of appropriate size
          var canvas = document.createElement('canvas')
          canvas.width = renderedWidth
          canvas.height = totalHeight
          var context = canvas.getContext('2d')
          stx.adjustBackingStore(canvas, context)
          CIQ.fillTransparentCanvas(context, '#FFFFFF', canvas.width, canvas.height)
          context.drawImage(
            this,
            0,
            0,
            stx.chart.canvas.width,
            stx.chart.canvas.height,
            0,
            y,
            renderedWidth,
            renderedHeight,
          )

          // Add any decorations
          if (decorationObj) {
            decorationObj.decorate(stx, context)
          }
          stx.draw() // redraw the canvas to get rid of the watermark panels

          cb(canvas.toDataURL('image/png')) // return the data
        }
        shareImage.src = stx.chart.canvas.toDataURL('image/png')
      }

      // BEGIN Copy and paste this to your own decorator to customize the image headers and footers
      CIQ.Share.defaultDecorator = new CIQ.Share.Decoration()
      CIQ.Share.defaultDecorator.initialize = function(stx, canvas, widthPX, heightPX) {
        this.headerPX = 50
        this.footerPX = 0
      }
      CIQ.Share.defaultDecorator.decorate = function(stx, context) {
        var cursor = 10
        var centerLine = 24
        context.textBaseline = 'middle'
        stx.canvasColor('stx_share', context)
        stx.canvasFont('stx_share_symbol', context)
        var w = context.measureText(stx.chart.symbol).width
        context.fillText(stx.chart.symbol, cursor, centerLine)

        cursor += w + 5
        stx.plotLine(cursor, cursor, centerLine - 8, centerLine + 8, stx.canvasStyle('stx_share'), 'segment', context)

        cursor += 5

        stx.canvasFont('stx_share', context)
        var txt =
          CIQ.mmddyyyy(stx.chart.dataSegment[stx.getStartDateOffset()].Date) +
          '-' +
          CIQ.mmddyyyy(stx.chart.dataSegment[stx.chart.dataSegment.length - 1].Date)
        w = context.measureText(txt).width
        context.fillText(txt, cursor, centerLine)

        cursor += w + 5
        stx.plotLine(cursor, cursor, centerLine - 8, centerLine + 8, stx.canvasStyle('stx_share'), 'segment', context)

        cursor += 5
        txt = CIQ.readablePeriodicity(stx)
        context.fillText(txt, cursor, centerLine)
        context.textBaseline = 'alphabetic'
      }
      // END copy and paste

      /**
	 * Uploads an image to a server. See {@tutorial Python chart-sharing server example} for a comple server code.
	 * on the server side. The callback will take two parameters. The first parameter is an error
	 * condition (server status), or null if there is no error. The second parameter (if no error) will contain
	 * the response from the server.
	 * 'payload' is an optional object that contains meta-data for the server. If payload exists then the image will be added as a member of the payload object, otherwise an object will be created
	 * 'dataImage' should be a data representation of an image created by the call canvas.toDataURL such as is returned by CIQ.Share.createImage
	 * If you are getting a status of zero back then you are probably encountering a cross-domain ajax issue. Check your access-control-allow-origin header on the server side
	
	 * @param  {string}   dataImage Serialized data for image
	 * @param  {string}   url       URL to send the image
	 * @param  {object}   [payload]   Any additional data to send to the server should be sent as an object.
	 * @param  {Function} cb        Callback when image is uploaded
	 * @memberOf CIQ.Share
	 * @version ChartIQ plug-in
	 */
      CIQ.Share.uploadImage = function(dataImage, url, payload, cb) {
        if (!payload) payload = {}
        payload.image = dataImage
        var valid = CIQ.postAjax(url, JSON.stringify(payload), function(status, response) {
          if (status != 200) {
            cb(status, null)
            return
          }
          cb(null, response)
        })
        if (!valid) cb(0, null)
      }

      /**
       * The panel names in charts are div tags which will not render as images.
       * This method will draw the panel names on the canvas itself. It is called
       * temporarily when creating an image.
       * @param  {object} stx The chart
       * @memberOf CIQ.Share
       * @version ChartIQ plug-in
       */
      CIQ.Share.watermarkPanels = function(stx) {
        //stx.chart.context.font="12px Helvetica";
        //stx.chart.context.strokeStyle="#7c878b";
        stx.canvasFont('stx_panels')
        stx.chart.context.globalAlpha = 1
        stx.chart.context.textBaseline = 'alphabetic'
        stx.chart.context.textAlign = 'left'
        var first = false
        for (var p in stx.panels) {
          var panel = stx.panels[p]
          if (panel.hidden) continue
          if (panel.name == 'chart') continue
          stx.canvasColor('stx_panel_background')
          stx.chart.context.font = getComputedStyle(panel.title).font
          var t = panel.top + panel.icons.offsetTop
          var w = stx.chart.context.measureText(panel.title.innerHTML.toUpperCase()).width
          CIQ.semiRoundRect(stx.chart.context, 0, t + 4, w + 6, 20, 5, true)

          stx.canvasColor('stx_panels')
          stx.chart.context.fillText(panel.title.innerHTML.toUpperCase(), panel.icons.offsetLeft + 4, t + 18)
        }
      }

      /*
       * Here's an example of how you can display the image on the screen. Create a real dialog using HTML if you want to use this.
       */
      CIQ.Share.displayImageExample = function(imgData) {
        var div = document.createElement('div')
        div.style.margin = '0 auto'
        div.style.width = '1000px'
        div.style.border = 'solid black 3px'
        div.style.zIndex = 100
        div.style.position = 'relative'
        div.style.top = '-500px'

        var img = document.createElement('img')
        img.onload = function() {
          div.appendChild(img)
          document.body.appendChild(div)
        }
        img.src = imgData
      }

      /**
       * Places a watermark image on the chart for branding. This method should only be called once after you create your chart object -new CIQ.ChartEngine()-.
       * @param  {object} stx         The chart
       * @param  {string} imageURL    The URL of the image
       * @param  {array} positioning A tuple. The first item of the tuple is the X offset from the edge of the chart. The second item is the Y offset from the top of the chart. Use negative numbers to offset from right of chart or bottom of chart.
       * @param  {array} size A tuple. The first item of the tuple is the width. The second item is the height. Leave out to use actual size.
       * @memberOf CIQ.Share
       * @version ChartIQ plug-in
       * @example
       * function runSampleUI(){
       * 		// put your code to establish the behavior of your UI.
       * 		CIQ.Share.brandMyChart(stxx, "logo.png",[10,-30],[50,50]);
       * }
       * @since  2016-03-11 Image size can now be specified using the new `size` argument
       */
      CIQ.Share.brandMyChart = function(stx, imageURL, positioning, size) {
        function prependDisplayChart(stx, image, positioning, size) {
          return function() {
            var width = image.width
            var height = image.height
            if (size) {
              width = size[0]
              height = size[1]
            }
            var x = stx.chart.canvasWidth / 2 - width / 2
            var y = stx.panels.chart.height / 2 - height / 2
            if (positioning) {
              if (positioning[0] > 0) {
                x = positioning[0]
              } else {
                x = stx.chart.width - width + positioning[0]
              }
              if (positioning[1] > 0) {
                y = positioning[1]
              } else {
                y = stx.panels.chart.height - height + positioning[1]
              }
            }
            stx.chart.context.drawImage(image, x, stx.panels.chart.top + y, width, height)
          }
        }

        var image = document.createElement('img')
        image.onload = (function(stx, prependDisplayChart, positioning) {
          return function() {
            CIQ.ChartEngine.prototype.prepend('displayChart', prependDisplayChart(stx, this, positioning, size))
            stx.draw()
          }
        })(stx, prependDisplayChart, positioning)
        image.src = imageURL
      }

      /*
       * Here's an example implementation of chart sharing upload.
       * (example python code available in our tutorials (http://chartiq.com/licensing/documentation/tutorial-Chart Sharing.html)
       */
      CIQ.Share.shareChart = function(stx, override, successCB, failureCB) {
        CIQ.Share.createImage(stx, null, null, null, function(imgData) {
          var id = CIQ.uniqueID()
          var host = 'https://share.chartiq.com'
          var url = host + '/upload/' + id
          if (override) {
            if (override.host) host = override.host
            if (override.path) url = host + override.path + '/' + id
          }
          var startOffset = stx.getStartDateOffset()
          var metaData = {
            layout: stx.exportLayout(),
            drawings: stx.serializeDrawings(),
            xOffset: startOffset,
            startDate: stx.chart.dataSegment[startOffset].Date,
            endDate: stx.chart.dataSegment[stx.chart.dataSegment.length - 1].Date,
            id: id,
            symbol: stx.chart.symbol,
          }
          var payload = { id: id, image: imgData, config: metaData }
          CIQ.Share.uploadImage(imgData, url, payload, function(err, response) {
            if (err !== null) {
              failureCB(err)
            } else {
              successCB(host + response)
            }
          })
          // end sample code to upload image to a server
        })
      }

      return _exports
    }

  var __js_advanced_studiesAdvanced_ = function(_exports) {
    var CIQ = _exports.CIQ

    /**
     * Calculate function for correlation coefficient
     * @param  {CIQ.ChartEngine} stx Chart object
     * @param  {object} sd  Study Descriptor
     * @memberOf CIQ.Studies
     * @version ChartIQ Advanced Package
     */
    CIQ.Studies.calculateCorrelationCoefficient = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var period = sd.days
      //var base=stx.chart.symbol;
      sd.compare = sd.inputs['Compare To']
      if (!sd.compare) {
        sd.compare = []
        sd.outputs = {}
        sd.outputMap = {}
        for (var s in stx.chart.series) {
          var series = stx.chart.series[s]
          //if(series.parameters.isComparison) {
          sd.compare.push(series.display)
          sd.outputs['Result ' + series.display] = series.parameters.color
          sd.outputMap['Result ' + series.display + ' ' + sd.name] = 'Result ' + series.display
          //}
        }
      }
      for (var sym = 0; sym < sd.compare.length; sym++) {
        var sB = 0
        var sC = 0
        var sB2 = 0
        var sC2 = 0
        var sBC = 0
        var thisCompare = sd.compare[sym]
        for (var i = 0; i < quotes.length - 1; i++) {
          //last tick has no compare data
          if (!quotes[i]) continue
          var comparisonQuote = quotes[i][thisCompare]
          if (!comparisonQuote) {
            if (i > 0 && quotes[i - 1] && quotes[i - 1]._.c) comparisonQuote = quotes[i - 1]._.c
            else comparisonQuote = 0
          }
          quotes[i]._ = {}
          sB += quotes[i]._.b = quotes[i].Close
          sC += quotes[i]._.c = comparisonQuote
          sB2 += quotes[i]._.b2 = Math.pow(quotes[i].Close, 2)
          sC2 += quotes[i]._.c2 = Math.pow(comparisonQuote, 2)
          sBC += quotes[i]._.bc = quotes[i].Close * comparisonQuote
          if (i >= period) {
            sB -= quotes[i - period]._.b
            sC -= quotes[i - period]._.c
            sB2 -= quotes[i - period]._.b2
            sC2 -= quotes[i - period]._.c2
            sBC -= quotes[i - period]._.bc
            quotes[i - period]._ = null

            var vb = sB2 / period - Math.pow(sB / period, 2)
            var vc = sC2 / period - Math.pow(sC / period, 2)
            var cv = sBC / period - (sB * sC) / Math.pow(period, 2)
            var cc = cv / Math.sqrt(vb * vc)
            quotes[i]['Result ' + thisCompare + ' ' + sd.name] = cc
          }
        }
        for (var j = quotes.length - period; j < quotes.length; j++) {
          delete quotes[j]._
        }
      }
    }

    CIQ.Studies.displayCorrelationCoefficient = function(stx, sd, quotes) {
      if (!sd.compare.length) {
        stx.watermark(
          sd.panel,
          'center',
          'bottom',
          stx.translateIf('Correlation Coefficient requires at least one comparison symbol'),
        )
        return
      }
      CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
    }

    CIQ.Studies.prettify = CIQ.extend(
      {
        'double exponential': 'dema',
        'triple exponential': 'tema',
      },
      CIQ.Studies.prettify,
    )

    CIQ.extend(CIQ.Studies.movingAverage, {
      conversions: {
        hma: 'hull',
        dema: 'double exponential',
        tema: 'triple exponential',
      },
      translations: {
        hull: 'Hull',
        'double exponential': 'Double Exponential',
        'triple exponential': 'Triple Exponential',
      },
      typeMap: {
        hma: 'Hull',
        hull: 'Hull',
        dema: 'DoubleExponential',
        'double exponential': 'DoubleExponential',
        tema: 'TripleExponential',
        'triple exponential': 'TripleExponential',
      },
    })

    CIQ.Studies.calculateMovingAverageHull = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      if (sd.days < 0) sd.days = 1

      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close' // Handle when the default inputs are passed in

      CIQ.Studies.MA('wma', sd.days, field, 0, 'WMA1', stx, sd)
      CIQ.Studies.MA('wma', Math.ceil(sd.days / 2), field, 0, 'WMA2', stx, sd)
      for (var i = 0; i < quotes.length; i++) {
        var quote = quotes[i]
        quote['MMA ' + sd.name] = 2 * quote['WMA2 ' + sd.name] - quote['WMA1 ' + sd.name]
      }

      var offset = parseInt(sd.inputs.Offset, 10)
      if (isNaN(offset)) offset = 0

      CIQ.Studies.MA('wma', Math.sqrt(sd.days), 'MMA ' + sd.name, offset, 'HMA', stx, sd)

      var name = sd.name
      for (var p in sd.outputs) {
        name = p + ' ' + name
      }
      for (i = 0; i < quotes.length; i++) {
        quotes[i][name] = quotes[i]['HMA ' + sd.name]
      }
    }

    CIQ.Studies.calculateMovingAverageDoubleExponential = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      if (sd.days < 0) sd.days = 1

      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close' // Handle when the default inputs are passed in

      CIQ.Studies.MA('ema', sd.days, field, 0, 'EMA1', stx, sd)
      CIQ.Studies.MA('ema', sd.days, 'EMA1 ' + sd.name, 0, 'EMA2', stx, sd)

      var offset = parseInt(sd.inputs.Offset, 10)
      if (isNaN(offset)) offset = 0
      var name = sd.name
      for (var p in sd.outputs) {
        name = p + ' ' + name
      }
      var i, val
      var offsetBack = offset
      for (i = 0; i < quotes.length; i++) {
        var quote = quotes[i]
        if (quotes[i + offset]) quotes[i + offset][name] = 2 * quote['EMA1 ' + sd.name] - quote['EMA2 ' + sd.name]
      }
    }

    CIQ.Studies.calculateMovingAverageTripleExponential = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      if (sd.days < 0) sd.days = 1

      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close' // Handle when the default inputs are passed in

      CIQ.Studies.MA('ema', sd.days, field, 0, 'EMA1', stx, sd)
      CIQ.Studies.MA('ema', sd.days, 'EMA1 ' + sd.name, 0, 'EMA2', stx, sd)
      CIQ.Studies.MA('ema', sd.days, 'EMA2 ' + sd.name, 0, 'EMA3', stx, sd)

      var offset = parseInt(sd.inputs.Offset, 10)
      if (isNaN(offset)) offset = 0
      var name = sd.name
      for (var p in sd.outputs) {
        name = p + ' ' + name
      }
      for (var i = 0; i < quotes.length; i++) {
        var quote = quotes[i]
        if (quotes[i + offset])
          quotes[i + offset][name] =
            3 * quote['EMA1 ' + sd.name] - 3 * quote['EMA2 ' + sd.name] + quote['EMA3 ' + sd.name]
      }
    }

    CIQ.Studies.calculateATRBands = function(stx, sd) {
      CIQ.Studies.calculateStudyATR(stx, sd)
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'
      CIQ.Studies.calculateGenericEnvelope(stx, sd, sd.inputs.Shift, field, 'ATR ' + sd.name)
    }

    CIQ.Studies.calculateSTARCBands = function(stx, sd) {
      CIQ.Studies.calculateStudyATR(stx, sd)
      CIQ.Studies.MA('simple', sd.inputs['MA Period'], 'Close', 0, 'MA', stx, sd)
      CIQ.Studies.calculateGenericEnvelope(stx, sd, sd.inputs.Multiplier, 'MA ' + sd.name, 'ATR ' + sd.name)
    }

    CIQ.Studies.calculateATRStops = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      if (!quotes) return
      CIQ.Studies.calculateStudyATR(stx, sd)
      var useHighLow = sd.inputs.HighLow
      for (var i = 1; i < quotes.length - 1; i++) {
        var prices = quotes[i]
        var pd = quotes[i - 1]
        var prev = prices['Buy Stops ' + sd.name]
        if (!prev) prev = prices['Sell Stops ' + sd.name]
        if (!prev) prev = 0
        if (!prices || !pd) continue
        var base = prices.Close
        var result = base
        var offset = prices['ATR ' + sd.name] * sd.inputs.Multiplier
        if (prices.Close > prev && pd.Close > prev) {
          if (useHighLow) base = prices.High
          result = Math.max(prev, base - offset)
        } else if (prices.Close <= prev && pd.Close <= prev) {
          if (useHighLow) base = prices.Low
          result = Math.min(prev, base + offset)
        } else if (prices.Close > prev) {
          if (useHighLow) base = prices.High
          result = base - offset
        } else if (prices.Close <= prev) {
          if (useHighLow) base = prices.Low
          result = base + offset
        }
        if (base <= result) {
          quotes[i + 1]['Buy Stops ' + sd.name] = result
          delete quotes[i + 1]['Sell Stops ' + sd.name]
        } else if (base > result) {
          quotes[i + 1]['Sell Stops ' + sd.name] = result
          delete quotes[i + 1]['Buy Stops ' + sd.name]
        }
        quotes[i + 1]['All Stops ' + sd.name] = result
        sd.referenceOutput = 'All Stops' //so PSAR2 can draw a square wave
      }
    }

    CIQ.Studies.calculateAwesomeOscillator = function(stx, sd) {
      var quotes = sd.chart.scrubbed

      CIQ.Studies.MA('simple', 5, 'hl/2', 0, 'MA5', stx, sd)
      CIQ.Studies.MA('simple', 34, 'hl/2', 0, 'MA34', stx, sd)

      for (var i = 33; i < quotes.length; i++) {
        if (!quotes[i]) continue
        quotes[i][sd.name + '_hist'] = quotes[i]['MA5 ' + sd.name] - quotes[i]['MA34 ' + sd.name]
      }
    }

    CIQ.Studies.calculateRelativeVolatility = function(stx, sd) {
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'
      sd.days = sd.inputs['Smoothing Period']
      var quotes = sd.chart.scrubbed
      function computeRVI(avgGain, avgLoss) {
        if (avgGain + avgLoss === 0) return 100
        return (100 * avgGain) / (avgGain + avgLoss)
      }
      sd.std = new CIQ.Studies.StudyDescriptor(sd.name, 'sdev', sd.panel)
      sd.std.chart = sd.chart
      sd.std.days = sd.inputs['STD Period']
      sd.std.inputs = { Field: field, 'Standard Deviations': 1, Type: 'ma' }
      sd.std.outputs = { STD: null }
      CIQ.Studies.calculateStandardDeviation(stx, sd.std)

      var avgGain = 0
      var avgLoss = 0
      for (var i = sd.days; i < quotes.length; i++) {
        var quote = quotes[i]
        if (quote[field] > quotes[i - 1][field]) {
          avgGain = (avgGain * (sd.days - 1) + quote['STD ' + sd.name]) / sd.days
          avgLoss = (avgLoss * (sd.days - 1)) / sd.days
        } else {
          avgLoss = (avgLoss * (sd.days - 1) + quote['STD ' + sd.name]) / sd.days
          avgGain = (avgGain * (sd.days - 1)) / sd.days
        }
        quote['Rel Vol ' + sd.name] = computeRVI(avgGain, avgLoss)
      }
      sd.zoneOutput = 'Rel Vol'
    }

    CIQ.Studies.calculatePMO = function(stx, sd) {
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'

      var quotes = sd.chart.scrubbed
      var i
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        if (!quotes[i - 1]) continue
        var denom = quotes[i - 1][field]
        if (denom) {
          quotes[i]['ROCx10 ' + sd.name] = 1000 * (quotes[i][field] / denom - 1)
        }
      }
      CIQ.Studies.MA('exponential', sd.inputs['Smoothing Period'] - 1, 'ROCx10 ' + sd.name, 0, 'EMAx10', stx, sd)
      CIQ.Studies.MA('exponential', sd.inputs['Double Smoothing Period'] - 1, 'EMAx10 ' + sd.name, 0, 'PMO', stx, sd)
      CIQ.Studies.MA('exponential', sd.inputs['Signal Period'], 'PMO ' + sd.name, 0, 'PMOSignal', stx, sd)
      sd.zoneOutput = 'PMO'
    }

    CIQ.Studies.calculateElderImpulse = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var bull = sd.outputs.Bullish
      var bear = sd.outputs.Bearish
      var neutral = sd.outputs.Neutral

      CIQ.Studies.MA('exponential', 13, 'Close', 0, 'MA', stx, sd)
      sd.macd = new CIQ.Studies.StudyDescriptor(sd.name, 'macd', sd.panel)
      sd.macd.chart = sd.chart
      sd.macd.days = sd.days
      sd.macd.inputs = { 'Fast MA Period': 12, 'Slow MA Period': 26, 'Signal Period': 9 }
      sd.macd.outputs = { MACD: null, Signal: null }
      CIQ.Studies.calculateMACD(stx, sd.macd)

      for (i = 0; i < quotes.length; i++) {
        if (i === 0) color = neutral
        else if (
          quotes[i]['MA ' + sd.name] > quotes[i - 1]['MA ' + sd.name] &&
          quotes[i][sd.name + '_hist'] > quotes[i - 1][sd.name + '_hist']
        )
          color = bull
        else if (
          quotes[i]['MA ' + sd.name] < quotes[i - 1]['MA ' + sd.name] &&
          quotes[i][sd.name + '_hist'] < quotes[i - 1][sd.name + '_hist']
        )
          color = bear
        else color = neutral
        quotes[i]['Result ' + sd.name] = color
        if (i) quotes[i - 1][sd.name + '_hist'] = null
      }
    }

    CIQ.Studies.calculatePivotPoints = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var period = 'day'
      if (stx.layout.interval == 'day') period = 'month'
      else if (stx.isDailyInterval(stx.layout.interval)) period = 'year'
      else if (
        stx.layout.interval == 'second' ||
        stx.layout.interval == 'millisecond' ||
        stx.layout.timeUnit == 'second' ||
        stx.layout.timeUnit == 'millisecond'
      )
        period = '15min'
      else {
        var interval = stx.layout.periodicity
        if (stx.layout.interval != 'minute') {
          interval *= stx.layout.interval
        }
        if (interval >= 30) period = 'week'
      }

      var isForex = CIQ.Market.Symbology.isForexSymbol(stx.chart.symbol)
      var isMetal = CIQ.Market.Symbology.isForexMetal(stx.chart.symbol)
      var marketOffset = null

      function getMarketOffset(localQuoteDate) {
        var marketZone = 'America/New_York'
        if (!isForex) {
          if (stx.chart.market) {
            marketZone = stx.chart.market.market_tz
          } else {
            //get the exchange from the symbol (whatever is after the period)
            var foreignExchange =
              CIQ.Market.Symbology.isForeignSymbol(stx.chart.symbol) && stx.chart.symbol.split('.').pop()
            if (CIQ && CIQ.realTimeDataSource) {
              marketZone = new CIQ.QuoteFeed[CIQ.realTimeDataSource]().exchangeZones[foreignExchange]
            } else {
              marketZone = CIQ.QuoteFeed.Xignite.Utility.timeZone[foreignExchange]
            }
          }
        }
        var dt = new Date(localQuoteDate.getTime() + localQuoteDate.getTimezoneOffset() * 60000)
        if (!marketZone || marketZone.indexOf('UTC') == -1) dt = CIQ.convertTimeZone(dt, 'UTC', marketZone)

        return (
          new Date(
            dt.getFullYear(),
            dt.getMonth(),
            dt.getDate(),
            dt.getHours(),
            dt.getMinutes(),
            dt.getSeconds(),
            dt.getMilliseconds(),
          ).getTime() - localQuoteDate.getTime()
        )
      }
      var pivotPoint = 0
      var high = 0
      var low = 0
      var prevHigh = 0
      var prevLow = 0
      var hlSpread = 0
      function resetPivots() {
        pivotPoint = (high + low + quotes[i - 1].Close) / 3
        prevHigh = high
        prevLow = low
        hlSpread = high - low
        high = low = 0
      }
      for (var i = 1; i < quotes.length; i++) {
        if (!quotes[i - 1]) continue
        high = Math.max(high, quotes[i - 1].High)
        low = Math.min(low > 0 ? low : quotes[i - 1].Low, quotes[i - 1].Low)
        if (sd.inputs.Continuous) resetPivots()
        else if (period == 'year' && quotes[i].DT.getYear() != quotes[i - 1].DT.getYear()) {
          //new yearly period
          resetPivots()
        } else if (period == 'month' && quotes[i].DT.getMonth() != quotes[i - 1].DT.getMonth()) {
          //new monthly period
          resetPivots()
        } else if (period == 'week' && quotes[i].DT.getDay() < quotes[i - 1].DT.getDay()) {
          //new weekly period
          resetPivots()
        } else if (period == 'day') {
          if (marketOffset === null) {
            //possible new daily period
            marketOffset = getMarketOffset(quotes[i].DT)
            if (isForex) {
              //Forex beginning of day is 17:00 NY Time, so add 7 hours of msecs (6 for metals) to make it fall on a date boundary
              if (isMetal) marketOffset += 6 * 60 * 60 * 1000
              else marketOffset += 7 * 60 * 60 * 1000
            }
          }
          var newDate = new Date(new Date(quotes[i].DT).setMilliseconds(quotes[i].DT.getMilliseconds() + marketOffset))
          var oldDate = new Date(
            new Date(quotes[i - 1].DT).setMilliseconds(quotes[i - 1].DT.getMilliseconds() + marketOffset),
          )
          if (oldDate.getDate() != newDate.getDate() && newDate.getDay() !== 0 && newDate.getDay() != 6) {
            //new daily period
            marketOffset = null
            resetPivots()
          }
        } else if (
          period == '15min' &&
          (quotes[i].DT.getHours() != quotes[i - 1].DT.getHours() ||
            Math.floor(quotes[i].DT.getMinutes() / 15) != Math.floor(quotes[i - 1].DT.getMinutes() / 15))
        ) {
          //new 15 minute period
          resetPivots()
        }
        quotes[i]['Pivot ' + sd.name] = pivotPoint
        if (sd.inputs.Type.toLowerCase() == 'fibonacci') {
          quotes[i]['Resistance 1 ' + sd.name] = pivotPoint + 0.382 * hlSpread
          quotes[i]['Resistance 2 ' + sd.name] = pivotPoint + 0.618 * hlSpread
          quotes[i]['Resistance 3 ' + sd.name] = pivotPoint + hlSpread
          quotes[i]['Support 1 ' + sd.name] = pivotPoint - 0.382 * hlSpread
          quotes[i]['Support 2 ' + sd.name] = pivotPoint - 0.618 * hlSpread
          quotes[i]['Support 3 ' + sd.name] = pivotPoint - hlSpread
        } else {
          quotes[i]['Resistance 1 ' + sd.name] = 2 * pivotPoint - prevLow
          quotes[i]['Resistance 2 ' + sd.name] = pivotPoint + hlSpread
          quotes[i]['Resistance 3 ' + sd.name] = pivotPoint + 2 * hlSpread
          quotes[i]['Support 1 ' + sd.name] = 2 * pivotPoint - prevHigh
          quotes[i]['Support 2 ' + sd.name] = pivotPoint - hlSpread
          quotes[i]['Support 3 ' + sd.name] = pivotPoint - 2 * hlSpread
        }
      }
    }

    CIQ.Studies.calculateVWAP = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      sd.error = null
      if (CIQ.ChartEngine.isDailyInterval(stx.layout.interval)) {
        sd.error = 'VWAP is Intraday Only'
        return
      }
      var isForex = CIQ.Market.Symbology.isForexSymbol(stx.chart.symbol)
      var isMetal = CIQ.Market.Symbology.isForexMetal(stx.chart.symbol)
      var marketOffset = null
      var volume = 0
      var volume_price = 0
      var hasThereBeenVolume = false
      function getMarketOffset(localQuoteDate) {
        var marketZone = 'America/New_York'
        if (!isForex) {
          if (stx.chart.market) {
            marketZone = stx.chart.market.market_tz
          } else {
            //get the exchange from the symbol (whatever is after the period)
            var foreignExchange =
              CIQ.Market.Symbology.isForeignSymbol(stx.chart.symbol) && stx.chart.symbol.split('.').pop()
            if (CIQ && CIQ.realTimeDataSource) {
              marketZone = new CIQ.QuoteFeed[CIQ.realTimeDataSource]().exchangeZones[foreignExchange]
            } else {
              marketZone = CIQ.QuoteFeed.Xignite.Utility.timeZone[foreignExchange]
            }
          }
        }
        var dt = new Date(localQuoteDate.getTime() + localQuoteDate.getTimezoneOffset() * 60000)
        if (!marketZone || marketZone.indexOf('UTC') == -1) dt = CIQ.convertTimeZone(dt, 'UTC', marketZone)

        return (
          new Date(
            dt.getFullYear(),
            dt.getMonth(),
            dt.getDate(),
            dt.getHours(),
            dt.getMinutes(),
            dt.getSeconds(),
            dt.getMilliseconds(),
          ).getTime() - localQuoteDate.getTime()
        )
      }
      for (var i = 0; i < quotes.length; i++) {
        if (marketOffset === null) {
          //possible new daily period
          marketOffset = getMarketOffset(quotes[i].DT)
          if (isForex) {
            //Forex beginning of day is 17:00 NY Time, so add 7 hours of msecs (6 for metals) to make it fall on a date boundary
            if (isMetal) marketOffset += 6 * 60 * 60 * 1000
            else marketOffset += 7 * 60 * 60 * 1000
          }
        }
        if (quotes[i - 1] && quotes[i - 1].DT) {
          var newDate = new Date(new Date(quotes[i].DT).setMilliseconds(quotes[i].DT.getMilliseconds() + marketOffset))
          var oldDate = new Date(
            new Date(quotes[i - 1].DT).setMilliseconds(quotes[i - 1].DT.getMilliseconds() + marketOffset),
          )
          if (oldDate.getDate() != newDate.getDate() && newDate.getDay() !== 0 && newDate.getDay() != 6) {
            //new daily period
            marketOffset = null
            volume = volume_price = 0
          }
        }
        typicalPrice = (quotes[i].Close + quotes[i].High + quotes[i].Low) / 3
        volume += quotes[i].Volume
        volume_price += quotes[i].Volume * typicalPrice
        if (!volume) continue
        quotes[i]['VWAP ' + sd.name] = volume_price / volume
        hasThereBeenVolume = true
      }
      if (!hasThereBeenVolume) {
        sd.error = 'VWAP Requires Volume'
      }
    }

    CIQ.Studies.calculateMFI = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var high = 0
      var i
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        if (quotes[i].Volume) {
          quotes[i][sd.name + '_hist'] = (quotes[i].High - quotes[i].Low) / quotes[i].Volume
          high = Math.max(high, quotes[i][sd.name + '_hist'])
        }
      }
      var range = 1
      if (high > 0) {
        while (high * range < 1) {
          range *= 10
        }
      }
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        quotes[i][sd.name + '_hist'] *= range
      }
    }

    CIQ.Studies.calculateAlligator = function(stx, sd) {
      var quotes = sd.chart.scrubbed

      CIQ.Studies.MA('welles wilder', Number(sd.inputs['Jaw Period']), 'hl/2', sd.inputs['Jaw Offset'], 'Jaw', stx, sd)
      CIQ.Studies.MA(
        'welles wilder',
        Number(sd.inputs['Teeth Period']),
        'hl/2',
        sd.inputs['Teeth Offset'],
        'Teeth',
        stx,
        sd,
      )
      CIQ.Studies.MA(
        'welles wilder',
        Number(sd.inputs['Lips Period']),
        'hl/2',
        sd.inputs['Lips Offset'],
        'Lips',
        stx,
        sd,
      )

      for (var i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        if (sd.type == 'Gator') {
          quotes[i][sd.name + '_hist1'] = Math.abs(quotes[i]['Jaw ' + sd.name] - quotes[i]['Teeth ' + sd.name])
          quotes[i][sd.name + '_hist2'] = -Math.abs(quotes[i]['Teeth ' + sd.name] - quotes[i]['Lips ' + sd.name])
        }
        if (sd.inputs['Show Fractals']) {
          if (!quotes[i - 2] || !quotes[i - 1] || !quotes[i] || !quotes[i + 1] || !quotes[i + 2]) continue
          if (quotes[i - 2].High && quotes[i - 1].High && quotes[i].High && quotes[i + 1].High && quotes[i + 2].High) {
            if (
              quotes[i].High > quotes[i - 1].High &&
              quotes[i].High > quotes[i - 2].High &&
              quotes[i].High > quotes[i + 1].High &&
              quotes[i].High > quotes[i + 2].High
            ) {
              quotes[i]['Fractal High ' + sd.name] = 1
            }
          }
          if (quotes[i - 2].Low && quotes[i - 1].Low && quotes[i].Low && quotes[i + 1].Low && quotes[i + 2].Low) {
            if (
              quotes[i].Low < quotes[i - 1].Low &&
              quotes[i].Low < quotes[i - 2].Low &&
              quotes[i].Low < quotes[i + 1].Low &&
              quotes[i].Low < quotes[i + 2].Low
            ) {
              quotes[i]['Fractal Low ' + sd.name] = 1
            }
          }
        }
      }
    }

    CIQ.Studies.calculateRelativeVigor = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var i
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        quotes[i]['Change ' + sd.name] = quotes[i].Close - quotes[i].Open
        quotes[i]['Range ' + sd.name] = quotes[i].High - quotes[i].Low
      }

      CIQ.Studies.MA('triangular', 4, 'Change ' + sd.name, 0, 'Numer', stx, sd)
      CIQ.Studies.MA('triangular', 4, 'Range ' + sd.name, 0, 'Denom', stx, sd)

      var nums = []
      var dens = []
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        nums.push(quotes[i]['Numer ' + sd.name])
        dens.push(quotes[i]['Denom ' + sd.name])
        if (nums.length > sd.days) {
          nums.shift()
          dens.shift()
        }
        var sumNum = 0
        var sumDen = 0
        var it
        for (it = 0; it < nums.length; it++) {
          sumNum += nums[it]
        }
        for (it = 0; it < dens.length; it++) {
          sumDen += dens[it]
        }
        if (sumDen === 0) sumDen = 0.00000001
        quotes[i]['Rel Vig ' + sd.name] = sumNum / sumDen
      }

      CIQ.Studies.MA('triangular', 4, 'Rel Vig ' + sd.name, 0, 'RelVigSignal', stx, sd)

      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        quotes[i][sd.name + '_hist'] = quotes[i]['Rel Vig ' + sd.name] - quotes[i]['RelVigSignal ' + sd.name]
      }
    }

    CIQ.Studies.calculateUlcerIndex = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'

      function getHV(p, x, f) {
        var h = null
        for (var j = x - p + 1; j <= x; j++) {
          if (j < 0) continue
          h = h === null ? quotes[j][f] : Math.max(h, quotes[j][f])
        }
        return h
      }
      var i
      for (i = sd.days - 1; i < quotes.length; i++) {
        if (!quotes[i]) continue
        quotes[i]['PD2 ' + sd.name] = Math.pow(100 * (quotes[i][field] / getHV(sd.days, i, field) - 1), 2)
      }
      CIQ.Studies.MA('simple', sd.days, 'PD2 ' + sd.name, 0, 'MA', stx, sd)
      for (i = 2 * (sd.days - 1); i < quotes.length; i++) {
        quotes[i]['Result ' + sd.name] = Math.sqrt(quotes[i]['MA ' + sd.name])
      }
    }

    CIQ.Studies.calculateChoppiness = function(stx, sd) {
      CIQ.Studies.calculateStudyATR(stx, sd)

      var quotes = sd.chart.scrubbed

      function getLLVHHV(p, x) {
        var h = null,
          l = null
        for (var j = x - p + 1; j <= x; j++) {
          if (j < 0) continue
          h = h === null ? quotes[j].High : Math.max(h, quotes[j].High)
          l = l === null ? quotes[j].Low : Math.min(l, quotes[j].Low)
        }
        return [l, h]
      }
      for (var i = sd.days; i < quotes.length; i++) {
        if (!quotes[i]) continue
        var lh = getLLVHHV(sd.days, i)
        if (quotes[i]['Sum True Range ' + sd.name]) {
          quotes[i]['Result ' + sd.name] =
            (100 * Math.log(quotes[i]['Sum True Range ' + sd.name] / Math.max(0.000001, lh[1] - lh[0]))) /
            Math.log(sd.days)
        } else {
          quotes[i]['Result ' + sd.name] = 0
        }
      }
    }

    CIQ.Studies.calculateDisparity = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'

      CIQ.Studies.MA(sd.inputs['Moving Average Type'], sd.days, field, 0, 'MA', stx, sd)
      for (var i = sd.days - 1; i < quotes.length; i++) {
        if (!quotes[i]) continue
        quotes[i]['Result ' + sd.name] = 100 * (quotes[i][field] / quotes[i]['MA ' + sd.name] - 1)
      }
    }

    CIQ.Studies.calculateRainbow = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'

      function getLLVHHV(p, x) {
        var h = null,
          l = null
        for (var j = x - p + 1; j <= x; j++) {
          if (j < 0) continue
          h = h === null ? quotes[j].Close : Math.max(h, quotes[j].Close)
          l = l === null ? quotes[j].Close : Math.min(l, quotes[j].Close)
        }
        return [l, h]
      }

      var f = field
      for (var j = 1; j <= 10; j++) {
        CIQ.Studies.MA('simple', sd.days, f, 0, 'SMA' + j, stx, sd)
        f = 'SMA' + j + ' ' + sd.name
      }

      for (var i = 10; i < quotes.length; i++) {
        if (!quotes[i]) continue
        var accum = 0,
          max = 0,
          min = Number.MAX_VALUE
        for (j = 1; j <= 10; j++) {
          var q = quotes[i]['SMA' + j + ' ' + sd.name]
          accum += q
          max = Math.max(max, q)
          min = Math.min(min, q)
        }
        if (sd.name.indexOf('Osc') > -1) {
          var lh = getLLVHHV(sd.inputs['HHV/LLV Lookback'], i)
          quotes[i][sd.name + '_hist'] = (100 * (quotes[i][field] - accum / 10)) / Math.max(0.000001, lh[1] - lh[0])
          quotes[i]['Over ' + sd.name] = (100 * (max - min)) / Math.max(0.000001, lh[1] - lh[0])
          quotes[i]['Under ' + sd.name] = -quotes[i]['Over ' + sd.name]
          quotes[i]['Zero ' + sd.name] = 0
        }
      }
    }

    CIQ.Studies.calculateKST = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'
      var roc = {}
      smp = {}
      roc[1] = sd.inputs['Lightest Rate of Change Period']
      roc[2] = sd.inputs['Light Rate of Change Period']
      roc[3] = sd.inputs['Heavy Rate of Change Period']
      roc[4] = sd.inputs['Heaviest Rate of Change Period']
      smp[1] = sd.inputs['Lightest SMA Period']
      smp[2] = sd.inputs['Light SMA Period']
      smp[3] = sd.inputs['Heavy SMA Period']
      smp[4] = sd.inputs['Heaviest SMA Period']
      var sp = sd.inputs['Signal Period']
      var i, j
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        for (j = 1; j <= 4; j++) {
          if (i >= roc[j] && quotes[i - roc[j]] && quotes[i - roc[j]][field])
            quotes[i]['ROC' + j + ' ' + sd.name] = 100 * (quotes[i][field] / quotes[i - roc[j]][field] - 1)
        }
      }
      for (j = 1; j <= 4; j++) {
        CIQ.Studies.MA('simple', smp[j], 'ROC' + j + ' ' + sd.name, 0, 'SMA' + j, stx, sd)
      }
      for (i = 0; i < quotes.length; i++) {
        quotes[i]['KST ' + sd.name] = 0
        for (j = 1; j <= 4; j++) quotes[i]['KST ' + sd.name] += j * quotes[i]['SMA' + j + ' ' + sd.name]
      }
      CIQ.Studies.MA('simple', sp, 'KST ' + sd.name, 0, 'KSTSignal', stx, sd)
    }

    CIQ.Studies.calculateSpecialK = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'
      var span = sd.inputs.Interval
      if (!span) span = 'daily'
      var roc = {
        daily: [10, 15, 20, 30, 50, 65, 75, 100, 195, 265, 390, 530],
        weekly: [4, 5, 6, 8, 10, 13, 15, 20, 39, 52, 78, 104],
      }
      var map = {
        daily: [10, 10, 10, 15, 50, 65, 75, 100, 130, 130, 130, 195],
        weekly: [4, 5, 6, 8, 10, 13, 15, 20, 26, 26, 26, 39],
      }
      var i, j
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        for (j = 0; j < roc[span].length; j++) {
          if (i >= roc[span][j] && quotes[i - roc[span][j]] && quotes[i - roc[span][j]][field])
            quotes[i]['ROC' + j + ' ' + sd.name] = 100 * (quotes[i][field] / quotes[i - roc[span][j]][field] - 1)
        }
      }
      for (j = 0; j < map[span].length; j++) {
        CIQ.Studies.MA(
          span == 'daily' ? 'simple' : 'exponential',
          map[span][j],
          'ROC' + j + ' ' + sd.name,
          0,
          'MA' + j,
          stx,
          sd,
        )
      }
      for (i = 0; i < quotes.length; i++) {
        quotes[i]['Result ' + sd.name] = 0
        for (j = 0; j < map[span].length; j++) {
          quotes[i]['Result ' + sd.name] += ((j % 4) + 1) * quotes[i]['MA' + j + ' ' + sd.name]
        }
      }
    }

    CIQ.Studies.calculateDarvas = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var state = 0
      var allTimeHigh = 0
      var allTimeHighPeriods = parseInt(sd.inputs['ATH Lookback Period'], 10)
      if (sd.inputs['Volume Spike']) {
        CIQ.Studies.MA('simple', allTimeHighPeriods, 'Volume', 0, 'ADV', stx, sd)
      }
      var spikePercentage = parseFloat(sd.inputs['Volume % of Avg']) / 100
      var boxState = 'none'
      var boxData = {}
      var ghost = null
      var buy = null,
        sell = null
      var offset = parseFloat(sd.inputs['Level Offset'])
      var debug = false
      if (debug) console.log('*****************')
      for (var i = 0; i < quotes.length; i++) {
        var quote = quotes[i]
        if (!quote) continue

        if (parseFloat(sd.inputs['Price Minimum']) <= quotes[allTimeHigh].Close) {
          if (ghost && (!ghost.End || i == ghost.End + 1)) {
            if (quotes[i - 1].Close > boxData.High) {
              boxData = {
                State: 1,
                High: 2 * boxData.High - boxData.Low,
                Low: boxData.High,
                Start: i,
                End: 2 * boxData.End - boxData.Start + 1,
              }
            } else {
              ghost = null
              //boxData={State:1,High:boxData.High,Low:boxData.Low,Start:i,End:2*boxData.End-boxData.Start+1};
            }
            if (ghost) {
              quote['Ghost ' + sd.name] = CIQ.clone(boxData)
              if (debug) console.log('Ghost begin:' + quote.DT)
              boxData.State = 0
              if (quotes[boxData.End]) {
                quotes[boxData.End]['Ghost ' + sd.name] = CIQ.clone(boxData)
                if (debug) console.log('Ghost end:' + quotes[boxData.End].DT)
              }
              ghost = { Start: boxData.Start, End: boxData.End }
              buy = boxData.High + offset
              if (!sell || sell < boxData.Low - offset) {
                sell = boxData.Low - offset
              }
            }
          }

          quote['Profit ' + sd.name] = buy
          quote['Loss ' + sd.name] = sell
          if (quote.Close >= buy) buy = null
          else if (sd.inputs['Exit Field'] == 'high/low' && quote.High >= buy) buy = null

          if (boxState == 'none') {
            if (i == allTimeHigh + 3) {
              if (
                !quotes[allTimeHigh + 2]['Darvas ' + sd.name] &&
                !quotes[allTimeHigh + 1]['Darvas ' + sd.name] &&
                !quotes[allTimeHigh]['Darvas ' + sd.name] &&
                quotes[allTimeHigh].High > quote.High
              ) {
                boxState = 'high'
                //if(sell) buy=Math.max(buy,quotes[allTimeHigh].High+offset);
              }
            }
          }

          if (boxState == 'high') {
            if (quote.High > quotes[allTimeHigh].High) {
              boxState = 'none'
            } else if (
              quotes[i - 3].Low < quotes[i - 2].Low &&
              quotes[i - 3].Low < quotes[i - 1].Low &&
              quotes[i - 3].Low < quote.Low
            ) {
              boxData = { State: 1, High: quotes[allTimeHigh].High, Low: quotes[i - 3].Low, Start: allTimeHigh }
              quotes[allTimeHigh]['Darvas ' + sd.name] = CIQ.clone(boxData)
              boxState = 'darvas'
              if (debug) console.log('Darvas begin:' + quotes[allTimeHigh].DT)
              if (debug) console.log('Darvas established:' + quote.DT)
              if (ghost) {
                if (ghost.End > i && quotes[ghost.Start]) {
                  quote['Ghost ' + sd.name] = CIQ.clone(quotes[ghost.Start]['Ghost ' + sd.name])
                  quote['Ghost ' + sd.name].End = i
                  if (quotes[ghost.End]) {
                    delete quotes[ghost.End]['Ghost ' + sd.name]
                    if (debug) console.log('Ghost End removed:' + quotes[ghost.End].DT)
                  }
                }
                quote['Ghost ' + sd.name].State = 0
                quotes[ghost.Start]['Ghost ' + sd.name].End = i
                if (debug) console.log('Ghost end:' + quote.DT)
                ghost = null
              }
              buy = boxData.High + offset
              if (!sell || sell < boxData.Low - offset) {
                sell = boxData.Low - offset
              }
            }
          }

          if (boxState == 'darvas') {
            if (quote.Close > boxData.High) ghost = {}
            else if (sd.inputs['Exit Field'] == 'high/low' && quote.High > boxData.High) ghost = {}
            else if (quote.Close < boxData.Low) boxState = 'none'
            else if (sd.inputs['Exit Field'] == 'high/low' && quote.Low < boxData.Low) boxState = 'none'
            if (ghost) boxState = 'none'
            else if (boxState == 'none') {
              buy = null
              sell = null
            }
            if (!sd.inputs['Ghost Boxes']) ghost = null
            if (boxState == 'none') {
              for (var d = boxData.Start + 1; d < i; d++) {
                quotes[d]['Darvas ' + sd.name] = CIQ.clone(boxData)
              }
              boxData.State = 0
              boxData.End = i
              quote['Darvas ' + sd.name] = CIQ.clone(boxData)
              if (debug) console.log('Darvas end:' + quote.DT)
              continue
            }
          }

          if (sell) {
            if (quote.Close < boxData.Low || (sd.inputs['Exit Field'] == 'high/low' && quote.Low < boxData.Low)) {
              if (boxState == 'darvas') boxState = 'none'
              if (quote.Close < sell || (sd.inputs['Exit Field'] == 'high/low' && quote.Low < sell)) {
                buy = null
                sell = null
              }
              if (ghost) {
                if (ghost.End > i && quotes[ghost.Start]) {
                  quote['Ghost ' + sd.name] = CIQ.clone(quotes[ghost.Start]['Ghost ' + sd.name])
                  quote['Ghost ' + sd.name].End = i
                  if (quotes[ghost.End]) {
                    delete quotes[ghost.End]['Ghost ' + sd.name]
                    if (debug) console.log('Ghost End removed:' + quotes[ghost.End].DT)
                  }
                }
                quote['Ghost ' + sd.name].State = 0
                quotes[ghost.Start]['Ghost ' + sd.name].End = i
                if (debug) console.log('Ghost end:' + quote.DT)
                ghost = null
              }
            }
          }
        }

        if (quote.High >= quotes[allTimeHigh].High) {
          allTimeHigh = i
        }

        if (
          i < 3 ||
          (quote.High >= quotes[i - 1].High && quote.High >= quotes[i - 2].High && quote.High >= quotes[i - 3].High)
        ) {
          if (i - allTimeHigh >= allTimeHighPeriods) {
            allTimeHigh = i
            for (var j = 0; j < allTimeHighPeriods; j++) {
              if (i - j < 0) break
              if (quotes[i - j].High > quotes[allTimeHigh].High) {
                allTimeHigh = i - j
              }
            }
          }
        }

        if (sd.inputs['Volume Spike'] && i > allTimeHighPeriods && i == allTimeHigh) {
          if (quote['ADV ' + sd.name] * spikePercentage < quote.Volume) {
            quote['Spike ' + sd.name] = 1
            if (debug) console.log('Volume Spike:' + quote.DT)
          }
        }
      }
    }

    CIQ.Studies.calculateSupertrend = function(stx, sd) {
      CIQ.Studies.calculateStudyATR(stx, sd)
      var quotes = sd.chart.scrubbed
      for (var i = 0; i < quotes.length; i++) {
        var quote = quotes[i]
        if (!quote) continue
        var median = (quote.High + quote.Low) / 2
        var factoredATR = sd.inputs.Multiplier * quote['ATR ' + sd.name]
        var uptrend = median - factoredATR
        var downtrend = median + factoredATR
        if (i) {
          if (
            quotes[i - 1] &&
            quotes[i - 1].Close &&
            quotes[i - 1].Close > quotes[i - 1]['Uptrend ' + sd.name] &&
            quotes[i - 1]['Uptrend ' + sd.name] > uptrend
          )
            uptrend = quotes[i - 1]['Uptrend ' + sd.name]
          if (
            quotes[i - 1] &&
            quotes[i - 1].Close &&
            quotes[i - 1].Close < quotes[i - 1]['Downtrend ' + sd.name] &&
            quotes[i - 1]['Downtrend ' + sd.name] < downtrend
          )
            downtrend = quotes[i - 1]['Downtrend ' + sd.name]
        }
        quote['Direction ' + sd.name] = 1
        if (i) {
          quote['Direction ' + sd.name] = quotes[i - 1]['Direction ' + sd.name]
          if (quote.Close > quotes[i - 1]['Downtrend ' + sd.name]) quote['Direction ' + sd.name] = 1
          else if (quote.Close < quotes[i - 1]['Uptrend ' + sd.name]) quote['Direction ' + sd.name] = -1
        }
        quote['Uptrend ' + sd.name] = uptrend
        quote['Downtrend ' + sd.name] = downtrend
        quote['Trend ' + sd.name] = quote['Direction ' + sd.name] > 0 ? uptrend : downtrend
        if (!i) continue
        if (quotes[i - 1]['Direction ' + sd.name] > 0) quotes[i - 1]['Downtrend ' + sd.name] = null
        else quotes[i - 1]['Uptrend ' + sd.name] = null
      }
    }

    CIQ.Studies.fetchAdditionalInstruments = function(stx, sd, syms) {
      if (!stx.quoteDriver) {
        console.log('CIQ.Studies.fetchAdditionalInstruments: NO quotefeed to fetch symbol')
        return
      }
      stx.panels[sd.panel].studyQuotes = {}
      for (var field in syms) {
        stx.panels[sd.panel].studyQuotes[field] = true
      }

      if (!stx.chart || !stx.chart.scrubbed) return
      var quotes = stx.chart.scrubbed

      var params = {
        stx: stx,
        chart: stx.panels[sd.panel].chart,
        symbol: '',
        interval: stx.layout.interval,
        period: 1,
        extended: stx.layout.extended,
        adj: stx.layout.adj,
        startDate: quotes[0].DT,
        endDate: quotes[quotes.length - 1].DT,
        feed: 'delayed',
        //noBats: true,
        //noUpdate: true,
        nocache: true,
      }
      if (!isNaN(params.interval)) {
        // normalize numeric intervals into "minute" form
        params.period = params.interval
        params.interval = 'minute'
      }

      var arr = []
      for (field in syms) {
        var seriesParam = CIQ.shallowClone(params)
        seriesParam.symbol = field
        arr.push(seriesParam)
      }
      stx.quoteDriver.quoteFeed.multiFetch(arr, function(results) {
        for (var i = 0; i < results.length; i++) {
          var result = results[i]
          if (!result.dataCallback.error && result.dataCallback.error !== 0) {
            var field = null
            if (stx.chart.series[result.params.symbol]) {
              field = stx.chart.series[result.params.symbol].parameters.field
            }
            CIQ.addMemberToMasterdata(stx, result.params.symbol, result.dataCallback.quotes, null, null, field)
          }
        }
        stx.createDataSet()
        stx.draw()
      })
    }

    CIQ.Studies.fetchComparisonQuote = function(stx, sd, symbol) {
      var Status = {
        INIT: 0,
        BUSY: 1,
        DONE: 2,
      }

      stx.panels[sd.panel].studyQuotes = {}

      var cSym = symbol
      if (!cSym || cSym == stx.chart.symbol) {
        stx.panels[sd.panel].studyQuotes = null
        return
      }
      stx.panels[sd.panel].studyQuotes[cSym] = true

      var quotes = sd.chart.scrubbed
      if (sd.loadedInitialData === Status.DONE && quotes[0].DT < sd.compareBegin) {
        sd.loadedInitialData = Status.INIT
      }

      function handleResponse(dataCallback) {
        if (dataCallback.error) {
          sd.loadedInitialData = Status.INIT //allow a retry
        } else {
          CIQ.addMemberToMasterdata(stx, params.symbol, dataCallback.quotes)
          stx.createDataSet()
          stx.draw() //need this due to async nature of this function
          sd.loadedInitialData = Status.DONE
        }
        stx.completeAsyncAction()
      }

      if (!sd.loadedInitialData) {
        //check to see if we've loaded the initial data
        sd.loadedInitialData = Status.BUSY
        var params = {
          stx: stx,
          chart: stx.panels[sd.panel].chart,
          symbol: cSym,
          symbolObject: sd.symbolObject,
          interval: stx.layout.interval,
          period: 1,
          extended: stx.layout.extended,
          adj: stx.layout.adj,
          startDate: quotes[0].DT,
          endDate: quotes[quotes.length - 1].DT,
          feed: 'delayed',
          //noBats: true,
          //noUpdate: true,
          nocache: true,
        }
        sd.compareBegin = quotes[0].DT
        if (!isNaN(params.interval)) {
          // normalize numeric intervals into "minute" form
          params.period = params.interval
          params.interval = 'minute'
        }

        if (stx.quoteDriver) {
          stx.startAsyncAction()
          if (stx.isEquationChart(params.symbol)) {
            //equation chart
            CIQ.fetchEquationChart(params, handleResponse)
          } else {
            stx.quoteDriver.quoteFeed.fetch(params, handleResponse)
          }
        } else {
          //this will go away one day
          if (cSym.indexOf(':') > -1 || stx.chart.symbol.indexOf(':') > -1) return
          if (cSym.indexOf('=') === 0 || stx.chart.symbol.indexOf('=') === 0) return
          stx.startAsyncAction()
          CIQ.Quotes.fetch(params, function(error, data) {
            if (error) {
              sd.loadedInitialData = Status.INIT //allow a retry
            } else {
              CIQ.addMemberToMasterdata(stx, params.symbol, data)
              stx.createDataSet()
              stx.draw() //need this due to async nature of this function
              sd.loadedInitialData = Status.DONE
            }
            stx.completeAsyncAction()
          })
        }
        return 0
      }
      quotes = stx.chart.dataSet //operating on dataset is probably faster than recreating and scrubbing it
      return quotes
    }

    /**
     * Initalizes data for Price Relative Study by fetching the comparing symbol.
     *
     * @param  {object} stx    The chart object
     * @param  {object} sd    The study descriptor object
     * @memberOf CIQ.Studies
     * @version ChartIQ Advanced Package
     * @since 09-2016-19
     */

    CIQ.Studies.initPriceRelative = function(stx, type, inputs, outputs, parameters, panel) {
      var sd = CIQ.Studies.initializeFN(stx, type, inputs, outputs, parameters, panel)
      var syms = {}
      syms[sd.inputs['Comparison Symbol'].toUpperCase()] = true

      CIQ.Studies.fetchAdditionalInstruments(stx, sd, syms)
      return sd
    }

    /**
     * Calculates data for Price Relative Study
     *
     * @param  {object} stx    The chart object
     * @param  {object} sd    The study descriptor object
     * @memberOf CIQ.Studies
     * @version ChartIQ Advanced Package
     */
    CIQ.Studies.calculatePriceRelative = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var cSym = sd.inputs['Comparison Symbol'].toUpperCase()
      var map = {}
      var mainSymbol = stx.chart.symbol.replace(/=/, '')
      mainSymbol = mainSymbol.replace(/[\+\-\*\\\%]/g, '')
      map[mainSymbol] = [].concat(quotes)
      if (mainSymbol != cSym) map[cSym] = null
      var results = CIQ.computeEquationChart('[' + mainSymbol + ']/[' + cSym + ']', map)
      var rIter = 0
      for (var i = 0; i < quotes.length && rIter < results.length; i++) {
        while (rIter < results.length && quotes[i].DT.getTime() > results[rIter].DT.getTime()) rIter++
        if (quotes[i].DT.getTime() < results[rIter].DT.getTime()) continue
        quotes[i]['Result ' + sd.name] = results[rIter].Close
        rIter++
      }
    }

    CIQ.Studies.calculatePerformance = function(stx, sd) {
      var cSym = sd.inputs['Comparison Symbol'].toUpperCase()
      if (!cSym) cSym = sd.study.inputs['Comparison Symbol']
      if (!sd.days) sd.days = sd.study.inputs.Period

      if (!cSym || sd.days) return
      var quotes = CIQ.Studies.fetchComparisonQuote(stx, sd, cSym)
      if (!quotes) return
      CIQ.Studies.MA('ma', sd.days, 'Close', 0, 'MA Base', stx, sd)
      CIQ.Studies.MA('ma', sd.days, cSym, 0, 'MA Comp', stx, sd)
      for (var i = 0; i < quotes.length; i++) {
        quotes[i]['Result ' + sd.name] =
          (quotes[i].Close / quotes[i][cSym]) * (quotes[i]['MA Comp ' + sd.name] / quotes[i]['MA Base ' + sd.name])
      }
    }

    CIQ.Studies.calculateBeta = function(stx, sd) {
      var cSym = sd.inputs['Comparison Symbol'].toUpperCase()
      if (!cSym) cSym = sd.study.inputs['Comparison Symbol']
      if (!sd.days) sd.days = sd.study.inputs.Period
      if (!cSym || sd.days) return

      var quotes = CIQ.Studies.fetchComparisonQuote(stx, sd, cSym)
      if (!quotes) return
      for (var i = 1; i < quotes.length; i++) {
        quotes[i]['BaseChange ' + sd.name] = quotes[i].Close / quotes[i - 1].Close - 1
        quotes[i]['CompChange ' + sd.name] = quotes[i][cSym] / quotes[i - 1][cSym] - 1
      }
      CIQ.Studies.MA('ma', sd.days, 'BaseChange ' + sd.name, 0, 'MA Base', stx, sd)
      CIQ.Studies.MA('ma', sd.days, 'CompChange ' + sd.name, 0, 'MA Comp', stx, sd)
      for (i = sd.days; i < quotes.length; i++) {
        quotes[i]['COVARn ' + sd.name] =
          (quotes[i]['BaseChange ' + sd.name] - quotes[i]['MA Base ' + sd.name]) *
          (quotes[i]['CompChange ' + sd.name] - quotes[i]['MA Comp ' + sd.name])
        quotes[i]['VARn ' + sd.name] = Math.pow(quotes[i]['CompChange ' + sd.name] - quotes[i]['MA Comp ' + sd.name], 2)
      }
      CIQ.Studies.MA('ma', sd.days, 'COVARn ' + sd.name, 0, 'COVAR', stx, sd)
      CIQ.Studies.MA('ma', sd.days, 'VARn ' + sd.name, 0, 'VAR', stx, sd)
      for (i = sd.days * 2 - 1; i < quotes.length; i++) {
        quotes[i]['Result ' + sd.name] = quotes[i]['COVAR ' + sd.name] / quotes[i]['VAR ' + sd.name]
      }
    }

    CIQ.Studies.calculateVortex = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var period = sd.days
      var total = { tr: 0, vmPlus: 0, vmMinus: 0 }
      for (var i = 1; i < quotes.length; i++) {
        var prices = quotes[i]
        var pd = quotes[i - 1]
        var vmPlus = Math.abs(prices.High - pd.Low)
        var vmMinus = Math.abs(prices.Low - pd.High)
        var trueRange = Math.max(prices.High, pd.Close) - Math.min(prices.Low, pd.Close)
        total.tr += trueRange
        total.vmPlus += vmPlus
        total.vmMinus += vmMinus
        if (i > period) {
          total.tr -= quotes[i - period]['True Range ' + sd.name]
          total.vmPlus -= quotes[i - period]['VMPlus ' + sd.name]
          total.vmMinus -= quotes[i - period]['VMMinus ' + sd.name]
        }
        prices['True Range ' + sd.name] = trueRange
        prices['VMPlus ' + sd.name] = vmPlus
        prices['VMMinus ' + sd.name] = vmMinus
        if (i >= period) {
          prices['+VI ' + sd.name] = total.vmPlus / total.tr
          prices['-VI ' + sd.name] = total.vmMinus / total.tr
        }
      }
    }

    CIQ.Studies.calculateBalanceOfPower = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var period = sd.days

      for (var i = 0; i < quotes.length; i++) {
        quotes[i]['Ratio ' + sd.name] = (quotes[i].Close - quotes[i].Open) / (quotes[i].High - quotes[i].Low)
      }
      CIQ.Studies.MA(sd.inputs['Moving Average Type'], period, 'Ratio ' + sd.name, 0, 'Result', stx, sd)
    }

    CIQ.Studies.calculateTrendIntensity = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'

      function computeTII(gain, loss) {
        if (loss === 0) return 100
        return 100 - 100 / (1 + gain / loss)
      }
      CIQ.Studies.MA('ma', sd.days, field, 0, 'SMA', stx, sd)
      var gain = 0,
        loss = 0,
        i,
        change,
        queue = []
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]['SMA ' + sd.name] && quotes[i]['SMA ' + sd.name] !== 0) continue
        change = quotes[i][field] - quotes[i]['SMA ' + sd.name]
        if (change < 0) loss += change * -1
        else gain += change
        queue.push(change)
        if (queue.length > Math.ceil(sd.days / 2)) {
          change = queue.shift()
          if (change < 0) loss -= change * -1
          else gain -= change
        }
        quotes[i]['TII ' + sd.name] = computeTII(gain, loss)
      }
      CIQ.Studies.MA('ema', sd.inputs['Signal Period'], 'TII ' + sd.name, 0, 'Signal', stx, sd)
      sd.zoneOutput = 'TII'
    }

    // Note: this study expects createDataSet to be called when changing the chart type!
    CIQ.Studies.calculateZigZag = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      function getValue(high_low, chartType) {
        //TODO: make part of CIQ.ChartEngine?
        if (chartType == 'line' || chartType == 'colored_line') return 'Close'
        else if (chartType.indexOf('baseline') > -1 || chartType.indexOf('mountain') > -1) return 'Close'
        else return high_low
      }
      function fillBetweenPoints(start, end) {
        for (var i = start + 1; i < end; i++) {
          quotes[i]['ShadowResult ' + sd.name] =
            ((quotes[end]['Result ' + sd.name] - quotes[start]['Result ' + sd.name]) * (i - start)) / (end - start) +
            quotes[start]['Result ' + sd.name]
        }
      }
      var ll = null,
        hh = null
      var distance = sd.inputs['Distance(%)']
      var direction = 0
      var bar = 0
      var previousBar = 0
      var zig = null,
        zag = null
      for (var i = 0; i < quotes.length; i++) {
        var thisHigh = quotes[i][getValue('High', stx.layout.chartType)]
        var thisLow = quotes[i][getValue('Low', stx.layout.chartType)]
        if (hh === null || hh < thisHigh) {
          hh = thisHigh
          if (direction < 0) ll = thisLow
          zig = (1 - distance / 100) * hh
          if (direction > -1) {
            if (zag !== null && hh > zag) {
              quotes[bar]['Result ' + sd.name] = quotes[bar][getValue('Low', stx.layout.chartType)]
              fillBetweenPoints(previousBar, bar)
              direction = -1
              ll = thisLow
              previousBar = bar
              bar = i
              continue
            }
          } else {
            bar = i
          }
        }
        if (ll === null || ll > thisLow) {
          ll = thisLow
          if (direction > 0) hh = thisHigh
          zag = (1 + distance / 100) * ll
          if (direction < 1) {
            if (zig !== null && ll < zig) {
              quotes[bar]['Result ' + sd.name] = quotes[bar][getValue('High', stx.layout.chartType)]
              fillBetweenPoints(previousBar, bar)
              direction = 1
              hh = thisHigh
              previousBar = bar
              bar = i
              continue
            }
          } else {
            bar = i
          }
        }
      }
      quotes[bar]['Result ' + sd.name] = quotes[bar][getValue(direction == 1 ? 'Low' : 'High', stx.layout.chartType)]
      fillBetweenPoints(previousBar, bar)
      quotes[quotes.length - 1]['Result ' + sd.name] =
        quotes[quotes.length - 1][getValue(direction == 1 ? 'High' : 'Low', stx.layout.chartType)]
      fillBetweenPoints(bar, quotes.length - 1)
    }

    CIQ.Studies.calculatePsychologicalLine = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var array = []
      var increment = 100 / sd.days
      var accum = 0
      for (var i = 1; i < quotes.length; i++) {
        var up = Number(quotes[i].Close > quotes[i - 1].Close)
        if (up) accum += increment
        array.push(up)
        if (array.length > sd.days) accum -= array.shift() * increment
        quotes[i]['Result ' + sd.name] = accum
      }
    }

    CIQ.Studies.calculateMADev = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      if (!quotes) return
      if (quotes.length < sd.days + 1) {
        stx.watermark(
          sd.panel,
          'center',
          'bottom',
          stx.translateIf('Not enough quotes to compute MA Dev ' + sd.chart.dataSet.length),
        )
        return
      }
      var field = sd.inputs.Field
      if (!field || field == 'field') field = 'Close'
      var pts = sd.inputs['Points Or Percent']
      if (!pts) pts = 'Points'
      var maType = sd.inputs['Moving Average Type']
      if (!maType) maType = 'exponential'
      CIQ.Studies.MA(maType, sd.days, field, 0, 'MA', stx, sd)
      var histogram = sd.name + '_hist'
      for (i = sd.days - 1; i < quotes.length; i++) {
        var quote = quotes[i]
        if (pts == 'Points') quote[histogram] = quote[field] - quote['MA ' + sd.name]
        else quote[histogram] = 100 * (quote[field] / quote['MA ' + sd.name] - 1)
      }
    }

    CIQ.Studies.calculateShinohara = function(stx, sd) {
      var quotes = sd.chart.scrubbed
      var weakNum = 0
      var weakDen = 0
      var strongNum = 0
      var strongDen = 0
      for (var i = 0; i < quotes.length; i++) {
        weakNum += quotes[i].High - quotes[i].Close
        weakDen += quotes[i].Close - quotes[i].Low
        if (i > 0) {
          strongNum += quotes[i].High - quotes[i - 1].Close
          strongDen += quotes[i - 1].Close - quotes[i].Low
        }
        if (i >= sd.days) {
          weakNum -= quotes[i - sd.days].High - quotes[i - sd.days].Close
          weakDen -= quotes[i - sd.days].Close - quotes[i - sd.days].Low
          quotes[i]['Weak Ratio ' + sd.name] = (100 * weakNum) / weakDen
          if (i > sd.days) {
            strongNum -= quotes[i - sd.days].High - quotes[i - sd.days - 1].Close
            strongDen -= quotes[i - sd.days - 1].Close - quotes[i - sd.days].Low
            quotes[i]['Strong Ratio ' + sd.name] = (100 * strongNum) / strongDen
          }
        }
      }
    }

    CIQ.Studies.calculateIchimoku = function(stx, sd) {
      var quotes = sd.chart.scrubbed

      function getLLVHHV(p, x) {
        var l = null,
          h = null
        for (var j = x - p + 1; j <= x; j++) {
          if (j < 0) continue
          l = l === null ? quotes[j].Low : Math.min(l, quotes[j].Low)
          h = h === null ? quotes[j].High : Math.max(h, quotes[j].High)
        }
        return [l, h]
      }

      var i, hl
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue

        hl = getLLVHHV(sd.inputs['Conversion Line Period'], i)
        quotes[i]['Conversion Line ' + sd.name] = (hl[1] + hl[0]) / 2

        hl = getLLVHHV(sd.inputs['Base Line Period'], i)
        quotes[i]['Base Line ' + sd.name] = (hl[1] + hl[0]) / 2

        if (i < sd.inputs['Lagging Span Period']) continue
        quotes[i - Number(sd.inputs['Lagging Span Period'])]['Lagging Span ' + sd.name] = quotes[i].Close
      }
      sd.futureA = []
      sd.futureB = []
      for (i = 0; i < quotes.length; i++) {
        hl = getLLVHHV(sd.inputs['Leading Span B Period'], i)
        var blp = Number(sd.inputs['Base Line Period'])
        if (!quotes[i + blp]) {
          sd.futureA.push((quotes[i]['Conversion Line ' + sd.name] + quotes[i]['Base Line ' + sd.name]) / 2)
          sd.futureB.push((hl[1] + hl[0]) / 2)
        } else {
          quotes[i + blp]['Leading Span A ' + sd.name] =
            (quotes[i]['Conversion Line ' + sd.name] + quotes[i]['Base Line ' + sd.name]) / 2
          quotes[i + blp]['Leading Span B ' + sd.name] = (hl[1] + hl[0]) / 2
        }
      }
    }

    CIQ.Studies.displayIchimoku = function(stx, sd, quotes) {
      var parameters = {
        topBand: 'Leading Span A ' + sd.name,
        bottomBand: 'Leading Span B ' + sd.name,
        fillFuture: true,
      }
      stx.chart.context.globalAlpha = 0.3
      CIQ.fillIntersecting(stx, sd, quotes, parameters)
      stx.chart.context.globalAlpha = 1
      CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
    }

    CIQ.Studies.displayDarvas = function(stx, sd, quotes) {
      var levelsColor = sd.outputs.Levels
      if (!levelsColor || levelsColor == 'auto' || CIQ.isTransparent(levelsColor)) levelsColor = stx.defaultColor
      var darvasColor = sd.outputs.Darvas
      if (!darvasColor || darvasColor == 'auto' || CIQ.isTransparent(darvasColor)) darvasColor = stx.defaultColor
      var ghostColor = sd.outputs.Ghost
      if (!ghostColor || ghostColor == 'auto' || CIQ.isTransparent(ghostColor)) ghostColor = stx.defaultColor

      var panel = stx.panels[sd.panel]
      var i, q
      var slyh1, slyl1
      var myWidth = stx.layout.candleWidth - 2
      if (myWidth < 2) myWidth = 1
      stx.startClip(sd.panel)
      if (sd.inputs['Stop Levels']) {
        if (stx.chart.context.setLineDash) {
          stx.chart.context.setLineDash([2, 2])
        }
        stx.chart.context.lineWidth = 2
        stx.chart.context.strokeStyle = levelsColor
        /*  Don't display the take profit levels
			stx.chart.context.beginPath();
			for(i=0;i<quotes.length;i++){
				q=quotes[i];
				q1=quotes[i-1];
				if(!q) continue;
				slyh1=q["Profit "+sd.name]?Math.floor(stx.pixelFromPriceTransform(q["Profit "+sd.name], panel)):null;
				var slyh0=q1 && q1["Profit "+sd.name]?Math.floor(stx.pixelFromPriceTransform(q1["Profit "+sd.name], panel)):null;
				if(slyh1){
					if(q.candleWidth) myWidth=Math.floor(Math.max(1,q.candleWidth));
					var slxh1=Math.floor(stx.pixelFromBar(i, panel.chart)+myWidth/2);
					var slxh0=Math.floor(stx.pixelFromBar(i, panel.chart)-myWidth/2);
					if(slyh0) stx.chart.context.lineTo(slxh0,slyh1);
					else if(i===0) stx.chart.context.moveTo(stx.chart.left,slyh1);
					else stx.chart.context.moveTo(slxh0,slyh1);
					stx.chart.context.lineTo(slxh1,slyh1);
				}
			}
			stx.chart.context.stroke();
			*/
        stx.chart.context.beginPath()
        for (i = 0; i < quotes.length; i++) {
          q = quotes[i]
          q1 = quotes[i - 1]
          if (!q) continue
          slyl1 = q['Loss ' + sd.name] ? Math.floor(stx.pixelFromPriceTransform(q['Loss ' + sd.name], panel)) : null
          var slyl0 =
            q1 && q1['Loss ' + sd.name] ? Math.floor(stx.pixelFromPriceTransform(q1['Loss ' + sd.name], panel)) : null
          if (slyl1) {
            if (q.candleWidth) myWidth = Math.floor(Math.max(1, q.candleWidth))
            var slxl1 = Math.floor(stx.pixelFromBar(i, panel.chart) + myWidth / 2)
            var slxl0 = Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2)
            if (slyl0 && slyl0 >= slyl1) stx.chart.context.lineTo(slxl0, slyl1)
            else if (i === 0) stx.chart.context.moveTo(stx.chart.left, slyl1)
            else stx.chart.context.moveTo(slxl0, slyl1)
            stx.chart.context.lineTo(slxl1, slyl1)
          }
        }
        stx.chart.context.stroke()
        if (stx.chart.context.setLineDash) {
          stx.chart.context.setLineDash([])
        }
        stx.chart.context.lineWidth = 1
      }
      var dx = -10,
        dy,
        dw = 0,
        dh,
        gx = -10,
        gy,
        gw = 0,
        gh
      var inDarvas = false,
        inGhost = false
      var signalWidth = stx.chart.context.measureText('\u25B2').width / 2
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i]) continue
        if (quotes[i]['Spike ' + sd.name]) {
          stx.chart.context.fillStyle = darvasColor
          stx.chart.context.textBaseline = 'bottom'
          var y = stx.pixelFromPriceTransform(quotes[i].High, stx.chart.panel)
          stx.chart.context.fillText('\u25BC', stx.pixelFromBar(i) - signalWidth, y - 5) // down arrow
        }

        if (quotes[i].candleWidth) myWidth = Math.floor(Math.max(1, quotes[i].candleWidth))
        if (quotes[i]['Darvas ' + sd.name]) {
          q = quotes[i]['Darvas ' + sd.name]
          if (q.State == 1 && !inDarvas) {
            dx = Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2)
            dy = Math.floor(stx.pixelFromPriceTransform(q.High, panel))
            dh = Math.floor(stx.pixelFromPriceTransform(q.Low, panel)) - dy
            inDarvas = true
          } else if (q.State === 0) {
            dw = Math.floor(stx.pixelFromBar(i, panel.chart) + myWidth / 2) - dx
            dy = Math.floor(stx.pixelFromPriceTransform(q.High, panel))
            dh = Math.floor(stx.pixelFromPriceTransform(q.Low, panel)) - dy
            stx.chart.context.strokeStyle = darvasColor
            stx.chart.context.fillStyle = darvasColor
            if (!sd.inputs['Stop Levels']) {
              stx.chart.context.strokeRect(dx, dy, dw, dh)
              stx.chart.context.globalAlpha = 0.2
            } else {
              stx.chart.context.globalAlpha = 0.3
            }
            stx.chart.context.fillRect(dx, dy, dw, dh)
            stx.chart.context.globalAlpha = 1
            inDarvas = false
          }
        }
        if (quotes[i]['Ghost ' + sd.name] && sd.inputs['Ghost Boxes']) {
          q = quotes[i]['Ghost ' + sd.name]
          if (q.State == 1 && !inGhost) {
            gx = Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2)
            gy = Math.floor(stx.pixelFromPriceTransform(q.High, panel))
            gw = Math.floor((q.End - q.Start + 1) * stx.layout.candleWidth + myWidth / 2)
            gh = Math.floor(stx.pixelFromPriceTransform(q.Low, panel)) - gy
            inGhost = true
          } else if (q.State === 0) {
            if (q.Start == q.End) gx = Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2)
            gw = Math.floor(stx.pixelFromBar(i, panel.chart) + myWidth / 2) - gx
            gy = Math.floor(stx.pixelFromPriceTransform(q.High, panel))
            gh = Math.floor(stx.pixelFromPriceTransform(q.Low, panel)) - gy
            stx.chart.context.strokeStyle = ghostColor
            stx.chart.context.fillStyle = ghostColor
            if (!sd.inputs['Stop Levels']) {
              stx.chart.context.strokeRect(gx, gy, gw, gh)
              stx.chart.context.globalAlpha = 0.2
            } else {
              stx.chart.context.globalAlpha = 0.3
            }
            stx.chart.context.fillRect(gx, gy, gw, gh)
            stx.chart.context.globalAlpha = 1
            inGhost = false
          }
        }
      }
      if (inDarvas) {
        dw = Math.floor(stx.pixelFromBar(i, panel.chart) + myWidth / 2) - dx
        stx.chart.context.strokeStyle = darvasColor
        stx.chart.context.fillStyle = darvasColor
        if (!sd.inputs['Stop Levels']) {
          stx.chart.context.beginPath()
          stx.chart.context.moveTo(dx + 2 * dw, dy)
          stx.chart.context.lineTo(dx, dy)
          stx.chart.context.lineTo(dx, dy + dh)
          stx.chart.context.lineTo(dx + 2 * dw, dy + dh)
          stx.chart.context.stroke()
          stx.chart.context.globalAlpha = 0.2
        } else {
          stx.chart.context.globalAlpha = 0.3
        }
        stx.chart.context.fillRect(dx, dy, 2 * dw, dh)
        stx.chart.context.globalAlpha = 1
      }
      if (inGhost) {
        stx.chart.context.strokeStyle = ghostColor
        stx.chart.context.fillStyle = ghostColor
        if (!sd.inputs['Stop Levels']) {
          stx.chart.context.strokeRect(gx, gy, gw, gh)
          stx.chart.context.globalAlpha = 0.2
        } else {
          stx.chart.context.globalAlpha = 0.3
        }
        stx.chart.context.fillRect(gx, gy, gw, gh)
        stx.chart.context.globalAlpha = 1
      }
      if (inDarvas || inGhost) {
        if (sd.inputs['Stop Levels']) {
          if (stx.chart.context.setLineDash) {
            stx.chart.context.setLineDash([2, 2])
          }
          stx.chart.context.lineWidth = 2
          stx.chart.context.strokeStyle = levelsColor
          var x = Math.floor(stx.pixelFromBar(i - 1, panel.chart) + myWidth / 2)
          if (slyh1) {
            stx.chart.context.beginPath()
            stx.chart.context.moveTo(x, slyh1)
            stx.chart.context.lineTo(inDarvas ? dx + 2 * dw : gx + gw, slyh1)
            stx.chart.context.stroke()
          }
          if (slyl1) {
            stx.chart.context.beginPath()
            stx.chart.context.moveTo(x, slyl1)
            stx.chart.context.lineTo(inDarvas ? dx + 2 * dw : gx + gw, slyl1)
            stx.chart.context.stroke()
          }
          if (stx.chart.context.setLineDash) {
            stx.chart.context.setLineDash([])
          }
          stx.chart.context.lineWidth = 1
        }
        inDarvas = false
        inGhost = false
      }
      stx.endClip()
    }

    CIQ.Studies.displaySupertrend = function(stx, sd, quotes) {
      var panel = stx.panels[sd.panel]
      function colorFunction(stx, quote, mode) {
        if (quote['Direction ' + sd.name] < 0) return sd.outputs.Downtrend
        else return sd.outputs.Uptrend
      }
      var params = { skipProjections: true, label: stx.preferences.labels }
      var context = stx.chart.context
      context.strokeStyle = colorFunction(stx, quotes[quotes.length - 1])
      context.lineWidth = 2
      if (sd.highlight) context.lineWidth = 3
      stx.plotLineChart(panel, quotes, 'Trend ' + sd.name, params, colorFunction)
      context.lineWidth = 1

      stx.startClip(sd.panel)
      var signalWidth = stx.chart.context.measureText('\u25B2').width / 2
      for (i = 0; i < quotes.length; i++) {
        if (!quotes[i] || !quotes[i - 1]) continue
        if (quotes[i - 1]['Direction ' + sd.name] > quotes[i]['Direction ' + sd.name]) {
          stx.chart.context.fillStyle = sd.outputs.Downtrend
          stx.chart.context.textBaseline = 'bottom'
          var yh = stx.pixelFromPriceTransform(quotes[i].High, stx.chart.panel)
          for (var d = 5; d <= 45; d += 10)
            stx.chart.context.fillText('\u25BC', stx.pixelFromBar(i) - signalWidth, yh - d) // down arrow
        } else if (quotes[i - 1]['Direction ' + sd.name] < quotes[i]['Direction ' + sd.name]) {
          stx.chart.context.fillStyle = sd.outputs.Uptrend
          stx.chart.context.textBaseline = 'top'
          var yl = stx.pixelFromPriceTransform(quotes[i].Low, stx.chart.panel)
          for (var u = 5; u <= 45; u += 10)
            stx.chart.context.fillText('\u25B2', stx.pixelFromBar(i) - signalWidth, yl + u) // up arrow
        }
      }
      stx.endClip()
    }

    CIQ.Studies.displayVWAP = function(stx, sd, quotes) {
      if (sd.error) {
        stx.watermark(sd.panel, { h: 'center', v: 'top', text: stx.translateIf(sd.error), vOffset: 50 })
      } else {
        CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
      }
    }

    CIQ.Studies.displayVsComparisonSymbol = function(stx, sd, quotes) {
      if (!stx.panels[sd.panel].studyQuotes) {
        stx.watermark(sd.panel, 'center', 'bottom', stx.translateIf(sd.study.name + ' Not Available'))
        return
      }
      for (var c = quotes.length - 1; c >= 0; c--) {
        if (quotes[c] && quotes[c][sd.inputs['Comparison Symbol'].toUpperCase()]) {
          if (sd.study.centerline || sd.study.centerline === 0) {
            if (sd.outputs.Gain)
              CIQ.preparePeakValleyFill(stx, quotes, {
                panelName: sd.panel,
                band: 'Result ' + sd.name,
                threshold: sd.study.centerline,
                direction: 1,
                color: sd.outputs.Gain,
              })
            if (sd.outputs.Loss)
              CIQ.preparePeakValleyFill(stx, quotes, {
                panelName: sd.panel,
                band: 'Result ' + sd.name,
                threshold: sd.study.centerline,
                direction: -1,
                color: sd.outputs.Loss,
              })
          }
          CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
          return
        }
      }
    }

    CIQ.Studies.displayMFI = function(stx, sd, quotes) {
      var panel = stx.panels[sd.panel]
      panel.yAxis.min = 0
      //CIQ.Studies.determineMinMax(stx, sd, quotes);
      CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)

      var y = panel.yAxis.bottom

      var myWidth = stx.layout.candleWidth - 2
      if (myWidth < 2) myWidth = 1

      var green = sd.outputs.Green
      var fade = sd.outputs.Fade
      var fake = sd.outputs.Fake
      var squat = sd.outputs.Squat
      stx.canvasColor('stx_histogram')
      stx.chart.context.globalAlpha = 1
      stx.chart.context.fillStyle = '#CCCCCC'
      stx.startClip(sd.panel)
      for (var i = 0; i < quotes.length; i++) {
        var quote = quotes[i]
        if (!quote || !quotes[i - 1]) continue
        if (i === 0);
        else if (quotes[i - 1][sd.name + '_hist'] < quote[sd.name + '_hist']) {
          if (quotes[i - 1].Volume < quote.Volume) stx.chart.context.fillStyle = green
          else if (quotes[i - 1].Volume > quote.Volume) stx.chart.context.fillStyle = fake
        } else if (quotes[i - 1][sd.name + '_hist'] > quote[sd.name + '_hist']) {
          if (quotes[i - 1].Volume < quote.Volume) stx.chart.context.fillStyle = squat
          else if (quotes[i - 1].Volume > quote.Volume) stx.chart.context.fillStyle = fade
        }
        if (quote.candleWidth) myWidth = Math.floor(Math.max(1, quote.candleWidth - 2))
        stx.chart.context.fillRect(
          Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2),
          Math.floor(y),
          Math.floor(myWidth),
          Math.floor(stx.pixelFromPrice(quote[sd.name + '_hist'], panel) - y),
        )
      }
      stx.endClip()
    }

    CIQ.Studies.displayAwesomeOscillator = function(stx, sd, quotes) {
      CIQ.Studies.determineMinMax(stx, sd, quotes)
      var panel = stx.panels[sd.panel]
      panel.yAxis.low = panel.min = Math.min(0, panel.min)
      panel.yAxis.high = panel.max = Math.max(0, panel.max)
      CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)

      var y = stx.pixelFromPrice(0, panel)

      var myWidth = stx.layout.candleWidth - 2
      if (myWidth < 2) myWidth = 1

      var upColor = sd.outputs['Increasing Bar']
      var downColor = sd.outputs['Decreasing Bar']
      stx.canvasColor('stx_histogram')
      stx.chart.context.globalAlpha = 1
      stx.chart.context.fillStyle = '#CCCCCC'
      stx.startClip(sd.panel)
      for (var i = 0; i < quotes.length; i++) {
        var quote = quotes[i]
        if (!quote || !quotes[i - 1]) continue
        if (i === 0);
        else if (quotes[i - 1][sd.name + '_hist'] < quote[sd.name + '_hist']) stx.chart.context.fillStyle = upColor
        else if (quotes[i - 1][sd.name + '_hist'] > quote[sd.name + '_hist']) stx.chart.context.fillStyle = downColor
        if (quote.candleWidth) myWidth = Math.floor(Math.max(1, quote.candleWidth - 2))
        stx.chart.context.fillRect(
          Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2),
          Math.floor(y),
          Math.floor(myWidth),
          Math.floor(stx.pixelFromPrice(quote[sd.name + '_hist'], panel) - y),
        )
      }
      stx.endClip()
    }

    CIQ.Studies.displayGator = function(stx, sd, quotes) {
      CIQ.Studies.determineMinMax(stx, sd, quotes)
      var panel = stx.panels[sd.panel]
      panel.yAxis.low = panel.min = Math.min(0, panel.min)
      panel.yAxis.high = panel.max = Math.max(0, panel.max)
      CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)

      var y = stx.pixelFromPrice(0, panel)

      var myWidth = stx.layout.candleWidth - 2
      if (myWidth < 2) myWidth = 1

      var upColor = sd.outputs['Increasing Bar']
      var downColor = sd.outputs['Decreasing Bar']
      stx.canvasColor('stx_histogram')
      stx.chart.context.globalAlpha = 1
      stx.chart.context.fillStyle = '#CCCCCC'
      stx.startClip(sd.panel)
      for (var i = 1; i < quotes.length; i++) {
        var quote = quotes[i]
        if (!quote || !quotes[i - 1]) continue
        for (var j = 1; j <= 2; j++) {
          if (Math.abs(quotes[i - 1][sd.name + '_hist' + j]) < Math.abs(quote[sd.name + '_hist' + j]))
            stx.chart.context.fillStyle = upColor
          else if (Math.abs(quotes[i - 1][sd.name + '_hist' + j]) > Math.abs(quote[sd.name + '_hist' + j]))
            stx.chart.context.fillStyle = downColor
          if (quote.candleWidth) myWidth = Math.floor(Math.max(1, quote.candleWidth - 2))
          stx.chart.context.fillRect(
            Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2),
            Math.floor(y),
            Math.floor(myWidth),
            Math.floor(stx.pixelFromPrice(quote[sd.name + '_hist' + j], panel) - y),
          )
        }
      }
      stx.endClip()
    }

    CIQ.Studies.displayElderImpulse = function(stx, sd, quotes) {
      stx.chart.customChart = {
        chartType: 'colored_bar',
        colorFunction: function(stx, quote, mode) {
          return quote['Result ' + sd.name]
        },
      }
    }

    CIQ.Studies.displayPivotPoints = function(stx, sd, quotes) {
      sd.noSlopes = !sd.inputs.Continuous
      CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
      if (sd.inputs.Shading) {
        var params = {
          noSlopes: sd.noSlopes,
          label: sd.parameters.label,
          opacity: sd.parameters.opacity ? sd.parameters.opacity : 0.2,
        }
        CIQ.prepareChannelFill(
          stx,
          quotes,
          CIQ.extend(
            {
              panelName: sd.panel,
              topBand: 'Resistance 3 ' + sd.name,
              bottomBand: 'Resistance 2 ' + sd.name,
              color: sd.outputs['Resistance 3'],
            },
            params,
          ),
        )
        CIQ.prepareChannelFill(
          stx,
          quotes,
          CIQ.extend(
            {
              panelName: sd.panel,
              topBand: 'Resistance 2 ' + sd.name,
              bottomBand: 'Resistance 1 ' + sd.name,
              color: sd.outputs['Resistance 2'],
            },
            params,
          ),
        )
        CIQ.prepareChannelFill(
          stx,
          quotes,
          CIQ.extend(
            {
              panelName: sd.panel,
              topBand: 'Resistance 1 ' + sd.name,
              bottomBand: 'Pivot ' + sd.name,
              color: sd.outputs['Resistance 1'],
            },
            params,
          ),
        )
        CIQ.prepareChannelFill(
          stx,
          quotes,
          CIQ.extend(
            {
              panelName: sd.panel,
              topBand: 'Support 1 ' + sd.name,
              bottomBand: 'Pivot ' + sd.name,
              color: sd.outputs['Support 1'],
            },
            params,
          ),
        )
        CIQ.prepareChannelFill(
          stx,
          quotes,
          CIQ.extend(
            {
              panelName: sd.panel,
              topBand: 'Support 2 ' + sd.name,
              bottomBand: 'Support 1 ' + sd.name,
              color: sd.outputs['Support 2'],
            },
            params,
          ),
        )
        CIQ.prepareChannelFill(
          stx,
          quotes,
          CIQ.extend(
            {
              panelName: sd.panel,
              topBand: 'Support 3 ' + sd.name,
              bottomBand: 'Support 2 ' + sd.name,
              color: sd.outputs['Support 3'],
            },
            params,
          ),
        )
      }
    }

    CIQ.Studies.displayAlligator = function(stx, sd, quotes) {
      function drawFractal(highLow, index) {
        //stx.canvasFont("???");
        var y
        if (highLow == 'high') {
          stx.chart.context.fillStyle = stx.defaultColor
          stx.chart.context.textBaseline = 'bottom'
          y = stx.pixelFromPriceTransform(quotes[index].High, stx.chart.panel)
          stx.chart.context.fillText(
            '\u25B2',
            stx.pixelFromBar(i, stx.chart) - stx.chart.context.measureText('\u25B2').width / 2 + 1,
            y - 5,
          ) // up arrow
        } else if (highLow == 'low') {
          stx.chart.context.fillStyle = stx.defaultColor
          stx.chart.context.textBaseline = 'top'
          y = stx.pixelFromPriceTransform(quotes[index].Low, stx.chart.panel)
          stx.chart.context.fillText(
            '\u25BC',
            stx.pixelFromBar(i, stx.chart) - stx.chart.context.measureText('\u25BC').width / 2 + 1,
            y + 5,
          ) // down arrow
        }
      }
      var panel = stx.panels[sd.panel]
      stx.startClip(sd.panel)
      CIQ.Studies.displayIndividualSeriesAsLine(stx, sd, panel, 'Jaw ' + sd.name, quotes)
      CIQ.Studies.displayIndividualSeriesAsLine(stx, sd, panel, 'Lips ' + sd.name, quotes)
      CIQ.Studies.displayIndividualSeriesAsLine(stx, sd, panel, 'Teeth ' + sd.name, quotes)
      if (sd.inputs['Show Fractals']) {
        for (var i = 2; i < quotes.length - 2; i++) {
          if (quotes[i]) {
            if (quotes[i]['Fractal High ' + sd.name]) drawFractal('high', i)
            if (quotes[i]['Fractal Low ' + sd.name]) drawFractal('low', i)
          }
        }
      }
      stx.endClip()
    }

    CIQ.Studies.displayRainbowMA = function(stx, sd, quotes) {
      var panel = stx.panels[sd.panel]
      stx.startClip(sd.panel)
      //just need to display in reverse order from outputMap
      for (var i = 10; i > 0; i--) {
        CIQ.Studies.displayIndividualSeriesAsLine(stx, sd, panel, 'SMA' + i + ' ' + sd.name, quotes)
      }
      stx.endClip()
    }

    CIQ.Studies.displayRainbowOsc = function(stx, sd, quotes) {
      //CIQ.Studies.determineMinMax(stx, sd, quotes);
      var panel = stx.panels[sd.panel]
      panel.min = -100
      panel.max = 100
      panel.yAxis.low = panel.min = Math.min(0, panel.min)
      panel.yAxis.high = panel.max = Math.max(0, panel.max)
      stx.startClip(sd.panel)
      CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)

      var y = stx.pixelFromPrice(0, panel)
      stx.chart.context.strokeStyle = 'transparent'
      stx.plotLineChart(panel, quotes, 'Zero ' + sd.name, { skipTransform: true, label: false })

      var upColor = sd.outputs['Positive Bar']
      stx.chart.context.strokeStyle = upColor
      stx.plotLineChart(panel, quotes, 'Over ' + sd.name, { skipTransform: true, label: false })

      var upgradient = stx.chart.context.createLinearGradient(0, y, 0, panel.yAxis.top)
      upgradient.addColorStop(0, stx.containerColor)
      upgradient.addColorStop(1, upColor)
      CIQ.prepareChannelFill(stx, quotes, {
        color: upgradient,
        opacity: 1,
        panelName: sd.name,
        topBand: 'Over ' + sd.name,
        bottomBand: 'Zero ' + sd.name,
      })

      var downColor = sd.outputs['Negative Bar']
      stx.chart.context.strokeStyle = downColor
      stx.plotLineChart(panel, quotes, 'Under ' + sd.name, { skipTransform: true, label: false })

      var dngradient = stx.chart.context.createLinearGradient(0, y, 0, panel.yAxis.bottom)
      dngradient.addColorStop(0, stx.containerColor)
      dngradient.addColorStop(1, downColor)
      CIQ.prepareChannelFill(stx, quotes, {
        color: dngradient,
        opacity: 1,
        panelName: sd.name,
        topBand: 'Zero ' + sd.name,
        bottomBand: 'Under ' + sd.name,
      })

      var myWidth = stx.layout.candleWidth - 2
      if (myWidth < 2) myWidth = 1

      stx.canvasColor('stx_histogram')
      stx.chart.context.globalAlpha = 1
      stx.chart.context.fillStyle = '#CCCCCC'
      for (var i = 0; i < quotes.length; i++) {
        var quote = quotes[i]
        if (!quote) continue
        if (quote[sd.name + '_hist'] > 0) stx.chart.context.fillStyle = upColor
        else if (quote[sd.name + '_hist'] < 0) stx.chart.context.fillStyle = downColor
        if (quote.candleWidth) myWidth = Math.floor(Math.max(1, quote.candleWidth - 2))
        stx.chart.context.fillRect(
          Math.floor(stx.pixelFromBar(i, panel.chart) - myWidth / 2),
          Math.floor(y),
          Math.floor(myWidth),
          Math.floor(stx.pixelFromPrice(quote[sd.name + '_hist'], panel) - y),
        )
      }
      stx.endClip()
    }

    CIQ.Studies.displayZigZag = function(stx, sd, quotes) {
      if (quotes[0] && quotes[0]['ShadowResult ' + sd.name])
        quotes[0]['Result ' + sd.name] = quotes[0]['ShadowResult ' + sd.name]
      if (quotes[quotes.length - 1] && quotes[quotes.length - 1]['ShadowResult ' + sd.name])
        quotes[quotes.length - 1]['Result ' + sd.name] = quotes[quotes.length - 1]['ShadowResult ' + sd.name]
      CIQ.Studies.displaySeriesAsLine(stx, sd, quotes)
      if (quotes[0] && quotes[0]['ShadowResult ' + sd.name]) delete quotes[0]['Result ' + sd.name]
      if (quotes[quotes.length - 1] && quotes[quotes.length - 1]['ShadowResult ' + sd.name])
        delete quotes[quotes.length - 1]['Result ' + sd.name]
    }

    /**
     * Creates a volume profile underlay for the chart. The underlay is always 25% of the width of the chart.
     * The color is determined by the 'sd.outputs["Bars Color"]' parameter and opacity and border colors can be controlled with the class stx_volume_profile
     */

    CIQ.Studies.displayVolumeProfile = function(stx, sd, quotes) {
      if (!stx || !stx.chart.dataSet) return

      var chart = stx.chart

      var numberBars = sd.parameters.numberOfBars
      var widthPercentage = sd.parameters.widthPercentage
      var displayBorder = sd.parameters.displayBorder
      var displayVolume = sd.parameters.displayVolume
      //set defaults
      if (!numberBars || numberBars < 0) numberBars = 30
      numberBars = Math.ceil(numberBars)
      if (!widthPercentage || widthPercentage < 0) widthPercentage = 0.25
      if (displayBorder !== false) displayBorder = true
      if (displayVolume !== true) displayVolume = false
      //decide how many bars
      var interval = (chart.highValue - chart.lowValue) / numberBars
      if (interval === 0) return
      var priceVolArry = []

      // set the boundries for the bars -- add .1 to the loop to account for possible roundig errors.
      for (var j = chart.lowValue; j < chart.highValue + 0.1; j += interval) {
        priceVolArry.push([j, 0])
      }

      if (priceVolArry.length < 2) {
        // need at least 2 price data points to draw boxes
        stx.watermark('chart', 'center', 'top', stx.translateIf('Not enough data to render the Volume Profile'))
        return
      }

      var volumeMax = 0 // this is the maximum volume after we group them by the bars we will draw
      for (var i = 0; i < quotes.length; i++) {
        var prices = quotes[i]
        if (!prices) continue
        var bottomRange = priceVolArry[0][0]
        var topRange = 0
        for (var x = 1; x < priceVolArry.length; x++) {
          topRange = priceVolArry[x][0]
          if (
            (prices.Low >= bottomRange && prices.Low <= topRange) ||
            (prices.Low < bottomRange && prices.High > topRange) ||
            (prices.High >= bottomRange && prices.High <= topRange)
          ) {
            priceVolArry[x][1] += prices.Volume
            if (priceVolArry[x][1] > volumeMax) volumeMax = priceVolArry[x][1]
          }
          bottomRange = topRange
        }
      }
      if (volumeMax === 0) {
        stx.watermark('chart', 'center', 'top', stx.translateIf('Not enough data to render the Volume Profile'))
        return
      }

      stx.setStyle('stx_volume_profile', 'color', sd.outputs['Bars Color'])
      var context = chart.context
      var fontstyle = 'stx-float-date'
      stx.canvasFont(fontstyle, context)
      var txtHeight = stx.getCanvasFontSize(fontstyle)
      var panel = chart.panel
      var chartBottom = panel.yAxis.bottom
      var barBottom = Math.round(chart.width) - 0.5 //bottom x coordinate for the bar  -- remember bars are sideways so the bottom is on the x axis
      var bartop = 0 // x axis location for the top of the bar
      var barMaxHeight = chart.width * widthPercentage // pixels for highest bar
      var borderColor = stx.canvasStyle('stx_volume_profile').borderColor
      var bordersOn = !CIQ.isTransparent(stx.canvasStyle('stx_volume_profile').borderColor) && displayBorder

      var self = stx

      function drawBars(volumeProfileClass, borders) {
        if (!borders) barBottom -= 2
        self.canvasColor(volumeProfileClass)
        if (CIQ.isIE8) context.globalAlpha = 0.5
        context.beginPath()
        var bottomRange = priceVolArry[0][0]
        var prevTop = barBottom
        for (var i = 1; i < priceVolArry.length; i++) {
          if (priceVolArry[i][1]) {
            barTop = Math.round(barBottom - (priceVolArry[i][1] * barMaxHeight) / volumeMax) - 0.5
            bottomRangePixel = Math.round(self.pixelFromPrice(bottomRange, panel)) + 0.5
            topRangePixel = Math.round(self.pixelFromPrice(priceVolArry[i][0], panel)) + 0.5

            if (!borders) {
              bottomRangePixel -= 0.5
              topRangePixel += 0.5
              barTop += 0.5
            }

            if (bottomRangePixel > chartBottom) bottomRangePixel = chartBottom
            if (topRangePixel < chartBottom) {
              context.moveTo(barBottom, bottomRangePixel)
              context.lineTo(barBottom, topRangePixel)
              context.lineTo(barTop, topRangePixel)
              context.lineTo(barTop, bottomRangePixel)
              if (borders) {
                if (prevTop > barTop || i == 1) context.lineTo(prevTop, bottomRangePixel) // draw down to the top of the previous bar, so that we don't overlap strokes
              } else {
                context.lineTo(barBottom, bottomRangePixel)
                if (displayVolume) {
                  //write the volume on the bar **/
                  var txt = CIQ.condenseInt(priceVolArry[i][1])
                  var barHeight = bottomRangePixel - topRangePixel
                  if (txtHeight <= barHeight - 2) {
                    var width
                    try {
                      width = context.measureText(txt).width
                    } catch (e) {
                      width = 0
                    } // Firefox doesn't like this in hidden iframe
                    context.textBaseline = 'top'
                    var tmpcolor = context.fillStyle
                    context.fillStyle = borderColor
                    context.fillText(txt, barTop - width - 3, topRangePixel + (barHeight / 2 - txtHeight / 2))
                    context.fillStyle = tmpcolor
                  }
                }
              }
            }
            prevTop = barTop
          } else {
            prevTop = barBottom // there will be a missing bar here so the border needs to once again go to the end
          }
          bottomRange = priceVolArry[i][0]
        }
        if (!borders) context.fill()
        context.strokeStyle = borderColor
        if (borders) context.stroke()
        context.closePath()
      }

      drawBars('stx_volume_profile', false)
      if (bordersOn) {
        drawBars('stx_volume_profile', true)
      }

      context.globalAlpha = 1
    }

    CIQ.Studies.studyLibrary = CIQ.extend(CIQ.Studies.studyLibrary, {
      correl: {
        name: 'Correlation Coefficient',
        range: '-1 to 1',
        calculateFN: CIQ.Studies.calculateCorrelationCoefficient,
        seriesFN: CIQ.Studies.displayCorrelationCoefficient,
        outputs: {},
      },
      PMO: {
        name: 'Price Momentum Oscillator',
        calculateFN: CIQ.Studies.calculatePMO,
        inputs: { Field: 'field', 'Smoothing Period': 35, 'Double Smoothing Period': 20, 'Signal Period': 10 },
        outputs: { PMO: 'auto', PMOSignal: '#FF0000' },
        parameters: {
          template: 'studyOverZones',
          init: {
            studyOverZonesEnabled: true,
            studyOverBoughtValue: 2.5,
            studyOverBoughtColor: 'auto',
            studyOverSoldValue: -2.5,
            studyOverSoldColor: 'auto',
          },
        },
        attributes: {
          studyOverBoughtValue: { min: 0, step: '0.05' },
          studyOverSoldValue: { max: 0, step: '0.05' },
        },
      },
      'Rel Vol': {
        name: 'Relative Volatility',
        range: '0 to 100',
        calculateFN: CIQ.Studies.calculateRelativeVolatility,
        inputs: { Field: 'field', 'STD Period': 10, 'Smoothing Period': 14 },
        outputs: { 'Rel Vol': 'auto' },
        centerline: 50,
        parameters: {
          template: 'studyOverZones',
          init: {
            studyOverZonesEnabled: true,
            studyOverBoughtValue: 70,
            studyOverBoughtColor: 'auto',
            studyOverSoldValue: 30,
            studyOverSoldColor: 'auto',
          },
        },
      },
      Awesome: {
        name: 'Awesome Oscillator',
        seriesFN: CIQ.Studies.displayAwesomeOscillator,
        calculateFN: CIQ.Studies.calculateAwesomeOscillator,
        inputs: {},
        outputs: { 'Increasing Bar': '#00DD00', 'Decreasing Bar': '#FF0000' },
      },
      'W MFI': {
        name: 'Market Facilitation Index',
        seriesFN: CIQ.Studies.displayMFI,
        calculateFN: CIQ.Studies.calculateMFI,
        yAxis: { ground: true },
        range: '0 to max',
        inputs: {},
        outputs: { Green: '#8bc176', Fade: '#ab611f', Fake: '#5f7cb8', Squat: '#ffd0cf' },
      },
      'ATR Bands': {
        name: 'ATR Bands',
        overlay: true,
        seriesFN: CIQ.Studies.displayChannel,
        calculateFN: CIQ.Studies.calculateATRBands,
        inputs: { Period: 5, Shift: 3, Field: 'field', 'Channel Fill': true },
        outputs: { 'ATR Bands Top': 'auto', 'ATR Bands Bottom': 'auto', 'ATR Bands Channel': 'auto' },
        attributes: {
          Shift: { min: 0.1, step: 0.1 },
        },
      },
      'STARC Bands': {
        name: 'STARC Bands',
        overlay: true,
        seriesFN: CIQ.Studies.displayChannel,
        calculateFN: CIQ.Studies.calculateSTARCBands,
        inputs: { Period: 15, 'MA Period': 5, Multiplier: 1.3, 'Channel Fill': true },
        outputs: { 'STARC Bands Top': 'auto', 'STARC Bands Median': 'auto', 'STARC Bands Bottom': 'auto' },
        attributes: {
          Multiplier: { min: 0.1, step: 0.1 },
        },
      },
      'ATR Trailing Stop': {
        name: 'ATR Trailing Stops',
        overlay: true,
        seriesFN: CIQ.Studies.displayPSAR2,
        calculateFN: CIQ.Studies.calculateATRStops,
        inputs: { Multiplier: 3, Period: 21, 'Plot Type': ['points', 'squarewave'], HighLow: false },
        outputs: { 'Buy Stops': '#FF0000', 'Sell Stops': '#00FF00' },
        attributes: {
          Multiplier: { min: 0.1, step: 0.1 },
        },
      },
      'Boll %b': {
        name: 'Bollinger %b',
        calculateFN: CIQ.Studies.calculateBollinger,
        inputs: { Field: 'field', Period: 20, 'Standard Deviations': 2, 'Moving Average Type': 'ma' },
        outputs: { '%b': 'auto' },
        parameters: {
          template: 'studyOverZones',
          init: {
            studyOverZonesEnabled: true,
            studyOverBoughtValue: 100,
            studyOverBoughtColor: 'auto',
            studyOverSoldValue: 0,
            studyOverSoldColor: 'auto',
          },
        },
        attributes: {
          'Standard Deviations': { min: 0.1, step: 0.1 },
        },
      },
      'Boll BW': {
        name: 'Bollinger Bandwidth',
        calculateFN: CIQ.Studies.calculateBollinger,
        inputs: { Field: 'field', Period: 20, 'Standard Deviations': 2, 'Moving Average Type': 'ma' },
        outputs: { Bandwidth: 'auto' },
        attributes: {
          'Standard Deviations': { min: 0.1, step: 0.1 },
        },
      },
      'Donchian Width': {
        name: '',
        calculateFN: CIQ.Studies.calculateMaxHighMinLow,
        inputs: { 'High Period': 20, 'Low Period': 20 },
      },
      'Rel Vig': {
        name: 'Relative Vigor Index',
        seriesFN: CIQ.Studies.displayHistogramWithSeries,
        calculateFN: CIQ.Studies.calculateRelativeVigor,
        inputs: { Period: 10 },
        outputs: {
          'Rel Vig': 'auto',
          RelVigSignal: '#FF0000',
          'Increasing Bar': '#00DD00',
          'Decreasing Bar': '#FF0000',
        },
      },
      'Elder Impulse': {
        name: 'Elder Impulse System',
        calculateFN: CIQ.Studies.calculateElderImpulse,
        seriesFN: CIQ.Studies.displayElderImpulse,
        customRemoval: true,
        underlay: true,
        inputs: {},
        outputs: { Bullish: '#8BC176', Bearish: '#DD3E39', Neutral: '#5F7CB8' },
        removeFN: function(stx, sd) {
          stx.chart.customChart = null
        },
      },
      'Pivot Points': {
        name: 'Pivot Points',
        overlay: true,
        seriesFN: CIQ.Studies.displayPivotPoints,
        calculateFN: CIQ.Studies.calculatePivotPoints,
        inputs: { Type: ['standard', 'fibonacci'], Continuous: false, Shading: false },
        outputs: {
          Pivot: 'auto',
          'Resistance 1': 'rgb(184,44,11)',
          'Support 1': 'rgb(105,145,88)',
          'Resistance 2': 'rgb(227,100,96)',
          'Support 2': 'rgb(179,217,135)',
          'Resistance 3': 'rgb(255,208,207)',
          'Support 3': 'rgb(211,232,174)',
        },
        parameters: {
          init: { opacity: 0.2 },
        },
      },
      VWAP: {
        name: 'VWAP',
        overlay: true,
        seriesFN: CIQ.Studies.displayVWAP,
        calculateFN: CIQ.Studies.calculateVWAP,
        inputs: {},
        outputs: { VWAP: '#FF0000' },
      },
      Alligator: {
        name: 'Alligator',
        overlay: true,
        seriesFN: CIQ.Studies.displayAlligator,
        calculateFN: CIQ.Studies.calculateAlligator,
        inputs: {
          'Jaw Period': 13,
          'Jaw Offset': 8,
          'Teeth Period': 8,
          'Teeth Offset': 5,
          'Lips Period': 5,
          'Lips Offset': 3,
          'Show Fractals': false,
        },
        outputs: { Jaw: '#0000FF', Teeth: '#FF0000', Lips: '#00DD00' },
      },
      Gator: {
        name: 'Gator Oscillator',
        seriesFN: CIQ.Studies.displayGator,
        calculateFN: CIQ.Studies.calculateAlligator,
        inputs: {
          'Jaw Period': 13,
          'Jaw Offset': 8,
          'Teeth Period': 8,
          'Teeth Offset': 5,
          'Lips Period': 5,
          'Lips Offset': 3,
        },
        outputs: { 'Increasing Bar': '#00DD00', 'Decreasing Bar': '#FF0000' },
        centerline: 0,
      },
      'Ichimoku Clouds': {
        name: 'Ichimoku Clouds',
        overlay: true,
        range: 'bypass',
        calculateFN: CIQ.Studies.calculateIchimoku,
        seriesFN: CIQ.Studies.displayIchimoku,
        inputs: {
          'Conversion Line Period': 9,
          'Base Line Period': 26,
          'Leading Span B Period': 52,
          'Lagging Span Period': 26,
        },
        outputs: {
          'Conversion Line': '#0000FF',
          'Base Line': '#FF0000',
          'Leading Span A': '#00FF00',
          'Leading Span B': '#FF0000',
          'Lagging Span': '#808000',
        },
      },
      'P Rel': {
        name: 'Price Relative',
        initializeFN: CIQ.Studies.initPriceRelative,
        seriesFN: CIQ.Studies.displayVsComparisonSymbol,
        calculateFN: CIQ.Studies.calculatePriceRelative,
        inputs: { 'Comparison Symbol': 'SPY' },
        deferUpdate: true,
      },
      'Perf Idx': {
        name: 'Performance Index',
        centerline: 1,
        seriesFN: CIQ.Studies.displayVsComparisonSymbol,
        calculateFN: CIQ.Studies.calculatePerformance,
        inputs: { Period: 120, 'Comparison Symbol': 'SPY' },
        outputs: { Result: 'auto', Gain: '#00DD00', Loss: '#FF0000' },
        deferUpdate: true,
      },
      Beta: {
        name: 'Beta',
        centerline: 1,
        seriesFN: CIQ.Studies.displayVsComparisonSymbol,
        calculateFN: CIQ.Studies.calculateBeta,
        inputs: { Period: 20, 'Comparison Symbol': 'SPY' },
        deferUpdate: true,
      },
      Ulcer: {
        name: 'Ulcer Index',
        calculateFN: CIQ.Studies.calculateUlcerIndex,
        inputs: { Field: 'field', Period: 14 },
      },
      'Bal Pwr': {
        name: 'Balance of Power',
        range: '-1 to 1',
        calculateFN: CIQ.Studies.calculateBalanceOfPower,
        inputs: { Period: 14, 'Moving Average Type': 'ma' },
      },
      'Trend Int': {
        name: 'Trend Intensity Index',
        calculateFN: CIQ.Studies.calculateTrendIntensity,
        range: '0 to 100',
        inputs: { Field: 'field', Period: 14, 'Signal Period': 9 },
        outputs: { TII: 'auto', Signal: '#FF0000' },
        parameters: {
          template: 'studyOverZones',
          init: {
            studyOverZonesEnabled: true,
            studyOverBoughtValue: 80,
            studyOverBoughtColor: 'auto',
            studyOverSoldValue: 20,
            studyOverSoldColor: 'auto',
          },
        },
      },
      Choppiness: {
        name: 'Choppiness Index',
        calculateFN: CIQ.Studies.calculateChoppiness,
        centerline: 50,
        parameters: {
          template: 'studyOverZones',
          init: {
            studyOverZonesEnabled: true,
            studyOverBoughtValue: 61.8,
            studyOverBoughtColor: 'auto',
            studyOverSoldValue: 38.2,
            studyOverSoldColor: 'auto',
          },
        },
        attributes: {
          studyOverBoughtValue: { min: 50, step: '0.1' },
          studyOverSoldValue: { max: 50, step: '0.1' },
        },
      },
      Disparity: {
        name: 'Disparity Index',
        calculateFN: CIQ.Studies.calculateDisparity,
        inputs: { Field: 'field', Period: 14, 'Moving Average Type': 'ma' },
      },
      'Rainbow MA': {
        name: 'Rainbow Moving Average',
        overlay: true,
        calculateFN: CIQ.Studies.calculateRainbow,
        seriesFN: CIQ.Studies.displayRainbowMA,
        inputs: { Field: 'field', Period: 2, Underlay: false },
        outputs: {
          SMA1: '#FF0000',
          SMA2: '#FF7F00',
          SMA3: '#FFFF00',
          SMA4: '#7FFF00',
          SMA5: '#00FF7F',
          SMA6: '#00FFFF',
          SMA7: '#007FFF',
          SMA8: '#0000FF',
          SMA9: '#7F00FF',
          SMA10: '#FF00FF',
        },
      },
      'Rainbow Osc': {
        name: 'Rainbow Oscillator',
        calculateFN: CIQ.Studies.calculateRainbow,
        seriesFN: CIQ.Studies.displayRainbowOsc,
        inputs: { Field: 'field', Period: 2, 'HHV/LLV Lookback': 10 },
        outputs: { 'Positive Bar': '#00DD00', 'Negative Bar': '#FF0000' },
      },
      'Pring KST': {
        name: "Pring's Know Sure Thing",
        calculateFN: CIQ.Studies.calculateKST,
        inputs: {
          Field: 'field',
          'Lightest Rate of Change Period': 10,
          'Lightest SMA Period': 10,
          'Light Rate of Change Period': 15,
          'Light SMA Period': 10,
          'Heavy Rate of Change Period': 20,
          'Heavy SMA Period': 10,
          'Heaviest Rate of Change Period': 30,
          'Heaviest SMA Period': 15,
          'Signal Period': 9,
        },
        outputs: { KST: '#00DD00', KSTSignal: '#FF0000' },
      },
      'Pring Sp-K': {
        name: "Pring's Special K",
        calculateFN: CIQ.Studies.calculateSpecialK,
        inputs: { Field: 'field', Interval: ['daily', 'weekly'] },
      },
      Darvas: {
        name: 'Darvas Box',
        underlay: true,
        calculateFN: CIQ.Studies.calculateDarvas,
        seriesFN: CIQ.Studies.displayDarvas,
        inputs: {
          'ATH Lookback Period': 100,
          'Exit Field': ['close', 'high/low'],
          'Ghost Boxes': true,
          'Stop Levels': false,
          'Level Offset': 0.01,
          'Price Minimum': 5,
          'Volume Spike': false,
          'Volume % of Avg': 400,
        },
        outputs: { Darvas: '#5F7CB8', Ghost: '#699158', Levels: 'auto' },
        customRemoval: true,
        attributes: {
          'Price Minimum': { min: 0.01, step: 0.01 },
        },
      },
      Supertrend: {
        name: 'Supertrend',
        overlay: true,
        seriesFN: CIQ.Studies.displaySupertrend,
        calculateFN: CIQ.Studies.calculateSupertrend,
        inputs: { Period: 7, Multiplier: 3 },
        outputs: { Uptrend: '#8cc176', Downtrend: '#b82c0c' },
        attributes: {
          Multiplier: { min: 0.1, step: 0.1 },
        },
      },
      'vol profile': {
        name: 'Volume Profile',
        overlay: true,
        seriesFN: CIQ.Studies.displayVolumeProfile,
        calculateFN: null,
        inputs: {},
        outputs: { 'Bars Color': '#b64a96' },
        customRemoval: true,
        parameters: {
          init: { displayBorder: true, displayVolume: false, numberOfBars: 30, widthPercentage: 0.25 },
        },
      },
      Vortex: {
        name: 'Vortex Indicator',
        calculateFN: CIQ.Studies.calculateVortex,
        centerline: 1,
        outputs: { '+VI': '#00FF00', '-VI': '#FF0000' },
        parameters: {
          template: 'studyOverZones',
          init: {
            studyOverZonesEnabled: true,
            studyOverBoughtValue: 1.1,
            studyOverBoughtColor: 'auto',
            studyOverSoldValue: 0.9,
            studyOverSoldColor: 'auto',
          },
        },
        attributes: {
          studyOverBoughtValue: { min: 1, step: '0.01' },
          studyOverSoldValue: { max: 1, step: '0.01' },
        },
      },
      ZigZag: {
        name: 'ZigZag',
        overlay: true,
        seriesFN: CIQ.Studies.displayZigZag,
        calculateFN: CIQ.Studies.calculateZigZag,
        inputs: { 'Distance(%)': 10 },
        parameters: {
          init: { label: false },
        },
        attributes: {
          'Distance(%)': { min: 0.1, step: 0.1 },
        },
      },
      PSY: {
        name: 'Psychological Line',
        range: '0 to 100',
        calculateFN: CIQ.Studies.calculatePsychologicalLine,
        inputs: { Period: 20 },
      },
      'MA Dev': {
        name: 'Moving Average Deviation',
        calculateFN: CIQ.Studies.calculateMADev,
        seriesFN: CIQ.Studies.displayHistogramWithSeries,
        inputs: { Field: 'field', Period: 12, 'Moving Average Type': 'ma', 'Points Or Percent': ['Points', 'Percent'] },
        outputs: { 'Increasing Bar': '#00DD00', 'Decreasing Bar': '#FF0000' },
      },
      Shinohara: {
        name: 'Shinohara Intensity Ratio',
        calculateFN: CIQ.Studies.calculateShinohara,
        inputs: { Period: 26 },
        outputs: { 'Strong Ratio': '#E99B54', 'Weak Ratio': '#5F7CB8' },
      },
    })

    return _exports
  }

  var __js_core_core_ =
    // -------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc
    // -------------------------------------------------------------------------------------------
    function(_exports, utility) {
      var CIQ = _exports.CIQ,
        $$ = _exports.$$,
        $$$ = _exports.$$$

      /* TOC()************* MARKET DATE/TIME FORMATTING ************** */

      /**
       * Gets the current time in Eastern Time Zone. This can be used as a convenience for determining open and closing times of US markets.
       * @return {date} JavaScript Date representing the time in Eastern Time Zone
       * @memberOf CIQ
       */
      CIQ.getETDateTime = function() {
        var d = new Date()
        return CIQ.convertTimeZone(new Date(d.getTime() + d.getTimezoneOffset() * 60000), 'UTC', 'America/New_York')
      }

      /**
       * Converts a JavaScript date from Eastern Time Zone to the browser's local time zone. Daylight Savings Time is hard coded. @see CIQ.getETDateTime
       * @param  {date} est JavaScript Date object representing a date/time in eastern time zone
       * @return {date}     JavaScript Date object converted to browser's local time zone
       * @memberOf CIQ
       */
      CIQ.fromET = function(est) {
        var d = new Date()
        //var localTime = d.getTime();
        //var localOffset = d.getTimezoneOffset() * 60000;
        //var utc = localTime + localOffset;
        var offset = 4
        if (
          d.getMonth() < 2 ||
          (d.getMonth() == 2 && d.getDate() < 11) ||
          (d.getMonth() > 10 || (d.getMonth() == 10 && d.getDate() >= 4))
        )
          offset = 5
        var localTime = est.getTime() + 3600000 * offset
        var nd = new Date(localTime)
        return nd
      }

      /**
       * Converts a future month to the month index or vice versa.  Month indexes begin with 1 for January
       * @param  {char} x 	The value to convert.  If numeric, will convert to Future month letter.  If Alpha, will convert to month index.
       * @return {char} 		Converted value
       * @memberOf CIQ
       */
      CIQ.convertFutureMonth = function(x) {
        var y = x.toString()
        if (y.length <= 0 || y.length > 2) return ''
        switch (y) {
          case '1':
            return 'F'
          case '2':
            return 'G'
          case '3':
            return 'H'
          case '4':
            return 'J'
          case '5':
            return 'K'
          case '6':
            return 'M'
          case '7':
            return 'N'
          case '8':
            return 'Q'
          case '9':
            return 'U'
          case '10':
            return 'V'
          case '11':
            return 'X'
          case '12':
            return 'Z'
          case 'F':
            return '1'
          case 'G':
            return '2'
          case 'H':
            return '3'
          case 'J':
            return '4'
          case 'K':
            return '5'
          case 'M':
            return '6'
          case 'N':
            return '7'
          case 'Q':
            return '8'
          case 'U':
            return '9'
          case 'V':
            return '10'
          case 'X':
            return '11'
          case 'Z':
            return '12'
        }
        return y
      }

      /* TOC()************* MONEY FORMATTING ************** */

      /**
       * Prints out a number in US Dollar monetary representation
       * @param  {number} val      The amount
       * @param  {number} [decimals=2] Optional number of decimal places.
       * @param  {string} [currency] Optional currency designation.  If omitted, will use $.
       * @return {string}          US Dollar monetary representation
       * // Returns $100.00
       * CIQ.money(100, 2);
       * @memberOf CIQ
       */
      CIQ.money = function(val, decimals, currency) {
        if (!currency) currency = '$'
        if (currency.length == 3) currency += ' '
        if (!decimals && decimals !== 0) decimals = 2
        return currency + CIQ.commas((Math.round(val * 10000) / 10000).toFixed(decimals))
      }

      /**
       * Converts a currency code from ISO to char
       * @param  {string} code      The string to convert, e.g. USD
       * @return {string}          The converted string, e.g. $
       * @memberOf CIQ
       */
      CIQ.convertCurrencyCode = function(code) {
        var codes = {
          JPY: '¥',
          USD: '$',
          AUD: 'A$',
          BRL: 'R$',
          CAD: 'CA$',
          CNY: 'CN¥',
          CZK: 'Kč',
          DKK: 'kr',
          EUR: '€',
          GBP: '£',
          HKD: 'HK$',
          HUF: 'Ft',
          ILS: '₪',
          INR: '₹',
          KRW: '₩',
          MXN: 'MX$',
          NOK: 'kr',
          NZD: 'NZ$',
          PLN: 'zł',
          RUB: 'руб',
          SAR: '﷼',
          SEK: 'kr',
          SGD: 'S$',
          THB: '฿',
          TRY: '₺',
          TWD: 'NT$',
          VND: '₫',
          XAF: 'FCFA',
          XCD: 'EC$',
          XOF: 'CFA',
          XPF: 'CFPF',
          ZAR: 'R',
        }
        var rt = codes[code]
        if (rt) return rt
        else return code
      }

      /**
       * Returns a string representation of a number with commas in thousands, millions or billions places. Note that this function does
       * not handle values with more than 3 decimal places!!!
       * @param  {number} val The value
       * @return {string}     The result with commas
       * @example
       * // Returns 1,000,000
       * CIQ.commas(1000000);
       * @memberOf CIQ
       */
      CIQ.commas = function(val) {
        return val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',')
      }

      /* TOC()************* EVENT HANDLING ************** */

      /**
       * User friendly alerts. The charting engine always uses this instead of alert() for warning or error messages. This
       * method can be overriden as required by your user interface.
       * @param  {string} text Alert message
       * @example
       * // Override with a friendlier alert mechanism!
       * CIQ.alert=function(text){
       * 	doSomethingElse(text);
       * }
       * @memberOf CIQ
       */
      CIQ.alert = function(text) {
        alert(text)
      }

      /**
       * Returns true if a point, in absolute screen position, is within an element
       * @param  {object} node A valid DOM element to check whether the point overlaps
       * @param  {number} x    Absolute screen X position of point
       * @param  {number} y    Absolute screen Y position of pointer
       * @return {boolean}      True if the point lies inside of the DOM element
       * @memberOf CIQ
       */
      CIQ.withinElement = function(node, x, y) {
        var rect = node.getBoundingClientRect()
        if (x <= rect.left) return false
        if (y <= rect.top) return false
        if (x >= rect.left + node.offsetWidth) return false
        if (y >= rect.top + node.offsetHeight) return false
        return true
      }

      /**
       * Used in conjunction, safeMouseOut and safeMouseOver ensure just a single event when the mouse moves
       * in or out of an element. This is important because simple mouseout events will fire when the mouse
       * crosses boundaries *within* an element. Note that this function will do nothing on a touch device where
       * mouseout is not a valid operation.
       * @param  {object} node A valid DOM element
       * @param  {function} fc   Function to call when the mouse has moved out
       * @memberOf CIQ
       */
      CIQ.safeMouseOut = function(node, fc) {
        function closure(node, fc) {
          return function(e) {
            if (typeof e.pageX == 'undefined') {
              e.pageX = e.clientX
              e.pageY = e.clientY
            }
            if (CIQ.withinElement(node, e.pageX, e.pageY)) {
              return
            }
            node.stxMouseOver = false
            fc(e)
          }
        }
        node.addEventListener('mouseout', closure(node, fc))
      }

      /**
       * This method is guaranteed to only be called once when a user mouses over an object. @see CIQ#safeMouseOut
       * @param  {object} node A valid DOM element
       * @param  {function} fc   Function to call when mouse moves over the object
       * @memberOf CIQ
       */
      CIQ.safeMouseOver = function(node, fc) {
        function closure(node, fc) {
          return function(e) {
            if (typeof e.pageX == 'undefined') {
              e.pageX = e.clientX
              e.pageY = e.clientY
            }
            if (CIQ.withinElement(node, e.pageX, e.pageY)) {
              if (node.stxMouseOver) return
              node.stxMouseOver = true
              fc(e)
            }
          }
        }
        node.addEventListener('mouseover', closure(node, fc))
      }

      /**
       * Converts an object to emit "stxtap" events. This uses {@link CIQ#safeClickTouch}. You should use addEventListener("tap") to receive the events.
       * @param {HTMLElement} div The element to convert
       * @param {Object} [params] Optional parameters to pass to {@link CIQ#safeClickTouch}
       * @param {Boolean} [params.stopPropagation=false] If set to true then propagation will be stopped
       * @since  04-2015
       */
      CIQ.installTapEvent = function(div, params) {
        var fc = function(e) {
          var ev = document.createEvent('Event')
          ev.initEvent('stxtap', true, true)
          if (typeof e.pageX == 'undefined') {
            e.pageX = e.clientX
            e.pageY = e.clientY
          }
          ev.pageX = e.pageX
          ev.pageY = e.pageY
          e.target.dispatchEvent(ev)
          if (params && params.stopPropagation) e.stopPropagation()
        }
        CIQ.safeClickTouch(div, fc, params)
      }
      /**
       * Use this instead of onclick or ontouch events. This function will automatically use the quickest available
       * but also protect against being called twice.
       * By default any previous safeClickTouch listeners will be cleared (to allow re-use of the element).
       * @param {object} div The DOM element to attach an event
       * @param {Function} fc The function to call when the object is pressed
       * @param {object} params Parameters to drive behavior.
       * @param {object} [params.safety] An optional object, generated from a CIQ.safeDrag association to prevent the click from being triggered when a drag operation is released
       * @param {boolean} [params.allowMultiple=false] If set then multiple click events can be associated with the node
       * @param {boolean} [params.preventUnderlayClick=true] By default prevents an underlaying element from being "clicked" on a touch device 400ms after the overlay was tapped. Set to false for input fields, or any div containing input fields (body)
       * @param {boolean} [params.absorbDownEvent=true] Ensures that a mousedown, pointerdown, touchstart event doesn't get passed to the parent.
       * @memberOf CIQ
       * @since 11/01/2015 Removed timers in favor of a new algorithm. This algorithm allows only the first event to fire from a UI interaction to execute the fc function.
       */
      CIQ.safeClickTouch = function(div, fc, params) {
        if (!params) params = {}

        if (!params.allowMultiple) CIQ.clearSafeClickTouches(div)
        if (params.preventUnderlayClick !== false) params.preventUnderlayClick = true
        if (params.absorbDownEvent !== false) params.absorbDownEvent = true
        params.allowAnotherDevice = 0
        params.registeredClick = false
        function closure(which, params) {
          return function(e) {
            if (!CIQ.safeClickTouchEvent) {
              if (!e.target.stxPressed) return // is this up/end event related to a down/start event?
              var timeSincePressed = e.target.stxPressed.time
              e.target.stxPressed = null
              if (timeSincePressed + 1000 < new Date().getTime()) return //allow no more than 1 second for click
            }
            if (params.safety && params.safety.recentlyDragged) return
            if (!e) e = event
            if ((e.which && e.which >= 2) || (e.button && e.button >= 2)) return // ignore right clicks
            if (params.preventUnderlayClick) {
              e.preventDefault()
            } else {
              // prevent touch and mouse from being clicked when we can't use preventDefault
              if (params.lastType != which && Date.now() < params.allowAnotherDevice) return
              params.lastType = which
              params.allowAnotherDevice = Date.now() + 1000 // 1 Second then not a coat tail mouse click
            }
            fc(e)
          }
        }
        function isClick(down) {
          return function(e) {
            if (down)
              e.target.stxPressed = {
                time: new Date().getTime(),
                x: e.clientX,
                y: e.clientY,
              }
            else if (e.target.stxPressed) {
              //allow no more than 4 pixel distance movement
              if (Math.pow(e.target.stxPressed.x - e.clientX, 2) + Math.pow(e.target.stxPressed.y - e.clientY, 2) > 16)
                e.target.stxPressed = null
            }
          }
        }
        var safeClickTouchEvents = div.safeClickTouchEvents
        if (!safeClickTouchEvents) safeClickTouchEvents = div.safeClickTouchEvents = []
        var fc1 = closure('mouseup', params)
        var fc2 = closure('touchend', params)
        var fc3 = closure('pointerup', params)
        var f = function(e) {
          e.stopPropagation()
        }
        var eventHolder = {}
        if (CIQ.safeClickTouchEvent) {
          // global override for which event to use, for instance if you want to force use of "click" or "tap"
          var fc4 = closure(CIQ.safeClickTouchEvent, params)
          div.addEventListener(CIQ.safeClickTouchEvent, fc4)
          eventHolder[CIQ.safeClickTouchEvent] = fc4
          safeClickTouchEvents.push(eventHolder)
        } else if ('onpointerup' in document) {
          // Internet Explorer can always use pointerup safely
          div.addEventListener('pointerdown', isClick(true))
          div.addEventListener('pointermove', isClick())
          div.addEventListener('pointerup', fc3)
          eventHolder.pointerup = fc3
          if (params.absorbDownEvent) {
            div.addEventListener('pointerdown', f)
            eventHolder.pointerdown = f
          }
          safeClickTouchEvents.push(eventHolder)
        } else {
          // all in one computers can support both of these under Chrome/FF!
          div.addEventListener('mousedown', isClick(true))
          div.addEventListener('mousemove', isClick())
          div.addEventListener('touchstart', isClick(true))
          div.addEventListener('touchmove', isClick())
          div.addEventListener('mouseup', fc1)
          div.addEventListener('touchend', fc2)
          eventHolder.mouseup = fc1
          eventHolder.touchend = fc2
          if (params.absorbDownEvent) {
            div.addEventListener('mousedown', f)
            eventHolder.mousedown = f
            div.addEventListener('touchstart', f)
            eventHolder.touchstart = f
          }
          safeClickTouchEvents.push(eventHolder)
        }
      }

      /**
       * Clears all safeClickTouch events from a DOM element.
       * @param  {object} div The DOM element to clear events
       * @memberOf CIQ
       */
      CIQ.clearSafeClickTouches = function(div) {
        var safeClickTouchEvents = div.safeClickTouchEvents
        if (!safeClickTouchEvents) return
        for (var i = 0; i < safeClickTouchEvents.length; i++) {
          var fc = safeClickTouchEvents[i]
          for (var e in fc) {
            var f = fc[e]
            div.removeEventListener(e, f)
          }
        }
        div.safeClickTouchEvents = null
      }

      /**
       * Safe function to handle dragging of objects on the screen. This method is cross-device aware and can handle mouse or touch drags.
       * This method does not actually move the objects but provides callbacks that explain when drag operations
       * begin and cease, and what movements are made during the drag. Callbacks should be used to move the actual objects
       * (if it is desired to move objects during a drag operation). For convenience, displacementX and displacementY are added to callback events
       * to indicate the distance from the original starting point of the drag.
       * A "safety" object is returned which can optionally be passed into CIQ.safeClickTouch to prevent errant click events
       * from being triggered when a user lets go of a drag
       * @param  {object} div    The draggable DOM element
       * @param  {function} [fcDown] Callback function when a drag operation begins. Receives an event object.
       * @param  {function} [fcMove] Callback function when a drag move occurs. Receives an event object.
       * @param  {function} [fcUp]   Callback function when the drag operation ends. Receives an event object.
       * @return {object}        Safety object which can be passed to CIQ.safeClickTouch
       * @memberOf CIQ
       */
      CIQ.safeDrag = function(div, fcDown, fcMove, fcUp) {
        var resetMS = 100 // To avoid multiple down events only one can occur per 100ms
        var registeredClick = false
        var startX = 0,
          startY = 0
        var safety = {
          recentlyDragged: false,
        }
        function closure(moveEvent) {
          var fmap = {
            mousedown: { move: 'mousemove', up: 'mouseup' },
            pointerdown: { move: 'pointermove', up: 'pointerup' },
            touchstart: { move: 'touchmove', up: 'touchend' },
          }
          function pageX(e) {
            if (e.touches) {
              if (e.touches.length >= 1) {
                return e.touches[0].pageX
              } else if (e.changedTouches && e.changedTouches.length >= 1) {
                return e.changedTouches[0].pageX
              }
            }
            if (typeof e.pageX == 'undefined') {
              return e.clientX
            }
            return e.pageX
          }
          function pageY(e) {
            if (e.touches) {
              if (e.touches.length >= 1) {
                return e.touches[0].pageY
              } else if (e.changedTouches && e.changedTouches.length >= 1) {
                return e.changedTouches[0].pageY
              }
            }
            if (typeof e.pageY == 'undefined') {
              return e.clientY
            }
            return e.pageY
          }
          return function(e) {
            if (registeredClick) return
            registeredClick = true
            CIQ.ChartEngine.ignoreTouch = true
            var moveFC = function(e) {
              if (e && e.preventDefault) e.preventDefault()
              safety.recentlyDragged = true
              e.displacementX = pageX(e) - startX
              e.displacementY = pageY(e) - startY
              fcMove(e) // Call the move event
            }
            if (fcMove) document.body.addEventListener(fmap[moveEvent].move, moveFC)
            document.body.addEventListener(fmap[moveEvent].up, function(e) {
              // Create an up listener on the body
              CIQ.ChartEngine.ignoreTouch = false
              if (fcMove) document.body.removeEventListener(fmap[moveEvent].move, moveFC) // Remove the move listener since our move is now complete
              document.body.removeEventListener(fmap[moveEvent].up, arguments.callee) // Remove the up listener since our move is now complete
              e.displacementX = pageX(e) - startX
              e.displacementY = pageY(e) - startY
              if (fcUp) fcUp(e) // Call the up event
              setTimeout(
                (function(safety) {
                  return function() {
                    safety.recentlyDragged = false
                  }
                })(safety),
                50,
              ) // Prevent errant clicks from touch letting go
            })
            setTimeout(function() {
              registeredClick = false
            }, resetMS)
            startX = pageX(e)
            startY = pageY(e)
            if (fcDown) fcDown(e)
          }
        }
        div.addEventListener('mousedown', closure('mousedown'))
        div.addEventListener('pointerdown', closure('pointerdown'))
        div.addEventListener('touchstart', closure('touchstart'))
        return safety
      }

      if (CIQ.isSurface) {
        CIQ.gesture = new MSGesture()
        CIQ.gesture.target = document.body
        CIQ.gesturePointerId = null
      }

      /**
       * Captures enter key events. Also clears the input box on escape key.
       * @param {object} node The DOM element to attach the event to. Should be a text input box.
       * @param {Function} cb Callback function when enter key is pressed.
       * @memberOf CIQ
       */

      CIQ.inputKeyEvents = function(node, cb) {
        node.addEventListener(
          'keyup',
          function(e) {
            var key = window.event ? event.keyCode : e.keyCode
            switch (key) {
              case 13:
                cb()
                break
              case 27:
                node.value = ''
                break
              default:
                break
            }
          },
          false,
        )
      }

      /* TOC()************* SCREEN/CURSOR POSITIONING ************** */

      /**
       * Fixes screen scroll. This can occur when the keyboard opens on an ipad or iphone.
       * @memberOf CIQ
       */
      CIQ.fixScreen = function() {
        window.scrollTo(0, 0)
      }

      /**
       * Sets the position of the cursor within a textarea box. This is used for instance to position the cursor at the
       * end of the text that is in a textarea.
       * @param {object} ctrl A valid textarea DOM element
       * @param {number} pos  The position in the text area to position
       * @memberOf CIQ
       */
      CIQ.setCaretPosition = function(ctrl, pos) {
        ctrl.style.zIndex = 5000
        if (ctrl.setSelectionRange) {
          CIQ.focus(ctrl)
          try {
            ctrl.setSelectionRange(pos, pos)
          } catch (e) {}
        } else if (ctrl.createTextRange) {
          var range = ctrl.createTextRange()
          range.collapse(true)
          range.moveEnd('character', pos)
          range.moveStart('character', pos)
          range.select()
        }
      }

      /**
       * Sets the value of an input box only if it is not active. This prevents an input box from changing underneath
       * a user, which can be extremely frustrating on touch devices.
       * @param {HTMLElement} el    The input element
       * @param {string} value The value to set
       */
      CIQ.setValueIfNotActive = function(el, value) {
        if (document.activeElement == el) return
        el.value = value
      }

      /**
       * Closes the keyboard on a touch device by blurring any active input elements.
       * @param {HTMLElement} newFocus optional element to change focus to
       * @memberOf CIQ
       */
      CIQ.hideKeyboard = function(newFocus) {
        var element = document.activeElement
        if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') {
          element.blur()
          window.focus()
          if (newFocus) {
            if (newFocus === document.body || document.body.contains(newFocus)) newFocus.focus()
          }
        }
      }

      /* TOC()************* INTERSECTION UTILITIES ************** */

      /**
       * Determines whether a line intersects a box. This is used within the charting engine to determine whether the cursor
       * has intersected a drawing.
       * @param  {number} bx1
       * @param  {number} by1
       * @param  {number} bx2
       * @param  {number} by2
       * @param  {number} x0
       * @param  {number} y0
       * @param  {number} x1
       * @param  {number} y1
       * @param  {string} vtype - Either "segment", "ray" or "line"
       * @return {boolean}       Returns true if the line intersects the box
       * @memberOf CIQ
       */
      CIQ.boxIntersects = function(bx1, by1, bx2, by2, x0, y0, x1, y1, vtype) {
        var linesIntersect = CIQ.linesIntersect
        if (linesIntersect(bx1, bx2, by1, by1, x0, x1, y0, y1, vtype)) return true
        else if (linesIntersect(bx1, bx2, by2, by2, x0, x1, y0, y1, vtype)) return true
        else if (linesIntersect(bx1, bx1, by1, by2, x0, x1, y0, y1, vtype)) return true
        else if (linesIntersect(bx2, bx2, by1, by2, x0, x1, y0, y1, vtype)) return true
        return false
      }

      /**
       * Determines whether two lines intersect
       * @param  {number} x1
       * @param  {number} x2
       * @param  {number} y1
       * @param  {number} y2
       * @param  {number} x3
       * @param  {number} x4
       * @param  {number} y3
       * @param  {number} y4
       * @param  {string} type - Either "segment", "ray" or "line"
       * @return {boolean}      Returns true if the two lines intersect
       * @memberOf CIQ
       */
      CIQ.linesIntersect = function(x1, x2, y1, y2, x3, x4, y3, y4, type) {
        var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)
        var numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)
        var numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)
        //var EPS = .000001;

        if (denom === 0) {
          if (numera === 0 && numerb === 0) return true // coincident
          return false // parallel
        }

        var mua = numera / denom
        var mub = numerb / denom
        if (type == 'segment') {
          if (mua >= 0 && mua <= 1 && mub >= 0 && mub <= 1) return true
        } else if (type == 'line' || type == 'horizontal' || type == 'vertical') {
          if (mua >= 0 && mua <= 1) return true
        } else if (type == 'ray') {
          if (mua >= 0 && mua <= 1 && mub >= 0) return true
        }
        return false
      }

      /**
       * Determines the Y value at which point X intersects a line (vector)
       * @param  {object} vector - Object of type {x0,x1,y0,y1}
       * @param  {number} x      - X value
       * @return {number}        - Y intersection point
       * @memberOf CIQ
       */
      CIQ.yIntersection = function(vector, x) {
        var x1 = vector.x0,
          x2 = vector.x1,
          x3 = x,
          x4 = x
        var y1 = vector.y0,
          y2 = vector.y1,
          y3 = 0,
          y4 = 10000
        var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)
        var numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)
        //var numerb = (x2-x1) * (y1-y3) - (y2-y1) * (x1-x3);
        //var EPS = .000001;

        if (denom === 0) return null

        var mua = numera / denom
        var y = y1 + mua * (y2 - y1)
        return y
      }

      /**
       * Determines the X value at which point Y intersects a line (vector)
       * @param  {object} vector - Object of type {x0,x1,y0,y1}
       * @param  {number} y      - Y value
       * @return {number}        - X intersection point
       * @memberOf CIQ
       */
      CIQ.xIntersection = function(vector, y) {
        var x1 = vector.x0,
          x2 = vector.x1,
          x3 = 0,
          x4 = 10000
        var y1 = vector.y0,
          y2 = vector.y1,
          y3 = y,
          y4 = y
        var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)
        var numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)
        //var numerb = (x2-x1) * (y1-y3) - (y2-y1) * (x1-x3);
        //var EPS = .000001;

        if (denom === 0) return null
        var mua = numera / denom
        var x = x1 + mua * (x2 - x1)
        return x
      }

      /**
       * Get the X intersection point between two lines
       * @memberOf CIQ
       */
      CIQ.intersectLineLineX = function(ax1, ax2, ay1, ay2, bx1, bx2, by1, by2) {
        var ua_t = (bx2 - bx1) * (ay1 - by1) - (by2 - by1) * (ax1 - bx1)
        var u_b = (by2 - by1) * (ax2 - ax1) - (bx2 - bx1) * (ay2 - ay1)

        var ua = ua_t / u_b

        return ax1 + ua * (ax2 - ax1)
      }

      /**
       * Get the Y intersection point between two lines
       * @memberOf CIQ
       */
      CIQ.intersectLineLineY = function(ax1, ax2, ay1, ay2, bx1, bx2, by1, by2) {
        var ua_t = (bx2 - bx1) * (ay1 - by1) - (by2 - by1) * (ax1 - bx1)
        var u_b = (by2 - by1) * (ax2 - ax1) - (bx2 - bx1) * (ay2 - ay1)

        var ua = ua_t / u_b

        return ay1 + ua * (ay2 - ay1)
      }

      /* TOC()************* LOCAL STORAGE ************** */

      /**
       * Set once after user is alerted that private browsing is enabled
       * @memberOf CIQ
       */
      CIQ.privateBrowsingAlert = false

      // Some browsers don't support localStorage, worse won't let you polyfill (JDK7 webview). So we will create
      // this so that we can add a polyfill.
      CIQ.localStorage = typeof localStorage !== 'undefined' ? localStorage : {}

      /**
       * Convenience function for storing a name value pair in local storage. This will detect if private browsing is enabled
       * because localStorage is inoperable under private browsing
       * @param  {string} name  Name to store
       * @param  {string} value Value to store
       * @memberOf CIQ
       */
      CIQ.localStorageSetItem = function(name, value) {
        try {
          CIQ.localStorage.setItem(name, value)
        } catch (e) {
          if (!CIQ.privateBrowsingAlert) {
            CIQ.alert(
              'No storage space available.  Possible causes include browser being in Private Browsing mode, or maximum storage space has been reached.',
            )
            CIQ.privateBrowsingAlert = true
          }
        }
      }

      /* TOC()************* LOADUI ************** */

      /**
       * Dynamically load UI elements from an external HTML file. This is accomplished by rendering raw HTML in an iframe
       * and then cloning all of the newly created DOM elements into our main document. The iframe is then removed.
       *
       * The title of the iframe is checked. External content should *not* have a title. By convention, 404 or 500 errors
       * have a title and so we use this to determine whether the iframe contains valid content or not.
       *
       * @param  {string}   url The external url to fetch new UI content
       * @param  {Function} cb  A callback function to call when the new UI is available
       * @memberOf CIQ
       */
      CIQ.loadUI = function(url, cb) {
        var i = document.createElement('iframe')
        var onload = function() {
          var iframeDocument = null

          try {
            iframeDocument = i.contentDocument || i.contentWindow.document
          } catch (error) {
            return cb(error)
          }

          if (iframeDocument && !iframeDocument.title) {
            var html = iframeDocument.body.innerHTML
            var div = document.createElement('div')

            document.body.removeChild(i)
            CIQ.innerHTML(div, html)

            for (var j = 0; j < div.children.length; j++) {
              var ch = div.children[j].cloneNode(true)
              document.body.appendChild(ch)
            }

            cb(null)
          } else {
            cb(new Error('iFrame not found or document has a title'))
          }
        }

        i.src = url + '?' + CIQ.uniqueID()
        i.hidden = true
        i.addEventListener('load', onload, false)
        document.body.appendChild(i)
      }

      /**
       * Loads JavaScript dynamically. This method keeps a static memory of scripts that have been loaded
       * to prevent them from being loaded twice. The callback function however is always called, even if
       * the script has already been loaded.
       * @param  {string}   scriptName The url of the script to load
       * @param  {Function} cb         Callback function to call when the script is loaded
       * @memberOf CIQ
       */
      CIQ.loadScript = function(scriptName, cb) {
        if (!CIQ.loadedScripts) CIQ.loadedScripts = {}
        if (CIQ.loadedScripts[scriptName]) {
          if (cb) cb()
          return
        }
        var script = document.createElement('SCRIPT')
        script.async = true
        script.onload = function() {
          CIQ.loadedScripts[scriptName] = true
          if (cb) cb()
        }
        if (typeof isIE8 != 'undefined') {
          script.onreadystatechange = function() {
            if (script.readyState == 'loaded') {
              CIQ.loadedScripts[scriptName] = true
              if (cb) {
                setTimeout(cb, 0)
              }
            }
          }
        }
        var uniqueName = scriptName
        // Use the epoch to create a unique query string, which will force the browser to reload
        if (uniqueName.indexOf('?') == -1) {
          uniqueName = uniqueName + '?' + Date.now()
        } else {
          uniqueName = uniqueName + '&' + Date.now()
        }
        script.src = uniqueName
        var s = document.getElementsByTagName('script')[0]
        s.parentNode.insertBefore(script, s.nextSibling)
      }

      /**
       * Loads a stylesheet.
       * @param  {string}   stylesheet Name of stylesheet file.
       * @param  {Function} cb     Function to call when the stylesheet is fully loaded
       * @since 2016-03-11
       * @memberOf CIQ
       */
      CIQ.loadStylesheet = function(widget, cb) {
        var lnk = document.createElement('link')
        lnk.rel = 'stylesheet'
        lnk.type = 'text/css'
        lnk.media = 'screen'
        lnk.href = widget + '?' + Date.now()
        lnk.onload = function() {
          if (cb) cb()
        }
        var links = document.getElementsByTagName('link')
        var lastLink = links[links.length - 1]
        lastLink.parentNode.insertBefore(lnk, lastLink.nextSibling)
      }

      /**
       * Loads a feature function widget. Feature function widgets consist of a css file, a JS file and an HTML file. This can
       * be used to dynamically load content and functionality.
       * @param  {string}   widget Name of widget. The js, css and html files should be this name.
       * @param  {Function} cb     Function to call when the widget is fully loaded
       * @memberOf CIQ
       */
      CIQ.loadWidget = function(widget, cb) {
        CIQ.loadStylesheet(widget + '.css', function() {
          CIQ.loadUI(widget + '.html', function(err) {
            if (err) cb(err)
            else CIQ.loadScript(widget + '.js', cb)
          })
        })
      }

      /* TOC()************* CANVAS RENDERING ************** */

      /**
       * Sets the transparent parts of the canvas to the specified background color. Used to ensure a background when turning charts into images
       * because normally the background is the background of the DIV container and not the canvas itself.
       * @param  {object} context An HTML canvas context
       * @param  {string} color   The color to set the background. Any valid HTML canvas color.
       * @param  {number} width   Width to apply color (Could be less than size of canvas)
       * @param  {number} height  Height to apply color (Could be less than size of canvas if applying branding for instance)
       * @memberOf CIQ
       */
      CIQ.fillTransparentCanvas = function(context, color, width, height) {
        var compositeOperation = context.globalCompositeOperation
        context.globalCompositeOperation = 'destination-over'
        context.fillStyle = color
        context.fillRect(0, 0, width, height)
        context.globalCompositeOperation = compositeOperation
      }

      /**
       * Draws a ticked rectangle on the canvas. For use in the y-axis label.
       * @param  {object} ctx    A valid HTML Canvas Context
       * @param  {number} x      Left position of drawing on canvas
       * @param  {number} y      Top position of drawing on canvas
       * @param  {number} width  Width of rectangle
       * @param  {number} height Height of rectangle
       * @param  {number} radius Radius of rounding
       * @param  {Boolean} [fill]   Whether to fill the background
       * @param  {Boolean} [stroke] Whether to fill the outline
       * @memberOf CIQ
       */
      CIQ.tickedRect = function(ctx, x, y, width, height, radius, fill, stroke) {
        CIQ.rect(ctx, x, y, width, height, radius, fill, stroke)
        var tickY = Math.round(y + height / 2) + 0.5
        ctx.beginPath()
        ctx.moveTo(x - 2, tickY)
        ctx.lineTo(x, tickY)
        ctx.stroke()
        ctx.closePath()
      }

      /**
       * Draws a rounded rectangle on the canvas.
       * @param  {object} ctx    A valid HTML Canvas Context
       * @param  {number} x      Left position of drawing on canvas
       * @param  {number} y      Top position of drawing on canvas
       * @param  {number} width  Width of rectangle
       * @param  {number} height Height of rectangle
       * @param  {number} radius Radius of rounding
       * @param  {Boolean} [fill]   Whether to fill the background
       * @param  {Boolean} [stroke] Whether to fill the outline
       * @param {Boolean} [edge] "flush","arrow"
       * @memberOf CIQ
       */
      CIQ.roundRect = function(ctx, x, y, width, height, radius, fill, stroke, edge) {
        if (typeof stroke == 'undefined') {
          stroke = true
        }
        if (typeof radius === 'undefined') {
          radius = 5
          if (width < 0) radius = -5
        }
        var yradius = width < 0 ? radius * -1 : radius
        if (radius && !edge) x = x - 1 // Just a smidge more

        var xr = x + radius,
          xw = x + width,
          yr = y + yradius,
          yh = y + height
        var xwr = xw - radius,
          yhr = yh - yradius
        ctx.beginPath()
        ctx.moveTo(xr, y)
        ctx.lineTo(xwr, y)

        ctx.quadraticCurveTo(xw, y, xw, yr)
        ctx.lineTo(xw, yhr)
        ctx.quadraticCurveTo(xw, yh, xwr, yh)
        ctx.lineTo(xr, yh)

        if (edge == 'flush') {
          ctx.lineTo(x, yh)
          ctx.lineTo(x, y)
        }
        if (edge == 'arrow') {
          ctx.quadraticCurveTo(x, yh, x - radius, yhr)
          var multiplier = width < 0 ? 1 : -1
          ctx.lineTo(x + (height / 2) * multiplier, y + height / 2) // right arrow tip
          ctx.lineTo(x - radius, yr)
          ctx.quadraticCurveTo(x, y, xr, y)
        } else {
          ctx.quadraticCurveTo(x, yh, x, yhr)
          ctx.lineTo(x, yr)
          ctx.quadraticCurveTo(x, y, xr, y)
        }
        ctx.closePath()
        if (stroke) {
          ctx.stroke()
        }
        if (fill) {
          ctx.fill()
        }
      }

      /**
       * Draws a rounded rectangle with an arrowhead on the screen.
       * @param  {object}  ctx    A valid HTML Canvas Context
       * @param  {number}  x      Left position of drawing on canvas
       * @param  {number}  y      Top position of drawing on canvas
       * @param  {number}  width  Width of rectangle
       * @param  {number}  height Height of rectangle
       * @param  {number}  radius Radius of rounding
       * @param  {Boolean} [fill]   Whether to fill the background
       * @param  {Boolean} [stroke] Whether to fill the outline
       * @memberOf CIQ
       */
      CIQ.roundRectArrow = function(ctx, x, y, width, height, radius, fill, stroke) {
        CIQ.roundRect(ctx, x, y, width, height, radius, fill, stroke, 'arrow')
      }

      /**
       * Draws a rectangle on the canvas with just the right side curved corners
       * see {@link CIQ.roundRect}
       * @memberOf CIQ
       */
      CIQ.semiRoundRect = function(ctx, x, y, width, height, radius, fill, stroke) {
        CIQ.roundRect(ctx, x, y, width, height, radius, fill, stroke, 'flush')
      }

      /**
       * Draws a rectangle on the canvas
       * see {@link CIQ.roundRect}
       * @memberOf CIQ
       */
      CIQ.rect = function(ctx, x, y, width, height, radius, fill, stroke) {
        CIQ.roundRect(ctx, x, y, width, height, 0, fill, stroke)
      }

      /**
       * No operation will be performed. As a result there will be no label drawn around the value.
       * see {@link CIQ.roundRect}
       * @memberOf CIQ
       */
      CIQ.noop = function(ctx, x, y, width, height, radius, fill, stroke) {}

      /**
       * Turns a portion of raw text into multi-line text that fits in a given width. This is used for autoformatting of annotations
       * @param  {object} ctx    A valid HTML Canvas Context
       * @param  {string} phrase The text
       * @param  {number} l      The width in pixels to fit the text within on the canvas
       * @return {array}        An array of individual lines that should fit within the specified width
       * @memberOf CIQ
       */
      CIQ.getLines = function(ctx, phrase, l) {
        var wa = phrase.split(' '),
          phraseArray = [],
          lastPhrase = '',
          measure = 0
        var fw = false
        for (var i = 0; i < wa.length; i++) {
          var w = wa[i]
          measure = ctx.measureText(lastPhrase + w).width
          if (measure < l) {
            if (fw) lastPhrase += ' '
            fw = true
            lastPhrase += w
          } else {
            phraseArray.push(lastPhrase)
            lastPhrase = w
          }
          if (i === wa.length - 1) {
            phraseArray.push(lastPhrase)
            break
          }
        }
        return phraseArray
      }

      /**
       * Creates a string with a periodicity that is easy to read given a chart
       * @param  {object} stx A chart object
       * @return {string}     A periodicity value that can be displayed to an end user
       * @memberOf CIQ
       */
      CIQ.readablePeriodicity = function(stx) {
        var displayPeriodicity = stx.layout.periodicity
        var displayInterval = stx.layout.interval
        if (typeof stx.layout.interval == 'number' && stx.layout.timeUnit) {
          displayPeriodicity = stx.layout.interval * stx.layout.periodicity
          displayInterval = stx.layout.timeUnit
        } else if (typeof stx.layout.interval == 'number' && !stx.layout.timeUnit) {
          displayPeriodicity = stx.layout.interval * stx.layout.periodicity
          displayInterval = 'minute'
        }
        if (displayPeriodicity % 60 === 0 && displayInterval == 'minute') {
          displayPeriodicity /= 60
          displayInterval = 'hour'
        }
        return displayPeriodicity + ' ' + stx.translateIf(displayInterval.capitalize())
      }

      /* TOC()************* CHART ELEMENT RENDERING ************** */

      /**
       * Creates a document node which facilitates translation to other languages, if stx.translationCallback callback function is set.
       * If there is no translationCallback, a standard text node is returned.
       * @param  {CIQ.ChartEngine} stx The chart object
       * @param  {string} english The word to translate
       * @param {string} [language] Optional language. Defaults to CIQ.I18N.language.
       * @return {Node}	A node in the following form if translationCallback exists:
       * 					<language original="english">translation</language>
       * 							If it does not exist, a text node is returned.
       * @memberOf CIQ
       */
      CIQ.translatableTextNode = function(stx, english, language) {
        if (stx.translationCallback) {
          var translation = stx.translationCallback(english)
          var translationNode = document.createElement('translate')
          translationNode.setAttribute('original', english)
          translationNode.innerHTML = stx.translationCallback(english, language)
          return translationNode
        } else {
          return document.createTextNode(english)
        }
      }

      /**
       * <span class="animation">Animation Loop</span>
       * Clears the canvas. Uses the fastest known method except on the legacy Android browser which had many problems!
       * @param  {object} canvas A valid HTML canvas object
       * @param  {object} [stx]    A chart object, only necessary for old Android browsers on problematic devices
       * @memberOf CIQ
       */
      CIQ.clearCanvas = function(canvas, stx) {
        canvas.isDirty = false
        var ctx = canvas.context
        ctx.clearRect(0, 0, canvas.width, canvas.height)
        if (CIQ.isAndroid && !CIQ.is_chrome) {
          // Android browser last remaining
          // one to need this clearing method
          if (CIQ.ChartEngine.useOldAndroidClear && stx) {
            ctx.fillStyle = stx.containerColor
            ctx.fillRect(0, 0, canvas.width, canvas.height)
            ctx.clearRect(0, 0, canvas.width, canvas.height)
          }
          var w = canvas.width
          canvas.width = 1
          canvas.width = w
        }
      }

      CIQ.monthLetters = ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
      CIQ.monthAbv = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

      /* Enumerated types for time units */
      CIQ.MILLISECOND = 1
      CIQ.SECOND = 1000
      CIQ.MINUTE = 60 * CIQ.SECOND
      CIQ.HOUR = 60 * CIQ.MINUTE
      CIQ.DAY = 24 * CIQ.HOUR
      CIQ.WEEK = 7 * CIQ.DAY
      CIQ.MONTH = 31 * CIQ.DAY
      CIQ.YEAR = 365 * CIQ.DAY
      CIQ.DECADE = 10 * CIQ.YEAR

      /**
       * Convenience function for creating a displayable month name using CIQ.monthLetters and CIQ.monthAbv.
       * Please note that those arrays may not be utilized if the library is used in conjuction with Internationalization.
       * This method is used primarily to create the x-axis of a chart
       * @param  {number} i              The numerical month (0-11)
       * @param  {boolean} displayLetters - True if just the first letter should be displayed (such as a tight display)
       * @param  {object} [stx]            The chart object, only necessary if Internationalization is in use
       * @return {string}                String representation of the month
       * @memberOf CIQ
       */
      CIQ.monthAsDisplay = function(i, displayLetters, stx) {
        if (displayLetters) {
          if (stx && stx.monthLetters) return stx.monthLetters[i]
          return CIQ.monthLetters[i]
        } else {
          if (stx && stx.monthAbv) return stx.monthAbv[i]
          return CIQ.monthAbv[i]
        }
      }

      /**
       * Displays a time in readable form. If Internationalization is in use then the time will be in 24 hour Intl numeric format
       * @param  {date} dt  JavaScript Date object
       * @param  {object} [stx] Optional chart object if Internationalization is in use
       * @param {number} [precision] Optional precision to use. If `null` then `hh:mm`. `CIQ.SECOND` then `hh:mm:ss`. If `CIQ.MILLISECOND` then `hh:mm:ss.mmmmm`
       * @return {string}     Human friendly time, usually hh:mm
       * @memberOf CIQ
       */
      CIQ.timeAsDisplay = function(dt, stx, precision) {
        var internationalizer = stx ? stx.internationalizer : null
        if (internationalizer) {
          if (precision == CIQ.SECOND) return internationalizer.hourMinuteSecond.format(dt)
          else if (precision == CIQ.MILLISECOND)
            return internationalizer.hourMinuteSecond.format(dt) + '.' + dt.getMilliseconds()
          else return internationalizer.hourMinute.format(dt)
        } else {
          var min = dt.getMinutes()
          if (min < 10) min = '0' + min
          var str = dt.getHours() + ':' + min
          var sec = ''
          if (precision <= CIQ.SECOND) {
            sec = dt.getSeconds()
            if (sec < 10) sec = '0' + sec
            str += ':' + sec
          }
          if (precision == CIQ.MILLISECOND) {
            var msec = dt.getMilliseconds()
            if (msec < 10) msec = '00' + msec
            else if (msec < 100) msec = '0' + msec
            str += '.' + msec
          }
          return str
        }
      }

      /**
       * Given a numeric price that may be a float with rounding errors, this will trim off the trailing zeroes
       * @param  {Float} price The price
       * @return {Float}       The price trimmed of trailing zeroes
       * @memberOf CIQ
       */
      CIQ.fixPrice = function(price) {
        if (!price && price !== 0) return null
        var p = price.toFixed(10)
        for (var i = p.length - 1; i > 1; i--) {
          if (p.charAt(i) != '0') break
        }
        p = p.substring(0, i + 1)
        return parseFloat(p)
      }

      /**
       * Condenses an integer into abbreviated form by adding "k","m","b" or "t". This method is used in the y-axis for example with volume studies.
       * @param  {number} txt - A numerical value
       * @return {string}     Condensed version of the number
       * @example
       * // This will return 12m
       * condentInt(12000000);
       * @memberOf CIQ
       */
      CIQ.condenseInt = function(txt) {
        if (txt === null || typeof txt == 'undefined') return ''
        if (txt === Infinity || txt === -Infinity) return 'n/a'
        if (txt > 0) {
          if (txt > 1000000000000) txt = Math.round(txt / 100000000000) / 10 + 't'
          else if (txt > 100000000000) txt = Math.round(txt / 1000000000) + 'b'
          //100b
          else if (txt > 10000000000) txt = (Math.round(txt / 100000000) / 10).toFixed(1) + 'b'
          //10.1b
          else if (txt > 1000000000) txt = (Math.round(txt / 10000000) / 100).toFixed(2) + 'b'
          //1.11b
          else if (txt > 100000000) txt = Math.round(txt / 1000000) + 'm'
          //100m
          else if (txt > 10000000) txt = (Math.round(txt / 100000) / 10).toFixed(1) + 'm'
          //10.1m
          else if (txt > 1000000) txt = (Math.round(txt / 10000) / 100).toFixed(2) + 'm'
          //1.11m
          else if (txt > 100000) txt = Math.round(txt / 1000) + 'k'
          //100k
          else if (txt > 10000) txt = (Math.round(txt / 100) / 10).toFixed(1) + 'k'
          //10.1k
          else if (txt > 1000) txt = (Math.round(txt / 10) / 100).toFixed(2) + 'k'
          //1.11k
          else txt = txt.toFixed(0)
        } else {
          if (txt < -1000000000000) txt = Math.round(txt / 100000000000) / 10 + 't'
          else if (txt < -1000000000) txt = Math.round(txt / 100000000) / 10 + 'b'
          else if (txt < -1000000) txt = Math.round(txt / 100000) / 10 + 'm'
          else if (txt < -1000) txt = Math.round(txt / 100) / 10 + 'k'
          else txt = txt.toFixed(0)
        }
        return txt
      }

      /**
       * Determines how many decimal places the security trades. This is a callback from CIQ.ChartEngine.calculateTradingDecimalPlaces and you
       * can override this with your own functionality. The default algorithm is to check the most recent 50 quotes and find the maximum number
       * of decimal places that the stock has traded. This will work for most securities but if yourmarket data feed has rounding errors
       * or bad data then you may want to supplement this algorithm that checks the maximum value by security type.
       * @param {Object} params Parameters
       * @param  {CIQ.ChartEngine} params.stx    The chart object
       * @param {CIQ.ChartEngine.Chart} params.chart The chart in question
       * @param  {Object} params.symbol The symbol object. If you create charts with just stock symbol then symbolObject.symbol will contain that symbol
       * @return {Number}        The number of decimal places
       * @memberOf CIQ
       */
      CIQ.calculateTradingDecimalPlaces = function(params) {
        var chart = params.chart
        var decimalPlaces = 2
        var quotesToCheck = 50 // Check up to 50 recent quotes
        var masterData = chart.masterData
        if (masterData && masterData.length > quotesToCheck) {
          for (var i = 1; i < quotesToCheck; i++) {
            var position = masterData.length - i
            if (position < 0) break
            var quotes = masterData[position]
            if (quotes.Close && typeof quotes.Close == 'number') {
              var cs = quotes.Close.toString()
              var point = cs.indexOf('.')
              if (point != -1) {
                var dp = cs.length - point - 1
                if (dp > decimalPlaces) {
                  decimalPlaces = dp
                }
              }
            }
          }
        }
        var maxDecimalPlaces = chart.yAxis.maxDecimalPlaces
        if (decimalPlaces > maxDecimalPlaces) decimalPlaces = maxDecimalPlaces
        return decimalPlaces
      }

      /**
       * Fills an area on the chart, usually created by a study.
       * @param  {object} stx    The chart object
       * @param  {array} points  The set of points, this is an array of chart coordinates in array form
       * 							e.g. [[x1,y1],[x2,y2]].  The points should be arranged to form a loop;
       * 							the loop need not be closed.
       * @param  {string} color  color to fill the area
       * @param  {number} opacity opacity of fill, 0 to 1.  Defaults to 0.1
       * @param  {string} [panelName] optional Name of panel to draw on.  If omitted or invalid, area may fill over top or bottom of plot area
       * @since panelName parameter added 01-20-2015
       * @memberOf CIQ
       */
      CIQ.fillArea = function(stx, points, color, opacity, panelName) {
        if (!points.length) return
        var ctx = stx.chart.context
        ctx.lineWidth = 0
        var globalAlpha = ctx.globalAlpha
        if (!opacity && opacity !== 0) opacity = 0.2
        ctx.globalAlpha = opacity
        if (color == 'auto') color = stx.defaultColor
        ctx.fillStyle = color

        var b = Number.MAX_VALUE
        var t = b * -1
        var panel = stx.panels[panelName]
        if (panel) {
          t = panel.yAxis.top
          b = panel.yAxis.bottom
          ctx.save()
          ctx.beginPath()
          ctx.rect(panel.left, t, panel.width, b - t)
          ctx.clip()
        }
        ctx.beginPath()
        ctx.moveTo(points[0][0], points[0][1])
        for (var i = 1; i < points.length; i++) {
          ctx.lineTo(points[i][0], points[i][1])
        }
        ctx.closePath()
        ctx.fill()
        if (panel) ctx.restore()

        ctx.lineWidth = 1
        ctx.globalAlpha = globalAlpha
      }

      CIQ.prepareChannelFill = function(stx, quotes, parameters) {
        //We use the quote cache for our y values since we already plotted the series.
        var panel = stx.panels[parameters.panelName],
          yAxis = panel.yAxis
        var t = yAxis.top
        var noSlopes = parameters.noSlopes
        var candleWidth = stx.layout.candleWidth
        var x0 = panel.left - (noSlopes ? 1 : 0.5) * candleWidth + stx.micropixels - 1
        var x1 = x0
        var isChart = panel.name == stx.chart.panel.name

        function getLeftmost(band, y) {
          var leftTick = stx.chart.dataSet.length - stx.chart.scroll
          if (noSlopes || leftTick <= 0) {
            return [0, y]
          } else if (leftTick > 0) {
            var baseline = stx.chart.dataSet[leftTick]
            if (isChart && baseline.transform) baseline = baseline.transform
            var y0 = baseline[band]
            y0 = yAxis.semiLog ? stx.pixelFromPrice(y0, panel) : (yAxis.high - y0) * yAxis.multiplier + t
            if (!isNaN(y0)) return [x0, y0]
          }
          return null
        }

        function firstHighOrLow(i, quote, band, arr) {
          var y = quote.cache[parameters[band]]
          if (!isNaN(y)) {
            if (i == 1) {
              var l = getLeftmost(parameters[band], y)
              if (l !== null) arr.push(l)
              if (noSlopes) arr.push([x1, l[1]])
            }
            arr.push([x1, y])
          }
        }

        var highs = [],
          lows = []
        for (var i = 1; i <= quotes.length; i++) {
          var quote_1 = quotes[i - 1]
          if (!noSlopes && !highs.length && quote_1 && quote_1.candleWidth) {
            candleWidth = (candleWidth + quote_1.candleWidth) / 2
          }
          x1 += candleWidth
          if (!quote_1 || !quote_1.cache) continue
          if (quote_1.candleWidth) candleWidth = quote_1.candleWidth / 2
          else candleWidth = stx.layout.candleWidth / 2
          if (i == quotes.length) {
            if (noSlopes) {
              var offset = x1 + 2 * candleWidth
              highs.push([offset, highs[highs.length - 1][1]])
              lows.push([offset, lows[lows.length - 1][1]])
            }
            break
          }

          var quote = quotes[i]
          if (noSlopes) candleWidth += candleWidth
          else if (quote.candleWidth) candleWidth += quote.candleWidth / 2
          else candleWidth += stx.layout.candleWidth / 2
          var x2 = x1 + candleWidth

          if (isChart && quote_1.transform) quote_1 = quote_1.transform

          if (!highs.length) firstHighOrLow(i, quote_1, 'topBand', highs)
          if (!lows.length) firstHighOrLow(i, quote_1, 'bottomBand', lows)

          if (isChart && quote.transform) quote = quote.transform
          if (highs.length) {
            if (noSlopes) highs.push([x2, highs[highs.length - 1][1]])
            highs.push([x2, quote.cache[parameters.topBand]])
          }
          if (lows.length) {
            if (noSlopes) lows.push([x2, lows[lows.length - 1][1]])
            lows.push([x2, quote.cache[parameters.bottomBand]])
          }
        }
        var points = highs.concat(lows.reverse())
        var opacity = parameters.opacity
        CIQ.fillArea(stx, points, parameters.color, opacity, parameters.panelName)
      }

      CIQ.preparePeakValleyFill = function(stx, quotes, parameters) {
        //We use the quote cache for our y values since we already plotted the series.
        var panel = stx.panels[parameters.panelName],
          yAxis = panel.yAxis,
          chart = stx.chart
        var t = yAxis.top
        if (!parameters.threshold && parameters.threshold !== 0) return
        var candleWidth = stx.layout.candleWidth,
          isChart = panel.name == chart.panel.name
        var band = parameters.band,
          threshold = parameters.threshold,
          direction = parameters.direction
        var dataSet = chart.dataSet,
          leftTick = dataSet.length - chart.scroll
        var x1 = panel.left - 0.5 * candleWidth + stx.micropixels - 1
        var x0 = x1
        var yThresh //where threshold hits yaxis
        if (isChart) {
          yThresh = stx.pixelFromPriceTransform(threshold, panel)
        } else {
          yThresh = stx.pixelFromPrice(threshold, panel)
        }

        var points = []
        for (var i = 0; i < quotes.length; i++) {
          if (!i && quotes.length > 1) continue
          var quote = quotes[i]
          var quote_1 = quotes[i - 1]
          if (quote_1 && quote_1.candleWidth) {
            candleWidth = (candleWidth + quote_1.candleWidth) / 2
          } else {
            candleWidth = (candleWidth + stx.layout.candleWidth) / 2
          }
          x1 += candleWidth
          if (i && !quote_1) continue
          if (quote_1 && quote_1.candleWidth) candleWidth = quote_1.candleWidth / 2
          else candleWidth = stx.layout.candleWidth / 2
          if (!i) quote_1 = quote

          var y2, y1
          if (quote.cache && quote_1.cache) {
            y2 = quote.cache[band]
            y1 = quote_1.cache[band]
            if (isChart) {
              if (quote.transform) y2 = stx.pixelFromPrice(quote.transform[band], panel)
              if (quote_1.transform) y1 = stx.pixelFromPrice(quote_1.transform[band], panel)
            }
          }
          if (typeof y2 == 'undefined' || typeof y1 == 'undefined') {
            y2 = stx.pixelFromPrice(quote[band], panel)
            y1 = stx.pixelFromPrice(quote_1[band], panel)
          }
          if (!points.length) {
            if (i <= 1) {
              if (leftTick > 0) {
                var baseline = dataSet[leftTick]
                if (isChart && baseline.transform) baseline = baseline.transform
                var y0 = baseline[band]
                y0 = yAxis.semiLog ? stx.pixelFromPrice(y0, panel) : (yAxis.high - y0) * yAxis.multiplier + t
                if (!isNaN(y0)) {
                  if (y0 >= yThresh && y1 >= yThresh) {
                    points.push([x0, direction == 1 ? yThresh : y0])
                  } else if (y0 <= yThresh && y1 <= yThresh) {
                    points.push([x0, direction == -1 ? yThresh : y0])
                  } else {
                    points.push([x1 - ((x1 - x0) * (yThresh - y1)) / (y0 - y1), yThresh])
                  }
                }
              }
            }

            if (y1 && !isNaN(y1)) {
              if ((quote_1[band] >= threshold && direction == 1) || (quote_1[band] <= threshold && direction == -1)) {
                points.push([x1, y1])
              } else {
                points.push([x1, yThresh])
              }
            }
          }

          if (quote.candleWidth) candleWidth += quote.candleWidth / 2
          else candleWidth += stx.layout.candleWidth / 2
          if (i && points.length) {
            var lastPoint = points[points.length - 1]
            var x2 = x1 + candleWidth
            if (stx.extendLastTick && i == quotes.length - 1) x2 += candleWidth / 2
            var newPoint = [lastPoint[0] + ((x2 - lastPoint[0]) * (yThresh - y1)) / (y2 - y1), yThresh]
            if ((quote[band] > threshold && direction == 1) || (quote[band] < threshold && direction == -1)) {
              if (lastPoint[1] == yThresh) points.push(newPoint)
              points.push([x2, y2])
            } else {
              if (lastPoint[1] != yThresh) points.push(newPoint)
              points.push([x2, yThresh])
            }
          }
        }
        var length = points.length
        if (!length) return
        if (parameters.edgeHighlight) {
          var edgeParameters = parameters.edgeParameters,
            lineWidth = edgeParameters.lineWidth
          if (lineWidth > 100) lineWidth = 1 // trap case where no width is specified in the css
          for (var p = 0; p < length - 1; p++) {
            var point0 = points[p],
              point1 = points[p + 1]
            if (point0[1] != yThresh || point1[1] != yThresh)
              stx.plotLine(
                point0[0],
                point1[0],
                point0[1],
                point1[1],
                parameters.edgeHighlight,
                'segment',
                chart.context,
                true,
                edgeParameters,
              )
          }
        }
        points.push([points[length - 1][0], yThresh], [points[0][0], yThresh])
        var opacity = parameters.opacity
        if (!opacity && opacity !== 0) opacity = 0.3
        CIQ.fillArea(stx, points, parameters.color, opacity, parameters.panelName)
      }

      CIQ.fillIntersecting = function(stx, sd, quotes, parameters) {
        var intersections = []
        var panel = stx.panels[sd.panel]
        if (!parameters.topAxis) parameters.topAxis = panel.yAxis
        if (!parameters.bottomAxis) parameters.bottomAxis = panel.yAxis
        var topBand = parameters.topBand,
          bottomBand = parameters.bottomBand
        var topAxis = parameters.topAxis,
          bottomAxis = parameters.bottomAxis
        var ctx = stx.chart.context
        var topColor = sd.outputs[sd.outputMap[topBand]]
        var bottomColor = sd.outputs[sd.outputMap[bottomBand]]
        var left = stx.chart.left

        var i, ax1, ax2, bx1, bx2, ay1, ay2, by1, by2, interX, interY
        stx.startClip(sd.panel)
        var copyQuotes = []
        for (i = 0; i < quotes.length; i++) {
          //creates array of local quote values
          if (!quotes[i]) {
            copyQuotes.push(null)
          } else {
            copyQuotes.push(quotes[i].transform ? quotes[i].transform : quotes[i])
          }
        }
        for (i = 0; i < copyQuotes.length - 1; i++) {
          //creates array of intersection points
          var q0 = copyQuotes[i],
            q1 = copyQuotes[i + 1]
          if (!q0 || !q1) continue
          if (panel.name == stx.chart.name) {
            if (q0.transform) q0 = q0.transform
            if (q1.transform) q1 = q1.transform
          }
          if (q0[topBand] === null || isNaN(q0[topBand])) continue
          else if (
            (q0[topBand] >= q0[bottomBand] && q1[topBand] <= q1[bottomBand]) ||
            (q0[topBand] <= q0[bottomBand] && q1[topBand] >= q1[bottomBand])
          ) {
            bx1 = ax1 = stx.pixelFromBar(i)
            bx2 = ax2 = stx.pixelFromBar(i + 1)
            ay1 = stx.pixelFromPrice(q0[topBand], panel, topAxis)
            ay2 = stx.pixelFromPrice(q1[topBand], panel, topAxis)
            by1 = stx.pixelFromPrice(q0[bottomBand], panel, bottomAxis)
            by2 = stx.pixelFromPrice(q1[bottomBand], panel, bottomAxis)

            interX = CIQ.intersectLineLineX(ax1, ax2, ay1, ay2, bx1, bx2, by1, by2)
            interY = CIQ.intersectLineLineY(ax1, ax2, ay1, ay2, bx1, bx2, by1, by2)
            var intersection = {}
            intersection.x = interX
            intersection.y = interY
            intersection.tick = i + 1
            intersections.push(intersection)
          }
        }

        var futureIntersections = []
        for (i = 0; parameters.fillFuture && sd.futureA && i < sd.futureA.length - 1; i++) {
          //creates array of future intersection points so clouds project into the future
          if (sd.futureA[i] === null || isNaN(sd.futureA[i]));
          else if (
            (sd.futureA[i] > sd.futureB[i] && sd.futureA[i + 1] < sd.futureB[i + 1]) ||
            (sd.futureA[i] < sd.futureB[i] && sd.futureA[i + 1] > sd.futureB[i + 1])
          ) {
            bx1 = ax1 = stx.pixelFromBar(copyQuotes.length + i)
            bx2 = ax2 = stx.pixelFromBar(copyQuotes.length + i + 1)
            ay1 = stx.pixelFromPrice(sd.futureA[i], panel, topAxis)
            ay2 = stx.pixelFromPrice(sd.futureA[i + 1], panel, topAxis)
            by1 = stx.pixelFromPrice(sd.futureB[i], panel, bottomAxis)
            by2 = stx.pixelFromPrice(sd.futureB[i + 1], panel, bottomAxis)

            interX = CIQ.intersectLineLineX(ax1, ax2, ay1, ay2, bx1, bx2, by1, by2)
            interY = CIQ.intersectLineLineY(ax1, ax2, ay1, ay2, bx1, bx2, by1, by2)
            var fIntersection = {}
            fIntersection.x = interX
            fIntersection.y = interY
            fIntersection.tick = copyQuotes.length + i + 1
            futureIntersections.push(fIntersection)
          }
        }
        var k, m, n
        ctx.beginPath()
        //first cloud, which is open on the left of the chart, possibly on the right as well
        var start = 0
        var end = copyQuotes.length
        if (intersections.length) end = intersections[0].tick
        while (start <= end && !copyQuotes[start]) start++
        var copyStart = copyQuotes[start],
          startTopBand = copyStart[topBand],
          startBottomBand = copyStart[bottomBand]
        if (start <= end) {
          if (startTopBand > startBottomBand) {
            ctx.fillStyle = topColor
          } else {
            ctx.fillStyle = bottomColor
          }
          ctx.moveTo(left, stx.pixelFromPrice(startTopBand, panel, topAxis))
          for (n = start; n < end; n++) {
            ctx.lineTo(stx.pixelFromBar(n), stx.pixelFromPrice(copyQuotes[n][topBand], panel, topAxis))
          }
          if (intersections[0]) {
            ctx.lineTo(intersections[0].x, intersections[0].y)
          }
          for (m = end - 1; m >= start; m--) {
            ctx.lineTo(stx.pixelFromBar(m), stx.pixelFromPrice(copyQuotes[m][bottomBand], panel, bottomAxis))
          }
          ctx.lineTo(left, stx.pixelFromPrice(startBottomBand, panel, bottomAxis))
          ctx.lineTo(left, stx.pixelFromPrice(startTopBand, panel, topAxis))
          ctx.fill()
        }
        for (k = 0; k < intersections.length; k++) {
          ctx.beginPath()
          ctx.moveTo(intersections[k].x, intersections[k].y)
          if (copyQuotes[intersections[k].tick][topBand] > copyQuotes[intersections[k].tick][bottomBand]) {
            ctx.fillStyle = topColor
          } else {
            ctx.fillStyle = bottomColor
          }
          if (k + 1 == intersections.length) {
            //last cloud in the present
            for (n = intersections[k].tick; n < copyQuotes.length; n++) {
              ctx.lineTo(stx.pixelFromBar(n), stx.pixelFromPrice(copyQuotes[n][topBand], panel, topAxis))
            }
            for (m = copyQuotes.length - 1; m >= intersections[k].tick; m--) {
              ctx.lineTo(stx.pixelFromBar(m), stx.pixelFromPrice(copyQuotes[m][bottomBand], panel, bottomAxis))
            }
          } else {
            //draw past clouds
            for (n = intersections[k].tick; n < intersections[k + 1].tick; n++) {
              ctx.lineTo(stx.pixelFromBar(n), stx.pixelFromPrice(copyQuotes[n][topBand], panel, topAxis))
            }
            ctx.lineTo(intersections[k + 1].x, intersections[k + 1].y)
            for (m = intersections[k + 1].tick - 1; m >= intersections[k].tick; m--) {
              ctx.lineTo(stx.pixelFromBar(m), stx.pixelFromPrice(copyQuotes[m][bottomBand], panel, bottomAxis))
            }
          }
          ctx.fill()
        }

        if (parameters.fillFuture) {
          stx.chart.context.beginPath()
          if (k >= 0 && copyQuotes[copyQuotes.length - 1]) {
            ctx.moveTo(
              stx.pixelFromBar(copyQuotes.length - 1),
              stx.pixelFromPrice(copyQuotes[copyQuotes.length - 1][parameters.topBand], panel, parameters.topAxis),
            )
            var ql
            if (!futureIntersections.length) {
              //no future intersections, just continue present cloud
              ql = copyQuotes.length
              for (n = 0; n < sd.futureA.length; n++) {
                ctx.lineTo(stx.pixelFromBar(ql), stx.pixelFromPrice(sd.futureA[n], panel, parameters.topAxis))
                ql++
              }
              ql--
              for (n = sd.futureB.length - 1; n >= 0; n--) {
                ctx.lineTo(stx.pixelFromBar(ql), stx.pixelFromPrice(sd.futureB[n], panel, parameters.bottomAxis))
                ql--
              }
              ctx.lineTo(
                stx.pixelFromBar(copyQuotes.length - 1),
                stx.pixelFromPrice(
                  copyQuotes[copyQuotes.length - 1][parameters.bottomBand],
                  panel,
                  parameters.bottomAxis,
                ),
              )
              ctx.fill()
            } else {
              //finish present cloud so we can start on the future clouds
              ql = copyQuotes.length

              for (n = 0; n < futureIntersections[0].tick - copyQuotes.length; n++) {
                ctx.lineTo(stx.pixelFromBar(ql), stx.pixelFromPrice(sd.futureA[n], panel, parameters.topAxis))
                ql++
              }
              ql--
              ctx.lineTo(futureIntersections[0].x, futureIntersections[0].y)
              for (n = futureIntersections[0].tick - 1 - copyQuotes.length; n >= 0; n--) {
                ctx.lineTo(stx.pixelFromBar(ql), stx.pixelFromPrice(sd.futureB[n], panel, parameters.bottomAxis))
                ql--
              }
              ctx.lineTo(
                stx.pixelFromBar(copyQuotes.length - 1),
                stx.pixelFromPrice(
                  copyQuotes[copyQuotes.length - 1][parameters.bottomBand],
                  panel,
                  parameters.bottomAxis,
                ),
              )
              ctx.fill()
            }
          }

          for (k = 0; k < futureIntersections.length; k++) {
            ctx.beginPath()
            ctx.moveTo(futureIntersections[k].x, futureIntersections[k].y)
            if (
              sd.futureA[futureIntersections[k].tick - copyQuotes.length] >
              sd.futureB[futureIntersections[k].tick - copyQuotes.length]
            ) {
              ctx.fillStyle = sd.outputs[sd.outputMap[parameters.topBand]]
            } else {
              ctx.fillStyle = sd.outputs[sd.outputMap[parameters.bottomBand]]
            }
            if (k + 2 > futureIntersections.length) {
              //last cloud
              for (n = futureIntersections[k].tick; n < sd.futureA.length + copyQuotes.length; n++) {
                ctx.lineTo(
                  stx.pixelFromBar(n),
                  stx.pixelFromPrice(sd.futureA[n - copyQuotes.length], panel, parameters.topAxis),
                )
              }
              for (m = sd.futureA.length - 1; m >= futureIntersections[k].tick - copyQuotes.length; m--) {
                ctx.lineTo(
                  stx.pixelFromBar(m + copyQuotes.length),
                  stx.pixelFromPrice(sd.futureB[m], panel, parameters.bottomAxis),
                )
              }
            } else {
              //draw future clouds
              for (n = futureIntersections[k].tick; n < futureIntersections[k + 1].tick; n++) {
                ctx.lineTo(
                  stx.pixelFromBar(n),
                  stx.pixelFromPrice(sd.futureA[n - copyQuotes.length], panel, parameters.topAxis),
                )
              }
              ctx.lineTo(futureIntersections[k + 1].x, futureIntersections[k + 1].y)
              for (m = futureIntersections[k + 1].tick - 1; m >= futureIntersections[k].tick; m--) {
                ctx.lineTo(
                  stx.pixelFromBar(m),
                  stx.pixelFromPrice(sd.futureB[m - copyQuotes.length], panel, parameters.bottomAxis),
                )
              }
            }
            ctx.fill()
          }
        }
        stx.endClip()
      }

      /**
       * Draws an item in the legend and returns the position for the next item
       * @param {CIQ.ChartEngine} stx The chart object
       * @param  {array} xy    An X,Y tuple (from chart.legend)
       * @param  {string} label The text to print in the item
       * @param  {string} color The color for the background of the item
       * @return {array}       A tuple containing the X,Y position for the next the item
       * @memberOf CIQ
       */
      CIQ.drawLegendItem = function(stx, xy, label, color, opacity) {
        if (!opacity) opacity = 1
        var x = xy[0],
          y = xy[1],
          w = 10,
          h = 10
        var context = stx.chart.context
        context.globalAlpha = opacity
        context.fillStyle = color
        context.fillRect(x, y, w, h)
        context.globalAlpha = 1
        x += w + 2 // 2 px spacing between box and text
        context.fillStyle = stx.defaultColor
        context.fillText(label, x, y)
        x += context.measureText(label).width + 6 // 6 px spacing between labels
        return [x, y]
      }

      /**
       * Draws a legend for the series that are displayed on the chart.
       * @param {CIQ.ChartEngine} stx The chart object to draw
       * @param  {object} params parameters for drawing the legend
       * @param  {CIQ.ChartEngine.Chart} [params.chart] The chart object
       * @param  {object} [params.legendColorMap] A map of series names to colors and display symbols ( example  IBM:{color:'red', display:'Int B M'} )
       * @param  {object} [params.coordinates] Coordinates upon which to draw the items, in pixels relative to top left of panel ( example  {x:50, y:0} ).  If null, uses chart.legend
       * @param  {boolean} [params.noBase] Set to true to not draw the base (the chart symbol's color) in the legend
       * @memberOf CIQ
       */
      CIQ.drawLegend = function(stx, params) {
        var coordinates = params.coordinates
        var context = stx.chart.context
        context.textBaseline = 'top'
        var rememberFont = context.font
        stx.canvasFont('stx-legend', context)

        if (!coordinates) coordinates = params.chart.legend
        var xy = [coordinates.x, coordinates.y]
        var lineColor = stx.defaultColor

        var chartType = stx.layout.chartType
        if (stx.chart.customChart && stx.chart.customChart.chartType) {
          chartType = stx.chart.customChart.chartType
        }

        if (!params.noBase) {
          // baseLegendColors will contain the colors used in the chart itself. For instance the color of the line
          // chart, or red,green for a candle. We'll print a little rainbow as such.
          var c
          if (stx.chart.baseLegendColors instanceof Array) {
            var colors = stx.chart.baseLegendColors
            if (colors.length > 1) {
              var grd = context.createLinearGradient(xy[0], xy[1], xy[0] + 10, xy[1])
              for (c = 0; c < colors.length; c++) {
                grd.addColorStop(c / (colors.length - 1), colors[c])
              }
              lineColor = grd
            } else if (colors.length > 0) {
              lineColor = colors[0]
            } else {
              lineColor = stx.getCanvasColor('stx_line_chart')
            }
          } else if (chartType == 'mountain') {
            c = stx.canvasStyle('stx_mountain_chart')
            var strokeStyle = c.borderTopColor
            if (strokeStyle && strokeStyle != 'transparent') lineColor = strokeStyle
          } else {
            lineColor = null
          }
          if (lineColor) {
            var symbol
            if (params.chart.symbolDisplay) {
              symbol = params.chart.symbolDisplay
            } else {
              symbol = params.chart.symbol
            }
            xy = CIQ.drawLegendItem(stx, xy, symbol, lineColor)
          }
        }
        for (var field in params.legendColorMap) {
          var display = field
          if (params.legendColorMap[field].display) display = params.legendColorMap[field].display
          xy = CIQ.drawLegendItem(
            stx,
            xy,
            display,
            params.legendColorMap[field].color,
            params.legendColorMap[field].opacity,
          )
        }
        context.font = rememberFont
      }

      /**
       * This method will return an tuple [min,max] that contains the minimum
       * and maximum values in the series where values are series[field]
       * @param {Array} series The series
       * @param {string} field The name of the field to look at
       * @return {Array} Tuple containing min and max values in the series
       * @memberOf CIQ
       */
      CIQ.minMax = function(series, field) {
        var min = Number.MAX_VALUE
        var max = Number.MAX_VALUE * -1
        for (var i = 0; i < series.length; i++) {
          var entry = series[i]
          if (!entry) continue
          var val = entry[field]
          if (!val && val !== 0) continue
          if (isNaN(val)) continue
          min = Math.min(min, val)
          max = Math.max(max, val)
        }
        return [min, max]
      }

      /**
       * Convenience function to destruct a chart window and related GUI ({@link CIQ.ThemeManager}, {@link CIQ.MenuManager}), eliminating all references and dependencies, and optionally its containing DOM element.
       * <BR> Please note that this call will destroy the menu manager and theme manager even if multiple charts are registered to them, in which case you must manually call the destroy() method for the remaining charts.
       * @param {CIQ.ChartEngine} stx The chart object to destroy
       * @param {string} excludedSelector If passed then any top level object within chartContainer which matches this selector will not be deleted (and neither will the wrapper)
       * @since 07/01/2015
       * @memberOf CIQ
       */
      CIQ.destroy = function(stx, excludedSelector) {
        var registeredContainers = CIQ.ChartEngine.registeredContainers
        for (var rc = 0; rc < registeredContainers.length; rc++) {
          if (registeredContainers[rc] == stx.chart.container) {
            registeredContainers.splice(rc, 1)
            break
          }
        }

        // to do:
        // remove all stx stored in CIQ.MenuManager.registeredCharts insted and and remove the stx argument so the signature is CIQ.destroy=function(excludedSelector)
        stx.styles = {}
        stx.destroy()
        stx = null
        CIQ.ThemeManager.destroy()
        if (CIQ.MenuManager) CIQ.MenuManager.destroy()
        if (excludedSelector) {
          var childNodes = $$$('.stx-wrapper').childNodes
          var matches = $$$('.stx-wrapper').querySelectorAll(excludedSelector)
          for (var m = 0; m < matches.length; m++) {
            if (matches[m].parentNode == $$$('.stx-wrapper')) CIQ.appendClassName(matches[m], 'stx-passover')
          }
          for (var c = childNodes.length - 1; c >= 0; c--) {
            if (CIQ.hasClassName(childNodes[c], 'stx-passover')) CIQ.unappendClassName(childNodes[c], 'stx-passover')
            else childNodes[c].parentNode.removeChild(childNodes[c])
          }
        } else {
          $$$('.stx-wrapper').parentNode.removeChild($$$('.stx-wrapper'))
        }
      }

      /**
       * Convenience function to iterate through the charts masterData and add a data member. Generally used for additional comparison or study symbols.
       * Can be used with any array of data objects which contains at least the 'DT' (date in javascript format) and 'Close' ( close/last price ) elements of an [OHLC object](index.html#data-format).
       * The data member will be the string defined by "label".
       * Dates must be exact matches (minutes, hours, seconds, milliseconds) in order to show up in comparisons.
       * @param  {CIQ.ChartEngine} stx        	A chart object
       * @param  {String} [label]     	The new member name to add to masterData. masterData[label]=data["Close"]. Required unless "fields" is specified.
       * @param  {Array} data 			The data to add (which should align or closely align with the chart data by date)
       * @param {Array} [fields] 			The fields from the data objects to extract (as opposed to "Close") and add to the new label member. One label member will be added per field. Takes precedence over `createObject` flag.
       * @param {Boolean} [createObject] 	If true, then data elements from the data array are added as *objects* assigned to the label. Example: member[label]=data[element]; This behavior is mutually exclusive with `fields`.
       * @param {String} [fieldForLabel] 	If set, this will be the field from data copied into label, if not set, Close is used; This behavior is mutually exclusive with `fields`.
       * @memberOf CIQ
       * @since 04-2015
       * @example
       * //data element format if neither fields nor createObject are used
       * {DT:epoch,Date:strDate,Close:value}
       * //data element format if fields is used
       * {DT:epoch,Date:strDate,Field1:value,Field2:value,Field3:value,Field4:value}
       * //data element format if createObject is used
       * {DT:epoch,Date:strDate,AnyOtherData:otherData,MoreData:otherData,...}
       * @since 15-07-01 fieldForLabel argument
       */
      CIQ.addMemberToMasterdata = function(stx, label, data, fields, createObject, fieldForLabel) {
        // Match up the data and store the data point
        if (!data) return
        var mIterator = 0,
          cIterator = 0
        while (mIterator < stx.masterData.length && cIterator < data.length) {
          var c = data[cIterator]
          var m = stx.masterData[mIterator]
          if (!c.DT) c.DT = CIQ.strToDateTime(c.Date)
          if (c.DT.getTime() == m.DT.getTime()) {
            if (fields) {
              for (var i = 0; i < fields.length; i++) {
                m[fields[i]] = c[fields[i]]
              }
            } else if (createObject) {
              m[label] = c
            } else if (fieldForLabel) {
              m[label] = c[fieldForLabel]
            } else if (stx.layout.adj && typeof c.Adj_Close != 'undefined') {
              m[label] = c.Adj_Close
            } else {
              m[label] = c.Close
            }
            cIterator++
            mIterator++
            continue
          }
          if (c.DT < m.DT) cIterator++
          else mIterator++
        }
      }

      /* TOC()************* THEME HELPER ************** */

      /**
       * Generates an object that can be used to create a theme dialog. The initial
       * values contain the existing values in the current chart.
       * Simply have your dialog modify these values and then call the method update();
       *
       * Note that the chart has many granular customizations beyond what this theme
       * helper produces. These can be manipulated in the CSS. This helper simplifies
       * and consolidates into a manageable dialog.
       *
       * @param {Object} params Parameters
       * @param {CIQ.CIQ.ChartEngine} params.stx A chart object
       * @memberOf CIQ
       * @example
       * var helper=new CIQ.ThemeHelper({stx:stx});
       * console.log(helper.settings);
       * helper.settings.chart["Grid Lines"].color="rgba(255,0,0,.5)";
       * helper.update();
       */
      CIQ.ThemeHelper = function(params) {
        this.params = params
        var stx = params.stx
        var backgroundColor = '#FFFFFF'
        if (stx.chart.container) {
          backgroundColor = getComputedStyle(stx.chart.container).backgroundColor
          if (CIQ.isTransparent(backgroundColor)) backgroundColor = stx.containerColor
        }
        this.settings.chart.Background.color = CIQ.hexToRgba(backgroundColor)
        this.settings.chart['Grid Lines'].color = CIQ.hexToRgba(stx.canvasStyle('stx_grid').color)
        this.settings.chart['Grid Dividers'].color = CIQ.hexToRgba(stx.canvasStyle('stx_grid_dark').color)
        this.settings.chart['Axis Text'].color = CIQ.hexToRgba(stx.canvasStyle('stx_xaxis').color)

        this.settings.chartTypes['Candle/Bar'].up.color = CIQ.hexToRgba(stx.canvasStyle('stx_candle_up').color)

        this.settings.chartTypes['Candle/Bar'].down.color = CIQ.hexToRgba(stx.canvasStyle('stx_candle_down').color)
        this.settings.chartTypes['Candle/Bar'].up.wick = CIQ.hexToRgba(stx.canvasStyle('stx_candle_shadow_up').color)
        this.settings.chartTypes['Candle/Bar'].down.wick = CIQ.hexToRgba(
          stx.canvasStyle('stx_candle_shadow_down').color,
        )
        this.settings.chartTypes['Candle/Bar'].up.border = CIQ.hexToRgba(
          stx.canvasStyle('stx_candle_up').borderLeftColor,
        )
        this.settings.chartTypes['Candle/Bar'].down.border = CIQ.hexToRgba(
          stx.canvasStyle('stx_candle_down').borderLeftColor,
        )
        if (CIQ.isTransparent(stx.canvasStyle('stx_candle_up').borderLeftColor))
          this.settings.chartTypes['Candle/Bar'].up.border = null
        if (CIQ.isTransparent(stx.canvasStyle('stx_candle_down').borderLeftColor))
          this.settings.chartTypes['Candle/Bar'].down.border = null

        this.settings.chartTypes.Line.color = CIQ.hexToRgba(stx.canvasStyle('stx_line_chart').color)

        this.settings.chartTypes.Mountain.color = CIQ.hexToRgba(stx.canvasStyle('stx_mountain_chart').backgroundColor)
      }

      CIQ.ThemeHelper.prototype.settings = {
        chart: {
          Background: {
            color: null,
          },
          'Grid Lines': {
            color: null,
          },
          'Grid Dividers': {
            color: null,
          },
          'Axis Text': {
            color: null,
          },
        },
        chartTypes: {
          'Candle/Bar': {
            up: {
              color: null,
              wick: null,
              border: null,
            },
            down: {
              color: null,
              wick: null,
              border: null,
            },
          },
          Line: {
            color: null,
          },
          Mountain: {
            color: null,
          },
        },
      }

      /**
       * Update the current theme
       */
      CIQ.ThemeHelper.prototype.update = function() {
        var stx = this.params.stx
        var classMapping = {
          stx_candle_up: {
            stx_candle_up: true,
            stx_bar_up: true,
            stx_hollow_candle_up: true,
            stx_line_up: true,
            stx_baseline_up: true,
          },
          stx_candle_down: {
            stx_candle_down: true,
            stx_bar_down: true,
            stx_hollow_candle_down: true,
            stx_line_down: true,
            stx_baseline_down: true,
          },
          stx_shadow_up: { stx_candle_shadow_up: true },
          stx_shadow_down: { stx_candle_shadow_down: true },
          stx_line_chart: { stx_bar_chart: true, stx_line_chart: true },
          stx_grid: { stx_grid: true, stx_grid_border: true },
          stx_grid_dark: { stx_grid_dark: true },
          stx_xaxis: { stx_xaxis_dark: true, stx_xaxis: true, stx_yaxis: true, stx_yaxis_dark: true },
          stx_mountain_chart: { stx_mountain_chart: true },
          stx_market_session: { stx_market_session: true },
        }

        stx.chart.container.style.backgroundColor = this.settings.chart.Background.color

        function setStyle(style, field, value) {
          var styles = classMapping[style]
          for (var s in styles) {
            stx.setStyle(s, field, value)
          }
        }
        setStyle('stx_grid', 'color', this.settings.chart['Grid Lines'].color)
        setStyle('stx_grid_dark', 'color', this.settings.chart['Grid Dividers'].color)
        setStyle('stx_xaxis', 'color', this.settings.chart['Axis Text'].color)

        setStyle('stx_candle_up', 'color', this.settings.chartTypes['Candle/Bar'].up.color)
        setStyle('stx_candle_down', 'color', this.settings.chartTypes['Candle/Bar'].down.color)
        setStyle('stx_shadow_up', 'color', this.settings.chartTypes['Candle/Bar'].up.wick)
        setStyle('stx_shadow_down', 'color', this.settings.chartTypes['Candle/Bar'].down.wick)

        // Only apply borders to candle, not the other types
        stx.setStyle('stx_candle_up', 'borderLeftColor', this.settings.chartTypes['Candle/Bar'].up.border)
        stx.setStyle('stx_candle_down', 'borderLeftColor', this.settings.chartTypes['Candle/Bar'].down.border)

        setStyle('stx_line_chart', 'color', this.settings.chartTypes.Line.color)

        stx.setStyle('stx_mountain_chart', 'borderTopColor', this.settings.chartTypes.Mountain.color)
        stx.setStyle(
          'stx_mountain_chart',
          'backgroundColor',
          CIQ.hexToRgba(this.settings.chartTypes.Mountain.color, 0.8),
        )
        stx.setStyle('stx_mountain_chart', 'color', CIQ.hexToRgba(this.settings.chartTypes.Mountain.color, 0.1))
        stx.draw()
      }

      /* TOC()************* NAME VALUE STORE ************** */

      /**
       * Base class for interacting with a name value store. This base class saves to local storage
       * but you can override your own for remote storage.
       */
      CIQ.NameValueStore = function() {}

      CIQ.NameValueStore.prototype.toJSONIfNecessary = function(obj) {
        if (obj.constructor == String) return obj
        try {
          var s = JSON.stringify(obj)
          return s
        } catch (e) {
          console.log('Cannot convert to JSON: ' + obj)
          return null
        }
      }

      CIQ.NameValueStore.prototype.fromJSONIfNecessary = function(obj) {
        try {
          var s = JSON.parse(obj)
          return s
        } catch (e) {
          return obj
        }
      }

      /**
       * Get a value from the name value store
       * @param  {String}   field The field to fetch
       * @param  {Function} cb    Callback. First field is error or null. Second field is the result.
       * @example
       * nameValueStore.get("myfield", function(err,data){
       *    if(!err){
       *        // do something with data
       *    }
       * });
       */
      CIQ.NameValueStore.prototype.get = function(field, cb) {
        var value = CIQ.localStorage.getItem(field)
        cb(null, this.fromJSONIfNecessary(value))
      }

      CIQ.NameValueStore.prototype.set = function(field, value, cb) {
        CIQ.localStorage.setItem(field, this.toJSONIfNecessary(value))
        if (cb) cb(null)
      }

      CIQ.NameValueStore.prototype.remove = function(field, cb) {
        CIQ.localStorage.removeItem(field)
        if (cb) cb(null)
      }

      /* TOC()************* PLOTTER ************** */

      /**
       * The Plotter is a device for managing complex drawing operations on the canvas. The HTML 5 canvas performs better when drawing
       * operations of the same color are batched (reducing the number of calls to the GPU). The plotter allows a developer to store those
       * operations in a normal control flow, and then have the Plotter deliver the primitives to the canvas. The plotter can also be used
       * as a caching mechanism for performing the same operations repeatedly. The y-axis of the chart uses this mechanism to boost performance.
       * @constructor
       * @name  CIQ.Plotter
       */
      CIQ.Plotter = function() {
        this.seriesArray = []
        this.seriesMap = {}
      }

      CIQ.Plotter.prototype = {
        /**
         * Define a series to plot. A series is a specific color and referenced by name
         * @param {string} name         Name of series
         * @param {boolean} strokeOrFill If true then a stroke operation, otherwise a fill operation
         * @param {string} color        A valid canvas color
         * @param {number} [opacity=1]      A valid opacity from 0-1
         * @param {number} [width=1]      A valid lineWidth from 1
         * @memberOf CIQ.Plotter
         */
        Series: function(name, strokeOrFill, color, opacity, width) {
          this.name = name
          this.strokeOrFill = strokeOrFill
          this.color = color
          this.opacity = opacity
          this.width = width
          this.moves = []
          this.text = []
          if (!opacity || opacity > 1 || opacity < 0) this.opacity = 1
          if (!width || width > 25 || width < 1) this.width = 1
        },
        /**
         * Create a series. This supports either a text color or CIQ.ChartEngine.Style object
         * @see  CIQ.Plotter.Series
         * @memberOf CIQ.Plotter
         */
        newSeries: function(name, strokeOrFill, colorOrStyle, opacity, width) {
          var series
          if (colorOrStyle.constructor == String)
            series = new this.Series(name, strokeOrFill, colorOrStyle, opacity, width)
          else series = new this.Series(name, strokeOrFill, colorOrStyle.color, colorOrStyle.opacity, width)
          this.seriesArray.push(series)
          this.seriesMap[name] = series
        },
        /**
         * @memberOf CIQ.Plotter
         */
        moveTo: function(name, x, y) {
          var series = this.seriesMap[name]
          series.moves.push({ action: 'moveTo', x: x, y: y })
        },
        /**
         * @memberOf CIQ.Plotter
         */
        lineTo: function(name, x, y) {
          var series = this.seriesMap[name]
          series.moves.push({ action: 'lineTo', x: x, y: y })
        },
        /**
         * @memberOf CIQ.Plotter
         */
        dashedLineTo: function(name, x, y, pattern) {
          var series = this.seriesMap[name]
          series.moves.push({ action: 'dashedLineTo', x: x, y: y, pattern: pattern })
        },
        /**
         * @memberOf CIQ.Plotter
         */
        quadraticCurveTo: function(name, x0, y0, x1, y1) {
          var series = this.seriesMap[name]
          series.moves.push({ action: 'quadraticCurveTo', x0: x0, y0: y0, x: x1, y: y1 })
        },
        /**
         * Add text to be rendered with the drawing. Primarily used when the Plotter is used for caching since there is no
         * performance benefit from batching text operations to the GPU. If specifying a bounding box, textBaseline="middle" is assumed
         * @param {string} name Name of series
         * @param {string} text The raw text to render
         * @param {number} x    X position on canvas for text
         * @param {number} y    Y position on canvas for text
         * @param {string} [backgroundColor] Optional, will put a box underneath the text
         * @param {number} [width] Optional width of bounding box
         * @param {number} [height] Optional height of bounding box
         * @memberOf CIQ.Plotter
         */
        addText: function(name, text, x, y, backgroundColor, width, height) {
          var series = this.seriesMap[name]
          series.text.push({ text: text, x: x, y: y, bg: backgroundColor })
        },
        /**
         * Renders the text objects. This is done after drawing primitives for each series.
         * @private
         * @memberOf CIQ.Plotter
         */
        drawText: function(context, series) {
          for (var i = 0; i < series.text.length; i++) {
            var textObj = series.text[i]
            if (textObj.bg) {
              var w = textObj.width ? textObj.width : context.measureText(textObj.text).width
              var h = textObj.height ? textObj.height : 12
              var prev = context.fillStyle
              context.fillStyle = textObj.bg
              if (context.textAlign == 'right') {
                context.fillRect(textObj.x, textObj.y + h / 2, -w, -h)
              } else {
                context.fillRect(textObj.x, textObj.y + h / 2, w, h)
              }
              context.fillStyle = prev
            }
            context.fillText(textObj.text, textObj.x, textObj.y)
          }
        },
        /**
         * Render the plotter. All of the stored operations are sent to the canvas. This operation stores and restores
         * global canvas parameters such as fillStyle, strokeStyle and globalAlpha.
         * @param  {object} context A valid HTML canvas context
         * @param  {string} [name]    Optionally render only a specific series. If null or not provided then all series will be rendered.
         * @memberOf CIQ.Plotter
         */
        draw: function(context, name) {
          var prevWidth = context.lineWidth
          var prevFillStyle = context.fillStyle
          var prevStrokeStyle = context.strokeStyle
          var prevGlobalAlpha = context.globalAlpha
          for (var i = 0; i < this.seriesArray.length; i++) {
            var series = this.seriesArray[i]
            if (name && series.name != name) continue
            context.beginPath()
            context.lineWidth = series.width
            context.globalAlpha = series.opacity
            context.fillStyle = series.color
            context.strokeStyle = series.color
            for (var j = 0; j < series.moves.length; j++) {
              var move = series.moves[j]
              if (move.action == 'quadraticCurveTo') {
                context[move.action](move.x0, move.y0, move.x, move.y)
              } else if (move.action == 'dashedLineTo') {
                context[move.action](series.moves[j - 1].x, series.moves[j - 1].y, move.x, move.y, move.pattern)
              } else {
                context[move.action](move.x, move.y)
              }
            }
            if (series.strokeOrFill == 'fill') {
              context.fill()
            } else {
              context.stroke()
            }
            context.closePath()
            this.drawText(context, series)
            context.lineWidth = 1
          }
          context.lineWidth = prevWidth
          context.fillStyle = prevFillStyle
          context.strokeStyle = prevStrokeStyle
          context.globalAlpha = prevGlobalAlpha
        },
      }

      /* TOC()************* EASE MACHINE ************** */

      /**
       * A simple device to make ease functions easy to use. Requests a cubic function that takes the form function (t, b, c, d)
       * 		t = current time
       * 		b = starting value
       * 		c = change in value
       * 		d = duration
       * @param {Function} fc        The cubic function
       * @param {Number} ms         Milliseconds to perform the function
       * @param {Map} [startValues] Name value pairs of starting values (or pass in a single value)
       * @param {Map} [endValues]   Name value pairs of ending values (or pass in a single value)
       * @name  CIQ.EaseMachine
       * @constructor
       * @example
       * var e=new CIQ.EaseMachine(Math.easeInOutCubic, 200);
       * e.run(function(v){console.log(v)}, 100, 110);
       */
      CIQ.EaseMachine = function(fc, ms, startValues, endValues) {
        this.fc = fc
        this.ms = ms
        if (startValues || startValues === 0) {
          this.reset(startValues, endValues)
        }
      }

      /**
       * Resets the EaseMachine with a new set of values
       * @param {Map} [startValues] Name value pairs of starting values (or pass in a single value). If null then the currentValues will become the startValues (allowing for resetting or reversing of direction)
       * @param {Map} endValues   Name value pairs of ending values (or pass in a single value)
       * @memberOf CIQ.EaseMachine
       */
      CIQ.EaseMachine.prototype.reset = function(startValues, endValues) {
        if (!startValues && startValues !== 0) startValues = this.currentValues
        this.hasCompleted = false
        this.running = false
        this.okayToRun = true
        this.useNameValuePairs = typeof endValues == 'object'
        this.startTime = Date.now()
        if (this.useNameValuePairs) {
          this.startValues = startValues
          this.endValues = endValues
        } else {
          this.startValues = { default: startValues }
          this.endValues = { default: endValues }
        }
        this.changeValues = {}
        this.currentValues = {}
        for (var n in this.startValues) {
          this.changeValues[n] = this.endValues[n] - this.startValues[n]
        }
      }

      /**
       * Returns the next set of values, or individual value
       * @return {Map} Name value pairs of current values or current value
       * @memberOf CIQ.EaseMachine
       */
      CIQ.EaseMachine.prototype.next = function() {
        var now = Date.now()
        if (now >= this.startTime + this.ms) {
          now = this.startTime + this.ms
          this.hasCompleted = true
          this.running = false
        }
        this.currentValues = {}
        for (var n in this.changeValues) {
          this.currentValues[n] = this.fc(now - this.startTime, this.startValues[n], this.changeValues[n], this.ms)
        }
        if (!this.useNameValuePairs) return this.currentValues['default']
        return this.currentValues
      }

      /**
       * This will be true when the cubic has completed
       * @type {Boolean}
       * @memberOf CIQ.EaseMachine
       */
      CIQ.EaseMachine.prototype.hasCompleted = false

      /**
       * Runs the ease machine in a loop until completion by calling next() from within a requestAnimationFrame.
       * @param {Function} fc Function callback, will receive the results of {@link CIQ.EaseMachine#next}
       * @param {Map} [startValues] Name value pairs of starting values (or pass in a single value)
       * @param {Map} [endValues]   Name value pairs of ending values (or pass in a single value)
       * @param {Boolean} [delayFirstRun=false] Normally, the first pass of the run will happen immediately. Pass true if you want to wait for the next animation frame before beginning.
       * @memberOf CIQ.EaseMachine
       */
      CIQ.EaseMachine.prototype.run = function(fc, startValues, endValues, delayFirstRun) {
        if (this.afid) cancelAnimationFrame(this.afid)
        this.running = true
        if (startValues || startValues === 0) {
          this.reset(startValues, endValues)
        } else if (endValues || endValues === 0) {
          this.reset(this.currentValues, endValues)
        }
        var self = this
        function go() {
          self.afid = null
          if (!self.okayToRun) return
          var result = self.next()
          fc(result)
          if (self.hasCompleted) return
          self.afid = requestAnimationFrame(go)
        }
        if (delayFirstRun) this.afid = requestAnimationFrame(go)
        else go()
      }

      /**
       * Stops the ease machine from running mid-animation. Returns the current state.
       * @return {Map} Name value pairs of current values or current value
       * @memberOf CIQ.EaseMachine
       */
      CIQ.EaseMachine.prototype.stop = function() {
        if (this.afid) cancelAnimationFrame(this.afid)
        this.afid = null
        this.okayToRun = false
        this.running = false
        if (typeof this.useNameValuePairs == 'undefined') return {}
        if (!this.useNameValuePairs) return this.currentValues['default']
        return this.currentValues
      }

      /* TOC()************* RENDERER ************** */

      /**
       * Base class for Renderers.
       * A renderer is used to draw a complex visualization based on one or more "series" of data.
       * This is a reusable object. Once defined and attached to a chart, it shouldn’t have to be recreated every time a symbol changed.
       * The series inside the renderers may change with a new symbol, but the linked renderer itself remains the vehicle for adding series.
       * @name  CIQ.Renderer
       * @constructor
       */
      CIQ.Renderer = function() {}

      /**
       * If your render manages a yAxis then the necessary calculations (high and low) should be made here
       * @memberOf CIQ.Renderer
       */
      CIQ.Renderer.prototype.performCalculations = function() {}

      /**
       * Perform drawing operations here.
       * @memberOf CIQ.Renderer
       */
      CIQ.Renderer.prototype.draw = function() {}

      /**
	 * Default constructor for a renderer. Override this if desired.
	 * @param  {object} config Configuration for the renderer
	 * @param  {function} [config.callback] Callback function to perform activity post-drawing, for example, creating a legend. It will be called with a 'colors' argument, which will be an array of objects containing the colors used to draw the rendering. ( Example: cb(colors); ). See example for format.
	 * @param  {string} [config.id] Handle to access the rendering in the future.  If not provided, one will be generated.
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {string} [config.params.name] Name of the renderer. Default: 'Data'.  This is used when displaying error message on screen
	 * @param  {string} [config.params.panel] The name of the panel to put the rendering on, defaults to "chart"
	 * @param  {boolean} [config.params.overChart] If set to true, will draw the rendering on top of the chart rather than as an underlay. By default rendering will be as underlay.
	 * @param  {boolean} [config.params.yAxis] Optional Y-axis object to use for the series.
	 * @param  {number} [config.params.opacity] Opacity of the rendering as a whole.  Can be overridden by an opacity set for a series.  Valid values are 0.0-1.0. Default: 1
	 * @memberOf CIQ.Renderer
	 * @example
		stxx.addSeries("NOK", {display:"NOK",width:4});
		stxx.addSeries("SNE", {display:"Sony",width:4});

		var axis=new CIQ.ChartEngine.YAxis();
		axis.position="left";
		axis.textStyle="#FFBE00";

		var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", yAxis:axis}}));

		renderer.removeAllSeries()
			.attachSeries("NOK", "#FFBE00")
			.attachSeries("SNE", "#FF9300")
			.ready();

	 */
      CIQ.Renderer.prototype.construct = function(config) {
        var params = config.params ? config.params : {}
        if (!params.name) params.name = CIQ.uniqueID()
        if (!params.heightPercentage) params.heightPercentage = 0.7
        if (!params.opacity) params.opacity = 1
        if (!params.type) params.type = 'line'
        if (params.type == 'legacy' || params.type == 'line' || params.type == 'mountain') params.highlightable = true
        if (!params.panel) params.panel = 'chart'
        this.cb = config.callback
        this.params = params
        this.seriesParams = []
        this.caches = {}
        this.colors = {}
      }

      /**
	 * Attach a series to the renderer.
	 * This assumes that the series data *is already in the dataSet* and simply connects it to the renderer with the specified parameters. See {@link CIQ.ChartEngine#addSeries} for details on how to create a series.
	 * See {@link CIQ.ChartEngine.addSeries}.
	 *
	 * The color defined when attaching a series will supersede any color defined when a series was created. This allows you to attach the same series to multiple renderers, each rendering displaying the same series data in a different color if desired.
	 *
	 * @param  {String} field      The name of the field. Name of the field in the dataSet to use for the series.
	 * @param  {object} parameters Settings to control color and opacity of <B>each</B> series in the group. See {@link CIQ.ChartEngine#addSeries} for implementation examples. <P>Argument format can be:<ul><li> a `string` containing the color</li><li> or a more granular `object` having the following members:</li></ul>
	 * @param  {string} [parameters.fill_color_up] Color to use to fill the part when the Close is higher than the previous (#RRGGBB(AA) format or null to not draw)
	 * @param  {string} [parameters.border_color_up] Color to use to draw the border when the Close is higher than the previous (#RRGGBB(AA) format or null to not draw)
	 * @param  {number} [parameters.opacity_up] Opacity to use to fill the part when the Close is higher than the previous (0.0-1.0). Default: .4
	 * @param  {string} [parameters.fill_color_down] Color to use to fill the part when the Close is lower than the previous (#RRGGBB(AA) format or null to not draw)
	 * @param  {string} [parameters.border_color_down] Color to use to draw the border when the Close is lower than the previous (#RRGGBB(AA) format or null to not draw)
	 * @param  {number} [parameters.opacity_down] Opacity to use to fill the part when the Close is lower than the previous (0.0-1.0) default: .4
	 * @param  {string} [parameters.color] Color to use to fill the series if fill_color_up or fill_color_down is not specified (#RRGGBB(AA) format).
	 * @param  {boolean} [parameters.permanent] For line chart, whether it can be removed by the user. By default the series will not be permanent. This flag (including the default) will supersede the permanent flag of the actual series. As such, a series will not be permanent unless you set this flag to 'true', even if the series being attached was flaged set as permanent when defined. This gives the renderer most control over the rendering process.
	 * @return {CIQ.Renderer}            Returns a copy of this for chaining
	 * @memberOf CIQ.Renderer
	 * @example
		stxx.addSeries("NOK", {display:"NOK",width:4});

		var axis=new CIQ.ChartEngine.YAxis();
		axis.position="left";
		axis.textStyle="#FFBE00";

		var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", yAxis:axis}}));

		renderer.removeAllSeries()
			.attachSeries("NOK", "#FFBE00")
			.attachSeries("SNE", "#FF9300")
			.ready();

	 */
      CIQ.Renderer.prototype.attachSeries = function(field, parameters) {
        if (!this.stx || !this.stx.chart.series[field]) return this
        var sp = {
          field: field,
          chartType: this.params.type,
          display: this.stx.chart.series[field].parameters.display,
          border_color_up: this.params.defaultBorders ? 'auto' : null,
          fill_color_up: this.stx.chart.series[field].parameters.color,
          opacity_up: this.params.opacity,
          border_color_down: this.params.defaultBorders ? 'auto' : null,
          fill_color_down: this.stx.chart.series[field].parameters.color,
          opacity_down: this.params.opacity,
          color: this.stx.chart.series[field].parameters.color,
        }
        if (typeof parameters == 'string') {
          sp.color = sp.fill_color_down = sp.fill_color_up = parameters
        } else if (typeof parameters == 'object') {
          for (var p in parameters) sp[p] = parameters[p]
          if (sp.color) {
            if (!sp.fill_color_up) sp.fill_color_up = sp.color
            if (!sp.fill_color_down) sp.fill_color_down = sp.color
          }
        }

        this.removeSeries(field, true).seriesParams.push(sp)

        if (sp.fill_color_up != sp.fill_color_down) {
          this.colors[field + ' up'] = {
            color: sp.fill_color_up,
            opacity: sp.opacity_up,
            display: sp.display ? sp.display + ' up' : field + ' up',
          }
          this.colors[field + ' dn'] = {
            color: sp.fill_color_down,
            opacity: sp.opacity_down,
            display: sp.display ? sp.display + ' down' : field + ' down',
          }
        } else {
          this.colors[field] = {
            color: sp.fill_color_up,
            opacity: sp.opacity_up,
            display: sp.display ? sp.display : field,
          }
        }
        if (this.params.yAxis) {
          this.stx.addYAxis(this.stx.panels[this.params.panel], this.params.yAxis)
        }
        return this
      }

      /**
       * Removes a series from the renderer and the yAxis from the panel if it is not being used by any current renderers.
       * @param  {String} field          The field name of the series.
       * @param  {Boolean} [preserveSeries=false] Set to true to keep the series data in the CIQ.ChartEngine object.
       * @return {CIQ.Renderer}                A copy of this for chaining
       * @memberOf CIQ.Renderer
       */
      CIQ.Renderer.prototype.removeSeries = function(field, preserveSeries) {
        for (var sp = 0; sp < this.seriesParams.length; sp++) {
          if (this.seriesParams[sp].field == field) {
            this.seriesParams.splice(sp, 1)
            break
          }
        }
        delete this.colors[field + ' up']
        delete this.colors[field + ' dn']
        delete this.colors[field]

        if (!preserveSeries) {
          if (!this.stx.chart.series[field] || !this.stx.chart.series[field].parameters.permanent) {
            var seriesInUse = false
            for (var plot in this.stx.chart.seriesRenderers) {
              var myPlot = this.stx.chart.seriesRenderers[plot]
              for (var s = 0; s < myPlot.seriesParams.length; s++) {
                if (myPlot.seriesParams[s].field == field) {
                  seriesInUse = true
                  break
                }
              }
              if (seriesInUse) break
            }
            if (!seriesInUse) {
              this.stx.deleteSeries(field, this.stx.chart)
            }
          }
        }
        this.stx.deleteYAxisIfUnused(this.stx.panels[this.params.panel], this.params.yAxis)
        return this
      }

      /**
       * Removes all series from the renderer and the yAxis from the panel if it is not being used by any current renderers.
       * @param {Boolean} [eraseData=false] Set to true to erase the actual series data in the CIQ.ChartEngine otherwise it will be retained
       * @return {CIQ.Renderer} A copy of this for chaining
       * @memberOf CIQ.Renderer
       */
      CIQ.Renderer.prototype.removeAllSeries = function(eraseData) {
        if (eraseData) {
          var arr = []
          // Compile a list of all of the fields
          for (var sp = 0; sp < this.seriesParams.length; sp++) {
            arr.push(this.seriesParams[sp].field)
          }
          for (var i = 0; i < arr.length; i++) {
            this.removeSeries(arr[i])
          }
        }
        this.seriesParams = []
        this.colors = {}
        this.stx.deleteYAxisIfUnused(this.stx.panels[this.params.panel], this.params.yAxis)
        return this
      }

      /**
       * Call this to immediately render the visualization, at the end of a chain of commands.
       * @return {CIQ.Renderer} A copy of this for chaining
       * @memberOf CIQ.Renderer
       */
      CIQ.Renderer.prototype.ready = function() {
        this.stx.createDataSet()
        this.stx.draw()
        return this
      }

      /**
	 * Creates a Lines renderer
	 *
	 * Note: by default the renderer will display lines as underlays. As such, they will appear below the chart ticks and any other studies or drawings.
	 *
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {Object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {number} [config.params.width] Width of the rendered line
	 * @param  {string} [config.params.subtype="none"] Subtype of rendering: "step" or "none"
	 * @param  {string} [config.params.type="line"] Type of rendering "line", "mountain"
	 * @constructor
	 * @name  CIQ.Renderer.Lines
	 *
	 * @example
		// create series for the renderer
		stxx.addSeries("NOK", {display:"NOK",width:4});
		stxx.addSeries("SNE", {display:"Sony",width:4});

		// create the y axis to assign to the renderer
		var axis=new CIQ.ChartEngine.YAxis();
		axis.position="left";
		axis.textStyle="#FFBE00";

		// create a renderer and associate it to the chart
		var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", yAxis:axis}}));

		// remove all series form the renderer (not always needed) , attach new series, and render.
		renderer.removeAllSeries()
			.attachSeries("NOK", "#FFBE00")
			.attachSeries("SNE", "#FF9300")
			.ready();

	 *
	 * @example
		// This is an example on how completely remove a renderer and all associated data.
		// This should only be necessary if you are also removing the chart itself.

		// remove all series from the renderer including series data from the masterData
  		renderer.removeAllSeries(true);

  		// detach the series renderer from the chart.
  		stxx.removeSeriesRenderer(renderer);

  		// delete the renderer itself.
  		delete renderer;
	 */
      CIQ.Renderer.Lines = function(config) {
        this.construct(config)
      }
      CIQ.Renderer.Lines.ciqInheritsFrom(CIQ.Renderer, false)

      CIQ.Renderer.Lines.prototype.performCalculations = function() {
        var yAxis = this.params.yAxis,
          stx = this.stx
        if (yAxis) {
          var panel = stx.panels[this.params.panel]
          var fields = []
          for (var i = 0; i < this.seriesParams.length; i++) {
            fields.push(this.seriesParams[i].field)
          }
          var minMax = stx.determineMinMax(stx.chart.dataSegment, fields, false, true)
          stx.calculateYAxisRange(panel, yAxis, minMax[0], minMax[1])
          yAxis.high = minMax[1]
          yAxis.low = minMax[0]
        }
      }

      CIQ.Renderer.Lines.prototype.draw = function() {
        var chart = this.stx.panels[this.params.panel].chart
        var seriesMap = {}
        var s,
          seriesParams = this.seriesParams
        for (s = 0; s < seriesParams.length; s++) {
          if (chart.series[seriesParams[s].field]) {
            // make sure the series is still there.
            var defaultParams = CIQ.clone(chart.series[seriesParams[s].field].parameters)
            seriesMap[seriesParams[s].field] = {
              parameters: CIQ.extend(CIQ.extend(defaultParams, this.params), seriesParams[s]),
              yValueCache: this.caches[seriesParams[s].field],
              useChartLegend: this.params.type == 'legacy',
            }
          }
        }
        this.stx.drawSeries(chart, seriesMap, this.params.yAxis)
        for (s in seriesMap) {
          this.caches[s] = seriesMap[s].yValueCache
        }
      }

      return _exports
    }

  var __js_core_engine_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function(_exports, timezone, polyfills, market) {
      Math.easeOutCubic = function(t, b, c, d) {
        t /= d
        t--
        return c * (t * t * t + 1) + b
      }

      var CIQ = _exports.CIQ,
        $$ = _exports.$$,
        $$$ = _exports.$$$,
        timezoneJS = _exports.timezoneJS

      /* TOC()************* CIQ.CHARTENGINE CONFIGURATION ************** */
      /**
       * This is the constructor that instantiates the basic chart object and links it to its DOM container.
       * Before any chart operations can be performed this constructor must be called.
       *
       * Multiple CIQ.ChartEngine (stx) objects can exist on an HTML document.
       * `charts` is a member object that can contain multiple charts (in separate panels).
       * For backward compatibility, there is always one chart called `stxx.chart` which points to the first chart in the `charts` object.
       * Users can feel free to reference this chart directly if they only ever need to support a single chart panel.
       * `chart` contains some variables that are applicable to all of the charts on the screen (i.e. canvas, canvasWidth, canvasHeight, etc)
       *
       * Each "chart" contains a unique set of data. In theory each chart supports a separate scroll position but this is not implemented.
       * @constructor
       * @param {Object} config Configuration object. Any field or object within the config parameter will be preset or added to the CIQ.ChartEngine object itself.
       * Generally you will want to at least include {container: <your div element>}.
       * @name  CIQ.ChartEngine
       * @example
       * // declare a chart
       * var stxx=new CIQ.ChartEngine({container: $$("chartContainer")});
       * // override defaults after a chart object is declared (this can be done at any time. If the chart has already been rendered, you will need to call `stx.draw();` to immediately see your changes )
       * stxx.yaxisLabelStyle="roundRectArrow";
       * stxx.layout.chartType="bar";
       * @example
       * // declare a chart and preset defaults
       * var stxx=new CIQ.ChartEngine({container: $$("chartContainer"),layout:{"chartType": "candle","candleWidth": 16}});
       * @since  15-07-01 deprecated CIQ.ChartEngine#underlayPercentage
       */
      CIQ.ChartEngine = function(config) {
        if (!config)
          config = {
            container: null,
          }
        if (config.constructor == HTMLDivElement) {
          // legacy versions accepted the chart container as the first parameters rather than a config object
          var newConfig = {
            container: config,
          }
          config = newConfig
        }
        /**
         * READ ONLY. A map of marker objects, sorted by label.
         * @type object
         * @alias markers
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.markers = {}
        /**
         * READ ONLY. An array of currently enabled panels
         * @type object
         * @alias panels
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.panels = {}
        /**
         * READ ONLY. An array of currently enabled overlay studies
         * @type object
         * @alias overlays
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.overlays = {}
        /**
         * READ ONLY. The charts on the screen. Will contain at least one item, "chart"
         * @type object
         * @alias charts
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.charts = {}
        /**
         * READ ONLY. Array of event listeners. These listeners will be killed when {@link CIQ.ChartEngine#destroy} is called.
         * @type array
         * @alias eventListeners
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.eventListeners = []

        /**
         * Animations. These can be overridden with customized EaseMachines
         * To disable an animation replace with an EaseMchine with zero ms as the second parameter.
         * @type {Object}
         */
        this.animations = {
          zoom: new CIQ.EaseMachine(Math.easeOutCubic, 400),
        }
        /**
         * Specify callbacks.
         * You can also register for a callback with {@link CIQ.ChartEngine#addEventListener}
         * @type {object}
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.callbacks = {
          /**
           * Called when a user right clicks on an overlay study.
           *
           * ***Please note that this callback must be set *before* you call {@link CIQ.ChartEngine#importLayout}.
           * Otherwise your imported studies will not have an edit capability***
           *
           * Format:<br>
           * callback({stx, sd, inputs, outputs, parameters})
           * @type Function
           * @alias callbacks.studyOverlayEdit
           * @memberOf! CIQ.ChartEngine#
           */
          studyOverlayEdit: null,
          /**
           * Called when a user clicks the edit button on a study panel. If forceEdit==true then a user has clicked
           * on an edit button (cog wheel) so pull up an edit dialog. Otherwise they have simply right clicked so
           * give them a context menu.
           *
           * ***Please note that this callback should be set *before* you call {@link CIQ.ChartEngine#importLayout}.
           * Otherwise your imported studies will not have an edit capability***
           *
           * Format:<br>
           * callback({stx, sd, inputs, outputs, parameters, forceEdit})
           * @type Function
           * @alias callbacks.studyPanelEdit
           * @memberOf! CIQ.ChartEngine#
           */
          studyPanelEdit: null,
          /**
           * Called when a user clicks or taps on the chart. Not called if a drawing tool is active!
           *
           * Format:<br>
           * callback({stx:CIQ.ChartEngine, panel:CIQ.ChartEngine.Panel, x:this.cx, y:this.cy})
           * @type Function
           * @alias callbacks.tap
           * @memberOf! CIQ.ChartEngine#
           * @example
           * stxx.addEventListener("tap", function(tapObject){
           * 	alert('tap event at x: ' + tapObject.x + ' y: '+ tapObject.y);
           * });
           */
          tap: null,
          /**
           * Called when a user clicks or right clicks on the chart. Not called if the user right clicks on a drawing or study
           * unless stxx.bypassRightClick=true
           *
           * Format:<br>
           * callback({stx:CIQ.ChartEngine, panel:CIQ.ChartEngine.Panel, x:this.cx, y:this.cy})
           * @type Function
           * @alias callbacks.tap
           * @memberOf! CIQ.ChartEngine#
           * @example
           * stxx.addEventListener("rightClick", function(tapObject){
           * 	alert('right click event at x: ' + tapObject.x + ' y: '+ tapObject.y);
           * });
           * @since  09-2016-19
           */
          rightClick: null,
          /**
           * Called when a user "long holds" on the chart. By default this is set to 1000 milliseconds.
           * Optionally change the value of stxx.longHoldTime to a different setting, or set to zero to disable.
           *
           * Format:<br>
           * callback({stx:CIQ.ChartEngine, panel:CIQ.ChartEngine.Panel, x:this.cx, y:this.cy})
           * @type Function
           * @alias callbacks.tap
           * @memberOf! CIQ.ChartEngine#
           * @example
           * stxx.longHoldTime=... // Optionally override default value of 1000ms
           * stxx.addEventListener("longhold", function(tapObject){
           * 	alert('longhold event at x: ' + tapObject.x + ' y: '+ tapObject.y);
           * });
           * @memberOf! CIQ.ChartEngine#
           * @since 2016-06-22
           */
          longhold: null,
          /**
           * Called when a user moves on the chart. Not called if a drawing tool is active, panel resizing, etc
           * grab is true if a mouse user has the mouse button down while moving. For touch users it is true
           * if they do not have the crosshair tool enabled.
           *
           * Format:<br>
           * callback({stx:CIQ.ChartEngine, panel:CIQ.ChartEngine.Panel, x:this.cx, y:this.cy, grab:boolean})
           * @type Function
           * @alias callbacks.move
           * @memberOf! CIQ.ChartEngine#
           */
          move: null,

          /**
           * Called when the layout changes
           * Format:<br>
           * callback({stx:CIQ.ChartEngine, chart:CIQ.ChartEngine.Chart, symbol: String, symbolObject:Object, layout: Object})
           * @type Function
           * @alias callbacks.layout
           * @memberOf! CIQ.ChartEngine#
           */
          layout: null,
          /**
           * Called when a drawing is added or deleted (all the drawings are returned, not just the new one)
           * Format:<br>
           * callback({stx:CIQ.ChartEngine, symbol: String, symbolObject:Object, drawings: Object})
           * @type Function
           * @alias callbacks.drawing
           * @memberOf! CIQ.ChartEngine#
           */
          drawing: null,
          /**
           * Called when the symbol is changed (when newChart is called), added (addSeries) or removed (removeSeries). Note
           * that this is not called if the symbol change occurs during an importLayout
           * Format:<br>
           * callback({stx:CIQ.ChartEngine, symbol: String, symbolObject:Object, action:["master"|"add-series"|"remove-series"})
           * @type Function
           * @alias callbacks.symbolChange
           * @memberOf! CIQ.ChartEngine#
           * @since 06-2016-21
           */
          symbolChange: null,

          /**
           * Called to determine how many decimal places the stock trades in. This is used for head's up display
           * and also for the current price pointer label.
           *
           * Format:<br>
           * callback({stx:CIQ.ChartEngine, chart:CIQ.ChartEngine.Chart, symbol: String, symbolObject:Object})
           * @type Function
           * @alias callbacks.calculateTradingDecimalPlaces
           * @memberOf! CIQ.ChartEngine#
           */
          calculateTradingDecimalPlaces: CIQ.calculateTradingDecimalPlaces,
        }
        /**
         * Holds the HTML control elements managed by the chart. Usually this will be a copy of the default [htmlControls]{@link CIQ.ChartEngine#htmlControls}.
         * These are not the GUI elements around the chart, but rather the HTML elements that the library will directly interact with on the canvas
         * for things like panel resizing, study edit controls, zooming controls, etc. See {@link CIQ.ChartEngine#htmlControls} for more details.
         * @type object
         * @alias controls
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.controls = {} // contains the HTML controls for the chart (zoom, home, etc)
        this.goneVertical = false // Used internally for pinching algorithm
        this.pinchingScreen = false // "
        this.grabbingScreen = false // Used internally for panning. Toggles to true when the screen is being panned
        this.grabStartX = 0 // Used internally for panning
        this.grabStartY = 0 // "
        this.grabStartScrollX = 0 // "
        this.grabStartScrollY = 0 // "
        this.swipe = {} // "
        /**
         * Number of pixels the mouse needs to move in vertical direction to "unlock" vertical panning/scrolling.
         * Setting to a number larger than the pixels on the canvas will also disable vertical scrolling
         * @type number
         * @default
         * @alias yTolerance
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * //This will disable the tolerance, so panning will immediately follow the user actions without maintaining a locked vertical location when panning left or right.
         * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
         * stxx.yTolerance=0;
         */
        this.yTolerance = 100

        /**
         * Number of bars to always keep on the left of the screen when the user pans forward in time (moves chart from right to left).
         * If this is set to less than 1 then it will be possible to have a blank chart.
         * See {@link CIQ.ChartEngine.Chart#allowScrollPast} for instructions on how to prevent users from scrolling past the oldest bar on the chart.
         * @type number
         * @default
         * @alias minimumLeftBars
         * @memberOf CIQ.ChartEngine.prototype
         * @since 05-2016-10
         */
        this.minimumLeftBars = 1
        this.grabStartCandleWidth = 0 // Used internally for zooming
        this.grabStartZoom = 0 // "
        this.grabOverrideClick = false // "
        this.grabMode = '' // Used internally. Set to either pan, zoom-x or zoom-y when grabbing screen
        this.vectorsShowing = false // Used internally to ensure that vectors aren't drawn more than once
        this.mouseMode = true // Used internally. For Windows8 devices this is set to true or false depending on whether the last touch was a mouse click or touch event. To support all-in-one computers
        /**
         * Set to true to reverse direction of mousewheel for zooming
         * @type boolean
         * @default
         * @alias reverseMouseWheel
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.reverseMouseWheel = false
        /**
         * Set to false to turn off mousewheel acceleration
         * @type boolean
         * @default
         * @alias mouseWheelAcceleration
         * @since 2015-11-1
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.mouseWheelAcceleration = true
        /**
         * Minimum candleWidth (in pixels) allowed when zooming out. This will determine the maximum number of ticks to display on the chart.
         * Anything smaller than **0.5 pixels** may cause performance issues when zooming out.
         * @type number
         * @default
         * @alias minimumCandleWidth
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.minimumCandleWidth = 1
        /**
         * Minimum number of ticks to display when zooming in.
         * @type number
         * @default
         * @alias minimumZoomTicks
         * @memberOf CIQ.ChartEngine.prototype
         * @since 07-2016-16.6
         */
        this.minimumZoomTicks = 9
        /**
         * Set to false to disable any user zooming on the chart
         * @type boolean
         * @default
         * @alias allowZoom
         * @memberOf CIQ.ChartEngine.prototype
         * @since 04-2015
         * @example
         * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), allowZoom:false, layout:{"candleWidth": 16, "crosshair":true}});
         */
        this.allowZoom = true
        /**
         * Set to false to disable any user scrolling of the chart
         * @type boolean
         * @default
         * @alias allowScroll
         * @memberOf CIQ.ChartEngine.prototype
         * @since 04-2015
         * @example
         * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), allowScroll:false, layout:{"candleWidth": 16, "crosshair":true}});
         */
        this.allowScroll = true
        /**
         * Set to false to disable 2 finger side swipe motion for scrolling
         * @type boolean
         * @default
         * @alias allowSideswipe
         * @memberOf CIQ.ChartEngine.prototype
         * @since 2015-12-08
         */
        this.allowSideswipe = true

        this.anyHighlighted = false // READ ONLY. Toggles to true if any drawing or overlay is highlighted for deletion
        this.accessoryTimer = null // Used internally to control drawing performance
        this.lastAccessoryUpdate = new Date().getTime() // "
        this.displayCrosshairs = true // READ ONLY. Use doDisplayCrosshairs() or undisplayCrosshairs()
        this.hrPanel = null // READ ONLY. Current panel that mouse is hovering over
        this.editingAnnotation = false // READ ONLY. True if an annotation is open for editing
        this.openDialog = '' // Set this to non-blank to disable chart touch and mouse events use CIQ.ChartEngine.prototype.modalBegin() and CIQ.ChartEngine.prototype.modalEnd

        /**
         * Set these to false to not display this panel management component. See {@link CIQ.ChartEngine.controls} for alternate methods and more details.
         * @type boolean
         * @default
         * @alias displayIconsUpDown
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.displayIconsUpDown=false;
         */
        this.displayIconsUpDown = true
        /**
         * Set these to false to not display this panel management component. See {@link CIQ.ChartEngine.controls} for alternate methods and more details.
         * @type boolean
         * @default
         * @alias displayIconsSolo
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.displayIconsSolo=false;
         */
        this.displayIconsSolo = true
        /**
         * Set these to false to not display this panel management component. See {@link CIQ.ChartEngine.controls} for alternate methods and more details.
         * @type boolean
         * @default
         * @alias displayIconsClose
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.displayIconsClose=false;
         */
        this.displayIconsClose = true
        /**
         * Set these to false to not display this panel management component. See {@link CIQ.ChartEngine.controls} for alternate methods and more details.
         * @type boolean
         * @default
         * @alias displayPanelResize
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.displayPanelResize=false;
         */
        this.displayPanelResize = true
        /**
         * Only reposition markers this many milliseconds. Set to zero or null for no visible delay. (lower numbers are more CPU intensive).
         * See {@tutorial Markers} for more details on adding markers to your charts
         * @type number
         * @default
         * @alias markerDelay
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.markerDelay=25;
         */
        this.markerDelay = 0
        /**
         * If true when the chart initially is rendered, then the CIQ.ChartEngine object will register to listen and manage touch and mouse browser events within then canvas by attaching them to the container div.
         *
         * Set to false to restrict all events registration and optionally turn into a static chart. Users will not be able to zoom or scroll.
         *
         * It is possible to re-enable the events after the chart has been rendered, but you must call stx.initializeChart(); stx.draw(); to register the events once again.
         * @type boolean
         * @default
         * @alias manageTouchAndMouse
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * // if enabling events after the chart was already rendered, you must reinitialize to re register the browser events.
         * stxx.manageTouchAndMouse = true;
         * stxx.initializeChart();
         * stxx.draw();
         */
        this.manageTouchAndMouse = true
        /**
         * Primarily intended for mobile devices, if set to false it will allow up/down swiping (don't capture events) to pass trough the chart container so the main page can manage it.
         * This allows a user swiping up and down to swipe trough the chart instead of having the chart capture the event and prevent the page from continue moving.
         * It therefore produces a more natural up/down swiping motion throughout the page.
         * @type boolean
         * @default
         * @alias captureTouchEvents
         * @memberOf CIQ.ChartEngine.prototype
         * @since 12-2015-08
         */
        this.captureTouchEvents = true
        /**
         * If set to false it will allow up/down mouseWheel / touchPad swiping to pass trough the chart container so the main page can manage it.
         * This allows a user swiping up and down to swipe trough the chart instead of having the chart capture the event and prevent the page from continue moving.
         * It therefore produces a more natural up/down sliding of the page.
         * @type boolean
         * @default
         * @alias captureMouseWheelEvents
         * @memberof CIQ.ChartEngine.prototype
         * @since TBD
         */
        this.captureMouseWheelEvents = true
        this.touches = [] // Used internally for touch
        this.changedTouched = [] // Used internally for touch
        /**
         * The value (price) representing the crosshair cursor point
         * @type number
         * @alias crosshairTick
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.crosshairTick = null
        /**
         * Read Only. The value (price) representing the crosshair cursor point
         * @type number
         * @alias crosshairValue
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.crosshairValue = null
        /**
         * Set to either "roundRectArrow", "semiRoundRect", "roundRect","tickedRect","rect","noop"
         * @type string
         * @default
         * @alias yaxisLabelStyle
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * var stxx=new CIQ.ChartEngine({container: $$("chartContainer")});
         * stxx.yaxisLabelStyle="roundRectArrow";
         */
        this.yaxisLabelStyle = 'roundRectArrow'
        /**
         * Set to false if you don't want the axis borders drawn. This will override individual settings on yaxis and xaxis.
         * @type boolean
         * @default
         * @alias axisBorders
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.axisBorders = null

        this.pt = {
          x1: -1,
          x2: -1,
          y1: -1,
          y2: -1,
        }
        this.moveA = -1 // Used internally for touch
        this.moveB = -1 // "
        this.touchStartTime = -1 // "
        this.gestureStartDistance = -1 // "
        this.grabStartPeriodicity = 1 // "
        this.grabEndPeriodicity = -1 // "
        this.scrollEvent = null // "
        this.cmd = false // "
        this.ctrl = false // "
        this.shift = false // "
        this.userPointerDown = false //represents either mouse button or finger on touch device
        /**
		     * Set to true based on a key stroke, button press, etc, when you want to enable the ability to clone a highlighted drawing.
		     * Reset to false when you want the cloning to end.
		     * For example, you can set to true when the `control` key is pressed and disable when it is released.
		     * @type number
		     * @default
		     * @alias cloneDrawing
		     * @memberOf CIQ.ChartEngine.prototype
		     * @since 07-2016-16.7
		     * @example
		     *
				document.onkeyup=keyup;
				document.onkeydown=keydown;

				// disable cloning if the ctl key is released
				function keyup(e){
					var key = (window.event) ? event.keyCode : e.keyCode;
					if (key == 18 ) stxx.cloneDrawing=false;
				}

				// enable cloning if the ctl key is pressed
				function keydown(e){
					var key = (window.event) ? event.keyCode : e.keyCode;
					if (key == 18 ) stxx.cloneDrawing=true;
				}
		     */
        this.cloneDrawing = false
        /**
         * X axis offset for touch devices so that finger isn't blocking crosshair
         * @type number
         * @default
         * @alias crosshairXOffset
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.crosshairXOffset = -40
        /**
         * Y axis Offset for touch devices so that finger isn't blocking crosshair
         * @type number
         * @default
         * @alias crosshairYOffset
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.crosshairYOffset = -40
        /**
         * Read only. This gets set to true when the chart display has been initialized.
         * @type boolean
         * @default
         * @alias displayInitialized
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.displayInitialized = false

        /**
         * When set to true, line and mountain charts are extended slightly in order to reduce whitespace at the right edge of the chart
         * @type boolean
         * @default
         * @alias extendLastTick
         * @memberOf CIQ.ChartEngine.prototype
         * @since 05-2016-10 The line will be extended to the end of the chart (full candle width) instead of the candle border, even when using yaxisLabelStyle "roundRectArrow"
         */
        this.extendLastTick = false

        this.clicks = {
          s1MS: -1,
          e1MS: -1,
          s2MS: -1,
          e2MS: -1,
        }

        this.cancelTouchSingleClick = false // Set this to true whenever a screen item is touched so as to avoid a chart touch event
        /**
         * Contains the current screen layout
         * @type object
         * @alias layout
         * @memberOf CIQ.ChartEngine#
         * @example
         * // Layout parameters can be preset on a chart as follows:
         * var stxx=new CIQ.ChartEngine({container: $$("chartContainer"),layout:{"interval":"day","periodicity":1,"chartType": "candle","candleWidth": 16}});
         */
        this.layout = {
          /**
           * Chart interval
           * Available options are: [number] representing minutes, "day", "week", "month"
           * See the [Periodicity and Quote feed](tutorial-Data%20Loading.html#Periodicity) tutorial.
           * @type string
           * @default
           * @alias layout.interval
           * @memberOf! CIQ.ChartEngine#
           */
          interval: 'day',
          /**
           * Number of periods per interval
           * See the [Periodicity and Quote feed](tutorial-Data%20Loading.html#Periodicity) tutorial.
           * @type number
           * @default
           * @alias layout.periodicity
           * @memberOf! CIQ.ChartEngine#
           */
          periodicity: 1,
          /**
           * Time unit for the interval. "millisecond", "second", "minute" or null for daily charts
           * @type string
           * @default
           * @memberOf! CIQ.ChartEngine#
           */
          timeUnit: null,
          /**
           * Candle Width In pixels ( see {@tutorial Managing Chart Zoom and Range} )
           * @type number
           * @default
           * @alias layout.candleWidth
           * @memberOf! CIQ.ChartEngine#
           */
          candleWidth: 8,
          volumeUnderlay: false,
          /**
           * Whether adjusted or nominal prices are being displayed. If true then the chart will look for "Adj_Close" in the masterData as an alternative to "Close".
           * @type boolean
           * @default
           * @alias layout.adj
           * @memberOf! CIQ.ChartEngine#
           * @instance
           */
          adj: true,
          /**
           * Whether crosshairs are being displayed
           * @type boolean
           * @default
           * @alias layout.crosshair
           * @memberOf! CIQ.ChartEngine#
           * @instance
           */
          crosshair: false,
          /**
           * Sets type of chart to render
           * Available options are: "line", "candle", "bar", "wave", “colored_bar”, "colored_line", “hollow_candle”,”scatterplot”, "baseline_delta", "baseline_delta_mountain", "mountain","colored_mountain", "volume_candle"
           * @type string
           * @default
           * @alias layout.chartType
           * @memberOf! CIQ.ChartEngine#
           * @since 05-2016-10.1 "baseline_delta_mountain" and  "colored_mountain" are also available
           */
          chartType: 'candle',
          /**
           * Flag for extended hours time-frames.
           * The chart includes the 'extended' parameter in the `params` object sent into the `fetch()` call.
           * Your quote feed must be able to provide extended hours data when requested (`extended:true`) for any extended hours functionality to work.
           * See {@link CIQ.ExtendedHours} and {@link CIQ.Market} for more details on how extended hours are set and used.
           * @type boolean
           * @default
           * @alias layout.extended
           * @memberOf! CIQ.ChartEngine#
           */
          extended: false,
          /**
           * Tracks the extended market sessions to display on the chart.
           * Once set, call newChart() to enable the corresponding time-frames in the x axis and load the data for these sessions.
           * Session names must match the session names declared in {@link CIQ.Market}.
           * See {@link CIQ.ExtendedHours} and {@link CIQ.Market} for more details on how extended hours are set and used.
           * @type object
           * @default
           * @alias layout.marketSessions
           * @memberOf! CIQ.ChartEngine#
           * @example
           * marketSessions = {
           *      "session1": true,
           *      "session2": true,
           *      "session3": false,
           *      "pre": true,
           *      "post": true
           * }
           * @since  06-2016-02
           */
          marketSessions: {}, //use defaults
          /**
           * Type of aggregation to use
           * Available options are: "rangebars" "ohlc" "kagi" "pandf" "heikinashi" "linebreak" "renko" See {@link CIQ.ChartEngine#setAggregationType}
           * @type string
           * @default
           * @alias layout.aggregationType
           * @memberOf! CIQ.ChartEngine#
           */
          aggregationType: 'ohlc',
          /**
           * Type of scale to use
           * Available options are: "log", "linear" See {@link CIQ.ChartEngine#setChartScale}
           * @type string
           * @default
           * @alias layout.chartScale
           * @memberOf! CIQ.ChartEngine#
           */
          chartScale: 'linear',
          studies: {},
          panels: {},
        }
        /**
         * Contains the chart preferences
         * @type object
         * @alias preferences
         * @memberOf CIQ.ChartEngine#
         */
        this.preferences = {
          /**
           * Draw a horizontal line at the current price.
           * Only drawn if the most recent tick is visible.
           * @type boolean
           * @default
           * @alias preferences.currentPriceLine
           * @memberOf! CIQ.ChartEngine#
           * @since 05-2016-10
           */
          currentPriceLine: false,
          /**
           * Magnetize the crosshairs to datapoints during drawing operations to improve placement accuracy. See {@link CIQ.ChartEngine.AdvancedInjectable#magnetize} for more details
           * @type boolean
           * @default
           * @alias preferences.magnet
           * @memberOf! CIQ.ChartEngine#
           */
          magnet: false,
          /**
           * Locks the crosshair Y value to the value of the field name specified
           * for the tick under the cursor on the primary chart.
           *
           * For studies create a horizontalCrosshairFieldFN function that will be called by
           * CIQ.Studies.addStudy. The function must return the field name in the dataSet to
           * reference. The function will not be called when the study is set to overly or
           * underlay the chart's panel.
           *
           * @example
           * // Have the crosshair lock to the "Close" field of the tick under the cursor
           * stxx.preferences.horizontalCrosshairField = "Close";
           *
           * @example
           * // Have the crosshair lock to the "ATR ATR (14)" field for a ATR study with a period of 14
           * CIQ.Studies.studyLibrary["ATR"].horizontalCrosshairFieldFN = function(stx, sd) {
           * 	// returns the field name, which should be created by the study's "calculateFN"
           * 	return "ATR " + sd.name;
           * };
           *
           * @type string
           * @default
           * @alias preferences.horizontalCrosshairField
           * @memberOf! CIQ.ChartEngine#
           * @since 04-2016-08
           */
          horizontalCrosshairField: null,
          /**
			     * Set to true to display labels on y-axis for line based studies using {@link CIQ.Studies.displayIndividualSeriesAsLine} or {@link CIQ.Studies.displaySeriesAsLine} (this is overridden by the particular y-axis setting of {@link CIQ.ChartEngine.YAxis#drawPriceLabels}).
			     * This flag is checked inside these 2 functions to decide if a label should be set, as such if you do not wish to have a label on a particular study line, you can set this flag to `false`, before calling the function, and then back to `true`.
			     * @type boolean
			     * @default
			     * @alias preferences.labels
			     * @memberOf! CIQ.ChartEngine#
			     * @example
					//do not display the price labels for this study
					stxx.preferences.labels=false;
					CIQ.Studies.displaySeriesAsLine(stx, sd, quotes);

					//restore price labels to default value
					stxx.preferences.labels=true;
			     */
          labels: true,
          /**
           * Initial whitespace on right of the screen in pixels.
           * @type number
           * @default
           * @alias preferences.whitespace
           * @memberOf! CIQ.ChartEngine#
           * @example
           * // override the default value at declaration time
           * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), preferences:{"whitespace": 20}});
           */
          whitespace: 50,
          /**
           * zoom-in speed for mousewheel and zoom button.
           *
           * Range: **0 -.99999**. The closer to 1 the slower the zoom.
           * @type number
           * @default
           * @alias preferences.zoomInSpeed
           * @memberOf! CIQ.ChartEngine#
           * @example
           * stxx.preferences.zoomInSpeed=.98;
           * @example
           * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), preferences:{"zoomInSpeed": .98}});
           * @since 07/01/2015
           */
          zoomInSpeed: null,
          /**
           * zoom-out speed for mousewheel and zoom button.
           *
           * Range: **1-2**. The closer to 1 the slower the zoom.
           * @type number
           * @default
           * @alias preferences.zoomOutSpeed
           * @memberOf! CIQ.ChartEngine#
           * @example
           * stxx.preferences.zoomOutSpeed=1;
           * @example
           * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), preferences:{"zoomOutSpeed": 1}});
           * @since 07/01/2015
           */
          zoomOutSpeed: null,
        }
        /**
         * Used to control the behavior and  throttling of real time updates from streamTrade() or appendMasterData() to prevent overloading the chart engine
         * @type object
         * @alias streamParameters
         * @memberOf CIQ.ChartEngine#
         */
        this.streamParameters = {
          count: 0,
          //	lastDraw: (new Date()).getTime(),
          /**
           * ms to wait before allowing update to occur (if this condition is met, the update will occur and all pending ticks will be loaded - exclusive of maxTicks)
           * @type number
           * @default
           * @alias streamParameters.maxWait
           * @memberOf! CIQ.ChartEngine#
           */
          maxWait: 1000,
          /**
           * ticks to wait before allowing update to occur (if this condition is met, the update will occur and all pending ticks will be loaded - exclusive of maxWait)
           * @type number
           * @default
           * @alias streamParameters.maxTicks
           * @memberOf! CIQ.ChartEngine#
           */
          maxTicks: 100,
          timeout: -1,
          /**
           * if true, gaps will be filled in the master data from the last tick in the chart to the date of the trade. The close price from the last tick will be used to fill the gaps. This will cause charts to display a straight line instead of a gap. Only applicable when using streamTrade()
           * @type boolean
           * @default
           * @alias streamParameters.fillGaps
           * @memberOf! CIQ.ChartEngine#
           * @since 2016-03-11
           */
          fillGaps: true,
        }
        /**
         * This is the callback function used to translate languages.
         * Should return a translated phrase given the English phrase. See separate translation file for list of phrases.
         *
         * Expected format :
         *
         * 		var translatedWord = fc(english);
         *
         * Defaults to {@link CIQ.I18N.translate}
         * @type {function}
         * @alias translationCallback
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.translationCallback = null
        this.locale = null // set by setLocale()
        /**
         * Read Only. Timezone of the masterData, set by {@link CIQ.ChartEngine#setTimeZone}.
         * @type {string}
         * @alias dataZone
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.dataZone = null
        /**
         * Read Only. Timezone to display on the chart, set by {@link CIQ.ChartEngine#setTimeZone}.
         * @type {string}
         * @alias displayZone
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.displayZone = null
        this.timeZoneOffset = 0 // use setTimeZone() to compute this value
        /**
         * This is the callback function used to react to {@link CIQ.ChartEngine#changeOccurred}.
         * Use this for storing chart configurations or drawings real time as users make changes.
         *
         * Expected format :
         *
         * 		fc(stxChart, eventType);
         *
         * Currently implemented values for  "eventType" are "layout" and "vector".
         *
         * You can create any additional event types and trigger them by calling 'CIQ.ChartEngine.changeOccurred(eventType)'
         *
         * **Note** only one changeCallback function can be registered per chart object. As such, you must program it to handle any and all possible events triggered by {@link CIQ.ChartEngine#changeOccurred}.
         * @type {function}
         * @alias changeCallback
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.changeCallback=function(stxx, eventType){
         *		if(eventType=="layout") saveLayout();
         *		if(eventType=="vector") saveDrawing();
         * }
         */
        this.changeCallback = null
        this.masterData = null // Contains the historical quotes for the current chart
        /**
         * Register this function to transform the data set before a createDataSet() event; such as change in periodicity.
         * You can also explicitly call  <code>stxx.createDataSet(); stxx.draw();</code> to trigger this function.
         *
         * Expected Format :
         *
         * 		fc(stxChart, dataSet);
         *
         * @type {function}
         * @alias transformDataSetPre
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.transformDataSetPre=function(stxx, dataSet){
         *		for(var i=0;i < dataSet.length;i++){
         *			// do somethng to the dataset here
         *		}
         * }
         */
        this.transformDataSetPre = null
        /**
         * Register this function to transform the data set after a createDataSet() event; such as change in periodicity.
         * You can also explicitly call  <code>stxx.createDataSet(); stxx.draw();</code> to trigger this function.
         *
         * Expected Format :
         *
         * 		fc(stxChart, dataSet, min low price in the dataset, max high price in the dataset);
         *
         * @type {function}
         * @alias transformDataSetPost
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.transformDataSetPost=function(self, dataSet, min, max){
         *		for(var i=0;i < dataSet.length;i++){
         *			// do somethng to the dataset here
         *		}
         * }
         */
        this.transformDataSetPost = null
        /**
         * Register this function if you need [setMasterData()]{@link CIQ.ChartEngine#setMasterData} to transform each quote returned by your data feed into a properly formatted OHLC object before loading it into the chart.
         * {@link CIQ.ChartEngine#setMasterData} is called by {@link CIQ.ChartEngine#newChart}.
         *
         * This is a useful function if your data is not properly formated as required by the charting library.
         * Instead of having to iterate trough your data to re-format it, and once again within setMasterData() to load it,
         * you can use the transform function to format it as it is being loaded, and thus preventing the dual looping.
         *
         * Expected Format :
         *
         * 		var formattedOHLCObject = fc(quote);
         *
         * @type {function}
         * @alias transformMasterDataQuote
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.transformMasterDataQuote=function(quote){
         *		var formattedOHLCObject =
         *			{
         *				DT:new Date(quote.DT),
         *				Open:parseFloat(quote.Open),
         *				Close:parseFloat(quote.Close),
         *				High:parseFloat(quote.High),
         *				Low:parseFloat(quote.Low),
         *				Volume:parseInt(quote.Volume,10)
         *			};
         *
         *		return formattedOHLCObject;
         * }
         */
        this.transformMasterDataQuote = null
        /**
         * This is the callback function used by setPeriodicityV2 when no quotefeed has been attached to the chart.
         * Called if the masterData does not have the interval requested.
         *
         * Do not initialize if you are using a quotefeed ( {@link CIQ.QuoteFeed } )
         *
         * @type {function}
         * @alias dataCallback
         * @memberOf CIQ.ChartEngine.prototype
         * @example
         * stxx.dataCallback=function(){
         *		// put code here to get the new data in the correct periodicity.
         *		// use layout.interval and layout.periodicity to determine what you need.
         *		// finally call stxx.newChart(symbol,data) to load the data and render the chart.
         * }
         */
        this.dataCallback = null
        /**
         * Set this to true if your server returns data in  week or monthly ticks, and doesn't require rolling computation from daily
         * @type boolean
         * @default
         * @alias dontRoll
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.dontRoll = false
        /**
         * Set to true to allow an equation to be entered into the symbol input.  For example, =2*IBM-GM
         * NOTE: the equation needs to be preceded by an equals sign (=) in order for it to be parsed as an equation.
         * @type boolean
         * @default
         * @alias allowEquations
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.allowEquations = true
        /**
         * Stores a list of active drawing object on the chart. Serialized renditions of drawings can be added using {@link CIQ.ChartEngine#createDrawing} and removed using {@link CIQ.ChartEngine#removeDrawing}
         * @type array
         * @default
         * @alias drawingObjects
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.drawingObjects = []
        this.undoStamps = []
        /**
         * Set to "carry" or "gap" to have the Chart create missing data points for lightly traded stocks that may have missing ticks for an intraday or daily interval.
         * "carry" will cause the closing price to be carried forward, resulting in dashes on a candle/bar chart or continuous line on a line or mountain chart.
         * "gap" will cause physical breaks to occur on the chart in the gapped position.
         * See {@link CIQ.ChartEngine#doCleanupGaps}
         * @type boolean
         * @default
         * @alias cleanupGaps
         * @memberOf CIQ.ChartEngine.prototype
         * @since ver 15-07-01 gaps are automatically cleaned up unless this flag is set to false
         * <br>2015-11-1, gaps are not automatically cleaned unless this flag is set to true
         * @since  2016-12-29 "carry" and "gap" values now supported. Setting to non-false will default to "carry" for backward compatibilty.
         */
        this.cleanupGaps = false
        /**
         * Set to maximum size of dataSet allowed (the larger, the more of a performance hit)
         * @type number
         * @default
         * @alias maxDataSetSize
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.maxDataSetSize = 20000
        /**
         * Set to zero to avoid resize checking loop. See {@link CIQ.ChartEngine#setResizeTimer} for more details
         * @type number
         * @default
         * @alias resizeDetectMS
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.resizeDetectMS = 1000
        /**
         * Display the xAxis below all panels.
         * @type boolean
         * @default
         * @alias xAxisAsFooter
         * @memberOf 	CIQ.ChartEngine.prototype
         * @since 05-2016-10
         */
        this.xAxisAsFooter = false
        /**
         * Holds {@link CIQ.ChartEngine.Chart} object
         * @type object
         * @default
         * @alias chart
         * @memberOf 	CIQ.ChartEngine.prototype
         */
        this.chart = new CIQ.ChartEngine.Chart()
        this.chart.name = 'chart'
        this.chart.canvas = null // Contains the HTML5 canvas with the chart and drawings
        this.chart.tempCanvas = null // lays on top of the canvas and is used when creating drawings
        this.chart.container = config.container
        this.chart.market = new CIQ.Market() //create a default market, always open
        /**
         * Adjust to increase or decrease the default width of candles
         * @type boolean
         * @default
         * @alias candleWidthPercent
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.candleWidthPercent = 0.65
        /**
         * chart types which do not draw wicks on candles
         * @type object
         * @default
         * @alias noWicksOnCandles
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.noWicksOnCandles = { rangebars: 1, renko: 1, linebreak: 1 }
        /**
         * chart types which require fetching as many bars as possible (since they aggregate data)
         * @type object
         * @default
         * @alias fetchMaximumBars
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.fetchMaximumBars = { rangebars: 1, kagi: 1, renko: 1, linebreak: 1, pandf: 1 }
        /**
         * chart types which have a non-time-based x-axis (since they aggregate data)
         * @type object
         * @default
         * @alias hasNTBAxis
         * @memberOf CIQ.ChartEngine.prototype
         */
        this.hasNTBAxis = { rangebars: 1, kagi: 1, renko: 1, linebreak: 1, pandf: 1 }

        /**
		     * Allow the candle width to be determined dynamically
		     * 
		     * @type object
		     * @default
		     * @alias autoPickCandleWidth
		     * @memberOf CIQ.ChartEngine.prototype
		     * @example
				autoPickCandleWidth:{
					turnOn: true,
					candleWidth: 5
				}
		     * @since 11-2016-29
		     */
        this.autoPickCandleWidth = {
          /**
           * Turn to 'true' if you want the periodicity to be determined dynamically
           * @type boolean
           * @default
           * @alias autoPickCandleWidth.turnOn
           * @memberOf! CIQ.ChartEngine#
           */
          turnOn: false,

          /**
           * Set if you want to set a specific candle width
           * Set to '0' if you want the candle width to be determined according to chart type
           * @type string
           * @default
           * @alias autoPickCandleWidth.candleWidth
           * @memberOf! CIQ.ChartEngine#
           */
          candleWidth: 5,
        }

        /**
         * Map of default values to be used to statically set periodicity (candle width) upon range selection
         *
         * NOTE: Combining this map with the dynamicRangePeriodicityMap results in a confusing
         * combination that is technically valid but doesn't make sense.
         * @type array
         * @default
         * @alias staticRangePeriodicityMap
         * @memberof CIQ.ChartEngine.prototype
         * @since m-2016-12-01
         */
        this.staticRangePeriodicityMap = [
          {
            rangeInMS: CIQ.WEEK, // Any range less than a week, load 5 minute bars
            periodicity: 1,
            interval: 5,
          },
          {
            rangeInMS: CIQ.MONTH, // Any range less than a month, load 30 minute bars
            periodicity: 1,
            interval: 30,
          },
          {
            rangeInMS: CIQ.DECADE, // Any range less than a year, load day bars
            periodicity: 1,
            interval: 'day',
          },
          {
            rangeInMS: CIQ.DECADE * 5, // Any range less than 5 years, load weeekly bars
            periodicity: 1,
            interval: 'week',
          },
          {
            rangeInMS: CIQ.DECADE * 10, // Any range less than a century, load monthly bars
            periodicity: 1,
            interval: 'month',
          },
          {
            rangeInMS: Number.MAX_VALUE, // Anything greater than a century, load yearly bars
            periodicity: 12,
            interval: 'month',
          },
        ]

        /**
         * Map of multiples to be used to dynamically determine periodicity (candle width) upon range selection
         *
         * NOTE: Combining this map with the staticRangePeriodicityMap results in a confusing
         * combination that is technically valid but doesn't make sense.
         * @type array
         * @default
         * @alias dynamicRangePeriodicityMap
         * @memberOf CIQ.ChartEngine.prototype
         * @since 11-2016-29
         */
        this.dynamicRangePeriodicityMap = [
          {
            interval: 1,
            rangeInMS: CIQ.MINUTE,
          },
          {
            interval: 5,
            rangeInMS: CIQ.MINUTE * 5,
          },
          {
            interval: 30,
            rangeInMS: CIQ.MINUTE * 30,
          },
          {
            interval: 60,
            rangeInMS: CIQ.MINUTE * 60,
          },
          {
            interval: 'day',
            rangeInMS: CIQ.DAY,
          },
          {
            interval: 'month',
            rangeInMS: CIQ.MONTH,
          },
          {
            interval: 'year',
            rangeInMS: CIQ.YEAR,
          },
        ]

        this.charts.chart = this.chart
        this.styles = {} // Contains CSS styles used internally to render canvas elements
        this.currentVectorParameters = CIQ.clone(CIQ.ChartEngine.currentVectorParameters) // contains the current drawing parameters for this chart
        CIQ.extend(this, config)

        if (config.container) {
          this.registerHTMLElements()
          // Initialize the very basic dimensions of chart so that it is operational immediately
          this.chart.width = this.chart.container.clientWidth - this.chart.yAxis.width
          this.setCandleWidth(this.layout.candleWidth, this.chart)
          this.chart.canvasHeight = this.chart.container.clientHeight

          // This prevents mousewheel events from inadvertently triggering page scroll in Firefox and IE
          if (CIQ.useOldWheelLogic && !CIQ.FireFoxWheelWorkaround) {
            if (CIQ.isIE) {
              document.body.addEventListener('wheel', function(e) {
                if (CIQ.ChartEngine.insideChart) {
                  e.preventDefault()
                  // IE won't propagate the event so we need to manually figure out if we're inside the chart
                  for (var i = 0; i < CIQ.ChartEngine.registeredContainers.length; i++) {
                    var stx = CIQ.ChartEngine.registeredContainers[i].stx
                    if (
                      CIQ.ChartEngine.crosshairX >= stx.left &&
                      CIQ.ChartEngine.crosshairX <= stx.right &&
                      CIQ.ChartEngine.crosshairY >= stx.top &&
                      CIQ.ChartEngine.crosshairY <= stx.bottom
                    ) {
                      stx.mouseWheel(e, 'onmousewheel')
                    }
                  }
                }
              })
            } else {
              document.body.addEventListener('wheel', function(e) {
                if (CIQ.ChartEngine.insideChart) e.preventDefault()
              })
            }
            CIQ.FireFoxWheelWorkaround = true
          }
        }
        this.construct()
      }

      CIQ.ChartEngine.drawingLine = false // Toggles to true when a drawing is initiated
      CIQ.ChartEngine.resizingPanel = null // Toggles to true when a panel is being resized
      CIQ.ChartEngine.vectorType = '' // @deprecated The type of drawing currently enabled "segment", "line", "ray", etc. See sample.html menu
      CIQ.ChartEngine.crosshairX = 0 // Current X screen coordinate of the crosshair
      CIQ.ChartEngine.crosshairY = 0
      CIQ.ChartEngine.insideChart = false // Toggles to true whenever the mouse cursor is within the chart (canvas)
      CIQ.ChartEngine.overXAxis = false // Toggles to true if the mouse cursor is over the X Axis.
      CIQ.ChartEngine.overYAxis = false // Toggles to true if the mouse cursor is over the Y Axis.
      CIQ.ChartEngine.currentColor = 'auto' // @deprecated Currently selected color for drawing tools. This may be changed by developing a menu with a color picker.
      CIQ.ChartEngine.drawingTools = {}
      CIQ.ChartEngine.useAnimation = !CIQ.is_chrome // Animation API is on by default, except for Chrome which turns out to be faster without it
      CIQ.ChartEngine.ipadMaxTicks = 1500 // performance limitation as of IOS7
      CIQ.ChartEngine.enableCaching = false
      CIQ.ChartEngine.ignoreTouch = false // set this true to override the touch commands in the kernel (such as when manipulating DOM elements on screen)
      CIQ.ChartEngine.useOldAndroidClear = true // Turn this off to boost native android browser performance, but at risk of "double candle" display errors on some devices
      /**
       * Each CIQ.ChartEngine object will clone a copy of this object template and use it to store the settings for the active drawing tool.
       * The default settings can be found in `stx.js`, and they can be changed by overriding these defaults on your own files.
       * See {@tutorial Custom Drawing Menu and Colors} for details on how to use this template to replace the standard drawing toolbar.
       * <br>This object can be extended to support additional drawing tools (for instance note the extensive customization capabilities for fibonacci)
       * @type {Object}
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.currentVectorParameters = {
        /**
         *  Drawing to activate.
         * <br>See 'Classes' in {@link CIQ.Drawing} for available drawings.
         * Use {@link CIQ.ChartEngine#changeVectorType} to activate.
         * @type string
         * @alias currentVectorParameters.vectorType
         * @memberOf CIQ.ChartEngine
         */
        vectorType: null,
        /**
         *  Line pattern.
         * <br><B>Valid values for pattern: solid,dotted,dashed,none</B>
         * <br>Not all parameters/values are valid on all drawings. See the specific `recontruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
         * @type string
         * @default
         * @alias currentVectorParameters.pattern
         * @memberOf CIQ.ChartEngine
         */
        pattern: 'solid',
        /**
         *  Line width
         * <br>Not all parameters/values are valid on all drawings. See the specific `recontruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
         * @type number
         * @default
         * @alias currentVectorParameters.lineWidth
         * @memberOf CIQ.ChartEngine
         */
        lineWidth: 1,
        /**
         *  Fill color.
         * <br>Not all parameters/values are valid on all drawings. See the specific `recontruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
         * @type string
         * @default
         * @alias currentVectorParameters.fillColor
         * @memberOf CIQ.ChartEngine
         */
        fillColor: '#7DA6F5',
        /**
         * Line color.
         * <br>Not all parameters/values are valid on all drawings. See the specific `recontruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
         * @type string
         * @default
         * @alias currentVectorParameters.currentColor
         * @memberOf CIQ.ChartEngine
         */
        currentColor: 'auto',
        /**
         * Axis Label.
         * Set to 'true' to display a label on the x axis.
         * <br>Not all parameters/values are valid on all drawings. See the specific `recontruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
         * @type string
         * @default
         * @alias currentVectorParameters.axisLabel
         * @memberOf CIQ.ChartEngine
         */
        axisLabel: true,
        /**
			 * Fibonacci settings.
			 * See {@link CIQ.Drawing.fibonacci.#reconstruct} `parameters` object for valid options
		     * @type object
		     * @alias currentVectorParameters.fibonacci
		     * @memberOf CIQ.ChartEngine
		     * @example
				fibonacci:{
					trend:{color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					fibs:[
					      {level:-0.618, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					      {level:-0.382, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					      {level:0, color:"auto", parameters:{pattern:"solid", lineWidth:1}},
					      {level:0.382, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					      {level:0.618, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					      {level:0.5, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					      {level:1, color:"auto", parameters:{pattern:"solid", lineWidth:1}},
					      {level:1.382, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					      {level:1.618, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}}
					      ],
					extendLeft: false,
					printLevels: true,
					printValues: false,
					timezone:{color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}}
				}
		     */
        fibonacci: {
          trend: { color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
          fibs: [
            { level: -0.618, color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
            { level: -0.382, color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
            { level: 0, color: 'auto', parameters: { pattern: 'solid', lineWidth: 1 } },
            { level: 0.382, color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
            { level: 0.618, color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
            { level: 0.5, color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
            { level: 1, color: 'auto', parameters: { pattern: 'solid', lineWidth: 1 } },
            { level: 1.382, color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
            { level: 1.618, color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
          ],
          extendLeft: false,
          printLevels: true,
          printValues: false,
          timezone: { color: 'auto', parameters: { pattern: 'solid', opacity: 0.25, lineWidth: 1 } },
        },
        /**
			 * Annotation settings.
		     * @type object
		     * @alias currentVectorParameters.annotation
		     * @memberOf CIQ.ChartEngine
		     * @example
				annotation:{
					font:{
						style:null,
						size:null,	// override .stx_annotation default
						weight:null, // override .stx_annotation default
						family:null // override .stx_annotation default
					}
				}
		     */
        annotation: {
          font: {
            style: null,
            size: null, // override .stx_annotation default
            weight: null, // override .stx_annotation default
            family: null, // override .stx_annotation default
          },
        },
      }

      CIQ.ChartEngine.defaultDisplayTimeZone = null // If set, then new CIQ.ChartEngine objects will pull their display timezone from this

      /**
       * Defines an object used for rendering a chart.
       * Chart objects contain the data and config for each chart but they don't actually exist on the screen until a panel is attached.
       * A chart object is attached to both the main chart panel and any related study panels so they can share the same chart data.
       *
       * Example: stxx.panels['chart'].chart
       *
       * Example: stxx.chart (convenience shortcut for accessing the main chart object - same as above)
       *
       * Example stxx.panels['Aroon (14)'].chart
       *
       * @constructor
       * @name  CIQ.ChartEngine.Chart
       */
      CIQ.ChartEngine.Chart = function() {
        this.xAxis = new CIQ.ChartEngine.XAxis()
        this.yAxis = new CIQ.ChartEngine.YAxis()
        this.symbolObject = { symbol: null }
        this.series = {}
        this.seriesRenderers = {}
        this.xaxis = []
      }

      /**
       * set this to true to turn off auto-scrolling when fresh data comes in. By default, the chart will scroll backward
       * whenever a new bar comes in, so as to maintain the chart's forward position on the screen. If lockScroll is
       * true then fresh bars with advance the chart forward (and eventually off the right edge of the screen)
       *
       * Note that setSpan({base:"today"}) will set an internal variable that accomplishes the same thing. This is a unique case.
       * @type {Boolean}
       * @default
       * @memberOf CIQ.ChartEngine.Chart
       * @since 05-2016-10
       */
      CIQ.ChartEngine.Chart.prototype.lockScroll = false

      /**
       * Defines an object used for rendering the Y-axis on a panel.
       * Each panel object will include a YAxis object, which can be adjusted immediately after declaring your `new CIQ.ChartEngine();`
       * Any adjustments to the Y-axis members after it has been rendered and will require a draw() call to apply the changes ( initializeChart() may be required as well depending on the setting being changed).
       *
       * See {@tutorial Gridlines and  axis labels}, {@link CIQ.ChartEngine.AdvancedInjectable#createYAxis} and {@link CIQ.ChartEngine.AdvancedInjectable#drawYAxis} for additional customization instructions.
       *
       * Example: stxx.panels['chart'].yAxis
       *
       * Example: stxx.chart.panel.yAxis (convenience shortcut for accessing the main panel object - same as above)
       *
       * Example: stxx.panels['Aroon (14)'].yAxis
       *
       * @constructor
       * @name  CIQ.ChartEngine.YAxis
       * @example
       * // here is an example on how to override the default top and bottom margins after the inital axis has already been rendered
       * stxx.newChart(symbol, yourData, null, function () {    // call new chart to render your data
       *    	// callback - your code to be executed after the chart is loaded
       * 		stxx.chart.yAxis.initialMarginTop=50;
       * 		stxx.chart.yAxis.initialMarginBottom=50;
       * 		stxx.calculateYAxisMargins(stxx.chart.panel.yAxis); // must recalculate the margins after they are changed.
       * 		stxx.draw();
       * });
       * @example
       * // here is an example on how to override the default top and bottom margins before the inital axis has been rendered
       * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
       * stx.setPeriodicityV2(1, 1);  			// set your default periodicity to match your data. In this case one minute.
       * stx.chart.yAxis.initialMarginTop=50;		// set default margins so they do not bump on to the legend
       * stx.chart.yAxis.initialMarginBottom=50;
       * stx.newChart("SPY", yourData);
       * @example
       * // here is an example on how to turn off the last price label (main chart panel) before the inital axis has already been rendered
       * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
       * stxx.chart.panel.yAxis.drawCurrentPriceLabel=false;
       */
      CIQ.ChartEngine.YAxis = function() {}

      /**
       * Defines an object used for rendering the X-axis on the chart, which can be adjusted immediately after declaring your `new CIQ.ChartEngine();`
       * The CIQ.ChartEngine.XAxis object is part of the CIQ.ChartEngine.Chart object and is used on the main charts only. There is only one x axis per chart container.
       *
       * Colors and fonts for the x axis can be controlled by manipulating the CSS.
       * You can override the `stx_xaxis` class in `stx-chart.css` to change the font.
       * If you also want to control the color, you will need to override the defaults  for `.Light .stx_xaxis` and `.Dark .stx_xaxis` styles found in `stx-standard.css`
       *
       * For full customization instructions see:
       * - {@tutorial Custom X-axis}
       * - {@link CIQ.ChartEngine.AdvancedInjectable#createXAxis}
       * - {@link CIQ.ChartEngine#createTickXAxisWithDates}
       *
       * Example: stxx.chart.xAxis
       *
       * @constructor
       * @name  CIQ.ChartEngine.XAxis
       * @example
       * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
       * stxx.chart.xAxis.axisType="numeric";
       */
      CIQ.ChartEngine.XAxis = function() {}

      /**
		 * Defines a Panel object.
		 * Every chart or study is rendered in a panel.
		 *
		 * Example: stxx.panels['chart']
		 *
		 * Example: stxx.panels['Aroon (14)']

		 * @param {string} name The name of the panel.
		 * @param {CIQ.ChartEngine.YAxis} [yAxis] Pass an optional {@link CIQ.ChartEngine.YAxis} object
		 * @constructor
		 * @name  CIQ.ChartEngine.Panel
		 */
      CIQ.ChartEngine.Panel = function(name, yAxis) {
        if (yAxis) this.yAxis = yAxis
        else this.yAxis = new CIQ.ChartEngine.YAxis()
        this.name = name
      }

      CIQ.ChartEngine.YAxis.prototype = {
        high: null, // High value on y axis (read only)
        low: null, // Low value on y axis (read only)
        shadow: null, // high - low (read only)
        logHigh: null, // High log value on y axis (read only)
        logLow: null, // Low log value on y axis (read only)
        logShadow: null, // logHigh - logLow (read only)
        multiplier: null, // Computed automatically. Divide pixel by this to get the price (then add to low). Or multiply price by this to get the pixel (then add to top)
        bottom: null, // calculated automatically (panel.bottom-yAxis.bottomOffset)
        top: null, // calculated automatically (panel.top+yAxis.topOffset;)
        height: null, // bottom - top
        left: null, // calculated left position on canvas to begin drawing.
        width: null, // calculated width of y axis
      }

      /**
       * Maximum decimal places to ever display on a price label. Leave null and the chart will compute based on the number of decimal places in the actual data.
       * Generally you want to leave this alone, in order to display the full actual current value of the security. But if you're running out of space
       * on the y-axis, or you have a very tightly controlled configuration, you can lower this value.
       * See {@link CIQ.ChartEngine.YAxis#decimalPlaces} for controlling decimal places on the axis marks.
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.maxDecimalPlaces = 5

      /**
       * Optionally hard set the high (top value) of the yAxis (for instance when plotting 0 - 100% charts)
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.max = null

      /**
       * Optionally hard set the low (bottom value) of the yAxis (for instance when plotting 0 - 100% charts)
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.min = null

      /**
       * 0-4 or leave null and the chart will choose automatically. Note that this only affects the number of decimal places on the axis marks, not on the
       * axis price labels (current price, indicators). See {@link CIQ.ChartEngine.YAxis#maxDecimalPlaces} for controlling decimal places on price labels.
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.decimalPlaces = null

      /**
       * ideal size between y-axis values in pixels. Leave null to automatically calculate.
       * See {@tutorial Gridlines and  axis labels} for additional details.
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.idealTickSizePixels = null

      /**
       * Set to specify that the y-axis vertical grid be drawn with specific intervals between ticks.
       * This amount will be overridden if it will result  in y axis crowding.
       * In which chase, multiples of the original interval will be used.
       * For example, if `.25` is selected, and that will cause labels to be on top of or too close to each other, `.50` may be used.
       * Crowding is prevented by allowing for a minimum of space equating the y-axis font height between labels.
       *
       * **This parameter is also used in the 'Trade From Chart' (TFC) module**. If set, it will force the widget to skip certain price values and instead 'snap' to your desired intervals. This will guarantee that an order is only placed at the allowed price intervals for the security in question.
       *
       * **Note that this flag is not compatible with {@link CIQ.ChartEngine.YAxis#pretty}.**
       *
       * Visual Reference:<br>
       * ![yAxis.minimumPriceTick](yAxis.minimumPriceTick.png "yAxis.minimumPriceTick")
       *
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @example
       * // Declare a CIQ.ChartEngine object. This is the main object for drawing charts
       * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
       * // set interval between ticks
       * stxx.chart.yAxis.minimumPriceTick=.50;
       */
      CIQ.ChartEngine.YAxis.prototype.minimumPriceTick = null

      /**
		 * Set to specify that the y-axis vertical grid be drawn with fractional intervals.
		 * This is checked in {@link CIQ.ChartEngine.AdvancedInjectable#drawYAxis} and if it is not null,
		 * and there is no existing yAxis.priceFormatter, one is created to specially format the y-axis ticks.
		 *
		 * @type {Object}
		 * @default
		 * @memberOf CIQ.ChartEngine.YAxis
		 * @example
		 * // Declare a CIQ.ChartEngine object. This is the main object for drawing charts
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * // set axis to display in 1/32nds; for example, 100 5/32 will display as 100'05.  If there is a price midway between
		 * // two ticks (for example, 11/64), a plus (+) will follow the price; for example 100 11/64 will display as 100'11+.
		 * stxx.chart.yAxis.fractional={
				formatter: "'",				// This is the character used to separate he whole number portion from the numerator (' default)
				resolution: 1/32			// Set to smallest increment for the quoted amounts
		 */
      CIQ.ChartEngine.YAxis.prototype.fractional = null

      /**
       * set to true to draw a line left of the y-axis and tick marks
       * @type {boolean}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.displayBorder = true

      /**
       * set to false to hide grid lines. See {@tutorial Gridlines and  axis labels} for additional details.
       * @type {boolean}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.displayGridLines = true

      /**
       * set to true to hide the yaxis
       * @type {boolean}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.noDraw = null

      /**
       * set to false to hide the current price label <b>in the main panel's y-axis<b>.
       *
       * Visual Reference:<br>
       * ![yAxis.drawCurrentPriceLabel](drawCurrentPriceLabel.png "yAxis.drawCurrentPriceLabel")
       * @type {Boolean}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  04-2015
       */
      CIQ.ChartEngine.YAxis.prototype.drawCurrentPriceLabel = true

      /**
       * Set to false to hide **all** price labels on the particular y axis.
       * <br>See {@link CIQ.ChartEngine.YAxis#drawCurrentPriceLabel} to disable just the current price label on the main chart panel.
       * <br>See [CIQ.ChartEngine.preferences.labels]{@link CIQ.ChartEngine#preferences}  to disable just the last value label on studies.
       * @type {Boolean}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  04-2015
       */
      CIQ.ChartEngine.YAxis.prototype.drawPriceLabels = true

      /**
       * Set to either "roundRectArrow", "semiRoundRect", "roundRect","tickedRect","rect","noop".
       * It will default to {@link CIQ.ChartEngine.yaxisLabelStyle}
       * This could be set independently on each panel if desired.
       * @type string
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  04-2015
       * @example
       * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
       * stxx.chart.yAxis.yaxisLabelStyle="rect"
       */
      CIQ.ChartEngine.YAxis.prototype.yaxisLabelStyle = null

      /**
       * Set to true to right justify the yaxis (use with CIQ.ChartEngine.yaxisPaddingRight)
       * @type Boolean
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  15-07-01
       */
      CIQ.ChartEngine.YAxis.prototype.justifyRight = null

      /**
       * Set to true to put a rectangle behind the yaxis text (use with CIQ.ChartEngine.yaxisPaddingRight)
       * @type Boolean
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  15-07-01
       */
      CIQ.ChartEngine.YAxis.prototype.textBackground = false

      /**
       * Optional function used to override default formatting of Y-axis values, including the floating HUD value of the crosshair.
       *
       * Expected format :
       *
       * 		function(stx, panel, price, decimalPlaces)
       *
       * Parameters:
       *
       * 		{CIQ.ChartEngine} stx			- The chart object
       *		{CIQ.ChartEngine.Panel} panel	- The panel
       *		{number} price			- The price to format
       *		{number} decimalPlaces	- The number of decimal places to use
       *
       * Returns:
       *
       *		{text} Formated text label for the price
       *
       * @type {function}
       * @example
       * stxx.chart.panel.yAxis.priceFormatter=function(stx, panel, price){
       * 	var convertedPrice;
       * 	// add our logic here to convert 'price' to 'convertedPrice'
       *   	return convertedPrice; // string
       * }
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.priceFormatter = null

      /**
       * Sets the y-axis bottom on any panel.  Rendering will start this number of pixels above the panel's bottom
       *
       * Visual Reference:<br>
       * ![yAxis.width](yAxis.bottomOffset.png "yAxis.bottomOffset")
       * ![yAxis.width](yAxis.bottomTopOffset.png "yAxis.bottomTopOffset")
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.bottomOffset = 0

      /**
       * Sets y-axis top on Study panels, Rendering will start this number of pixels below the panel's top
       *
       * Visual Reference:<br>
       * ![yAxis.width](yAxis.bottomTopOffset.png "yAxis.bottomTopOffset")
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.topOffset = 0

      /**
		 * Set this to automatically compress and offset the y-axis so that this many pixels of white space is above the display.
		 * Note that {@link CIQ.ChartEngine#calculateYAxisMargins} will need to be called to immediately activate this setting after the axis has already been drawn.
		 *
		 * Visual Reference:<br>
		 * ![yAxis.width](yAxis.initialMarginTop.png "yAxis.initialMarginTop")
		 * @type {Number}
		 * @default
		 * @memberOf CIQ.ChartEngine.YAxis
		 * @example
		 * // here is an example on how to override the default top and bottom margins **before** the inital axis has been rendered
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * stxx.setPeriodicityV2(1, 1);  				// set your default periodicity to match your data. In this case one minute.
		 * stxx.chart.yAxis.initialMarginTop=50;		// set default margins so they do not bump on to the legend
		 * stxx.chart.yAxis.initialMarginBottom=50;
		 * stxx.newChart("SPY", yourData);
		 * @example
		 * // here is an example on how to override the default top and bottom margins **after** the inital axis has already been rendered
		 * stxx.newChart(symbol, yourData, null, function () {    // call new chart to render your data
         *    	// callback - your code to be executed after the chart is loaded
		 * 		stxx.chart.yAxis.initialMarginTop=50;
		 * 		stxx.chart.yAxis.initialMarginBottom=50;
		 * 		stxx.calculateYAxisMargins(stxx.chart.panel.yAxis); // !!!! must recalculate the margins after they are changed. !!!!
		 * 		stxx.draw();
		 * });

		 */
      CIQ.ChartEngine.YAxis.prototype.initialMarginTop = 10

      /**
       * set this to automatically compress and offset the y-axis to that this many pixels of white space is below the display
       * Note that {@link CIQ.ChartEngine#calculateYAxisMargins} will need to be called to immediately activate this setting after the axis has already been drawn.
       *
       * Visual Reference:<br>
       * ![yAxis.width](yAxis.initialMarginTop.png "yAxis.initialMarginTop")
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @example
       * // here is an example on how to override the default top and bottom margins **before** the inital axis has been rendered
       * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
       * stxx.setPeriodicityV2(1, 1);  				// set your default periodicity to match your data. In this case one minute.
       * stxx.chart.yAxis.initialMarginTop=50;		// set default margins so they do not bump on to the legend
       * stxx.chart.yAxis.initialMarginBottom=50;
       * stxx.newChart("SPY", yourData);
       * @example
       * // here is an example on how to override the default top and bottom margins **after** the inital axis has already been rendered
       * stxx.newChart(symbol, yourData, null, function () {    // call new chart to render your data
       *    	// callback - your code to be executed after the chart is loaded
       * 		stxx.chart.yAxis.initialMarginTop=50;
       * 		stxx.chart.yAxis.initialMarginBottom=50;
       * 		stxx.calculateYAxisMargins(stxx.chart.panel.yAxis); // !!!! must recalculate the margins after they are changed. !!!!
       * 		stxx.draw();
       * });
       *
       *
       */
      CIQ.ChartEngine.YAxis.prototype.initialMarginBottom = 10

      /**
       * Set this to the number of pixels to zoomed in or out, positive or negative.
       * This is defined as the number of pixels to add or subtract from both top and bottom of panel for calculations.
       *
       * Please note that the zoom level will be reset as determined by {@link CIQ.ChartEngine.YAxis#initialMarginTop} and
       * {@link CIQ.ChartEngine.YAxis#initialMarginBottom} when a {@link CIQ.ChartEngine#newChart} is rendered, the {@link CIQ.ChartEngine#home} button is pressed, or when {@link CIQ.ChartEngine.AdvancedInjectable#touchDoubleClick} is activated on a touch device.
       *
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.zoom = 0

      /**
       * set this to the number of pixels to offset the y-axis, positive or negative.
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.scroll = 0

      /**
       * The width in pixels.
       *
       * Visual Reference:<br>
       * ![yAxis.width](yAxis.width.png "yAxis.width")
       * @type {Number}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       */
      CIQ.ChartEngine.YAxis.prototype.width = 50

      /**
       * Override the default stx_yaxis style for text by setting this to the desired CSS style. This would typically be used to set a secondary axis to a particular color.
       * @type {string}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  15-07-01
       */
      CIQ.ChartEngine.YAxis.prototype.textStyle = null

      /**
       * Set to "left" for the yaxis to draw on the left side of the screen. The main chart axis will default to "right". The main
       * access for any study panel will follow the main chart axis as long as this is set to null. Note that this only applies to chart panels.
       * @type {string}
       * @default
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  15-07-01
       */
      CIQ.ChartEngine.YAxis.prototype.position = null

      /**
       * Default setting for the array that determines how many decimal places to print based on the size of the shadow (the difference between chart high and chart low).
       * The array consists of tuples in descending order. If the shadow is less than n1 then n2 decimal places will be printed.
       * See {@link CIQ.ChartEngine.YAxis#shadowBreaks}
       * @type {Array}
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  2015-11-1
       * @default
       */
      CIQ.ChartEngine.YAxis.defaultShadowBreaks = [[1000, 2], [1, 4]]

      /**
       * Alternative setting (for small charts)  array that determines how many decimal places to print based on the size of the shadow (the difference between chart high and chart low).
       * The array consists of tuples in descending order. If the shadow is less than n1 then n2 decimal places will be printed.
       * See {@link CIQ.ChartEngine.YAxis#shadowBreaks}
       * @type {Array}
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  2015-11-1
       * @default
       */
      CIQ.ChartEngine.YAxis.smallChartShadowBreaks = [[10, 2], [1, 4]]

      /**
       * If true then uses the "pretty" algorithm instead of the "best fit" algorithm. The pretty algorithm
       * uses the values specified in {@link CIQ.ChartEngine.YAxis#increments} to set axis label locations.
       *
       * **Note that this algorithm is not compatible with {@link CIQ.ChartEngine.YAxis#minimumPriceTick}.**
       *
       * @memberOf CIQ.ChartEngine.YAxis
       * @since 2015-11-1
       * @type {Boolean}
       * @default
       */
      CIQ.ChartEngine.YAxis.prototype.pretty = true

      /**
       * Values used by the {@link CIQ.ChartEngine.YAxis#pretty} algorithm to set axis label locations.
       * @memberOf CIQ.ChartEngine.YAxis
       * @since 2015-11-1
       * @type {Array}
       * @default
       */
      CIQ.ChartEngine.YAxis.prototype.increments = [1, 2.5, 5]

      /**
       * If true then uses an additional step in the "pretty" algorithm for the log
       * scale. This allows the algorithm to lower the grid to fill large visual gaps.
       * The "increments" are not fully respected by this approach.
       *
       * Only applicable when using *both* pretty mode and semiLog.
       * @memberOf CIQ.ChartEngine.YAxis
       * @since 2016-03-11
       * @type {Boolean}
       * @default
       */
      CIQ.ChartEngine.YAxis.prototype.prettySemiLog = true

      /**
       * An array that determines how many decimal places to print based on the size of the shadow (the difference between chart high and chart low).
       * The array consists of tuples in descending order. If the shadow is less than n1 then n2 decimal places will be printed.
       * See {@link CIQ.ChartEngine.YAxis.defaultShadowBreaks} and {@link CIQ.ChartEngine.YAxis.smallChartShadowBreaks} for default settings.
       * @type {Array}
       * @memberOf CIQ.ChartEngine.YAxis
       * @since  2015-11-1
       */
      CIQ.ChartEngine.YAxis.prototype.shadowBreaks = CIQ.ChartEngine.YAxis.defaultShadowBreaks

      CIQ.ChartEngine.Panel.prototype = {
        name: null, // Name of panel
        display: null, // Display text of panel
        chart: null, // The chart from which this panel derives its data
        yAxis: null, // Y axis object for this panel, this is the same object as chart.yAxis on chart panels
        shareChartXAxis: null, // Set to false to indicate panel does not share x axis with its chart
        top: null, // Y location of top of chart
        bottom: null, // Y location of bottom of chart
        height: null, // height of chart in pixels
        percent: null, // percent of overall window this panel takes up
      }

      CIQ.ChartEngine.XAxis.prototype = {
        /**
         * Optional function to format dates on x-axis.
         * If defined, will be used to completely control x-axis formatting, including the floating HUD date of the crosshair.
         *
         * This will only be called for date or time formating or the label. It **will not** be called for  month or year boundary labels.
         *
         * This function **should not** be used to alter the timezone of the displayed date/time. For time zone conversions use {@link CIQ.ChartEngine#setTimeZone}
         *
         * Expected format :
         *
         * 		function(labelDate, gridType, timeUnit, timeUnitMultiplier)
         *
         * Parameters:
         *
         * 		{Date} labelDate			- date to format in javaScript (=new Date()) format
         * 		{String} gridType			- "boundary" or "line"
         * 		{Enumerated type} timeUnit	- CIQ.MILLISECOND, CIQ.SECOND, CIQ.MINUTE, CIQ.HOUR, CIQ.DAY, CIQ.MONTH, CIQ.YEAR, CIQ.DECADE
         * 		{Number} timeUnitMultiplier	- how many timeUnits
         *
         * Returns:
         *
         * 		{text} Formated text label for the particular date passed in
         *
         * @type function
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         * @example
         * stxx.chart.xAxis.formatter = function(labelDate, gridType, timeUnit, timeUnitMultiplier){
         * 		//your code here to format your string
         * 		return "formated string"
         * }
         */
        formatter: null,
        /**
         * If true, the user selected (default browser if none selected) timezone will be used on the x axis.
         * If not set to true, the data timezone will be used even if a user timezone was set.
         * @type boolean
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         */
        adjustTimeZone: true,
        /**
         * Ideal space between x-axis labels in pixels.
         * If null then the chart will attempt a tick size and time unit in proportion to the chart.
         * Please note that if `stxx.chart.yAxis.goldenRatioYAxis` is set to `true`, this setting will also affect the spacing between y-axis labels.
         * Please note that this setting will be overwritten at rendering time if too small to prevent labels from covering each other.
         * Not applicable if {@link CIQ.ChartEngine.XAxis#timeUnit} is manually set.
         * See {@tutorial Custom X-axis} for additional details.
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         */
        idealTickSizePixels: null,
        /**
         * Overrides default used in {@link CIQ.ChartEngine#createTickXAxisWithDates}
         * <br>Allowable values:
         * - CIQ.MILLISECOND,
         * - CIQ.SECOND
         * - CIQ.MINUTE
         * - CIQ.HOUR
         * - CIQ.DAY
         * - CIQ.WEEK
         * - CIQ.MONTH
         * - CIQ.YEAR
         * - CIQ.DECADE
         *
         * Visual Reference for sample code below ( draw a label every 5 seconds) :<br>
         * ![xAxis.timeUnit](xAxis.timeUnit.png "xAxis.timeUnit")
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         * @example
         * // The following will cause the default implementation of createTickXAxisWithDates to print labels in seconds every 5 seconds.
         * // masterData is in 1 second intervals for this particular example.
         * stxx.chart.xAxis.axisType='ntb';
         * stxx.chart.xAxis.futureTicksInterval=1/60; // 1 second grouping
         * stxx.chart.xAxis.timeUnit = CIQ.SECOND;
         * stxx.chart.xAxis.timeUnitMultiplier = 5; // 5 units (e.g. seconds) grid line
         */
        timeUnit: null,
        /**
         * Overrides default used in {@link CIQ.ChartEngine#createTickXAxisWithDates}
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         * @example
         * // The following will cause the default implementation of createTickXAxisWithDates to print labels in seconds every 5 seconds.
         * // masterData is in 1 second intervals for this particular example.
         * stxx.chart.xAxis.axisType='ntb';
         * stxx.chart.xAxis.futureTicksInterval=1/60; // 1 second grouping
         * stxx.chart.xAxis.timeUnit = CIQ.SECOND;
         * stxx.chart.xAxis.timeUnitMultiplier = 5; // 5 units (e.g. seconds) grid line
         */
        timeUnitMultiplier: null,
        /**
         * Set to "ntb" for non time based rendering of the x-axis. See See {@link CIQ.ChartEngine#createTickXAxisWithDates}
         *
         * Set to "numeric" to render an x axis based on the "index" field instead of "Date" field to determine the label. See {@link CIQ.ChartEngine#createNumericXAxis}
         *
         * If not set, it will default to "ntb".
         *
         * @type string
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         */
        axisType: null,
        /**
         * Set to true to draw a line above the x-axis.
         * @type boolean
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         */
        displayBorder: true,
        /**
         * Set to false to suppress grid lines
         * @type boolean
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         */
        displayGridLines: true,
        /**
         * Minimum size for label. This ensures adequate padding so that labels don't collide with one another.
         * Please note that this setting is used during the rendering process, not during the label spacing calculation process and will be overwritten if too small to prevent labels from covering each other.
         * To modify at what interval labels will be placed, please see {@tutorial Custom X-axis} for more details
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         */
        minimumLabelWidth: 50,
        /**
         * Set to false to hide axis markings in the future.
         * @type boolean
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         */
        futureTicks: true,
        /**
         * Set to the number of minutes ticks will move by when iterating in "tick" interval.
         * <P>
         * Since 'tick' is not a time based display, there is no way to predict what the time between ticks will be.
         * Ticks can come a second later, a minute later or even more depending on how active a particular instrument may be.
         * As such, if iterating trough the market day in 'tick' periodicity, the library uses a pre-defined number of minutes to move around.
         * This will be primarily used when deciding where to put x axis labels when going into the future in 'tick' mode.
         *
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.XAxis#
         * @example
         * //You can override this behavior as follows:
         * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
         * stxx.chart.xAxis.futureTicksInterval=1; // to set to 1 minute, for example
         * @since TBD default changed from 10 to 1.
         */
        futureTicksInterval: 1,
      }

      CIQ.ChartEngine.Chart.prototype = {
        symbol: null, // This will be set to the current symbol
        symbolObject: { symbol: null }, // This will be set  to the current symbol and optionally include any other elements included in the object ( needed to represent the symbol or make additional data fetches). Initialized by newChart()
        /**
         * Set this to presnet an alternate name for the symbol on the chart label and comparison legend.
         * You can set  `stxx.chart.symbolDisplay='yourName'; ` right before calling `newChart()`.
         * Alternatively, a good place to set it is in your fetch() function, if using {@link CIQ.QuoteFeed}. See example.
         * @type string
         * @default
         * @memberOf CIQ.ChartEngine.Chart#
         * @example
         * // on your fetch initial load add the following
         * params.stx.chart.symbolDisplay='yourName for '+params.symbol;
         */
        symbolDisplay: null,
        series: {}, // Series that are drawn on chart, or for comparison. A series may have a different y-axis calculation than the price chart.
        seriesRenderers: {}, // Graphs that are drawn on chart.
        /**
         * Current number of ticks scrolled in from the end of the chart.
         * Setting to zero would theoretically cause the chart to be scrolled completely to the left showing an empty canvas.
         * Setting to 10 would display the last 10 candles on the chart.
         * Setting to `maxTicks` would display a full screen on the chart (assuming enough data is available).
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.Chart#
         */
        scroll: 0,
        standStill: 0, // Used internally
        maxTicks: 0, // Horizontal number of chart ticks that currently fit in the canvas, based on candlewidth and spacing. This is generally one greater than the actual size of the canvas due to candle clipping.
        /**
         * The master data for this chart. This data is never modified by the chart engine itself and should not be altered directly. Use {@link CIQ.ChartEngine#setMasterData} , {@link CIQ.ChartEngine#appendMasterData}, or {@link CIQ.ChartEngine#streamTrade} to manipulate this object. See {@tutorial Data Loading} for details.
         * @type object
         * @memberOf CIQ.ChartEngine.Chart#
         */
        masterData: null,
        /**
         * Contains the current complete data set created by {@link CIQ.ChartEngine#createDataSet}, adjusted for periodicity and with calculated studies. See {@tutorial Data Loading} for details.
         * @type object
         * @memberOf CIQ.ChartEngine.Chart#
         */
        dataSet: null,
        scrubbed: null, // Contains the data set, scrubbed for null entries (gap dates)
        /**
         * Contains the segment of the data set that is displayed on the screen (view-window). See {@tutorial Data Loading} for details.
         * @type object
         * @memberOf CIQ.ChartEngine.Chart#
         */
        dataSegment: null,
        /**
         * Parameters used to control the baseline in baseline_delta charts
         * @type object
         */
        baseline: {
          /**
           * includeInDataSegment - If set to true, forces a line chart (usually a baseline chart) to begin inside the chart,
           *                        whereas normally the first point in a line chart is off the left edge of the screen.
           * @type boolean
           * @default
           * @alias baseline.includeInDataSegment
           * @memberOf! CIQ.ChartEngine.Chart#
           */
          includeInDataSegment: false,
          /**
           * defaultLevel - If set to a value, overrides the default behavior of baseline chart
           *                which is to set baseline to leftmost point visible on the chart.
           * @type number
           * @default
           * @alias baseline.defaultLevel
           * @memberOf! CIQ.ChartEngine.Chart#
           */
          defaultLevel: null,
          /**
           * userLevel - Value of the user-set baseline level.  To prevent user from adjusting the baseline,
           *             set this property to false.
           * @type boolean/number
           * @default
           * @alias baseline.userLevel
           * @memberOf! CIQ.ChartEngine.Chart#
           */
          userLevel: null,
          /**
           * actualLevel - This is computed automatically.  Do not set.
           * @type number
           * @default
           * @alias baseline.actualLevel
           * @memberOf! CIQ.ChartEngine.Chart#
           */
          actualLevel: null,
        },
        xAxis: null, // x Axis for the chart
        xaxis: [], // Contains data entries for the full xaxis. It is a superset of dataSegment
        /**
         * Determines at which zoom level interior axis points are displayed. Value in pixels.
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.Chart#
         */
        xaxisFactor: 30,
        decimalPlaces: 2, // Maximum number of decimal places in data set. Computed automatically by calculateTradingDecimalPlaces
        roundit: 100, // Computed automatically to round y-axis display
        /**
         * Function used to render the Legend when multiple series are being displayed on the main chart panel.
         * Update your prototype or a specific chart instance, if you want to use a different rendering method for legend.
         * See {@link CIQ.drawLegend} for details and function signature.
         * <P>
         * Defaults to {@link CIQ.drawLegend}
         * @type function
         * @default
         * @memberOf CIQ.ChartEngine.Chart#
         * @example stxx.chart.legendRenderer = yourFunction; // must follow the function signature of {@link CIQ.drawLegend};
         * @since 07/01/2015
         */
        legendRenderer: CIQ.drawLegend,
        /**
         * This function will be called on certain chart types, before rendering each tick in the dataSegment, to determine the proper color to use on each bar, candle or line segment.
         * Mainly used to setting colors for 'up' vs. 'down' ticks.
         * For use with 'colored_bar', 'colored_line', "colored_mountain", 'candle', 'hollow_candle' and 'volume_candle' chart only.
         *
         * Expected format :
         *
         * 		function(stx, quote, mode)
         *
         * Parameters:
         *
         *		{object} stx	- A chart object
         *		{object} quote	- A properly formatted OHLC object.
         *		{string} mode	- Applicable on 'candle', 'hollow_candle' and 'volume_candle' charts only. Allowed values: "shadow", "outline", and "solid".
         *							`shadow`- indicates the function is asking for the candle wick color
         *							`outline` indicates the function is asking for the candle border color
         *							`solid` indicates the function is asking for the candle fill color
         *										(Inside of candle. Not applicable on 'hollow_candle' or 'volume_candle')
         *
         * Returns:
         *
         *		{string/object} Color to use for the bar, candle or line segment component. Set to null to skip bar or line segment.
         *		For colored line charts a color/pattern combination can be returned in an object of the follwing format: `{pattern:[3,3],color:"red"}`
         *
         * See {@tutorial Chart Types and Styles} for more details.
         * @type object
         * @default
         * @alias customChart.colorFunction
         * @memberOf! CIQ.ChartEngine.Chart#
         * @example
         * stxx.chart.customChart.colorFunction=function(stx, quote, mode){
         *		if(mode=="shadow" || mode=="outline") return "black";  //draw black wicks and borders
         *		else{
         *			if(quote.Close>100) return "green";
         * 			else if(quote.DT.getHours()<12) return "yellow";
         *			else return "orange";
         *		}
         *		return null;
         * 	};
         */
        customChart: null,
        /**
         * How much padding to leave for the right y-axis. Default is enough for the axis. Set to zero to overlap y-axis onto chart.
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.Chart#
         * @since 07/01/2015
         */
        yaxisPaddingRight: null,
        /**
         * How much padding to leave for the left y-axis. Default is enough for the axis. Set to zero to overlap y-axis onto chart.
         * @type number
         * @default
         * @memberOf CIQ.ChartEngine.Chart#
         * @since 07/01/2015
         */
        yaxisPaddingLeft: null,
        tickCache: {}, // private
        /**
         * If set to false, the chart will be anchored on left side preventing white space to be created past the oldest tick;
         * The amount of white space allowed on the right will be limited by {@link CIQ.ChartEngine#minimumLeftBars}
         * @type boolean
         * @default
         * @memberOf CIQ.ChartEngine.Chart#
         */
        allowScrollPast: true,
        /**
         * Set to true to temporarily hide drawings
         * @type boolean
         * @default
         * @memberOf CIQ.ChartEngine.Chart#
         */
        hideDrawings: false,
        /**
         * For chart types which have configuration settings (such as the aggregate charts renko, kagi, etc) contains those default settings.
         * This object holds the settings for the current chart type only.
         * @type {object}
         * @default
         * @memberof CIQ.ChartEngine.Chart#
         * @since TBD
         */
        defaultChartStyleConfig: {},
      }

      /**
       * Given a browser time it will return the date in dataZone time. See {@link CIQ.ChartEngine#setTimeZone} for more details.
       * If no dataZone is set, it will return the original date passed in.
       * @param {Date} browserDate Date in broswr time - as in 'new Date();'
       * @return {Date} Date converted to dataZone
       * @memberOf CIQ.ChartEngine
       * @since 07-2016-16.6
       */
      CIQ.ChartEngine.prototype.convertToDataZone = function(browserDate) {
        if (this.dataZone) {
          // convert the current time to the dataZone
          var tzNow = CIQ.convertTimeZone(browserDate, null, this.dataZone)
          // remember the the masterData is in local time but really representing the dataZone time.
          // now build a browser timezone time using the dataZone time so it will match the offset of the existing data in masterData.
          browserDate = new Date(
            tzNow.getFullYear(),
            tzNow.getMonth(),
            tzNow.getDate(),
            tzNow.getHours(),
            tzNow.getMinutes(),
            tzNow.getSeconds(),
            tzNow.getMilliseconds(),
          )
        }
        return browserDate
      }

      /**
       * Returns true if the interval is based off of a daily interval ("day","week" or "month")
       * @param  {string}  interval The interval
       * @return {Boolean}          True if it's a daily interval
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.isDailyInterval = function(interval) {
        if (interval == 'day') return true
        if (interval == 'week') return true
        if (interval == 'month') return true
        return false
      }

      /**
       * Returns true if the chartType is not a line type and therefore displays highs and lows.
       * @param  {String}  chartType The chart type (layout.chartType)
       * @return {Boolean}           True if the chart type only displays close values
       * @memberOf CIQ.ChartEngine
       * @since 05-2016-10.1 "baseline_delta_mountain" and  "colored_mountain" are also available
       */
      CIQ.ChartEngine.chartShowsHighs = function(chartType) {
        if (chartType == 'line') return false
        if (chartType == 'colored_line') return false
        if (chartType == 'mountain') return false
        if (chartType == 'colored_mountain') return false
        if (chartType == 'baseline_delta') return false
        if (chartType == 'baseline_delta_mountain') return false
        return true
      }

      /**
       * This method does nothing. It is just a known location to put a break point for debugging the kernel.
       * @private
       */
      CIQ.ChartEngine.prototype.debug = function() {
        return
      }

      /**
       * Measures frames per second. Use this from the console.
       * @private
       */
      CIQ.ChartEngine.prototype.fps = function() {
        var start = new Date().getTime()
        var frames = 0
        var time_seconds = 5
        var self = this
        console.log('Measuring settimeout for ' + time_seconds + ' seconds.')
        console.log(CIQ.ChartEngine.useAnimation ? 'Using requestAnimationFrame' : 'Using setTimeout')

        function render() {
          var now = new Date().getTime()
          if ((now - start) / 1000 > time_seconds) {
            console.log('FPS=' + frames / time_seconds)
            return
          }
          self.draw()
          frames++
          if (CIQ.ChartEngine.useAnimation) {
            requestAnimationFrame(render)
          } else {
            setTimeout(render, 0)
          }
        }
        render()
      }

      _exports.STXChart = CIQ.ChartEngine // backward compatibility

      /**
       * @deprecated
       */
      CIQ.ChartEngine.DrawingDescriptor = {
        name: '',
        render: null, /// function(vector, color, context, highlight (boolean), temporary (boolean), stx)
        intersected: null, /// function(vector, x, y) returns whether coordinates intersect the object
        click: null, /// function(vector, clickNumber) called when mouse click or tap. Return true to end drawing. False to accept more clicks.
        abort: null, /// called when user has aborted drawing action (esc key for instance)
      }

      /* TOC()************* CIQ.CHARTENGINE STATIC FUNCTIONS ************** */

      /**
       * The following is a list of ADVANCED injectable methods.
       *
       * **These methods should not be normally called by your code, but rather injections should be used to modify their behavior within the library Kernel.**
       *
       * The "Injection API" provides prepend and append functionality to any built-in method.
       * Essentially what this means is that a developer can write code that will be run either before (prepend) or after (append) any internal {@link CIQ.ChartEngine} function (such as draw() or mouseMove()).
       * This gives developers the ability to supplement, override or ignore any of the built in functionality.
       *
       * Note that you may prepend or append multiple functions. Each injected function is stacked "outward" (daisy-chained) from the core function.
       *
       * _prepend >> prepend >> prepend >> function << append << append << append_
       *
       * You may prepend/append either to CIQ.ChartEngine.prototype or directly to a CIQ.ChartEngine instance.
       *
       * See the {@tutorial Popular API injections} and [Customization Basics](tutorial-Customization%20Basics.html#injections) tutorials for additional guidance and examples.
       * @namespace CIQ.ChartEngine.AdvancedInjectable
       * @example
       * CIQ.ChartEngine.prototype.append("method_name_goes_here", function(){
       * 	// do something here
       * });
       * @example
       * CIQ.ChartEngine.prototype.prepend("method_name_goes_here", function(){
       * 	// do something here
       * 	// return true; // if you want to exit the method after your injection
       * 	// return false; // if you want the standard code to follow the prepend
       * });
       */

      /**
       * Prepends custom developer functionality to an internal chart member. See [“Injection API"](index.html#injection-api-prepend-and-append).
       * @param  {string} o Signature of member
       * @param  {function} n Callback function, will be called with "apply"
       * @memberOf CIQ.ChartEngine
       * @since
       * <br>- 04-2015 You can append either to an {@link CIQ.ChartEngine} instance, or to the prototype. The first will affect only a single
       * chart while the latter will affect any chart (if you have multiple on the screen).
       * <br>- 15-07-01 function returns a descriptor which can be passed in to [removeInjection()]{@link CIQ.ChartEngine#removeInjection} to remove it later on.
       * @return {object} Injection descriptor which can be passed in to {@link CIQ.ChartEngine#removeInjection} to remove it later on.
       */
      CIQ.ChartEngine.prototype.prepend = function(o, n) {
        var m = 'prepend' + o
        var prepends
        if (this instanceof CIQ.ChartEngine) {
          prepends = this.hasOwnProperty(m) ? this[m] : []
          this[m] = [n].concat(prepends)
        } else {
          prepends = CIQ.ChartEngine.prototype[m] || []
          CIQ.ChartEngine.prototype[m] = [n].concat(prepends)
        }
        return { method: m, func: n }
      }

      /**
       * Appends custom developer functionality to an internal chart member. See [“Injection API"](index.html#injection-api-prepend-and-append).
       * @param  {string} o Signature of member
       * @param  {function} n Callback function, will be called with "apply"
       * @memberOf CIQ.ChartEngine
       * @since
       * <br>- 04-2015 You can append either to an {@link CIQ.ChartEngine} instance, or to the prototype. The first will affect only a single
       * chart while the latter will affect any chart (if you have multiple on the screen)
       * <br>- 15-07-01 function returns a descriptor which can be passed in to [removeInjection()]{@link CIQ.ChartEngine#removeInjection} to remove it later on.
       * @return {object} Injection descriptor which can be passed in to {@link CIQ.ChartEngine#removeInjection} to remove it later on.
       */
      CIQ.ChartEngine.prototype.append = function(o, n) {
        var m = 'append' + o
        var appends
        if (this instanceof CIQ.ChartEngine) {
          appends = this.hasOwnProperty(m) ? this[m] : []
          this[m] = appends.concat(n)
        } else {
          appends = CIQ.ChartEngine.prototype[m] || []
          CIQ.ChartEngine.prototype[m] = appends.concat(n)
        }
        return { method: m, func: n }
      }

      /**
       * Removes a specific injection.  One can remove either an instance injection or a prototype injection, depending on how the function is called.
       * @param  {Object} id The injection descriptor returned from {@link CIQ.ChartEngine#prepend} or {@link CIQ.ChartEngine#append}
       * @since 07/01/2015
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.removeInjection = function(id) {
        var method = id.method
        var i
        if (this instanceof CIQ.ChartEngine) {
          if (!this[method]) return
          for (i = 0; i < this[method].length; i++) {
            if (this[method][i] == id.func) {
              this[method].splice(i, 1)
              return
            }
          }
        } else {
          if (!CIQ.ChartEngine.prototype[method]) return
          for (i = 0; i < CIQ.ChartEngine.prototype[method].length; i++) {
            if (CIQ.ChartEngine.prototype[method][i] == id.func) {
              CIQ.ChartEngine.prototype[method].splice(i, 1)
              return
            }
          }
        }
      }
      /**
       * Removes custom developer functionality from an internal chart member. Will remove any and all appends or prepends.
       * @param  {string} o Signature of member
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.remove = function(o) {
        if (this instanceof CIQ.ChartEngine) {
          delete this['append' + o]
          delete this['prepend' + o]
        } else {
          delete CIQ.ChartEngine.prototype['append' + o]
          delete CIQ.ChartEngine.prototype['prepend' + o]
        }
      }

      CIQ.ChartEngine.registeredContainers = [] // This will contain an array of all of the CIQ container objects
      // Note that if you are dynamically destroying containers in the DOM you should delete them from this array when you do so

      /**
       * @deprecated Use CIQ.ScrollManager.attachRightClick
       */
      CIQ.ChartEngine.handleContextMenu = function(e) {
        // This code prevents the browser context menu from popping up if you right click on a drawing or overlay
        if (!e) e = event
        for (var i = 0; i < CIQ.ChartEngine.registeredContainers.length; i++) {
          var stx = CIQ.ChartEngine.registeredContainers[i].stx
          if (stx) {
            if (stx.anyHighlighted) {
              if (e.preventDefault) e.preventDefault()
              return false
            }
          }
        }
      }

      CIQ.ChartEngine.prototype.positionMarkers = function() {}

      /*
       * Default implementation of plotSplinePrimitive.  Load splines.js to get real splining.
       */
      var plotSplinePrimitive = function(points, tension, context) {
        if (!window.splineWarning)
          console.log('Warning: Cannot find implementation of splining.  Try loading splines.js')
        window.splineWarning = 1
        for (var i = 2; i < points.length; i += 2) {
          context.lineTo(points[i], points[i + 1])
        }
      }
      // If splines.js has not been included then set it with our default no-op implementation
      if (!_exports.plotSpline) _exports.plotSpline = plotSplinePrimitive

      /**
       * Placeholder for plugin data sets. This array will register each plug in object, complete with their functions.
       * See our Plug-in {@tutorial Markers} tutorial for complete details and examples on registering and implementing a plug-in.
       *
       * If defined, Plug-in instances will be called by their corresponding native functions for the following:
       * - consolidate ( called by {@link CIQ.ChartEngine#consolidatedQuote})
       * - drawUnder (called by draw before {@link CIQ.ChartEngine#displayChart})
       * - drawOver (called by draw after {@link CIQ.ChartEngine#displayChart})
       * - {@link CIQ.ChartEngine#setMasterData}
       * - {@link CIQ.ChartEngine#appendMasterData}
       * - {@link CIQ.ChartEngine#initializeChart}
       * - {@link CIQ.ChartEngine#createDataSet}
       * @type array
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.plugins = {}

      /*
       * remove the items from chart and into stx
       */

      /**
       * Defines raw html for the chart controls. These can be overridden by manually placing HTML elements in the chart container
       * with the same ID. To completely disable a chart control, programatically set controls[controlID]=null where controlID is the control to disable.
       * You can also set any of these components to null in the stx object before creating a chart as outlined in the included examples.
       * Note that only some controls can be disabled.
       * @example
       * var stxx=new CIQ.ChartEngine({container:$$("chartContainer"), controls: {chartControls:null}});
       * @example
       * // before calling newChart()
       * stxx.controls["chartControls"]=null;
       * @type {Object}
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.htmlControls = {
        /**
         * controlID for the Annotation Save button (class="stx-btn stx_annotation_save").
         * @alias htmlControls.annotationSave
         * @memberOf CIQ.ChartEngine
         */
        annotationSave: '<span class="stx-btn stx_annotation_save" style="display: none;">save</span>',
        /**
         * controlID for the Annotation Cancel button (class="stx-btn stx_annotation_cancel").
         * @alias htmlControls.annotationCancel
         * @memberOf CIQ.ChartEngine
         */
        annotationCancel:
          '<span class="stx-btn stx_annotation_cancel" style="display: none; margin-left:10px;">cancel</span>',
        /**
         * controlID for the Trash Can button / Series delete panel (id="mSticky"). Also see {@link CIQ.ChartEngine#displaySticky}
         * @alias htmlControls.mSticky
         * @memberOf CIQ.ChartEngine
         * @example
         * // disable the tool tip that appears when hovering over an overlay ( drawing, line study, etc)
         * stxx.controls["mSticky"]=null;
         */
        mSticky:
          '<div id="mSticky"> <span id="mStickyInterior"></span> <span id="mStickyRightClick" class=""><span class="overlayEdit stx-btn" style="display:none"><span>&nbsp;</span></span> <span id="overlayTrashCan" class="stx-btn" style="display:none"><span>&nbsp;</span></span> <span id="mouseDeleteInstructions"><span>(</span><span id="mouseDeleteText">right-click to delete</span><span id="mouseManageText">right-click to manage</span><span>)</span></span></span></div>',
        /**
         * controlID for the Horizontal Crosshair line (class="stx_crosshair stx_crosshair_x").
         * @alias htmlControls.crossX
         * @memberOf CIQ.ChartEngine
         */
        crossX: '<div class="stx_crosshair stx_crosshair_x" style="display: none;"></div>',
        /**
         * controlID for the Vertical Crosshair line (class="stx_crosshair stx_crosshair_y").
         * @alias htmlControls.crossY
         * @memberOf CIQ.ChartEngine
         */
        crossY: '<div class="stx_crosshair stx_crosshair_y" style="display: none;"></div>',
        /**
         * controlID for the zoom-in and zoom-out buttons (class="stx_chart_controls").
         * @alias htmlControls.chartControls
         * @memberOf CIQ.ChartEngine
         */
        chartControls:
          '<div class="stx_chart_controls" style="display: none; bottom: 22px;"><div id="chartSize"><span id="zoomOut" class="stx-zoom-out"></span><span id="zoomIn" class="stx-zoom-in"></span></div></div>',
        /**
         * controlID for the home button (class="stx_jump_today home").
         * The button goes away if you are showing the most current data. See example to manually turn it off.
         * You can call `stxx.home();` programatically.	 See {@link CIQ.ChartEngine#home} for more details
         * @alias htmlControls.home
         * @memberOf CIQ.ChartEngine
         * @example
         * // disable the home button
         * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
         * stxx.controls["home"]=null;
         */
        home: '<div id="home" class="stx_jump_today home" style="display:none"><span></span></div>',
        /**
         * controlID for div which floats along the X axis with the crosshair date (class="stx-float-date").
         * @alias htmlControls.floatDate
         * @memberOf CIQ.ChartEngine
         */
        floatDate: '<div class="stx-float-date" style="visibility: hidden;"></div>',
        /**
         * controlID for div which controls the handle to resize panels (class="stx-ico-handle").
         * @alias htmlControls.handleTemplate
         * @memberOf CIQ.ChartEngine
         * @example
         * // example to hide the handle and prevent resizing of panels
         * .stx-ico-handle {
         *		display: none;
         * }
         */
        handleTemplate: '<div class="stx-ico-handle" style="display: none;"><span></span></div> ',
        /**
         * controlID for the div which hosts the panel title (symbol name, study name ) and the study control icons on the on the upper left hand corner of each panel (class="stx-panel-control")
         * This control can not be disabled, but can be manipulated using the corresponding CSS style classes.
         * On the main chart panel, `stx-chart-panel` is added to the class definition ( in addition to `stx-panel-title` which just controls the tile) so you can manipulate the entire chart controls section, separately from the rest of the study panel controls.
         *
         * @example
         * // example to hide the chart symbol title
         * .stx-panel-control.stx-chart-panel .stx-panel-title{
         * 		display:none;
         * }
         *
         * // for backwards compatibility, this is still supported:
         * .chart-title{
         *		display	: none;
         *	}
         *
         * @example
         * // example to hide all panels titles
         * .stx-panel-control .stx-panel-title{
         * 		display:none;
         * }
         *
         * @alias htmlControls.iconsTemplate
         * @memberOf CIQ.ChartEngine
         */
        iconsTemplate:
          '<div class="stx-panel-control"><div class="stx-panel-title"></div><div class="stx-btn-panel"><span class="stx-ico-up"></span></div><div class="stx-btn-panel"><span class="stx-ico-focus"></span></div><div class="stx-btn-panel"><span class="stx-ico-down"></span></div><div class="stx-btn-panel"><span class="stx-ico-edit"></span></div><div class="stx-btn-panel"><span class="stx-ico-close"></span></div></div>',
        /**
         * controlID for grabber which sits to right of baseline so it can be moved.
         * @alias htmlControls.baselineHandle
         * @memberOf CIQ.ChartEngine
         */
        baselineHandle: '<div class="stx-baseline-handle fa" style="display: none;"></div>',
      }

      /**
       * Registers the Chart controls and attaches event handlers to the zoom and home controls.
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.registerHTMLElements = function() {
        var c = this.chart.container
        for (var control in CIQ.ChartEngine.htmlControls) {
          if (typeof this.chart[control] == 'undefined' && typeof this.controls[control] == 'undefined') {
            if (!this.allowZoom && control == 'chartControls') continue
            var el = $$$('#' + control, c)
            if (el) {
              this.chart[control] = el
              this.controls[control] = el
            } else {
              var rawHTML = CIQ.ChartEngine.htmlControls[control]
              var div = document.createElement('DIV')
              div.innerHTML = rawHTML
              el = div.firstChild
              c.appendChild(el)
              this.chart[control] = el
              this.controls[control] = el
              el.id = control
            }
          }
        }
        if (this.controls.chartControls) {
          var zoomIn = $$$('#zoomIn', this.controls.chartControls)
          var zoomOut = $$$('#zoomOut', this.controls.chartControls)

          CIQ.safeClickTouch(
            zoomIn,
            (function(self) {
              return function(e) {
                self.zoomIn()
                e.stopPropagation()
              }
            })(this),
          )
          CIQ.safeClickTouch(
            zoomOut,
            (function(self) {
              return function(e) {
                self.zoomOut()
                e.stopPropagation()
              }
            })(this),
          )
          if (!CIQ.touchDevice) {
            zoomIn.onmouseover = (function(self) {
              return function(e) {
                self.modalBegin()
              }
            })(this)
            zoomIn.onmouseout = (function(self) {
              return function(e) {
                self.modalEnd()
              }
            })(this)
            zoomOut.onmouseover = (function(self) {
              return function(e) {
                self.modalBegin()
              }
            })(this)
            zoomOut.onmouseout = (function(self) {
              return function(e) {
                self.modalEnd()
              }
            })(this)
          }
        }
        if (this.controls.home) {
          CIQ.safeClickTouch(
            this.controls.home,
            (function(self) {
              return function(e) {
                self.home({ animate: true })
                e.stopPropagation()
              }
            })(this),
          )
          if (!CIQ.touchDevice) {
            this.controls.home.onmouseover = (function(self) {
              return function(e) {
                self.modalBegin()
              }
            })(this)
            this.controls.home.onmouseout = (function(self) {
              return function(e) {
                self.modalEnd()
              }
            })(this)
          }
        }
      }

      /**
       * Clones a style from a style object (obtained from getComputedStyle). Any styles are converted to camel case. This method automatically
       * converts from browsers that store styles as numeric arrays rather than as property objects.
       * @param  {object} div A style object derived from getComputedStyle
       * @return {object}		A style object that will match properties
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.cloneStyle = function(styleObject) {
        var rc = {}
        var nativeCamelSupport = false
        function capitalize(g) {
          return g[1].toUpperCase()
        }
        for (var i in styleObject) {
          var v = styleObject[i]
          // do *not* check styleObject["backgroundAttachment"]. Android browsers return bogus results.
          // instead we iterate through the object
          if (i == 'backgroundAttachment') nativeCamelSupport = true

          // modern browsers contain both camel and hyphenated. We can avoid the camelCase conversion
          // logic to save a little bit of startup time
          if (nativeCamelSupport) {
            if (v && v.constructor == String && isNaN(i)) {
              rc[i] = v
            }
          } else if (!isNaN(i)) {
            // old android browsers fall into here
            var x = styleObject.getPropertyValue(v)
            if (x) {
              //var vcc=v.replace(CIQ.camelCaseRegExp, function (g) { return g[1].toUpperCase(); })
              // much more efficient camel case conversion algorithm
              v = v.split('-')
              var ii = 0,
                jj = v.length
              var vcc = v[0]
              while (++ii < jj) {
                vcc += v[ii].charAt(0).toUpperCase() + v[ii].slice(1)
              }
              rc[vcc] = x
            }
          } else {
            // old internet explorer falls into here
            var icc = i.replace(CIQ.camelCaseRegExp, capitalize)
            rc[icc] = v
          }
        }
        return rc
      }

      /**
       * Returns an object containing the class style given a css class name (used by plotLine() for instance). A caching mechanism is used
       * for performance. If styles are changed dynamically then use CIQ.ChartEngine.prototype.clearStyles to reset.
       * @param  {string} className The CSS class name to get the styles
       * @return {object}			  An object containing each style, in camel case.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.canvasStyle = function(className) {
        var s = this.styles[className]
        if (!s) {
          var div = document.createElement('div') // Create a dummy div
          div.className = className
          this.container.appendChild(div)
          var styles = getComputedStyle(div)
          s = this.styles[className] = this.cloneStyle(styles)
          this.container.removeChild(div)
          if (!styles) {
            // css not initialized, possibly hidden iframe in firefox
            this.styles[className] = null
          }
        }
        return s
      }

      /**
       * Detects if a string is a valid CSS color and if so returns that string. Otherwise it
       * returns a style object, assuming that the string is a classname.
       * @param  {string} str Either a color or a className
       * @return {Object}		Either the color or a class object
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.colorOrStyle = function(str) {
        if (str.indexOf('#') != -1) return str
        if (str.indexOf('(') != -1) return str // rgb() or rgba()
        if (str == 'transparent') return str
        return this.canvasStyle(str)
      }

      /**
		Call this to remove all of the loaded canvas styles, for instance after loading a new css file
		@memberOf CIQ.ChartEngine
	*/
      CIQ.ChartEngine.prototype.clearStyles = function() {
        this.styles = {}
      }

      /**
       * Convenience method to set a style on the chart
       * @param  {string} obj The object whose style you wish to change (stx_grid, stx_xaxis, etc)
       * @param  {string} attribute The style name of the object you wish to change
       * @param  {string} value The value to assign to the attribute
       * @example
       * stx.setStyle("stx_volume_up","color","green");
       * @example
       * stx.setStyle("stx_volume_down","color","red");
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setStyle = function(obj, attribute, value) {
        if (!this.styles[obj]) {
          this.canvasStyle(obj)
        }
        if (!this.styles[obj]) this.styles[obj] = {}
        this.styles[obj][CIQ.makeCamelCase(attribute)] = value
      }

      /**
       * Sets canvas font context given a css class name. Supports fontStyle, fontWeight, fontSize and fontFamily.
       * @param  {string} className The name of the CSS class to pull font from
       * @param  {external:CanvasRenderingContext2D} ctx		 An HTML Context
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.canvasFont = function(className, ctx) {
        if (!ctx) ctx = this.chart.context
        var style = this.canvasStyle(className)
        if (!style) return

        var result = style.fontStyle + ' ' + style.fontWeight + ' ' + style.fontSize + ' ' + style.fontFamily
        if (result.indexOf('undefined') == -1) {
          ctx.font = result
        } else {
          this.styles[className] = null
          console.log('bad css style for class ' + className)
        }
      }

      /**
       * Sets color and globalAlpha (opacity) for the canvas given a css class name. Call this before drawing on the canvas.
       * @param  {string} className A CSS style. Supports "color" and "opacity"
       * @param  {external:CanvasRenderingContext2D} [ctx]	   An HTML Context
       * @example
       * stxx.canvasColor("myStyle");
       * // draw a line using canvas primitives, will be color defined in .myStyle
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.canvasColor = function(className, ctx) {
        if (!ctx) ctx = this.chart.context
        var style = this.canvasStyle(className)
        if (!style) return
        var color = style.color
        if (CIQ.isTransparent(color)) color = this.defaultColor
        ctx.globalAlpha = 1
        ctx.fillStyle = color
        ctx.strokeStyle = color
        var opacity = style.opacity
        if (typeof opacity != 'undefined') ctx.globalAlpha = opacity
      }

      /**
       * Returns the font size defined by the requested class name. Defaults to 12 if undefined. Use this to determine vertical heights so that lettering isn't clipped.
       * @param  {string} className Class name
       * @return {number}			  The font size (px is stripped)
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.getCanvasFontSize = function(className) {
        var s = this.canvasStyle(className)
        var fs = s.fontSize
        if (!fs) fs = '12'
        return parseInt(CIQ.stripPX(fs))
      }

      /**
       * Returns the canvas color specified in the class name
       * @param  {string} className The class name
       * @return {string}			  The color specified (May be undefined if none specified)
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.getCanvasColor = function(className) {
        var s = this.canvasStyle(className)
        return s.color
      }

      /**
       * Override this function to hide the date which floats along the X axis when crosshairs are enabled. Return `true` to hide the date or `false` to display.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.hideDates = function() {
        return false
      }

      /**
       * Runs the prepend injections. A prepend function that returns true will short circuit any proceeding prepend functions, and the core functionality.
       * @private
       * @param  {string} o	 The function name
       * @param  {arguments} args The arguments to the function
       * @param  {object} self The this object
       * @return {boolean}	  Returns true if any prepend function returns true.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.runPrepend = function(o, args, self) {
        var n = 'prepend' + o
        var prepends = this.hasOwnProperty(n) ? this[n] : []
        prepends = prepends.concat(CIQ.ChartEngine.prototype[n] || [])
        if (!prepends.length) return false
        if (!self) self = this
        for (var i = 0; i < prepends.length; i++) {
          var rv = prepends[i].apply(self, args)
          if (rv) return rv
        }
        return false
      }

      /**
       * Runs the append injections. An append function that returns true will short circuit any proceeding append functions (but not the core functionality since that has already ocurred).
       * @private
       * @param  {string} o	 The function name
       * @param  {arguments} args The arguments to the function
       * @param  {object} self The this object
       * @return {boolean}	  Returns true if any append function returns true.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.runAppend = function(o, args, self) {
        var n = 'append' + o
        var appends = this.hasOwnProperty(n) ? this[n] : []
        appends = appends.concat(CIQ.ChartEngine.prototype[n] || [])
        if (!appends.length) return false
        if (!self) self = this
        for (var i = 0; i < appends.length; i++) {
          var rv = appends[i].apply(self, args)
          if (rv) return rv
        }
        return false
      }

      /**
       * Registers a drawing tool. This is typically done using lazy eval.
       * @private
       * @param  {string} name Name of drawing tool
       * @param  {function} func Constructor for drawing tool
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.registerDrawingTool = function(name, func) {
        CIQ.ChartEngine.drawingTools[name] = func
      }

      /**
       * @deprecated
       */

      CIQ.ChartEngine.prototype.createBlock = function(left, width, top, height, className, context) {
        if (!context) context = this.chart.context
        if (typeof height == 'undefined') {
          return
        }
        this.canvasColor(className, context)
        context.fillRect(left, top, width, height)
        context.globalAlpha = 1
      }

      /**
       * This is called whenever a change to layout or drawings occurs. But can be used to trigger any event. If {@link CIQ.ChartEngine#changeCallback} has a function registered, then
       * that function will be called with the type of change. The change itself is not passed in. The layout or drawings can be inspected to find the change but
       * typically the entire set of drawings or entire layout is desired and it is mostly just necessary to know that they have changed so that they
       * can be saved.
       * @param  {string} change Type of change that occurred. Any string that {@link CIQ.ChartEngine#changeCallback} has been programmed to handle is valid.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.changeOccurred = function(change) {
        if (this.currentlyImporting) return // changes actually occurring because of an import, not user activity
        if (this.changeCallback) this.changeCallback(this, change)
        var obj = {
          stx: this,
          symbol: this.chart.symbol,
          symbolObject: this.chart.symbolObject,
          layout: this.layout,
          drawings: this.drawingObjects,
        }
        if (change == 'layout') {
          this.dispatch('layout', obj)
        } else if (change == 'vector') {
          this.dispatch('drawing', obj)
        }
      }

      /**
       * Sets the base chart type to "line", "candle", "bar", "wave", “colored_bar”, "colored_line", “hollow_candle”,"volume_candle",”scatterplot”, "baseline_delta", "baseline_delta_mountain", "mountain", "colored_mountain"
       * @param {string} chartType The chart type
       * @memberOf CIQ.ChartEngine
       * @since 05-2016-10.1 "baseline_delta_mountain" and  "colored_mountain" are also available
       */
      CIQ.ChartEngine.prototype.setChartType = function(chartType) {
        this.layout.chartType = chartType
        this.chart.defaultChartStyleConfig = { type: chartType }
        if (this.displayInitialized) this.draw()
        this.changeOccurred('layout')
      }

      /**
       * Sets the base aggregation type to "rangebars" "ohlc" "kagi" "pandf" "heikinashi" "linebreak" "renko".
       * See the [Chart types](tutorial-Chart%20Types%20and%20Styles.html#setAggregationType) tutorial for details on how to override aggregation type defaults.
       * @param {string} chartType The chart type
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setAggregationType = function(aggregationType) {
        this.layout.aggregationType = aggregationType
        if (this.chart.canvas) {
          this.createDataSet()
          this.draw()
        }
        this.changeOccurred('layout')
      }

      /**
       * Sets the chart scale
       * @param {string} chartScale "log", "linear"
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setChartScale = function(chartScale) {
        if (!chartScale) chartScale = 'linear'
        this.layout.chartScale = chartScale
        if (this.chart.canvas) this.draw()
        this.changeOccurred('layout')
      }

      /**
       * Sets the charts to adjusted values rather than standard values. Adjusted values are calculated outside of the chart engine (and may be splits, dividends or both).
       * When charts are using adjusted values, a computed ratio for each tick is used for price to pixel calculations which keeps drawings accurate
       * @param {boolean} data True to use adjusted values (Adj_Close), false to use Close values
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setAdjusted = function(data) {
        this.layout.adj = data
        if (this.chart.canvas) {
          this.createDataSet()
          this.draw()
        }
        this.changeOccurred('layout')
      }

      /**
       * Turns on or off the volume underlay indicator
       * @param {boolean} data True to turn on the underlay
       * @memberOf CIQ.ChartEngine
       * @deprecated
       */
      CIQ.ChartEngine.prototype.setVolumeUnderlay = function(data) {
        this.layout.volumeUnderlay = data
        if (this.chart.canvas) this.draw()
        this.changeOccurred('layout')
      }

      /**
       * Serializes all of the drawings on the chart(s) so that they can be saved to an external database and later reconstructed
       * with {@link CIQ.ChartEngine#reconstructDrawings}.
       * @return {array} An array of all of the drawing serializations
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.serializeDrawings = function() {
        var arr = []
        for (var i = 0; i < this.drawingObjects.length; i++) {
          arr.push(this.drawingObjects[i].serialize())
        }
        return arr
      }

      /**
       * Causes all drawings to delete themselves. External access should be made through @see CIQ.ChartEngine.prototype.clearDrawings
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.abortDrawings = function() {
        for (var i = 0; i < this.drawingObjects.length; i++) {
          this.drawingObjects[i].abort(true)
        }
        this.drawingObjects = []
      }

      /**
       * Reconstructs drawings from an array originally created by {@link CIQ.ChartEngine#serializeDrawings}.
       * To immediately render the reconstructed drawing, you must call `draw()`.
       * See {@tutorial Custom Drawing Tools} for more details.
       * @param  {array} arr An array of serialized drawings
       * @memberOf CIQ.ChartEngine
       * @example
       * // programatically add a rectangle
       * stxx.reconstructDrawings([{"name":"rectangle","pnl":"chart","col":"transparent","fc":"#7DA6F5","ptrn":"solid","lw":1.1,"d0":"20151216030000000","d1":"20151216081000000","tzo0":300,"tzo1":300,"v0":152.5508906882591,"v1":143.3385829959514}]);
       * // programatically add a vertical line
       * stxx.reconstructDrawings([{"name":"vertical","pnl":"chart","col":"transparent","ptrn":"solid","lw":1.1,"v0":147.45987854251013,"d0":"20151216023000000","tzo0":300,"al":true}]);
       * // now render the reconstructed drawings
       * stxx.draw();
       */
      CIQ.ChartEngine.prototype.reconstructDrawings = function(arr) {
        if (!CIQ.Drawing) return
        for (var i = 0; i < arr.length; i++) {
          var rep = arr[i]
          if (rep.name == 'fibonacci') rep.name = 'retracement'
          var Factory = CIQ.ChartEngine.drawingTools[rep.name]
          if (!Factory) {
            if (CIQ.Drawing[rep.name]) {
              Factory = CIQ.Drawing[rep.name]
              CIQ.ChartEngine.registerDrawingTool(rep.name, Factory)
            }
          }
          if (Factory) {
            var drawing = new Factory()
            drawing.reconstruct(this, rep)
            this.drawingObjects.push(drawing)
          }
        }
      }

      /**
       * Clears all the drawings on the chart. (Do not call abortDrawings directly).
       * @param {boolean} cantUndo Set to true to make this an "non-undoable" operation
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.clearDrawings = function(cantUndo) {
        var before = CIQ.shallowClone(this.drawingObjects)
        this.abortDrawings()
        if (cantUndo) {
          this.undoStamps = []
        } else {
          this.undoStamp(before, CIQ.shallowClone(this.drawingObjects))
        }
        this.changeOccurred('vector')
        this.createDataSet()
        //this.deleteHighlighted(); // this will remove any stickies and also call draw()
        // deleteHighlighted was doing too much, so next we call 'just' what we need.
        this.cancelTouchSingleClick = true
        STX.clearCanvas(this.chart.tempCanvas, this)
        this.draw()
        if (this.controls.mSticky) {
          this.controls.mSticky.style.display = 'none'
          this.controls.mSticky.children[0].innerHTML = ''
        }
      }

      /**
       * Creates a new drawing of the specified type with the specified parameters. See {@tutorial Custom Drawing Tools} for more details.
       * @param  {string} type	   Drawing name
       * @param  {object} parameters Parameters that describe the drawing
       * @return {CIQ.Drawing}			A drawing object
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.createDrawing = function(type, parameters) {
        if (!CIQ.Drawing) return
        var drawing = new CIQ.Drawing[type]()
        drawing.reconstruct(this, parameters)
        this.drawingObjects.push(drawing)
        this.draw()
        return drawing
      }

      /**
       * Removes the drawing. Drawing object should be one returned from {@link CIQ.ChartEngine#createDrawing}. See {@tutorial Custom Drawing Tools} for more details.
       * @param  {Object} drawing Drawing object
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.removeDrawing = function(drawing) {
        for (var i = 0; i < this.drawingObjects.length; i++) {
          if (this.drawingObjects[i] == drawing) {
            this.drawingObjects.splice(i, 1)
            this.changeOccurred('vector')
            this.draw()
            return
          }
        }
      }

      /**
       * Returns a date (in yyyymmddhhmm form) given a tick (location in the dataSet). If the tick lies outside of the dataSet then the date will
       * be arrived at algorithmically by calculating into the past or future.
       * @param  {number} tick  Location in the dataSet (use {@link CIQ.ChartEngine#dateFromBar} for dataSegment)
       * @param  {CIQ.Chart} [chart] An optional chart object
       * @param  {boolean} [nativeDate] True to return as date object otherwise returns in yyyymmddhhmm form
       * @return {string}		  The date form dictated by native param
       * @todo  Return native date rather than string date
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.dateFromTick = function(tick, chart, nativeDate) {
        if (!chart) chart = this.chart
        var data_len = chart.dataSet.length
        var dt
        var iter
        var ctr = 0
        var result
        var addedTempDate = false

        // if empty chart then add current date so this function supports initializing an empty chart in quotefeed
        if (data_len === 0) {
          chart.dataSet[0] = {}
          chart.dataSet[0].DT = new Date()
          data_len = chart.dataSet.length
          addedTempDate = true
        }

        if (tick < 0) {
          iter = this.standardMarketIterator(chart.dataSet[0].DT)
          while (ctr > tick) {
            dt = iter.previous()
            ctr -= 1
          }
        } else if (tick >= data_len) {
          iter = this.standardMarketIterator(chart.dataSet[data_len - 1].DT)
          while (data_len - 1 + ctr < tick) {
            dt = iter.next()
            ctr += 1
          }
        } else {
          dt = chart.dataSet[tick].DT
        }

        if (nativeDate) {
          result = new Date(dt.getTime())
        } else {
          result = CIQ.yyyymmddhhmm(dt)
        }

        if (addedTempDate) {
          delete chart.dataSet[0].DT
        }
        return result
      }

      /**
       * Calculates and sets the value of zoom and scroll for y-axis based on yAxis.initialMarginTop and yAxis.initialMarginBottom.
       * This method will automatically translate those into starting scroll and zoom factors.
       * If the combined initial values are greater than the y axis height, then both zoom and scroll will be rest to 0;
       * @param {CIQ.ChartEngine.YAxis} yAxis The yAxis to reset
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.calculateYAxisMargins = function(yAxis) {
        yAxis.zoom = yAxis.initialMarginTop + yAxis.initialMarginBottom
        yAxis.scroll = (yAxis.initialMarginTop - yAxis.initialMarginBottom) / 2
        if (yAxis.zoom > yAxis.height) {
          //console.log('calculateYAxisMargins adjusted zoom and scroll to 0. zoom',yAxis.zoom,'  |  height=',yAxis.height);
          yAxis.zoom = 0 // If the zoom is greater than the height then we'll have an upside down y-axis
          yAxis.scroll = 0
        }
      }

      /**
       * Returns the chart to the home position, where the most recent tick is on the right side of the screen.
       * @param {boolean} params.animate	Set to true to animate a smooth scroll to the home position.
       * @param {Object} params.maintainWhitespace Defaults to `true`. Set to `true` to maintain the currently visible white space on the left of the chart.
       * @param {Object} params.whitespace Override to force a spacific amount of whitespace. Will take presencece over `params.maintainWhitespace`
       * @param { CIQ.Chart} [params.chart] Optionally which chart to scroll home
       * @memberOf CIQ.ChartEngine
       * @example
       * stxx.home({maintainWhitespace:false});
       */
      CIQ.ChartEngine.prototype.home = function(params) {
        this.swipe.amplitude = 0
        this.grabbingScreen = false //in case they were grabbing the screen and let go on top of the home button.
        if (CIQ.ChartEngine.insideChart) CIQ.unappendClassName(this.container, 'stx-drag-chart') //in case they were grabbing the screen and let go on top of the home button.
        if (typeof params != 'object') {
          // backward compatibility
          params = {
            maintainWhitespace: params,
          }
        }

        if (typeof params.maintainWhitespace == 'undefined') params.maintainWhitespace = true // maintain the whitespace unless set to false

        this.cancelTouchSingleClick = true
        if (!this.chart.dataSet || !this.chart.dataSet.length) {
          // to clear out anything that may have been on the screen. Otherwise we still show stale data.
          this.draw()
          return
        }
        this.micropixels = 0
        var barsDisplayedOnScreen = Math.floor(this.chart.width / this.layout.candleWidth)
        for (var chartName in this.charts) {
          var chart = this.charts[chartName]
          if (params.chart && params.chart != chart) continue
          var whitespace = 0
          if (params.maintainWhitespace && this.preferences.whitespace >= 0) whitespace = this.preferences.whitespace
          if (params.whitespace || params.whitespace === 0) whitespace = params.whitespace
          var isLineType = !CIQ.ChartEngine.chartShowsHighs(this.layout.chartType)
          if (
            this.yaxisLabelStyle == 'roundRectArrow' &&
            !(isLineType && this.extendLastTick && this.chart.yaxisPaddingRight !== 0)
          ) {
            // Special case when we have a pointy arrow we want the current tick to be right
            // at the arrow point, not buried underneath it
            // unless the developer set the flags to extend the line/mountain to the very edge of the chart.
            // or unless the y-axis is overlaying the chart
            var margin = 3 // should be the same from createYAxisLabel
            var height = this.getCanvasFontSize('stx_yaxis') + margin * 2
            var leftMargin = height * 0.66
            if (leftMargin > whitespace) whitespace = leftMargin
          }

          var exactScroll = Math.min(barsDisplayedOnScreen + 1, chart.dataSet.length) // the scroll must be one more than the number of bars you want to see.
          if (this.chart.allowScrollPast) exactScroll = barsDisplayedOnScreen + 1 // If whitespace allowed on left of screen
          this.micropixels = this.chart.width - (exactScroll - 1) * this.layout.candleWidth - whitespace
          if (isLineType) this.micropixels += this.layout.candleWidth / 2 // line charts display to middle of candle
          while (this.micropixels > this.layout.candleWidth) {
            // If micropixels is larger than a candle then scroll back further
            exactScroll++
            this.micropixels -= this.layout.candleWidth
          }
          while (this.micropixels < this.layout.candleWidth * -1) {
            exactScroll--
            this.micropixels += this.layout.candleWidth
          }

          if (params.animate) {
            var self = this
            this.scrollTo(
              chart,
              exactScroll,
              (function(self, chart, exactScroll) {
                return function() {
                  self.calculateYAxisMargins(chart.panel.yAxis)
                  chart.scroll = exactScroll
                  self.draw()
                }
              })(self, chart, exactScroll),
            )
          } else {
            chart.scroll = exactScroll
            this.calculateYAxisMargins(chart.panel.yAxis)
          }
        }
        this.draw()
      }

      /**
       * Whether the chart is scrolled to a home position.
       *
       * @returns {boolean} true when the scroll position shows the last tick of the dataSet
       * @memberOf CIQ.ChartEngine
       * @since 2016-06-21
       */
      CIQ.ChartEngine.prototype.isHome = function() {
        return (this.chart.scroll - 1) * this.layout.candleWidth + this.micropixels <= this.chart.width + 1
      }

      /**
       * Returns the tick (position in dataSet) given the requested date. The date does not need to match exactly. If the date lies between ticks
       * then the earlier will be returned by default. If the date lies before or after the chart then {@link CIQ.ChartEngine#futureTick} or {@link CIQ.ChartEngine#pastTick} will
       * be used to calculate the tick location.
       * @param  {string} dt	  Date in string format
       * @param  {CIQ.Chart} [chart] Optional chart object
       * @param  {number} [adj] Optional timezone adjustment in minutes to apply to date before getting tick
       * @param  {boolean} [forward] Optional switch to return the next tick as opposed to the previous, in case an exact match is not found
       * @return {number}		  The tick location
       * @todo  Use native dates instead of string form dates.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.tickFromDate = function(dt, chart, adj, forward) {
        if (!chart) chart = this.chart
        if (!chart.dataSet || !chart.dataSet.length) return 0
        if (!adj) adj = 0

        if (!chart) {
          chart = this.chart
        }
        var target = dt.constructor == Date ? dt : CIQ.strToDateTime(dt)

        // This line is used by drawings which are saved with a gmt offset.
        if (!CIQ.ChartEngine.isDailyInterval(this.layout.interval)) target.setMinutes(target.getMinutes() + adj)

        var ms = target.getTime()
        var total = chart.tickCache[ms]
        if (total || total === 0) {
          return total
        }

        var firstDate = chart.dataSet[0].DT
        var lastDate = chart.dataSet[chart.dataSet.length - 1].DT
        if (target >= firstDate && target <= lastDate) {
          for (var i = 0; i < chart.dataSet.length; i++) {
            var d = chart.dataSet[i].DT
            if (d.getTime() == target.getTime()) {
              chart.tickCache[ms] = i
              return i
            }
            if (d > target) {
              chart.tickCache[ms] = forward ? i : i - 1
              return chart.tickCache[ms]
            }
          }
        }

        var intoThePast = target < firstDate // start at beginning of chart and work backward into the past, or end of chart and into the future
        var start = intoThePast ? firstDate : lastDate
        var iter = this.standardMarketIterator(start)
        var ticks = iter.futureTick({ end: target })
        total = intoThePast ? ticks * -1 : chart.dataSet.length - 1 + ticks
        chart.tickCache[ms] = total
        return total
      }

      /**
       * This is the object stored in CIQ.ChartEngine.chart.xaxis which contains information regarding an x-axis tick.
       * See {@link CIQ.ChartEngine.AdvancedInjectable#createXAxis} for more detail.
       * @property {number} hz Horizontal position of center of label in pixels
       * @property {string} text The text to display in the label
       * @property {string} grid Either "line" or "boundary" depending on whether the label should be a date/time boundary or just a grid line
       * @class
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.XAxisLabel = function(hz, grid, text) {
        this.hz = hz
        this.grid = grid
        this.text = text
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * Call this method to create the X axis (date axis).
       *
       * See {@link CIQ.ChartEngine.XAxis#axisType} for details on setting numeric or date based axis.
       *
       * Use css styles `stx_xaxis` and `stx_xaxis_dark` to control colors and fonts for the dates. <br>
       * Use css styles `stx_grid` and `stx_grid_dark` to control the grid line colors. <br>
       * The dark styles are used when the grid changes to a major point such as the start of a new day on an intraday chart, or a new month on a daily chart.
       *
       * See {@tutorial Custom X-axis} for additional details.
       *
       * @param  {CIQ.ChartEngine.Chart} chart	The chart to create an x-axis for
       * @return {CIQ.ChartEngine.XAxisLabel[]}			axisRepresentation that can be passed in to {@link CIQ.ChartEngine#drawXAxis}
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias createXAxis
       *
       */
      CIQ.ChartEngine.prototype.createXAxis = function(chart) {
        //TODO caching of xaxis probably in this function.
        if (chart.dataSegment.length <= 0) return null
        if (CIQ.ChartEngine.hideDates()) return null
        var arguments$ = [chart]
        var axisRepresentation = this.runPrepend('createXAxis', arguments$)
        if (axisRepresentation) return axisRepresentation
        var interval = this.layout.interval
        //if(chart.xAxis.axisType=="numeric"){
        //	return this.createNumericXAxis(chart);
        //}
        axisRepresentation = this.createTickXAxisWithDates(chart)
        this.runAppend('createXAxis', arguments$)
        return axisRepresentation
      }

      /**
       * Draws a numeric x-axis, attempting to automatically create "nice" labels for readability.
       * Uses the array "index" of the dataSegment instead of "Date" field to determine the label.
       *
       * Set `chart.xAxis.axisType=="numeric"` to activate.
       *
       * @param  {CIQ.ChartEngine.Chart} chart			   Chart object
       * @return {CIQ.ChartEngine.XAxisLabel[]}			axisRepresentation that can be passed in to {@link CIQ.ChartEngine#drawXAxis}
       * @memberOf CIQ.ChartEngine
       */
      /*	CIQ.ChartEngine.prototype.createNumericXAxis=function(chart){
		axisRepresentation=[];
		chart.xaxis=[];
		for(var i=0;i<chart.maxTicks;i++){
			if(chart.dataSegment[i]) break;
			chart.xaxis.push(null);
		}
		for(var j=i;j<chart.maxTicks;j++){
			if(!chart.dataSegment[i]) break;
		}
		var filledScreenRatio=(j-i)/chart.maxTicks;
		var idealTickSizePixels=chart.xAxis.idealTickSizePixels?chart.xAxis.idealTickSizePixels:chart.xAxis.autoComputedTickSizePixels;
		var idealTicks=Math.round((this.chart.width*filledScreenRatio)/idealTickSizePixels);
		var minMax=this.determineMinMax(chart.dataSegment, ["index"]);
		var maxPoint=minMax[1], minPoint=minMax[0];
		var range=maxPoint-minPoint;

		function niceNum(range, round) {
			var exponent; // exponent of range
			var fraction; // fractional part of range
			var niceFraction; // nice, rounded fraction

			exponent = Math.floor(Math.log10(range));
			fraction = range / Math.pow(10, exponent);

			if (round) {
			  if (fraction < 1.5)
				niceFraction = 1;
			  else if (fraction < 3)
				niceFraction = 2;
			  else if (fraction < 7)
				niceFraction = 5;
			  else
				niceFraction = 10;
			} else {
			  if (fraction <= 1)
				niceFraction = 1;
			  else if (fraction <= 2)
				niceFraction = 2;
			  else if (fraction <= 5)
				niceFraction = 5;
			  else
				niceFraction = 10;
			}

			return niceFraction * Math.pow(10, exponent);
		}

		var niceRange = niceNum(maxPoint - minPoint, false);
		var tickSpacing = niceNum(range / (idealTicks - 1), true);
		var niceMin = Math.floor(minPoint / tickSpacing) * tickSpacing;
		var niceMax = Math.ceil(maxPoint / tickSpacing) * tickSpacing;

		var nextLabel=niceMin;
		if(niceMin<minPoint) nextLabel=niceMin+tickSpacing;

		var hz;
		for(i;i<chart.maxTicks;i++){
			var prices=chart.dataSegment[i];
			if(prices){
				var obj={
					index: prices.index,
					data: prices
				};
				chart.xaxis.push(obj);
				if(prices.index<nextLabel) continue;
				if(prices.index==nextLabel){
					hz=chart.left+i*this.layout.candleWidth + this.micropixels;
				}else if(prices.index>nextLabel){
					hz=chart.left+i*this.layout.candleWidth-3 + this.micropixels;
				}
				axisRepresentation.push(new CIQ.ChartEngine.XAxisLabel(hz,"line",nextLabel));
				nextLabel+=tickSpacing;
			}else{
				//TODO, calculate forward using tickSpacing
				chart.xaxis.push(null);
			}
		}
		return axisRepresentation;
	};
*/

      /**
       * Change the yAxis.height and yAxis.bottom to create drawing space
       * for the xAxis.
       *
       * @param {CIQ.ChartEngine.Panel} panel	Panel to adjust, used to check location
       * @param {CIQ.ChartEngine.YAxis} yAxis	yAxis to adjust
       * @private
       */
      CIQ.ChartEngine.prototype.adjustYAxisHeightOffset = function(panel, yAxis) {
        yAxis.bottomOffset = 0
        if (!this.xaxisHeight && this.xaxisHeight !== 0) {
          this.xaxisHeight = this.getCanvasFontSize('stx_xaxis') + 4
          if (this.chart.xAxis.displayBorder || this.axisBorders) this.xaxisHeight += 3
        }
        if (this.xAxisAsFooter === true && panel.bottom > this.chart.canvasHeight - this.xaxisHeight) {
          yAxis.bottomOffset = this.xaxisHeight
        } else if (this.xAxisAsFooter !== true && panel.name == 'chart') {
          yAxis.bottomOffset = this.xaxisHeight
        }

        yAxis.bottom = panel.bottom - yAxis.bottomOffset
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       *
       * Draws the grid for the y-axis.
       * @param  {CIQ.ChartEngine.Panel} panel The panel for the y-axis
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias plotYAxisGrid
       */
      CIQ.ChartEngine.prototype.plotYAxisGrid = function(panel) {
        if (this.runPrepend('plotYAxisGrid', arguments)) return
        var context = this.chart.context
        panel.yAxis.yAxisPlotter.draw(context, 'grid')
        this.runAppend('plotYAxisGrid', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       *
       * Plots the text on the y-axis.
       * @param  {CIQ.ChartEngine.Panel} panel The panel for the y-axis
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias plotYAxisText
       */
      CIQ.ChartEngine.prototype.plotYAxisText = function(panel) {
        if (this.runPrepend('plotYAxisText', arguments)) return
        var arr = panel.yaxisLHS.concat(panel.yaxisRHS)
        for (var i = 0; i < arr.length; i++) {
          var yAxis = arr[i]
          if (!yAxis.yAxisPlotter) continue
          if (yAxis.noDraw) continue
          this.canvasFont('stx_yaxis')
          this.canvasColor('stx_yaxis')
          var context = this.chart.context
          context.textBaseline = 'middle'
          if (yAxis.justifyRight) context.textAlign = 'right'
          else context.textAlign = 'left'
          var fontHeight = this.getCanvasFontSize('stx_yaxis')
          yAxis.yAxisPlotter.draw(context, 'text')
          context.textBaseline = 'alphabetic'
          context.textAlign = 'left'
        }
        this.runAppend('plotYAxisText', arguments)
      }

      /**
       * Formats prices for the Y-axis. Intelligently computes the decimal places based on the size of the y-axis ticks.
       * This can be overriden by manually setting decimalPlaces in the yAxis. You can call this method to ensure that any
       * prices that you are using outside of the chart are formatted the same as the prices on the y-axis.
       * @param  {number} price The price to be formatted
       * @param  {CIQ.ChartEngine.Panel} panel The panel for the y-axis. If the panel is a study panel, then prices will be condensed by {@link condenseInt}.
       * @param {number} [requestedDecimalPlaces] Optionally specify the number of decimal places, otherwise it will be determined by the yaxis setting, or if not set, determined automatically
       * @param {CIQ.ChartEngine.YAxis} [yAxis] Optional yAxis
       * @return {number}		  The formatted price
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.formatYAxisPrice = function(price, panel, requestedDecimalPlaces, yAxis) {
        if (price === null || typeof price == 'undefined' || isNaN(price)) return ''
        var yax = yAxis ? yAxis : panel.yAxis
        var decimalPlaces = requestedDecimalPlaces
        if (!decimalPlaces && decimalPlaces !== 0) decimalPlaces = yax.printDecimalPlaces
        if (!decimalPlaces && decimalPlaces !== 0) {
          if (yax.priceTick < 0.01) decimalPlaces = 4
          else if (yax.priceTick < 0.1) decimalPlaces = 2
          else if (yax.priceTick < 1) decimalPlaces = 1
          else decimalPlaces = 0
        }
        if (panel.name != panel.chart.name) {
          // Don't condense chart prices, but do condense study prices
          if (yax.priceTick > 100) {
            // k or m for thousands or millions
            return CIQ.condenseInt(price)
          }
        }

        var internationalizer = this.internationalizer
        if (internationalizer) {
          var l = internationalizer.priceFormatters.length
          if (decimalPlaces >= l) decimalPlaces = l - 1
          price = internationalizer.priceFormatters[decimalPlaces].format(price)
        } else {
          price = price.toFixed(decimalPlaces)
          // the above may be a problem at some point for datasets with very small shadows because the rounding skews the real number.
          // We should truncate the decimal places instead of rounding to preserve the accuracy,
          // but for now the above seems to work fine so we will leave it alone.
          // And also the amount of rounding being done here actually "corrects" some of differences introduced elsewhere in the yAxis price calculations. ugg!
          // Use the flowing code when ready to show truncated vs. rounded values
          //price = price.toString();
          //if(price.indexOf(".") > 0){
          //	price = price.slice(0, (price.indexOf("."))+decimalPlaces+1)
          //};
        }
        return price
      }

      /**
       * Pads out the decimal places given only a price. It will not truncate, but will
       * add zeroes. Prices under 2 will be padded to 4 decimal places. Prices over 1000
       * will not be padded. All other prices will be padded to 2 decimal places.
       * @param  {Number} price A price
       * @param  {Number} [determinant] The optional value to determine the decimal places. For
       * instance, if you want to determine the number of decimals for today's change based on the actual price
       * @return {string}       A price padded for decimal places
       * @since 2016-07-16
       */
      CIQ.ChartEngine.prototype.padOutPrice = function(price, determinant) {
        if (price !== 0 && (!price || typeof price == 'undefined')) return ''
        if (!determinant && determinant !== 0) determinant = price
        var str = '' + determinant
        var decimalPlaces = str.substring(str.indexOf('.')).length - 1
        if (determinant >= 1000) decimalPlaces = Math.max(decimalPlaces, 0)
        else if (determinant < 2) decimalPlaces = Math.max(decimalPlaces, 4)
        else decimalPlaces = Math.max(decimalPlaces, 2)

        var internationalizer = this.internationalizer
        if (internationalizer) {
          var l = internationalizer.priceFormatters.length
          if (decimalPlaces >= l) decimalPlaces = l - 1
          price = internationalizer.priceFormatters[decimalPlaces].format(price)
        } else {
          price = price.toFixed(decimalPlaces)
        }
        return price
      }

      /**
       * Formats a price according to the decimalPlaces specified in either the panel or chart.
       * It will then format to international standards if the internationalizer is set.
       * This method *does not* condense prices.
       * @param  {number} price The price to be formatted
       * @param  {CIQ.ChartEngine.Panel} panel The panel to use to determine the number of decimal places.
       * @return {number}		  The formatted price
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.formatPrice = function(price, panel) {
        if (price !== 0 && (!price || typeof price == 'undefined')) return ''
        if (!panel) panel = this.currentPanel
        if (!panel) panel = this.chart.panel
        if (!panel) return price
        var decimalPlaces = panel.decimalPlaces
        if (!decimalPlaces && decimalPlaces !== 0) {
          decimalPlaces = panel.chart.decimalPlaces
        }
        if (!decimalPlaces && decimalPlaces !== 0) {
          return price
        }
        var internationalizer = this.internationalizer
        if (internationalizer) {
          var l = internationalizer.priceFormatters.length
          if (decimalPlaces >= l) decimalPlaces = l - 1
          price = internationalizer.priceFormatters[decimalPlaces].format(price)
        } else {
          price = price.toFixed(decimalPlaces)
        }
        return price
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * Registers mouse events for the crosshair elements (to prevent them from picking up events)
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias createCrosshairs
       */
      CIQ.ChartEngine.prototype.createCrosshairs = function() {
        if (this.runPrepend('createCrosshairs', arguments)) return
        if (this.controls.crossX.onmousedown) return

        this.controls.crossY.onmousedown = function(e) {
          if (!e) e = event
          if (e.preventDefault) e.preventDefault()
          return false
        }
        this.controls.crossX.onmousedown = function(e) {
          if (!e) e = event
          if (e.preventDefault) e.preventDefault()
          return false
        }
        this.runAppend('createCrosshairs', arguments)
      }

      /**
       * This method determines the high and low values for the data set. It requires an array of fields to check. For instance
       * the array might contain ["Close","Series1","Series2"] which would return the max and min of all of those values for each
       * quote.
       *
       * @param  {Array} quotes The array of quotes to evaluate for min and max (typically CIQ.ChartEngine.chart.dataSegment)
       * @param  {Array} fields A list of fields to compare
       * @param {Boolean} [sum] If true then compute maximum sum rather than the maximum single value
       * @param {Boolean} [bypassTransform] If true then bypass any transformations
       * @param {Number} [length] Optionally specify how much of the quotes to process
       * @return {Array}		  A tuple, min and max values
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.determineMinMax = function(quotes, fields, sum, bypassTransform, length) {
        var highValue = Number.MAX_VALUE * -1
        var lowValue = Number.MAX_VALUE
        var isTransform = false
        var l = quotes.length
        if (length) l = length

        for (var i = 0; i < l; i++) {
          var quote = quotes[i]
          if (!quote) continue
          if (!bypassTransform) {
            if (quote.transform) {
              isTransform = true
              quote = quote.transform
            } else if (isTransform) continue //don't include points without transforms if we have been including points with transforms
          }
          var acc = 0
          for (var j = 0; j < fields.length; j++) {
            var f = quote[fields[j]]
            if (!f) continue
            if (typeof f == 'number') f = [f]
            for (var v = 0; v < f.length; v++) {
              var val = f[v]
              if (val || val === 0) {
                if (sum) {
                  acc += val
                  if (acc > highValue) highValue = acc
                  if (acc < lowValue) lowValue = acc
                } else {
                  if (val > highValue) highValue = val
                  if (val < lowValue) lowValue = val
                }
              }
            }
          }
        }
        if (highValue == Number.MAX_VALUE * -1) highValue = 0
        if (lowValue == Number.MAX_VALUE) lowValue = 0
        return [lowValue, highValue]
      }

      /**
       * Here we calculate the range for the yaxis and set appropriate member variables.
       * @private
       * @param  {CIQ.ChartEngine.Panel} panel The panel containing the yaxis
       * @param  {CIQ.ChartEngine.YAxis} yAxis The yaxis to work on
       * @param {Number} [low] The low value for the axis
       * @param {Number} [high] The high value for the axis
       */
      CIQ.ChartEngine.prototype.calculateYAxisRange = function(panel, yAxis, low, high) {
        if (low == Number.MAX_VALUE) {
          low = 0
          high = 0
        }
        var cheight = panel.height,
          newHigh = null,
          newLow = null
        this.adjustYAxisHeightOffset(panel, yAxis)
        yAxis.top = panel.top
        yAxis.height = yAxis.bottom - yAxis.top
        // Ensure the user hasn't scrolled off the top or the bottom of the chart
        var verticalPad = Math.round(Math.abs(cheight / 5))
        if (cheight - Math.abs(yAxis.scroll) < verticalPad) {
          yAxis.scroll = (cheight - verticalPad) * (yAxis.scroll < 0 ? -1 : 1)
        }

        var pricePerPix = (high - low) / yAxis.height
        if (low || low === 0) {
          if (high - low === 0) {
            // A stock that has no movement, so we create some padding so that a straight line will appear
            newHigh = high * 2
            newLow = 0
          } else {
            if ((this.layout.semiLog || this.layout.chartScale == 'log') && newHigh) {
              // When in log scale, the yAxis high and low will be the log10 of the prices. The actual values are just for display, not for calculation.
              var logLow = Math.log(low) / Math.LN10
              var logHigh = Math.log(high) / Math.LN10
              newHigh = Math.pow(10, logHigh)
              newLow = Math.pow(10, logLow)
            } else {
              newHigh = high
              newLow = low
            }
          }
          yAxis.high = newHigh
          yAxis.low = newLow
        }
        if (yAxis.max || yAxis.max === 0) yAxis.high = yAxis.max
        if (yAxis.min || yAxis.min === 0) yAxis.low = yAxis.min
        yAxis.shadow = yAxis.high - yAxis.low
        if (panel.chart.name === panel.name && panel.yAxis === yAxis) {
          // For the main yaxis on the main chart only check for semilog
          var isLogScale = this.layout.semiLog || this.layout.chartScale == 'log'
          if (panel.chart.isComparison) isLogScale = false
          if (yAxis.semiLog != isLogScale) {
            this.clearPixelCache()
            yAxis.semiLog = isLogScale
          }
        }
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       *
       * This method creates and draws the Y Axis for the chart
       *
       * yAxis.high - The highest value on the y-axis
       * yAxis.low - The lowest value on the y-axis
       *
       * @param  {CIQ.ChartEngine.Chart} chart The chart to create y-axis
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias renderYAxis
       * @since  15-07-01
       */
      CIQ.ChartEngine.prototype.renderYAxis = function(chart) {
        if (this.runPrepend('renderYAxis', arguments)) return
        var panel = chart.panel
        var arr = panel.yaxisRHS.concat(panel.yaxisLHS)

        // Iterate through all the yaxis for the panel and set all the necessary calculations
        // For the primary yaxis (panel.yAxis) we will set the low and high values based on the range
        // of values in the chart itself
        var i
        for (i = 0; i < arr.length; i++) {
          var yAxis = arr[i]
          var low = null,
            high = null
          if (panel.yAxis === yAxis) {
            low = chart.lowValue
            high = chart.highValue
          }
          this.calculateYAxisRange(panel, yAxis, low, high)
        }

        var parameters = {}

        for (i = 0; i < arr.length; i++) {
          parameters.yAxis = arr[i]
          this.createYAxis(panel, parameters)
          this.drawYAxis(panel, parameters)
        }
        this.runAppend('renderYAxis', arguments)
      }
      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       *
       * This method initializes display variables for the chart.
       * It is part of the animation loop and called with every draw() operation.
       * The high and low values for the displayed chart are calculated.
       * Those values are subsequently used by {@link CIQ.ChartEngine.AdvancedInjectable#createYAxis} which is called from within this method.
       * This method also calls {@link CIQ.ChartEngine#createCrosshairs}.
       * stx.displayInitialized will be set to true after this method is called.
       *
       * chart.highValue - The highest value on the chart
       * chart.lowValue - The lowest value on the chart
       *
       * @param  {CIQ.ChartEngine.Chart} chart The chart to initialize
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias initializeDisplay
       */
      CIQ.ChartEngine.prototype.initializeDisplay = function(chart) {
        if (this.runPrepend('initializeDisplay', arguments)) return
        var fields = []
        for (var field in chart.series) {
          // Find any series that share the Y axis
          if (chart.series[field].parameters.shareYAxis) fields.push(field)
        }
        var panel = (chart.panel = this.panels[chart.name])

        var minMax
        var length = null

        // We often have an extra tick hanging off the edge of the screen. We don't want this
        // tick to affect the high and low calculation though. That causes jumpiness when
        // zooming because the chart is alternately including and excluding that tick
        var ticksOnScreen = Math.floor((chart.width - this.micropixels) / this.layout.candleWidth)
        if (chart.scroll > chart.maxTicks && chart.maxTicks > ticksOnScreen + 1) length = chart.dataSegment.length - 1

        if (!CIQ.ChartEngine.chartShowsHighs(this.layout.chartType)) {
          // line charts shouldn't take into account high and low values, just close
          fields.push('Close', 'iqPrevClose')
          minMax = this.determineMinMax(chart.dataSegment, fields, null, null, length)
          if (this.layout.chartType == 'baseline_delta' /*|| this.layout.chartType=="baseline_delta_mountain"*/) {
            var base = chart.baseline.actualLevel
            if (chart.transformFunc) base = chart.transformFunc(this, chart, base)
            var diff = Math.max(base - minMax[0], minMax[1] - base)
            if (this.repositioningBaseline) {
              minMax = [chart.lowValue, chart.highValue]
            } else {
              minMax[0] = base - diff
              minMax[1] = base + diff
            }
          }
        } else {
          fields.push('Close', 'High', 'Low', 'iqPrevClose')
          minMax = this.determineMinMax(chart.dataSegment, fields, null, null, length)
        }
        chart.lowValue = minMax[0]
        chart.highValue = minMax[1]

        this.runAppend('initializeDisplay', arguments)
      }

      // @deprecated Use pixelFromBar
      CIQ.ChartEngine.prototype.computePosition = function(x, offset) {
        if (typeof offset == 'undefined') offset = 0
        var position = x * this.layout.candleWidth + offset + this.micropixels
        return position
      }

      // @deprecated
      CIQ.ChartEngine.prototype.computeColor = function(open, close) {
        if (open < close) return 'stx_candle_up'
        if (open > close) return 'stx_candle_down'
        return 'stx_candle_shadow'
      }

      // @deprecated
      CIQ.ChartEngine.prototype.computeLength = function(high, low) {
        var h = this.pixelFromPrice(high)
        var l = this.pixelFromPrice(low)
        return l - h
      }

      /**
       * Adds a series renderer to the chart, or updates it.	A series renderer manages a group of series which are rendered on the chart
       * in the same manner. For instance, several series which are part of the same stacked histogram.
       *
       * You must manage the persistency of a renderer, and remove individual series ({@link CIQ.Renderer#removeSeries} ) , remove all series ({@link CIQ.Renderer#removeAllSeries}) or even delete the renderer ({@link CIQ.ChartEngine#removeSeriesRenderer}) as needed by your application
       *
       * Note: once a renderer is set for a chart it will remain loaded with all its series definitions and y axis (if one used) even if a new symbol is loaded.
       * Calling setSeriesRenderer again with the same renderer name, it will cause the renderer to be updated with the params of the renderer sent in.
       * **Be careful not to send a different yAxis object unless you have deleted the previous one by completely removing all of its associated series** (see {@link CIQ.Renderer#removeAllSeries}).
       * Failure to do this will cause multiple axis to be displayed, the original one becoming orphan.
       *
       * See {@link CIQ.Renderer}
       *
       * See {@link CIQ.ChartEngine#removeSeriesRenderer} for release functionality.
       *
       * See {@link CIQ.ChartEngine#addSeries} for additional implementation examples.
       *
       * @param {CIQ.Renderer} renderer The renderer
       * @return {object} This seriesRenderer
       * @memberOf CIQ.ChartEngine
       * @since 07/01/2015
       * @example
       *	// group the series together and select "line" as the rendering type to display the series.
       *	var mdataRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"My Line Series", type:"line", width:4, callback:mdataLegend}}))
       *			.removeAllSeries()
       *			.attachSeries(symbol1,{color:"red",permanent:true})
       *			.attachSeries(symbol2,"blue")
       *			.attachSeries(symbol3,"yellow")
       *			.ready()
       */
      CIQ.ChartEngine.prototype.setSeriesRenderer = function(renderer) {
        var params = renderer.params
        if (this.chart.seriesRenderers[renderer.params.name]) return this.chart.seriesRenderers[renderer.params.name] // renderer already created

        if (params.yAxis) {
          this.addYAxis(this.panels[params.panel], params.yAxis)
        }
        renderer.stx = this

        this.chart.seriesRenderers[renderer.params.name] = renderer
        return renderer
      }

      /**
       * Sets the market definition on the chart.
       * Once set, the definition will not change until it is explicitly set to something else by calling this method again.
       * If a dynamic model is desired, where a new definition is loaded as different instruments are activated, see {@link CIQ.ChartEngine#setMarketFactory}.
       * See {@link CIQ.Market} for market definition rules and examples.
       * This is only required if your chart will need to know the operating hours for the different exchanges.
       * If using a 24x7 chart, a market does not need to be set.
       * @param {Object} marketDefinition. A market definition as required by {@link CIQ.Market}
       * @memberOf CIQ.ChartEngine
       * @since 04-2016-08
       * @example
       * stxx.setMarket(marketDefinition);
       */
      CIQ.ChartEngine.prototype.setMarket = function(marketDefinition, chart) {
        if (!chart) chart = this.chart
        chart.market = new CIQ.Market(marketDefinition)
        for (var session in this.layout.marketSessions) {
          chart.market.disableSession(session, this.layout.marketSessions[session])
        }
      }

      /**
       * Links the chart to a method that given a symbol object of form accepted by {@link CIQ.ChartEngine#newChart}, can return a complete market definition object.
       * Once linked, the market factory it will be used by the chart to ensure the market always matches the active instrument.
       * This is only required if your chart will need to know the operating hours for the different exchanges.
       * If using a 24x7 chart, a market factory does not need to be set.
       * @param {Function} factory A function that takes a symbolObject and returns a market definition. See {@link CIQ.Market} for instruction on how to create a market definition. See {@link CIQ.Market.Symbology.factory} for working example of a factory function.
       * @memberOf CIQ.ChartEngine
       * @since 04-2016-08
       * @example
       * // example of a market factory that returns a different market definition based on the symbol passed in
       * sampleFactory=function(symbolObject){
       *		var symbol=symbolObject.symbol;
       *		// isTypeX(symbol) is a function you would create to identify the market definition object that should be used.
       *		if( isType1(symbol) ) return type1DefinitionObject;
       *		if( isType2(symbol) ) return type2DefinitionObject;
       *		if( isType3(symbol) ) return type3DefinitionObject;
       *		return defaultDefinitionObject;
       * };
       *
       * @example
       * // link a market factory to the chart.
       * stxx.setMarketFactory(sampleFactory);
       */
      CIQ.ChartEngine.prototype.setMarketFactory = function(factory) {
        this.marketFactory = factory
      }

      /**
       * Detaches a series renderer from the chart and deletes its associated y-axis if no longer used by any other renderer.
       *
       * Note: the actual series and related data are not deleted with this command and can be attached or continue to be used with other renderers.
       *
       * Note: the actual renderer (created by using new `CIQ.Renderer.xxxxx`) is not deleted but simply detached from the chart. You can re-attach it again if needed.
       * To delete the renderer use `delete myRenderer`. See example in {@link CIQ.Renderer.Lines}
       *
       * @param  {object} renderer The actual renderer instance to be removed
       * @memberOf CIQ.ChartEngine
       * @since 07/01/2015
       */
      CIQ.ChartEngine.prototype.removeSeriesRenderer = function(renderer) {
        for (var r in this.chart.seriesRenderers) {
          if (renderer.params.name === this.chart.seriesRenderers[r].params.name) {
            var toDelete = this.chart.seriesRenderers[renderer.params.name]
            var yAxis = toDelete.params.yAxis
            var panel = this.panels[toDelete.params.panel]
            delete this.chart.seriesRenderers[renderer.params.name]
            this.deleteYAxisIfUnused(panel, yAxis)
            return
          }
        }
      }

      /**
       * Retrieves a series renderer from the chart
       * @param  {string} name Handle to access the renderer (params.name)
       * return {object} the matching series renderer if found
       * @memberOf CIQ.ChartEngine
       * @since 07/01/2015
       */
      CIQ.ChartEngine.prototype.getSeriesRenderer = function(name) {
        return this.chart.seriesRenderers[name]
      }

      /**
       * Initializes boundary clipping on the requested panel. Use this when you are drawing on the canvas and wish for the
       * drawing to be contained within the panel. You must call {@link CIQ.ChartEngine#endClip} when your drawing functions are complete.
       * @param  {string} [panelName] The name of the panel. Defaults to the chart itself.
       * @param {Boolean} [allowYAxis=false] If true then the clipping region will include the y-axis. By default the clipping region ends at the y-axis.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.startClip = function(panelName, allowYAxis) {
        if (!panelName) panelName = 'chart'
        var panel = this.panels[panelName]
        var yAxis = panel.yAxis
        this.chart.context.save()
        this.chart.context.beginPath()
        var left = panel.left
        var width = panel.width
        if (allowYAxis) {
          left = 0
          width = this.width
        }
        this.chart.context.rect(left, panel.top, width, yAxis.height)
        this.chart.context.clip()
      }

      /**
       * Completes a bounded clipping operation. See {@link CIQ.ChartEngine#startClip}.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.endClip = function() {
        this.chart.context.restore()
      }

      /**
	 * Draws a line chart. Calls {@link CIQ.ChartEngine.plotLineChart} after setting styles.
	 *
	 * Uses CSS style stx_line_chart to control width and color of line charts
	 *	- width				- Optional line width
	 *
	 * The default color function for the colored line chart uses the following CSS styles:
	 *	- stx_line_up		- Color of the uptick portion if the line
	 *	- stx_line_down		- Color of the downtick portion if the line
	 *
	 * @param  {CIQ.ChartEngine.Panel} panel The panel on which to draw the line chart
	 * @param  {string} style	The style selector which contains the styling for the bar (width and color)
	 * @param  {function} [colorFunction]	(optional) A function which accepts an CIQ.ChartEngine and quote as its arguments and returns the appropriate color for drawing that mode.
											Returning a null will skip that bar.  If not passed as an argument, will use a default color.
	 * @return {object} Colors used in the plot (as the keys of the object)
	 * @memberOf CIQ.ChartEngine
	 * @since  15-07-01 Changed signature from `chart` to `panel`
	 */
      CIQ.ChartEngine.prototype.drawLineChart = function(panel, style, colorFunction) {
        var context = this.chart.context
        var c = this.canvasStyle(style)
        if (c.width && parseInt(c.width, 10) <= 25) {
          context.lineWidth = Math.max(1, CIQ.stripPX(c.width))
        } else {
          context.lineWidth = 1
        }
        this.canvasColor(style)
        var params = { skipProjections: true }
        if (panel.chart.tension) params.tension = panel.chart.tension
        if (panel.chart.lastTickOffset) params.lastTickOffset = panel.chart.lastTickOffset
        var rc = this.plotLineChart(panel, panel.chart.dataSegment, 'Close', params, colorFunction)
        context.lineWidth = 1

        return rc
      }

      /**
       * Redraws the floating price label(s) for the crosshairs tool on the y axis using {@link CIQ.ChartEngine#createYAxisLabel} and sets the width of the y crosshair line to match pannel width.
       *
       * Label style: `stx-float-price` ( for price colors ) and `stx_crosshair_y` ( for cross hair line )
       *
       * @param  {CIQ.ChartEngine.Panel} panel	The panel on which to print the label(s)
       * @memberOf CIQ.ChartEngine
       * @example
       * // controls Light color scheme
       * .Light .stx-float-price { color:#fff; background-color: yellow;}
       */

      CIQ.ChartEngine.prototype.updateFloatHRLabel = function(panel) {
        var arr = panel.yaxisLHS.concat(panel.yaxisRHS)
        var cy = this.crossYActualPos ? this.crossYActualPos : this.cy
        if (this.floatCanvas.isDirty) CIQ.clearCanvas(this.floatCanvas, this)
        if (this.controls.crossX.style.display == 'none') return
        if (this.controls.crossY) {
          var crosshairWidth = panel.width
          if (this.yaxisLabelStyle == 'roundRectArrow') crosshairWidth -= 7
          this.controls.crossY.style.left = panel.left + 'px'
          this.controls.crossY.style.width = crosshairWidth + 'px'
        }
        for (var i = 0; i < arr.length; i++) {
          var yAxis = arr[i]
          var price = this.valueFromPixel(cy, panel, yAxis)
          if (isNaN(price)) continue
          if ((panel.min || panel.min === 0) && price < panel.min) continue
          if ((panel.max || panel.max === 0) && price > panel.max) continue
          var labelDecimalPlaces = null
          if (yAxis !== panel.chart.yAxis) {
            // If a study panel, this logic allows the cursor to print more decimal places than the yaxis default for panels
            labelDecimalPlaces = 0
            if (yAxis.shadow < 1000) labelDecimalPlaces = 2
            if (yAxis.shadow < 5) labelDecimalPlaces = 4
            if (yAxis.decimalPlaces || yAxis.decimalPlaces === 0) labelDecimalPlaces = yAxis.decimalPlaces
          }
          if (yAxis.priceFormatter) {
            price = yAxis.priceFormatter(this, panel, price, yAxis)
          } else {
            price = this.formatYAxisPrice(price, panel, labelDecimalPlaces, yAxis)
          }

          var style = this.canvasStyle('stx-float-price')
          this.createYAxisLabel(panel, price, cy, style.backgroundColor, style.color, this.floatCanvas.context, yAxis)
          this.floatCanvas.isDirty = true
        }
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * This method calls {@link CIQ.ChartEngine#updateFloatHRLabel} to draw the label that floats along the Y axis with the
       * current price for the crosshair.
       * It also fills the date in the "stxx.controls.floatDate" (Style: `stx-float-date`) div which floats along the X axis.
       * This is an appropriate place to inject an append method for drawing a head's up display if desired.
       *
       * You can override the {@link CIQ.ChartEngine#hideDates} method to decide if/when you want to hide the floating date.
       *
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias headsUpHR
       * @since 09-2016-19 only year and month will be displayed in monthly periodicity
       */
      CIQ.ChartEngine.prototype.headsUpHR = function() {
        if (this.runPrepend('headsUpHR', arguments)) return
        var panel = this.currentPanel
        if (!panel) return
        var chart = panel.chart

        this.updateFloatHRLabel(panel)

        if (this.controls.floatDate && !CIQ.ChartEngine.hideDates()) {
          var bar = this.barFromPixel(this.cx)
          var prices = chart.xaxis[bar]
          if (prices && prices.DT) {
            if (chart.xAxis.formatter) {
              this.controls.floatDate.innerHTML = chart.xAxis.formatter(prices.DT)
            } else if (this.internationalizer) {
              var str = this.internationalizer.monthDay.format(prices.DT)
              if (
                /*prices.DT.getHours()!==0 || prices.DT.getMinutes()!==0 || */ !CIQ.ChartEngine.isDailyInterval(
                  this.layout.interval,
                )
              )
                str += ' ' + this.internationalizer.hourMinute.format(prices.DT)
              else {
                if (this.layout.interval == 'month') str = this.internationalizer.yearMonth.format(prices.DT)
                else str = this.internationalizer.yearMonthDay.format(prices.DT)
              }
              this.controls.floatDate.innerHTML = str
            } else {
              var m = prices.DT.getMonth() + 1
              if (m < 10) m = '0' + m
              var d = prices.DT.getDate()
              if (d < 10) d = '0' + d
              var h = prices.DT.getHours()
              if (h < 10) h = '0' + h
              var mn = prices.DT.getMinutes()
              if (mn < 10) mn = '0' + mn
              if (/*(h=="00" && mn=="00") || */ CIQ.ChartEngine.isDailyInterval(this.layout.interval)) {
                if (this.layout.interval == 'month')
                  this.controls.floatDate.innerHTML = m + '-' + prices.DT.getFullYear()
                else this.controls.floatDate.innerHTML = m + '-' + d + '-' + prices.DT.getFullYear()
              } else {
                this.controls.floatDate.innerHTML = m + '/' + d + ' ' + h + ':' + mn
                var isSecond =
                  (chart.xAxis.activeTimeUnit && chart.xAxis.activeTimeUnit <= CIQ.SECOND) ||
                  this.layout.timeUnit == 'second'
                var isMS =
                  (chart.xAxis.activeTimeUnit && chart.xAxis.activeTimeUnit <= CIQ.MILLISECOND) ||
                  this.layout.timeUnit == 'millisecond'
                if (isSecond || isMS) {
                  var sec = prices.DT.getSeconds()
                  if (sec < 10) sec = '0' + sec
                  this.controls.floatDate.innerHTML += ':' + sec

                  if (isMS) {
                    var mil = prices.DT.getMilliseconds()
                    if (mil < 10) mil = '0' + mil
                    if (mil < 100) mil = '0' + mil
                    this.controls.floatDate.innerHTML += ':' + mil
                  }
                }
              }
            }
          } else if (prices && prices.index) {
            this.controls.floatDate.innerHTML = prices.index
          } else {
            this.controls.floatDate.innerHTML = '' // there is no date to display
          }
        }

        this.runAppend('headsUpHR', arguments)
      }

      // TODO, deprecated
      CIQ.ChartEngine.prototype.setCrosshairColors = function() {
        return
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Calculates the magnet point for the current mouse cursor location. This is the nearest OHLC point. A small white
       * circle is drawn on the temporary canvas to indicate this location for the end user. If the user initiates a drawing then
       * the end point of the drawing will be tied to the magnet point. This function is only entered if preferences.magnet is true and
       * a drawing type (CIQ.ChartEngine#currentVectorParameters.vectorType) has been enabled.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias magnetize
       */
      CIQ.ChartEngine.prototype.magnetize = function() {
        this.magnetizedPrice = null
        if (this.runPrepend('magnetize', arguments)) return
        var drawingTool = this.currentVectorParameters.vectorType
        if ((drawingTool == 'annotation' || drawingTool == 'callout') && CIQ.ChartEngine.drawingLine) return // Don't magnetize the end of an annotation
        if (drawingTool == 'projection') return
        if (drawingTool == 'freeform') return
        var panel = this.currentPanel
        if (panel.name == panel.chart.name) {
          // panel is chart type
          var chart = panel.chart
          var tick = this.tickFromPixel(CIQ.ChartEngine.crosshairX - this.left, chart)
          //if(this.layout.interval!="minute") tick/=this.layout.periodicity;
          if (tick > chart.dataSet.length) return // Don't magnetize in the future
          var prices = chart.dataSet[tick]
          if (!prices) return
          var price = this.valueFromPixel(this.cy, panel)
          this.magnetizedPrice = prices.Close
          var chartType = this.layout.chartType
          if (
            chartType == 'bar' ||
            chartType == 'candle' ||
            chartType == 'colored_bar' ||
            chartType == 'hollow_candle' ||
            chartType == 'volume_candle'
          ) {
            var fields = ['Open', 'High', 'Low', 'Close']
            var closest = 1000000000
            for (var i = 0; i < fields.length; i++) {
              var fp = prices[fields[i]]
              if (Math.abs(price - fp) < closest) {
                closest = Math.abs(price - fp)
                this.magnetizedPrice = fp
              }
            }
          }
          var x = this.pixelFromTick(tick, chart)
          var y = this.pixelFromPrice(this.magnetizedPrice, this.currentPanel)
          var ctx = this.chart.tempCanvas.context
          ctx.beginPath()
          ctx.lineWidth = 1
          var radius = Math.max(this.layout.candleWidth, 8) / 2
          ctx.arc(x, y, radius, 0, 2 * Math.PI, false)
          ctx.fillStyle = '#FFFFFF'
          ctx.strokeStyle = '#000000'
          ctx.fill()
          ctx.stroke()
          ctx.closePath()
        }
        this.runAppend('magnetize', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Positions the crosshairs at the last known mouse/finger pointer position. This ensures
       * on touch devices that the crosshairs are at a known position. It is called by the DrawingToolbar.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias positionCrosshairsAtPointer
       */
      CIQ.ChartEngine.prototype.positionCrosshairsAtPointer = function() {
        if (!this.currentPanel) return
        if (this.runPrepend('positionCrosshairsAtPointer', arguments)) return
        var chart = this.currentPanel.chart
        var rect = this.container.getBoundingClientRect()
        this.top = rect.top
        this.left = rect.left
        this.right = this.left + this.width
        this.bottom = this.top + this.height
        this.cy = this.crossYActualPos = this.backOutY(CIQ.ChartEngine.crosshairY)
        this.cx = this.backOutX(CIQ.ChartEngine.crosshairX)
        this.crosshairTick = this.tickFromPixel(this.cx, chart)
        this.controls.crossX.style.left = this.pixelFromTick(this.crosshairTick, chart) - 0.5 + 'px'
        this.controls.crossY.style.top = this.crossYActualPos + 'px'
        this.runAppend('positionCrosshairsAtPointer', arguments)
      }
      /**
       * <span class="injection">INJECTABLE</span>
       * This method is called to display crosshairs *if* the user has crosshairs enabled or is in the process of drawing (a non dragToDraw) drawing tool.
       * This is the counter method to {@link CIQ.ChartEngine.undisplayCrosshairs} which is called, for instance, when the user mouses out of the chart or mouses
       * over a chart element.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias doDisplayCrosshairs
       */
      CIQ.ChartEngine.prototype.doDisplayCrosshairs = function() {
        if (this.runPrepend('doDisplayCrosshairs', arguments)) return
        if (this.displayInitialized) {
          var drawingTool = this.currentVectorParameters.vectorType
          if (!this.layout.crosshair && (drawingTool === '' || !drawingTool)) {
            this.undisplayCrosshairs()
          } else if (CIQ.Drawing && CIQ.Drawing[drawingTool] && new CIQ.Drawing[drawingTool]().dragToDraw) {
            this.undisplayCrosshairs()
          } else {
            var controls = this.controls,
              crossX = controls.crossX,
              crossY = controls.crossY
            if (crossX.style.display !== '') {
              crossX.style.display = ''
              crossY.style.display = ''
              if (this.preferences.magnet && drawingTool) {
                CIQ.unappendClassName(this.container, 'stx-crosshair-on')
              } else {
                CIQ.appendClassName(this.container, 'stx-crosshair-on')
              }
            }
            if (controls.floatDate && !CIQ.ChartEngine.hideDates()) {
              controls.floatDate.style.visibility = ''
              if (this.currentPanel) this.updateFloatHRLabel(this.currentPanel)
            }
          }
        }
        this.runAppend('doDisplayCrosshairs', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       *
       * Hides the crosshairs. This is called for instance when the user mouses out of the chart or over a chart control. The crosshairs
       * are turned back on by a call to {@link CIQ.ChartEngine.doDisplayCrosshairs}
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias undisplayCrosshairs
       */
      CIQ.ChartEngine.prototype.undisplayCrosshairs = function() {
        if (this.runPrepend('undisplayCrosshairs', arguments)) return
        var controls = this.controls,
          crossX = controls.crossX,
          crossY = controls.crossY
        if (crossX) {
          if (crossX.style.display != 'none') {
            crossX.style.display = 'none'
            crossY.style.display = 'none'
          }
        }
        if (this.displayInitialized && controls.floatDate) {
          controls.floatDate.style.visibility = 'hidden'
        }
        CIQ.unappendClassName(this.container, 'stx-crosshair-on')
        var floatCanvas = this.floatCanvas
        if (floatCanvas && floatCanvas.isDirty) CIQ.clearCanvas(floatCanvas, this)
        this.runAppend('undisplayCrosshairs', arguments)
      }

      /**
       * Sets the chart into a modal mode. Crosshairs are hidden and the chart will not respond to click or mouse events. Call this
       * for instance if you are enabling a dialog box and don't want errant mouse activity to affect the chart.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.modalBegin = function() {
        this.openDialog = 'modal'
        this.undisplayCrosshairs()
      }

      /**
       * Ends modal mode. See {@link CIQ.ChartEngine#modalBegin}
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.modalEnd = function() {
        this.cancelTouchSingleClick = true
        this.openDialog = ''
        this.doDisplayCrosshairs()
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Updates the position of the stxx.controls.floatDate element ( Style: `stx-float-date` ) and calls {@link CIQ.ChartEngine.AdvancedInjectable#headsUpHR} to display the crosshairs labels on both x and y axis.
       * A timer is used to prevent this operation from being called more frequently than once every 100 milliseconds in order to
       * improve performance during scrolling.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias updateChartAccessories
       */
      CIQ.ChartEngine.prototype.updateChartAccessories = function() {
        if (this.accessoryTimer !== null) clearTimeout(this.accessoryTimer)
        if (!CIQ.ChartEngine.drawingLine && CIQ.touchDevice) {
          if (new Date().getTime() - this.lastAccessoryUpdate < 100) {
            this.accessoryTimer = setTimeout(
              (function(stx) {
                return function() {
                  stx.updateChartAccessories()
                }
              })(this),
              10,
            )
            return
          }
        }
        if (!this.chart.dataSet) return
        if (this.runPrepend('updateChartAccessories', arguments)) return
        this.positionCrosshairsAtPointer()
        this.accessoryTimer = null
        this.lastAccessoryUpdate = new Date().getTime()
        var floatDate = this.controls.floatDate
        if (floatDate) {
          var panel = this.currentPanel
          if (!panel) panel = this.chart.panel
          if (panel) {
            var chart = panel.chart
            var bottom = this.xAxisAsFooter === true ? 0 : this.chart.canvasHeight - panel.chart.bottom
            var l = this.pixelFromTick(this.crosshairTick, chart) - floatDate.offsetWidth / 2 - 0.5
            if (l < 0) l = 0
            floatDate.style.left = l + 'px'
            floatDate.style.bottom = bottom + 'px'
          }
        }
        this.headsUpHR()
        this.runAppend('updateChartAccessories', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Handles mouse movement events. This method calls {@link CIQ.ChartEngine#mousemoveinner} which has the core logic
       * for dealing with panning and zooming. See also {@link CIQ.ChartEngine#touchmove} which is the equivalent method for touch events.
       * @param  {Event} e A mouse move event
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias mousemove
       */
      CIQ.ChartEngine.prototype.mousemove = function(e$) {
        var e = e$ ? e$ : event
        /* use e.client insead of e.page since we need the value to be relative to the viewport instead of the overall document size.
		if(!e.pageX){
			e.pageX=e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
			e.pageY=e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
		}
		*/
        CIQ.ChartEngine.crosshairX = e.clientX // These are used by the UI so make sure they are set even if no chart is set
        CIQ.ChartEngine.crosshairY = e.clientY
        if (this.runPrepend('mousemove', arguments)) return
        if (!this.displayInitialized) return // No chart displayed yet
        if (this.openDialog !== '') return // Don't show crosshairs when dialog is open
        this.mousemoveinner(e.clientX, e.clientY)
        this.runAppend('mousemove', arguments)
      }

      /**
       * Set a timer to check for chart resizing. Normally the chart is resized whenever the screen is resized
       * by capturing a screen resize event. However if charts are embedded in a windowing GUI then they may not
       * receive such events when windows are resized. Ideally, stxx.resizeChart() should be called whenever a window
       * is resized however if this is inconvenient then the resize timer can be enabled to cover all bases without too much effort.
       *
       * On initialization, CIQ.ChartEngine.resizeDetectMS is checked for the default resize checking interval. The default is 1,000 milliseconds.
       * To turn off resize checking simply set CIQ.ChartEngine.resizeDetectMS=0; when you declare your CIQ.ChartEngine object.
       * @param {number} ms Number of milliseconds to poll. Zero to stop checking.
       * @memberOf CIQ.ChartEngine
       */

      CIQ.ChartEngine.prototype.setResizeTimer = function(ms) {
        this.resizeDetectMS = ms
        function closure(self) {
          return function() {
            if (!self.chart.canvas) return
            if (!CIQ.isAndroid) {
              if (
                self.chart.canvas.height != Math.floor(self.devicePixelRatio * self.chart.container.clientHeight) ||
                self.chart.canvas.width != Math.floor(self.devicePixelRatio * self.chart.container.clientWidth)
              ) {
                self.resizeChart()
                return
              }
            }
          }
        }
        if (ms) {
          if (this.resizeTimeout) window.clearInterval(this.resizeTimeout)
          this.resizeTimeout = window.setInterval(closure(this), ms)
        } else {
          if (this.resizeTimeout) window.clearInterval(this.resizeTimeout)
          this.resizeTimeout = null
        }
      }

      /**
       * Returns the yaxis that the crosshairs (mouse) is on top of
       * @param  {CIQ.ChartEngine.Panel} panel The panel
       * @param  {Number} [x]		The X location. Defaults to CIQ.ChartEngine#cx
       * @return {CIQ.ChartEngine.YAxis}		  The yAxis that the crosshair is over
       * @since  15-07-01
       */
      CIQ.ChartEngine.prototype.whichYAxis = function(panel, x) {
        if (typeof x === 'undefined') x = this.cx
        if (panel) {
          var arr = panel.yaxisLHS.concat(panel.yaxisRHS)
          for (var i = 0; i < arr.length; i++) {
            var yAxis = arr[i]
            if (yAxis.left <= x && yAxis.left + yAxis.width >= x) return yAxis
          }
        }
        return this.chart.panel.yAxis
      }

      /**
       * Finds any objects that should be highlighted by the current crosshair position. All drawing objects have their highlight() method
       * called in order that they may draw themselves appropriately.
       * @param  {Boolean} isTap If true then it indicates that the user tapped the screen on a touch device, and thus a wider radius is used to determine which objects might have been highlighted.
       * @param {Boolean} clearOnly Set to true to clear highlights
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.findHighlights = function(isTap, clearOnly) {
        var radius = 10
        if (isTap) radius = 30
        var cy = this.cy
        var cx = this.cx
        if (!this.currentPanel) return
        if (this.activeDrawing) return
        var chart = this.currentPanel.chart
        this.anyHighlighted = false
        if (this.preferences.magnet && !this.activeDrawing) {
          CIQ.clearCanvas(this.chart.tempCanvas, this)
        }
        var somethingChanged = false
        var drawingToMeasure = null
        var stickyArgs = ['', '', true, null, 'drawing']

        var box = {
          x0: this.tickFromPixel(cx - radius, chart),
          x1: this.tickFromPixel(cx + radius, chart),
          y0: this.valueFromPixelUntransform(cy - radius, this.currentPanel),
          y1: this.valueFromPixelUntransform(cy + radius, this.currentPanel),
        }
        for (var i = 0; i < this.drawingObjects.length; i++) {
          var drawing = this.drawingObjects[i]
          if (drawing.permanent) continue

          var prevHighlight = drawing.highlighted
          var highlightMe = drawing.panelName == this.currentPanel.name
          drawing.repositioner = drawing.intersected(this.crosshairTick, this.crosshairValue, box)
          highlightMe = highlightMe && drawing.repositioner

          if (!clearOnly && highlightMe) {
            if (prevHighlight) {
              drawingToMeasure = drawing
            } else if (prevHighlight != drawing.highlight(true)) {
              if (!drawingToMeasure) drawingToMeasure = drawing
              somethingChanged = true
            }
            this.anyHighlighted = true
          } else {
            if (prevHighlight != drawing.highlight(false)) {
              somethingChanged = true
            }
          }
        }

        var first = false
        var n, o, series
        for (n in this.overlays) {
          o = this.overlays[n]
          o.prev = o.highlight
          o.highlight = false
        }
        for (n in chart.seriesRenderers) {
          var r = chart.seriesRenderers[n]
          for (var j = 0; j < r.seriesParams.length; j++) {
            series = r.seriesParams[j]
            series.prev = series.highlight
            series.highlight = false
          }
        }

        if (!clearOnly) {
          var bar = this.barFromPixel(cx)
          if (bar < chart.dataSegment.length) {
            var y
            for (n in this.overlays) {
              o = this.overlays[n]
              if (o.panel != this.currentPanel.name) continue

              //custom highlight detection
              if (o.study.isHighlighted === false) continue
              else if (typeof o.study.isHighlighted == 'function') {
                if (o.study.isHighlighted(this, cx, cy)) {
                  o.highlight = true
                  this.anyHighlighted = true
                }
                continue
              }

              var quote = chart.dataSegment[bar]
              if (!quote) continue

              for (var out in this.overlays[n].outputMap) {
                var val = quote[out]
                y = 0
                if (this.currentPanel.name == chart.name) {
                  // chart type panel
                  y = this.pixelFromPriceTransform(val, this.currentPanel)
                } else {
                  y = this.pixelFromPrice(val, this.currentPanel)
                }
                if (cy - radius < y && cy + radius > y) {
                  o.highlight = true
                  this.anyHighlighted = true
                  break
                }
              }
              if (o.highlight) break // only allow one overlay to be highlighted at a time
            }
            for (n in chart.seriesRenderers) {
              var renderer = chart.seriesRenderers[n]
              if (!renderer.params.highlightable) continue
              for (var m = 0; m < renderer.seriesParams.length; m++) {
                series = renderer.seriesParams[m]
                y = renderer.caches[series.field] && renderer.caches[series.field][bar]
                if (!y && y !== 0) continue
                if (cy - radius < y && cy + radius > y) {
                  series.highlight = true
                  this.anyHighlighted = true
                } else if ((renderer.params.subtype == 'step' || series.type == 'step') && bar > 0) {
                  // In a step series we also need to check for intersection with
                  // the vertical bar (the step) that connects two points
                  var py = renderer.caches[series.field] && renderer.caches[series.field][bar - 1]
                  if (((py || py === 0) && (cy > y && cy < py)) || (cy < y && cy > py)) {
                    series.highlight = true
                    this.anyHighlighted = true
                  }
                }
              }
            }
          }
        }
        for (n in this.overlays) {
          o = this.overlays[n]
          if (o.highlight) {
            this.anyHighlighted = true
            stickyArgs = [o.inputs.display ? o.inputs.display : o.name, null, null, o.permanent, 'study']
            drawingToMeasure = null
          }
          if (o.prev != o.highlight) somethingChanged = true
        }
        for (n in chart.seriesRenderers) {
          var r2 = chart.seriesRenderers[n]
          if (!r2.params.highlightable) continue
          for (var m2 = 0; m2 < r2.seriesParams.length; m2++) {
            series = r2.seriesParams[m2]
            if (series.highlight) {
              this.anyHighlighted = true
              stickyArgs = [series.display, series.color, false, series.permanent, 'series']
              drawingToMeasure = null
            }
            if (series.prev != series.highlight) somethingChanged = true
          }
        }

        if (somethingChanged) {
          this.draw()
          this.displaySticky.apply(this, stickyArgs)
          this.clearMeasure()
          if (drawingToMeasure) drawingToMeasure.measure()
        }

        if (!this.anyHighlighted) {
          this.setMeasure()
        }
      }

      /**
       * Positions a "sticky" (a tooltip element). It is positioned relative to the cursor but so that it is always available and never
       * accidentally tappable on a touch device.
       * @param  {HTMLElement} m The sticky
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.positionSticky = function(m) {
        var top = Math.max(this.cy - m.offsetHeight - 60, 0)
        var right = Math.min(this.chart.canvasWidth - (this.cx - 50), this.chart.canvasWidth - m.offsetWidth)
        m.style.top = top + 'px'
        m.style.right = right + 'px'
      }

      /**
       * Displays the "sticky" (tooltip element). The sticky should be in `CIQ.ChartEngine.controls.mSticky`. To disable stickies, set that element to null. See {@link CIQ.ChartEngine.htmlControls}
       * @param  {string} message			The message to display in the sticky
       * @param  {string} backgroundColor The background color to set the sticky (the foreground color will be picked automatically)
       * @param  {boolean} forceShow If true, will always show the sticky (as opposed to only on hover)
       * @param  {boolean} noDelete If true, will hide the delete instructions/button
       * @param  {string} type		 "study","drawing","series", or whatever is causing the sticky to be displayed.
       * @memberOf CIQ.ChartEngine
       */

      CIQ.ChartEngine.prototype.displaySticky = function(message, backgroundColor, forceShow, noDelete, type) {
        var m = this.controls.mSticky
        if (!m) return
        var mi = $$$('#mStickyInterior', m)
        if (!mi) return
        var overlayTrashCan = $$$('#overlayTrashCan', m)
        var overlayEdit = $$$('.overlayEdit', m)
        var mouseDeleteInstructions = $$$('#mouseDeleteInstructions', m)
        if (!forceShow && !message) {
          mi.innerHTML = ''
          m.style.display = 'none'
          if (CIQ.touchDevice) {
            if (overlayTrashCan) overlayTrashCan.style.display = 'none'
            if (overlayEdit) overlayEdit.style.display = 'none'
          } else if (!CIQ.touchDevice) {
            if (mouseDeleteInstructions) mouseDeleteInstructions.style.display = 'none'
          }
        } else {
          if (!message) message = ''
          if (forceShow && !message) {
            mi.style.backgroundColor = ''
            mi.style.color = ''
            mi.style.display = 'none'
          } else if (backgroundColor) {
            mi.style.backgroundColor = backgroundColor
            mi.style.color = CIQ.chooseForegroundColor(backgroundColor)
            mi.style.display = 'inline-block'
          } else {
            mi.style.backgroundColor = ''
            mi.style.color = ''
            mi.style.display = 'inline-block'
          }
          mi.innerHTML = message
          if (type) $$$('#mStickyRightClick', m).className = 'rightclick_' + type
          m.style.display = 'inline-block'
          this.positionSticky(m)
          if (noDelete) {
            if (overlayTrashCan) overlayTrashCan.style.display = 'none'
            if (overlayEdit) overlayEdit.style.display = 'none'
            if (mouseDeleteInstructions) mouseDeleteInstructions.style.display = 'none'
          } else if (CIQ.touchDevice) {
            if (overlayTrashCan) overlayTrashCan.style.display = 'inline-block'
            if (overlayEdit) overlayEdit.style.display = 'inline-block'
            if (mouseDeleteInstructions) mouseDeleteInstructions.style.display = 'none'
          } else if (!CIQ.touchDevice) {
            if (mouseDeleteInstructions) mouseDeleteInstructions.style.display = 'block'
          }
        }
      }

      /**
	 * <span class="injection">INJECTABLE</span>
	 * Sets the innerHTML value of the `mMeasure` HTML DOM Node to contain a measurement (price differential and bars/line distance), usually when a user hovers over a drawing.
	 * It is also used to display measurement as a drawing is being created or when using the 'Measure' tool.
	 *
	 * Example: <B>23.83 (-12%) 11 Bars</B>
	 *
	 * It requires the UI to include the following div: ```<div class="currentMeasure"><span id="mMeasure" class="measureUnlit"></span></div>```
	 *
	 * It can be styled via CSS. See example.
	 *
	 * @param {number} price1 Beginning price of the drawing
	 * @param {number} price2 Ending price of the drawing
	 * @param {number} tick1  Beginning tick of the drawing
	 * @param {number} tick2  Ending tick of the drawing
	 * @param {boolean} hover  True to turn on the measurement, false to turn it off
	 * @memberOf CIQ.ChartEngine
	 * @example
	 * // Measuring tool styling CSS sample
		.currentMeasure {
			text-align: left;
			display: inline-block;
			margin: 4px 0 0 20px;
			height: 20px;
			line-height: 20px;
		}

		#mMeasure {
			display: inline-block;
			margin: 0 0 0 0;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			width:140px;
		}

		// if you suppot light color scheme
		.Light .measureUnlit {color:#666;}
		.Light .measureLit {color:#000;}

		// if you support dark color scheme
		.Dark .measureUnlit {color:#cbcccd;}
		.Dark .measureLit {color:#fff;}
		@example
		// This is an example of the framework to use for writing a prepend to further manipulate/display the measurements
		CIQ.ChartEngine.prototype.prepend("setMeasure",function(){

		 // add your logic to manage the display of the measurements (price1, price2, tick1, tick2)

		 //return true; //if you don't want to continue into the regular function
		 //return false; //if you want to run trough the standard function once you are done with your custom code.
		});
	 */
      CIQ.ChartEngine.prototype.setMeasure = function(price1, price2, tick1, tick2, hover) {
        if (this.runPrepend('setMeasure', arguments)) return
        var m = $$('mMeasure')
        var message = ''
        if (!price1) {
          if (m && m.className != 'measureUnlit') m.className = 'measureUnlit'
          if (!this.anyHighlighted && this.currentVectorParameters.vectorType === '') this.clearMeasure()
        } else {
          var distance = Math.round(Math.abs(price1 - price2) * this.chart.roundit) / this.chart.roundit
          if (this.internationalizer) {
            message += this.internationalizer.numbers.format(distance)
          } else {
            message += distance
          }
          var pct = (price2 - price1) / price1
          if (Math.abs(pct) > 0.1) {
            pct = Math.round(pct * 100)
          } else if (Math.abs(pct) > 0.01) {
            pct = Math.round(pct * 1000) / 10
          } else {
            pct = Math.round(pct * 10000) / 100
          }
          if (this.internationalizer) {
            pct = this.internationalizer.percent.format(pct / 100)
          } else {
            pct = pct + '%'
          }
          message += ' (' + pct + ')'
          var ticks = Math.abs(tick2 - tick1)
          ticks = Math.round(ticks) + 1
          var barsStr = this.translateIf('Bars')
          message += ' ' + ticks + ' ' + barsStr

          if (m) {
            if (m.className != 'measureLit') m.className = 'measureLit'
            m.innerHTML = message
          }
        }

        if (this.activeDrawing) return // Don't measure when in the process of drawing
        m = this.controls.mSticky
        if (m) {
          if (hover) {
            m.style.display = 'inline-block'
            m.children[0].style.display = 'inline-block'
            if (price1) {
              m.children[0].innerHTML = message
            }
            this.positionSticky(m)
          } else {
            m.style.display = 'none'
            m.children[0].innerHTML = ''
          }
        }
        this.runAppend('setMeasure', arguments)
      }

      /**
       * Clears the innerHTML value of the `mMeasure` HTML DOM Node.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.clearMeasure = function() {
        var m = $$('mMeasure')
        if (m) {
          if (m.className != 'measureUnlit') m.className = 'measureUnlit'
          m.innerHTML = ''
        }
      }

      /**
       * Draws a temporary panel on the tempCanvas. This is done to speed up rendering when a user is resizing a panel.
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.drawTemporaryPanel = function() {
        var borderEdge = Math.round(CIQ.ChartEngine.resizingPanel.right - 3) + 0.5
        CIQ.clearCanvas(this.chart.tempCanvas, this)
        var y = CIQ.ChartEngine.crosshairY - this.top
        this.plotLine(
          CIQ.ChartEngine.resizingPanel.left,
          borderEdge,
          y,
          y,
          this.canvasStyle('stx_panel_drag'),
          'segment',
          this.chart.tempCanvas.context,
          false,
          {},
        )
        CIQ.ChartEngine.resizingPanel.handle.style.top =
          y - CIQ.ChartEngine.resizingPanel.handle.offsetHeight / 2 + 'px'
      }

      /**
       * Enables the trashcan icon on touch devices when a drawing, overlay or series is highlighted
       * @private
       * @memberOf CIQ.ChartEngine
       * @deprecated
       */
      CIQ.ChartEngine.prototype.setTrashCan = function() {
        if (CIQ.touchDevice) {
          var m = this.controls.mSticky
          if (m) {
            m.style.display = 'inline-block'
            m.children[0].style.display = 'none'
            m.children[1].style.display = 'inline-block'
            if (m.children[2]) m.children[2].style.display = 'none'
            m.style.top = this.backOutY(CIQ.ChartEngine.crosshairY) - 60 + 'px'
            m.style.right = this.chart.canvasWidth - (this.backOutX(CIQ.ChartEngine.crosshairX) - 50) + 'px'
          }
        }
      }

      /**
       * Returns the X pixel give the location of a bar (dataSegment) on the chart.
       * @param  {number} bar The bar (position on the chart which is also the position in the dataSegment)
       * @param {CIQ.ChartEngine.Chart} [chart] Which chart to use. Defaults to this.chart.
       * @return {number}		The X pixel on the chart
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.pixelFromBar = function(bar, chart) {
        if (!chart) chart = this.chart
        var x = 0
        if (this.chart.dataSegment && this.chart.dataSegment[bar] && this.chart.dataSegment[bar].leftOffset) {
          x = this.chart.dataSegment[bar].leftOffset
        } else {
          x = (bar + 0.5) * this.layout.candleWidth
        }
        x = chart.panel.left + Math.floor(x + this.micropixels) - 1
        return x
      }

      /**
       * Returns which bar the pixel lies on. Do not reference this into dataSegment without checking bounds because the return value may be negative or greater than the dataSegment array length.
       * @param  {number} x An X pixel location on the chart
       * @param {CIQ.ChartEngine.Chart} [chart] Which chart to use. Defaults to this.chart.
       * @return {number}	  The bar that lies on the X pixel (may be negative/before or after the chart)
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.barFromPixel = function(x, chart) {
        if (!chart) chart = this.chart
        var dataSegment = this.chart.dataSegment,
          mp = this.micropixels,
          cw = this.layout.candleWidth
        if (this.layout.chartType == 'volume_candle' && dataSegment) {
          //binary search
          var pixel = x - chart.panel.left - mp,
            mult = 2,
            quote
          var length = dataSegment.length
          var bar = Math.round(length / mult)
          var leftOffset, halfCandleWidth
          var rightofLastTick = dataSegment[length - 1].leftOffset + dataSegment[length - 1].candleWidth / 2
          if (pixel > rightofLastTick) {
            //beyond the rightmost tick
            return length + Math.floor((x - rightofLastTick - chart.panel.left - mp) / cw)
          } else {
            for (var i = 1; i < length; i++) {
              mult *= 2
              quote = dataSegment[bar]
              if (!quote) break
              leftOffset = quote.leftOffset
              halfCandleWidth = quote.candleWidth / 2
              var left = leftOffset - halfCandleWidth
              var right = leftOffset + halfCandleWidth
              if (bar === 0 || (pixel >= left && pixel < right)) break
              else if (pixel < left) bar -= Math.max(1, Math.round(length / mult))
              else bar += Math.max(1, Math.round(length / mult))
              bar = Math.max(0, Math.min(length - 1, bar))
            }
            if (!dataSegment[bar]) {
              //sucks, we need to iterate through
              for (i = 0; i < length; i++) {
                quote = dataSegment[i]
                if (!quote) continue
                leftOffset = quote.leftOffset
                halfCandleWidth = quote.candleWidth / 2
                if (pixel < leftOffset - halfCandleWidth) return Math.max(0, i - 1)
                else if (pixel < leftOffset + halfCandleWidth) return i
                else if (pixel >= leftOffset + halfCandleWidth) return i + 1
              }
            }
          }
          return bar
        } else {
          return Math.floor((x - chart.panel.left - mp) / cw)
        }
      }

      /**
       * Returns the tick (dataSet) position given the X pixel
       * @param  {number} x	  X pixel location
       * @param  {CIQ.ChartEngine.Chart} [chart] A chart object
       * @return {number}		  The tick (position in the dataSet)
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.tickFromPixel = function(x, chart) {
        if (!chart) chart = this.chart
        var tick = chart.dataSet.length - chart.scroll + 1

        if (this.layout.chartType == 'volume_candle') {
          tick += this.barFromPixel(x, chart)
        } else {
          tick += Math.floor((x - chart.panel.left - this.micropixels) / this.layout.candleWidth)
        }
        return tick
      }

      /**
       * Returns an X pixel for the given tick. The X pixel will be the center of the tick location. Note that the pixel may be off of
       * the visual canvas and that it might overlap the Y axis.
       * @param  {number} tick  The tick (position in the dataSet array)
       * @param  {CIQ.ChartEngine.Chart} [chart] A chart object
       * @return {number}		  The X position in pixels (may be negative or may be greater than dataSet.length)
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.pixelFromTick = function(tick, chart) {
        if (!chart) chart = this.chart
        var dataSegment = chart.dataSegment,
          dataSet = chart.dataSet,
          mp = this.micropixels,
          length = dataSegment ? dataSegment.length : 0
        var panel = chart.panel,
          scroll = chart.scroll
        var bar = tick - dataSet.length + scroll - 1,
          quote = length ? dataSegment[bar] : null

        if (quote && quote.leftOffset) {
          return panel.left + Math.floor(quote.leftOffset + mp) - 1 //in here for volume candle
        } else {
          //in here for other chart types, or volume candle if bar lies outside of the actual quote data
          var rightOffset = 0,
            dsTicks = 0
          quote = length ? dataSegment[length - 1] : null
          if (quote && quote.leftOffset) {
            //volume candle
            if (length < tick - dataSet.length + scroll) {
              //in the "whitespace" area on the right of the chart
              rightOffset = quote.leftOffset - quote.candleWidth / 2
              dsTicks = length
            }
          }
          return (
            rightOffset +
            panel.left +
            Math.floor((tick - dsTicks - dataSet.length + scroll - 0.5) * this.layout.candleWidth + mp) -
            1
          )
        }
      }

      /**
       * Returns the X pixel position for a given date. Warning: this can be an expensive operation if the date is not in the dataSet.
       * @param  {string} date  String form date
       * @param  {CIQ.ChartEngine.Chart} chart The chart to look in
       * @return {number}		  The pixel location for the date
       * @todo  Use Date object instead of string form date
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.pixelFromDate = function(date, chart) {
        return this.pixelFromTick(this.tickFromDate(date, chart), chart)
      }

      /**
       * Returns the price (or value) give a Y pixel location.
       * @param  {number} y	  The Y pixel location
       * @param  {CIQ.ChartEngine.Panel} [panel] The panel to look. Defaults to the chart itself if not passed in.
       * @param {CIQ.ChartEngine.YAxis} [yAxis] The yAxis to use. Defaults to panel.yAxis.
       * @return {number}		  The Y location. This may be off of the visible canvas.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.priceFromPixel = function(y, panel, yAxis) {
        if (!panel) panel = this.chart.panel
        var chart = panel.chart
        var yax = yAxis ? yAxis : panel.yAxis
        y = yax.bottom - y
        if (!yax.multiplier) return null
        var price = yax.low + y / yax.multiplier
        /*var roundit=chart.roundit;
		if(panel.roundit) roundit=panel.roundit;
		price=Math.round(price*roundit)/roundit;*/
        if (yax.semiLog) {
          var logPrice = yax.logLow + (y * yax.logShadow) / yax.height
          price = Math.pow(10, logPrice)
        }
        return price
      }

      /**
       * Returns the value (price) given a Y-axis pixel. The value is relative to the the panel or the canvas.
       * @param  {number} y	  The y pixel position
       * @param  {CIQ.ChartEngine.Panel} [panel] A panel object. If passed then the value will be relative to that panel. If not passed then the value will be relative to the panel that is in the actual Y location.
       * @param  {CIQ.ChartEngine.YAxis} [yAxis] Which yAxis. Defaults to panel.yAxis.
       * @return {number}		  The value relative to the panel
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.valueFromPixel = function(y, panel, yAxis) {
        if (!panel) panel = this.whichPanel(y)
        var p = this.priceFromPixel(y, panel, yAxis)
        return p
      }

      /**
       * A version of {@link CIQ.ChartEngine#valueFromPixel} that will untransform a transformation such as a comparison chart.
       * @param  {number} y	  The y pixel location
       * @param  {CIQ.ChartEngine.Panel} panel A panel object. It is strongly recommended to pass the panel! (see {@link CIQ.ChartEngine#valueFromPixel})
       * @param {CIQ.ChartEngine.YAxis} [yAxis] The yaxis to use. Defaults to panel.yAxis.
       * @return {number}		  The price or value
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.valueFromPixelUntransform = function(y, panel, yAxis) {
        if (!panel) panel = this.whichPanel(y)
        if (!panel) {
          // If we're not in a current panel then we're off the screen, so choose the top or bottom panel
          // Ideally we never get in here because panel is passed in by the developer!
          if (y <= 0) {
            panel = this.panels[CIQ.first(this.panels)]
          } else {
            panel = this.panels[CIQ.last(this.panels)]
          }
        }
        var p = this.priceFromPixel(y, panel, yAxis)
        if (panel.chart.untransformFunc && panel.name == panel.chart.name) {
          p = panel.chart.untransformFunc(this, panel.chart, p)
        }
        return p
      }

      /**
       * A version of {@link CIQ.ChartEngine#pixelFromPrice} that will apply a transformation such as a comparison chart.
       * @param  {number} price	  The price or value
       * @param  {CIQ.ChartEngine.Panel} panel A panel object (see {@link CIQ.ChartEngine#pixelFromPrice})
       * @param {CIQ.ChartEngine.YAxis} [yAxis] The yaxis to use
       * @return {number}		  The y axis pixel location
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.pixelFromPriceTransform = function(price, panel, yAxis) {
        if (panel.chart.transformFunc) price = panel.chart.transformFunc(this, panel.chart, price, yAxis) // transform should move to panel
        return this.pixelFromPrice(price, panel, yAxis)
      }

      /**
       * Returns the Y pixel from a given price (or value)
       * @param  {number} price The price
       * @param  {CIQ.ChartEngine.Panel} [panel] The panel (defaults to the chart)
       * @param {CIQ.ChartEngine.YAxis} [yAxis] The yAxis to use
       * @return {number}		  The Y pixel value
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.pixelFromPrice = function(price, panel, yAxis) {
        if (!panel) panel = this.chart.panel
        var yax = yAxis ? yAxis : panel.yAxis
        var y = (yax.high - price) * yax.multiplier
        if (yax.semiLog) {
          var p = Math.max(price, 0)
          var logPrice = Math.log(p) / Math.LN10
          //if(price<=0) logPrice=0;
          var height = yax.height
          y = height - (height * (logPrice - yax.logLow)) / yax.logShadow
        }

        y += yax.top
        return y
      }

      /**
       * Returns the Y pixel location for the (split) unadjusted price rather than the displayed price.
       * This is important for drawing tools or any other device that requires the actual underlying price.
       *
       * @param  {CIQ.ChartEngine.Panel} panel The panel to get the value from
       * @param  {number} tick  The tick location (in the dataSet) to check for an adjusted value
       * @param  {number} value The value
       * @param {CIQ.ChartEngine.YAxis} [yAxis] The yaxis to use
       * @return {number}		  The pixel location
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.pixelFromValueAdjusted = function(panel, tick, value, yAxis) {
        // If we're not showing unadjusted quotes, or if the panel isn't a chart then bypass
        if (this.layout.adj || !this.charts[panel.name]) return this.pixelFromPriceTransform(value, panel, yAxis)
        var a = Math.round(tick) // Not sure why we're rounding this. Possible legacy code.
        // Adjust if there's a ratio attached to the tick
        var ratio
        if (a > 0 && a < panel.chart.dataSet.length && (ratio = panel.chart.dataSet[a].ratio)) {
          return this.pixelFromPriceTransform(value * ratio, panel, yAxis)
        }
        // Otherwise pass through
        return this.pixelFromPriceTransform(value, panel, yAxis)
      }

      /**
       * Returns the unadjusted value for a given value, if an adjustment (split) had been applied. This can return a value
       * relative to the original closing price.
       * @param  {CIQ.ChartEngine.Panel} panel The panel to check
       * @param  {number} tick  The location in the dataset
       * @param  {number} value The value to adjust
       * @return {number}		  The adjusted value
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.adjustIfNecessary = function(panel, tick, value) {
        if (this.layout.adj) return value // Already adjusted prices
        if (!panel || !this.charts[panel.name]) return value
        var a = Math.round(tick)
        var ratio
        if (a > 0 && a < panel.chart.dataSet.length && (ratio = panel.chart.dataSet[a].ratio)) {
          return value / ratio
        }
        return value
      }

      /**
       * Sets a transformation and untransformation function. Transforms can be used to transform the Y-Axis from absolute
       * to relative values. For instance, comparison charts use a transform that adjusts from price to percentage.
       * After this is called, chart.transformFunc and chart.untransformFunc will be set to those functions.
       * @param {CIQ.ChartEngine.Chart} chart			   The chart to transform
       * @param {function} transformFunction	 A transformation callback function which takes a number and returns the transformation of that number
       * @param {function} untransformFunction An untransformation callback function
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setTransform = function(chart, transformFunction, untransformFunction) {
        chart.transformFunc = transformFunction
        chart.untransformFunc = untransformFunction
      }

      /**
       * Removes a transformation/untransformation pair
       * @param  {CIQ.ChartEngine.Chart} The chart to remove transformations from
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.unsetTransform = function(chart) {
        delete chart.transformFunc
        delete chart.untransformFunc
        for (var i = 0; i < chart.dataSet.length; i++) {
          chart.dataSet[i].transform = null
        }
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Stops (aborts) the current drawing. See {@link CIQ.ChartEngine#undoLast} for an actual "undo" operation.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias undo
       */
      CIQ.ChartEngine.prototype.undo = function() {
        if (this.runPrepend('undo', arguments)) return
        if (this.activeDrawing) {
          this.activeDrawing.abort()
          this.activeDrawing = null
          CIQ.clearCanvas(this.chart.tempCanvas, this)
          this.draw()
          CIQ.swapClassName(this.controls.crossX, 'stx_crosshair', 'stx_crosshair_drawing')
          CIQ.swapClassName(this.controls.crossY, 'stx_crosshair', 'stx_crosshair_drawing')
          CIQ.ChartEngine.drawingLine = false
        }
        this.runAppend('undo', arguments)
      }

      /**
       * Creates an undo stamp for the chart's current drawing state
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.undoStamp = function(before, after) {
        this.undoStamps.push(before)
        this.dispatch('undoStamp', { before: before, after: after })
      }

      /**
       * Undoes the previous drawing state change.
       * **Note: by design this method only manages drawings manually added during the current session and will not remove drawings restored from
       * a previous session. ** If you wish to remove all drawings use {@link CIQ.ChartEngine.clearDrawings}.
       * You can also view and interact with all drawings by traversing trough the CIQ.ChartEngine.drawingObjects[] array which includes **all** drawings displayed
       * on the chart, regardless of session. Removing a drawing from this list, will remove the drawing from the chart after a draw() operation is executed.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.undoLast = function() {
        if (this.activeDrawing) {
          this.undo()
        } else {
          if (this.undoStamps.length) {
            this.drawingObjects = this.undoStamps.pop()
            this.changeOccurred('vector')
            this.draw()
          }
        }
      }

      /**
       * Programatically add a drawing
       * @param {object} drawing The drawing definition
       * @todo  Document drawing JSON format
       * @memberOf CIQ.ChartEngine
       * @private
       */
      CIQ.ChartEngine.prototype.addDrawing = function(drawing) {
        var drawings = CIQ.shallowClone(this.drawingObjects)
        this.drawingObjects.push(drawing)
        this.undoStamp(drawings, CIQ.shallowClone(this.drawingObjects))
      }

      /**
       * Draws a series of connected lines on the canvas. The points are in a straight array for compactness. This is used
       * for instance in the freeform (doodle) drawing tool
       * @param  {array} points		  A series of points in the pattern x0,y0,x1,y1
       * @param  {string} color		   Either a color or a Styles object as returned from {@link CIQ.ChartEngine#canvasStyle}
       * @param  {string} type		   The type of line to draw ("segment","ray" or "line")
       * @param  {external:CanvasRenderingContext2D} [context]		The canvas context. Defaults to the standard context.
       * @param  {object} [confineToPanel] Panel the line should be drawn in, and not cross through. Or set to 'true' to confine to the main chart panel.
       * @param  {object} [parameters]	 Additional parameters to describe the line
       * @param {string} [parameters.pattern] The pattern for the line ("solid","dashed","dotted")
       * @param {number} [parameters.width] The width in pixels for the line
       * @param {number} [parameters.opacity] Optional opacity for the line
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.connectTheDots = function(points, color, type, context, confineToPanel, parameters) {
        if (!parameters) parameters = {}
        if (parameters.pattern == 'none') return
        if (confineToPanel === true) confineToPanel = this.chart.panel
        if (context === null || typeof context == 'undefined') context = this.chart.context
        if (points.length < 4) return

        var edgeTop = 0
        var edgeBottom = this.chart.canvasHeight
        var edgeLeft = 0
        var edgeRight = this.chart.width

        if (confineToPanel) {
          edgeBottom = confineToPanel.yAxis.bottom
          edgeTop = confineToPanel.yAxis.top
        }

        context.lineWidth = 1.1 // Use 1.1 instead of 1 to get good anti-aliasing on Android Chrome
        if (typeof color == 'object') {
          context.strokeStyle = color.color
          if (color.opacity) context.globalAlpha = color.opacity
          else context.globalAlpha = 1
          context.lineWidth = parseInt(CIQ.stripPX(color.width))
        } else {
          if (!color || color == 'auto' || CIQ.isTransparent(color)) {
            context.strokeStyle = this.defaultColor
          } else {
            context.strokeStyle = color
          }
        }
        if (parameters.opacity) context.globalAlpha = parameters.opacity
        if (parameters.lineWidth) context.lineWidth = parameters.lineWidth
        var pattern = null
        if (parameters.pattern) {
          pattern = parameters.pattern
          if (pattern == 'solid') {
            pattern = null
          } else if (pattern == 'dotted') {
            pattern = [context.lineWidth, context.lineWidth]
          } else if (pattern == 'dashed') {
            pattern = [context.lineWidth * 5, context.lineWidth * 5]
          }
        }
        context.beginPath()

        for (var i = 0; i < points.length - 2; i += 2) {
          var x0 = points[i]
          var y0 = points[i + 1]
          var x1 = points[i + 2]
          var y1 = points[i + 3]
          if (isNaN(x0) || isNaN(x1) || isNaN(y0) || isNaN(y1)) return

          var t0 = 0.0,
            t1 = 1.0
          var xdelta = x1 - x0
          var ydelta = y1 - y0
          var p, q, r

          for (var edge = 0; edge < 4; edge++) {
            if (edge === 0) {
              p = -xdelta
              q = -(edgeLeft - x0)
            }
            if (edge == 1) {
              p = xdelta
              q = edgeRight - x0
            }
            if (edge == 2) {
              p = -ydelta
              q = -(edgeTop - y0)
            }
            if (edge == 3) {
              p = ydelta
              q = edgeBottom - y0
            }
            r = q / p

            if ((y1 || y1 === 0) && p === 0 && q < 0) {
              return false // Don't draw line at all. (parallel horizontal line outside)
            }

            if (p < 0) {
              if (r > t1) return false
              // Don't draw line at all.
              else if (r > t0) t0 = r // Line is clipped!
            } else if (p > 0) {
              if (r < t0) return false
              // Don't draw line at all.
              else if (r < t1) t1 = r // Line is clipped!
            }
          }

          var x0clip = x0 + t0 * xdelta
          var y0clip = y0 + t0 * ydelta
          var x1clip = x0 + t1 * xdelta
          var y1clip = y0 + t1 * ydelta

          try {
            if (pattern) {
              context.dashedLineTo(x0clip, y0clip, x1clip, y1clip, pattern)
            } else {
              context.moveTo(x0clip, y0clip)
              context.lineTo(x1clip, y1clip)
            }
          } catch (e) {
            //alert(x0clip + ":" + y0clip + " " + x1clip + ":" + y1clip);
          }
        }
        context.stroke()
        context.closePath()
        context.globalAlpha = 1
        context.lineWidth = 1
      }

      // confineToPanel is not used because currently we are splining after the drawing is complete.
      // should that change we will need to implement it

      /**
       * Draws a series of points and splines (smooths the curve) those points
       * @param  {array} points		  A series of points in the pattern x0,y0,x1,y1
       * @param {number} tension Spline tension (0-1). Set to negative to not spline.
       * @param  {string} color		   Either a color or a Styles object as returned from {@link CIQ.ChartEngine#canvasStyle}
       * @param  {string} type		   The type of line to draw ("segment","ray" or "line")
       * @param  {external:CanvasRenderingContext2D} [context]		The canvas context. Defaults to the standard context.
       * @param  {string} [confineToPanel] Not currently implemented
       * @param  {object} [parameters]	 Additional parameters to describe the line
       * @param {string} [parameters.pattern] The pattern for the line ("solid","dashed","dotted")
       * @param {number} [parameters.width] The width in pixels for the line
       * @param {number} [parameters.opacity] Optional opacity for the line
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.plotSpline = function(
        points,
        tension,
        color,
        type,
        context,
        confineToPanel,
        parameters,
      ) {
        if (!parameters) parameters = {}
        if (parameters.pattern == 'none') return
        if (confineToPanel === true) confineToPanel = this.chart.panel
        if (context === null || typeof context == 'undefined') context = this.chart.context

        context.save()

        context.lineWidth = 1.1 // Use 1.1 instead of 1 to get good anti-aliasing on Android Chrome
        if (typeof color == 'object') {
          context.strokeStyle = color.color
          if (color.opacity) context.globalAlpha = color.opacity
          else context.globalAlpha = 1
          context.lineWidth = parseInt(CIQ.stripPX(color.width))
        } else {
          if (!color || color == 'auto' || CIQ.isTransparent(color)) {
            context.strokeStyle = this.defaultColor
          } else {
            context.strokeStyle = color
          }
        }
        if (parameters.opacity) context.globalAlpha = parameters.opacity
        if (parameters.lineWidth) context.lineWidth = parameters.lineWidth
        var pattern = null
        if (parameters.pattern) {
          pattern = parameters.pattern
          if (pattern == 'solid') {
            pattern = null
          } else if (pattern == 'dotted') {
            pattern = [context.lineWidth, context.lineWidth]
          } else if (pattern == 'dashed') {
            pattern = [context.lineWidth * 5, context.lineWidth * 5]
          }
        }
        if (pattern && context.setLineDash) {
          context.setLineDash(pattern)
          context.lineDashOffset = 0 //start point in array
        }

        //stxThirdParty
        context.beginPath()
        context.moveTo(points[0], points[1])
        plotSpline(points, tension, context)
        context.stroke()
        context.closePath()

        context.restore()
      }

      /**
       * This is called to send a potential click event to an active drawing, if one is active.
       * @param  {CIQ.ChartEngine.Panel} panel The panel in which the click occurred
       * @param  {number} x	  The X pixel location of the click
       * @param  {number} y	  The y pixel location of the click
       * @return {boolean}	  Returns true if a drawing is active and received the click
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.drawingClick = function(panel, x, y) {
        if (!CIQ.Drawing) return
        if (!this.activeDrawing) {
          if (!panel) return
          var drawingTool = this.currentVectorParameters.vectorType
          var Factory = CIQ.ChartEngine.drawingTools[drawingTool]
          if (!Factory) {
            if (CIQ.Drawing[drawingTool]) {
              Factory = CIQ.Drawing[drawingTool]
              CIQ.ChartEngine.registerDrawingTool(drawingTool, Factory)
            }
          }
          if (Factory) {
            this.activeDrawing = new Factory()
            this.activeDrawing.construct(this, panel)
            if (!this.charts[panel.name]) {
              if (this.activeDrawing.chartsOnly) {
                this.activeDrawing = null
                return
              }
            }
          }
        }
        if (this.activeDrawing) {
          if (this.userPointerDown && !this.activeDrawing.dragToDraw) {
            if (!CIQ.ChartEngine.drawingLine) this.activeDrawing = null
            return
          }

          var tick = this.tickFromPixel(x, panel.chart)
          var dpanel = this.panels[this.activeDrawing.panelName]
          var value = this.adjustIfNecessary(dpanel, tick, this.valueFromPixelUntransform(y, dpanel))
          if (this.preferences.magnet && this.magnetizedPrice) {
            value = this.adjustIfNecessary(dpanel, tick, this.magnetizedPrice)
          }
          if (this.activeDrawing.click(this.chart.tempCanvas.context, tick, value)) {
            if (this.activeDrawing) {
              // Just in case the drawing aborted itself, such as measure
              CIQ.ChartEngine.drawingLine = false
              CIQ.clearCanvas(this.chart.tempCanvas, this)
              this.addDrawing(this.activeDrawing) // Save drawing
              this.activeDrawing = null
              this.adjustDrawings() //moved from individual drawing.click function to here --gus
              this.draw()
              this.changeOccurred('vector')
              CIQ.swapClassName(this.controls.crossX, 'stx_crosshair', 'stx_crosshair_drawing')
              CIQ.swapClassName(this.controls.crossY, 'stx_crosshair', 'stx_crosshair_drawing')
            }
          } else {
            this.changeOccurred('drawing')
            CIQ.ChartEngine.drawingLine = true
            CIQ.swapClassName(this.controls.crossX, 'stx_crosshair_drawing', 'stx_crosshair')
            CIQ.swapClassName(this.controls.crossY, 'stx_crosshair_drawing', 'stx_crosshair')
          }
          return true
        }
        return false
      }

      /**
       * Returns the panel for the given Y pixel. Used for instance to determine which panel the crosshairs are in.
       * @param  {number} y Y pixel location
       * @return {CIQ.ChartEngine.Panel}	  The panel containing the Y location. Null if the Y location is outside of all panels.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.whichPanel = function(y) {
        for (var p in this.panels) {
          var panel = this.panels[p]
          if (panel.hidden) continue
          if (y > panel.top && y < panel.bottom) return panel
        }
        return null
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Called whenever the user lifts the mousebutton up. This may send a click to a drawing, or cease a drag operation.
       * @param  {Event} e A mouse event
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias mouseup
       */
      CIQ.ChartEngine.prototype.mouseup = function(e) {
        if (this.runPrepend('mouseup', arguments)) return
        this.swipe.end = true
        this.cancelLongHold = true
        if (this.repositioningDrawing) {
          // if we single click with a drawing tool enabled, then start another drawing instead of moving current one
          if (!this.currentVectorParameters.vectorType || Date.now() - this.mouseTimer > 250) {
            this.changeOccurred('vector')
            CIQ.clearCanvas(this.chart.tempCanvas, this)
            this.repositioningDrawing = null
            this.adjustDrawings() // added missing adjusts when repositioning a Drawing  --gus
            this.draw()
            return
          } else {
            this.repositioningDrawing = false
          }
        }
        if (this.repositioningBaseline) {
          this.repositioningBaseline = null
          //this is so the baseline does not pop back to the center
          this.chart.panel.yAxis.scroll =
            this.pixelFromPriceTransform(this.chart.baseline.userLevel, this.chart.panel) -
            (this.chart.panel.yAxis.top + this.chart.panel.yAxis.bottom) / 2
          this.draw()
          return
        }
        var wasMouseDown = this.userPointerDown
        this.userPointerDown = false
        if (!this.displayInitialized) return // No chart displayed yet
        this.grabbingScreen = false
        if (this.openDialog !== '') {
          if (CIQ.ChartEngine.insideChart) CIQ.unappendClassName(this.container, 'stx-drag-chart') //in case they were grabbing the screen and let go on top of the button.
          return
        }
        if (this.grabOverrideClick) {
          this.swipeRelease()
          CIQ.unappendClassName(this.container, 'stx-drag-chart')
          this.grabOverrideClick = false
          this.doDisplayCrosshairs()
          this.updateChartAccessories()
          return
        }
        //if(!this.displayCrosshairs) return;
        if (CIQ.ChartEngine.insideChart) CIQ.unappendClassName(this.container, 'stx-drag-chart')
        if (CIQ.ChartEngine.resizingPanel) {
          this.releaseHandle({})
          //CIQ.clearCanvas(this.chart.tempCanvas, this);
          //this.resizePanels();
          //CIQ.ChartEngine.resizingPanel=null;
          return
        }
        if (!e) e = event //IE8
        if ((e.which && e.which >= 2) || (e.button && e.button >= 2) || e.ctrlKey) {
          if (this.anyHighlighted && !this.bypassRightClick) {
            this.rightClickHighlighted()
            if (e.preventDefault && this.captureTouchEvents) e.preventDefault()
            e.stopPropagation()
            return false
          } else {
            this.dispatch('rightClick', { stx: this, panel: this.currentPanel, x: cx, y: cy })
            return true
          }
        }
        if (e.clientX < this.left || e.clientX > this.right) return
        if (e.clientY < this.top || e.clientY > this.bottom) return

        var cy = this.backOutY(e.clientY)
        var cx = this.backOutX(e.clientX)
        if (wasMouseDown && (!this.longHoldTookEffect || this.activeDrawing)) {
          //only completes drawing if you if don't leave chart and let go of mouse button
          this.drawingClick(this.currentPanel, cx, cy)
        }
        if (!this.activeDrawing && !this.longHoldTookEffect) {
          this.dispatch('tap', { stx: this, panel: this.currentPanel, x: cx, y: cy })
        }

        this.runAppend('mouseup', arguments)
      }

      /**
       * Turns on the grabbing hand cursor. It does this by appending the class "grab" to the document body.
       * If this is a problem then just eliminate this function from the prototype.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.grabbingHand = function() {
        if (!this.allowScroll) return
        if (!this.grabbingScreen) return
        if (CIQ.touchDevice) return
        CIQ.appendClassName(this.container, 'stx-drag-chart')
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Called when the user presses the mouse button down. This will activate dragging operations once the user moves a few pixels
       * within {@link CIQ.ChartEngine#mousemoveinner}.
       * @param  {Event} e The mouse event
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias mousedown
       */
      CIQ.ChartEngine.prototype.mousedown = function(e) {
        if (this.runPrepend('mousedown', arguments)) return
        this.grabOverrideClick = false
        if (this.openDialog !== '') return
        if (!this.displayInitialized) return // No chart displayed yet
        if (!this.displayCrosshairs) return
        if (!CIQ.ChartEngine.insideChart) return
        if (this.manageTouchAndMouse && e && e.preventDefault && this.captureTouchEvents) e.preventDefault() // Added 9/19/13 to prevent IE from going into highlight mode when you mouseout of the container
        this.mouseTimer = Date.now()
        this.longHoldTookEffect = false
        this.hasDragged = false
        this.userPointerDown = true
        if (!e) e = event //IE8
        if ((e.which && e.which >= 2) || (e.button && e.button >= 2)) {
          // Added 9/19/13 to prevent mFinance bug where right click wouldn't eliminate drawing
          return
        }
        var chart = this.currentPanel.chart
        if (e.clientX >= this.left && e.clientX < this.right && e.clientY >= this.top && e.clientY <= this.bottom) {
          if (this.repositioningDrawing) return // if mouse went off screen this might happen
          for (var i = 0; i < this.drawingObjects.length; i++) {
            var drawing = this.drawingObjects[i]
            if (drawing.highlighted) {
              if (this.cloneDrawing) {
                // clone a drawing if flag set
                var Factory = CIQ.ChartEngine.drawingTools[drawing.name]
                var clonedDrawing = new Factory()
                clonedDrawing.reconstruct(this, drawing.serialize())
                this.drawingObjects.push(clonedDrawing)
                this.repositioningDrawing = clonedDrawing
                clonedDrawing.repositioner = drawing.repositioner
                return
              }
              this.repositioningDrawing = drawing
              return
            }
          }
          if (
            (this.layout.chartType == 'baseline_delta' || this.layout.chartType == 'baseline_delta_mountain') &&
            chart.baseline.userLevel !== false
          ) {
            var y0 = this.valueFromPixelUntransform(this.cy - 5, this.currentPanel)
            var y1 = this.valueFromPixelUntransform(this.cy + 5, this.currentPanel)
            var x0 = this.chart.right - parseInt(getComputedStyle(this.controls.baselineHandle).width, 10)
            if (chart.baseline.actualLevel < y0 && chart.baseline.actualLevel > y1 && this.cx > x0) {
              this.repositioningBaseline = { lastDraw: Date.now() }
              return
            }
          }
          this.drawingClick(this.currentPanel, this.cx, this.cy)
          if (this.activeDrawing && this.activeDrawing.dragToDraw) return
        }

        this.grabbingScreen = true
        chart.spanLock = false
        this.yToleranceBroken = false
        if (!e) e = event //IE8
        /* use e.client insead of e.page since we need the value to be relative to the viewport instead of the overall document size.
		if(!e.pageX){
			e.pageX=e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
			e.pageY=e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
		}
		*/
        this.grabStartX = e.clientX
        this.grabStartY = e.clientY
        this.grabStartMicropixels = this.micropixels
        this.grabStartScrollX = chart.scroll
        this.grabStartScrollY = chart.panel.yAxis.scroll
        this.grabStartCandleWidth = this.layout.candleWidth
        this.grabStartZoom = this.whichYAxis(this.currentPanel).zoom
        setTimeout(
          (function(self) {
            return function() {
              self.grabbingHand()
            }
          })(this),
          100,
        )
        this.swipeStart(chart)
        if (this.longHoldTime) this.startLongHoldTimer()
        this.runAppend('mousedown', arguments)
      }

      CIQ.ChartEngine.prototype.startLongHoldTimer = function() {
        var stx = this
        this.cancelLongHold = false
        if (this.longHoldTimeout) clearTimeout(this.longHoldTimeout)
        this.longHoldTimeout = setTimeout(function() {
          if (stx.cancelLongHold) return
          stx.dispatch('longhold', { stx: stx, panel: stx.currentPanel, x: stx.cx, y: stx.cy })
          stx.longHoldTookEffect = true
        }, this.longHoldTime)
      }

      /**
       * Sets the current drawing tool as described by {@link CIQ.ChartEngine.currentVectorParameters} (color, pattern, etc)
       * @param  {string} value The name of the drawing tool to enable
       * @memberOf CIQ.ChartEngine
       * @example
       * // activates a drawing type described by currentVectorParameters
       * stxx.changeVectorType('rectangle');
       * // deactivates drawing mode
       * stxx.changeVectorType('');
       * // clears the drawings
       * stxx.clearDrawings()
       */
      CIQ.ChartEngine.prototype.changeVectorType = function(value) {
        this.currentVectorParameters.vectorType = value
        //if(value==""){  //need to always undo here to allow release of last drawing tool
        if (CIQ.ChartEngine.drawingLine) this.undo()
        //}
        this.setCrosshairColors()
        if (CIQ.ChartEngine.insideChart) this.doDisplayCrosshairs()
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * This function is called when a highlighted study overly is right clicked. If the overlay has an edit function (as many studies do), it will be called. Otherwise it will remove the overlay
       * @param  {string} name The name (id) of the overlay
       * @param  {boolean} [forceEdit] If true then force edit menu
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias rightClickOverlay
       */
      CIQ.ChartEngine.prototype.rightClickOverlay = function(name, forceEdit) {
        if (this.runPrepend('rightClickOverlay', arguments)) return
        var sd = this.overlays[name]
        if (sd.editFunction) {
          sd.editFunction(forceEdit)
        } else {
          this.removeOverlay(name)
        }
        this.runAppend('rightClickOverlay', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Removes an overlay (and the associated study)
       * @param  {string} name The name (id) of the overlay
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias removeOverlay
       */
      CIQ.ChartEngine.prototype.removeOverlay = function(name) {
        if (this.runPrepend('removeOverlay', arguments)) return
        var mySD
        for (var o in this.overlays) {
          var sd = this.overlays[o]
          if (sd.inputs.Field && sd.inputs.Field.indexOf(name) != -1) {
            // Yucky, we should move to explicit parent nodes
            this.removeOverlay(sd.name)
          } else if (sd.name == name) {
            mySD = sd
          }
        }
        if (CIQ.Studies) {
          var study = this.layout.studies[name]
          CIQ.deleteRHS(CIQ.Studies.studyPanelMap, study)
          if (mySD) this.cleanupRemovedStudy(mySD)
        }
        delete this.overlays[name]

        this.displaySticky()
        this.createDataSet()
        this.changeOccurred('layout')
        this.runAppend('removeOverlay', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Adds a series to the chart.
       *
       * Example <iframe width="800" height="500" scrolling="no" seamless="seamless" align="top" style="float:top" src="http://jsfiddle.net/chartiq/b6pkzrad/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="1"></iframe>
       *
       * Series can be plotted as additional lines or mountains on the chart or you can use `[setSeriesRenderer()]{@link CIQ.ChartEngine#setSeriesRenderer}` to group multiple series and draw them together as a stacked histogram, or group of lines sharing similar properties.
       *
       * *Important*. There are two ways to set up a series:
       * -  If **`parameters.color` is included**, the series will be automatically attached to the default seriesRenderer (named `_generic_series`) and immediately rendered as an **overlay** . Use this method if you don't need any of the advanced features available through [custom renderers]{@link CIQ.ChartEngine#setSeriesRenderer}.
       * As such, there is no need to then create a renderer and attach this seres to it, unless you also want the series to be part of a different set linked together by another renderer with different settings.
       * - If the color is not defined, the series will be set but not displayed, awaiting grouping and rendering done by a `[setSeriesRenderer()]{@link CIQ.ChartEngine#setSeriesRenderer}` call.
       * See the 'Examples' section for code illustrations of both methods.
       *
       * *Important*. Unless you set the `forceData` parameter, the dates for the values to be inserted have to perfectly match the dates of the existing chart ticks.
       * This includes hours, minutes, seconds and milliseconds, even for daily ticks.
       *
       * @param {string} field	  The name of the series. If no data is provided, this must match a valid symbol the quoteFeed can retrieve.
       * @param {object} [parameters] Optional parameters to describe the series
       * @param {string} [parameters.display] Set to the text to display on the legend. If not set, the name of the series will be used (usually symbol)
       * @param {string} [parameters.symbolObject] The symbol to fetch in object format. This will be sent into the fetch() function, if no data is provided. You can send anything you want in the symbol object, but you must always include at least a 'symbol' element.
       * @param {string} [parameters.field] Specify an alternatve (existing) field to draw data from (other than the name of the series itself)
       * @param {boolean} [parameters.isComparison] If set to true, shareYAxis is automatically set to true to display relative values instead of the primary symbol's price labels. {@link CIQ.ChartEngine#setComparison} is also called and set to `true`. This is only applicable when using the primary Y axis.
       * @param {string} [parameters.type] Set to "step" to create a stairstep series rather than smooth lines
       * @param {boolean} [parameters.shareYAxis] Set to `true` so that the series shares the Y-axis and renders along actual values and print its corresponding current price label on the y axis. When set to `false` the series is superimposed on the chart maintaining the relative shape of the line but not on the actual y axes values and no current price will be displayed(used when rendering multiple series that do not share a common value range). Will automatically override to true if 'isComparison' is set. This is only applicable when using the primary Y axis.
       * @param {number} [parameters.marginTop] Percentage (if less than 1) or pixels (if greater than 1) from top of panel to set the top margin for the series.<BR>**Note:** this parameter is to be used on **subsequent** series rendered on the same axis. To set margins for the first series, {@link CIQ.ChartEngine.YAxis#initialMarginTop} needs to be used.<BR>**Note:** not applicable if shareYAxis is set.
       * @param {number} [parameters.marginBottom] Percentage (if less than 1) or pixels (if greater than 1) from the bottom of panel to set the bottom margin for the series.<BR>**Note:** this parameter is to be used on **subsequent** series rendered on the same axis. To set margins for the first series, {@link CIQ.ChartEngine.YAxis#initialMarginBottom} needs to be used.<BR>**Note:** not applicable if shareYAxis is set.
       * @param {number} [parameters.width] Width of line
       * @param {number} [parameters.minimum]	 Minimum value for the series. Overrides CIQ.minMax result.
       * @param {number} [parameters.maximum]	 Maximum value for the series. Overrides CIQ.minMax result.
       * @param {string} [parameters.color] Color to draw line. **If present, it will force the series to be immediately drawn** ( as a line if no parameters.chartType is defined ) and a default renderer named `_generic_series` will be used to display the series as an **overlay**.
       * @param {array} [parameters.pattern] Pattern to draw line, array elements are pixels on and off
       * @param {object} [parameters.gaps] Whether to draw a line through where data points are missing. Set to `true` to use the same color and pattern as the main line, or define a color-pattern object if different.
       * @param {string} [parameters.gaps.color] Color to draw line where data points are missing
       * @param {Array} [parameters.gaps.pattern] Pattern to draw line where data points are missing, array elements are pixels on and off
       * @param {string} [parameters.chartType] Chart type "mountain" to plot mountain chart. Default is "line" chart. Only applicable when using the default renderer. See {@link CIQ.Renderer#Lines} for details on how to render mountain charts using a custom renderer.
       * @param {string} [parameters.fillStyle] Fill style for mountain chart (if selected). For semi-opaque use rgba(R,G,B,.1)
       * @param {boolean} [parameters.permanent] Set to `true` to activate. Makes series unremoveable by a user **when attached to the default renderer**. If explicitly linked to a renderer,	it forces it to remain loaded (not necessarily displayed) even if detached from its renderer, allowing it to be re-attach/remain attached to a another renderer without having to recreate the series. See {@link CIQ.Renderer#attachSeries} for details on how to prevent an attached series from being removed by a user.
       * @param {boolean} [parameters.forceData] Set to `true` to activate. If active, will create a masterData entry if none exists for that DT.
       * @param {object} [parameters.data] Data source for the series. If omitted, the library will first try to look for an existing masterData element (`Close` for example), and if not present will connect to the QuoteFeed (if available) to fetch data. Otherwise, this should contain an array of objects in {DT,Date,Value} format.
       * @param {Date}   parameters.data.DT JavaScript date object or epoch representing data point (overrides Date parameter if present)
       * @param {string} parameters.data.Date string date representing data point ( only used if DT parameter is not present)
       * @param {number} parameters.data.Value value of the data point ( As an alternative, you can send `parameters.data.Close` since your quote feed may already be returning the data using this element name)
       * @param {function} [cb] Callback function to be executed once the fetch returns data from the quoteFeed. It will be called with an error message if the fetch failed: `cb(err);`. Only applicable if no data is provided.
       *
       * @return {object} The series object
       * @memberOf CIQ.ChartEngine
       *
       * @example
       * // add a series using existing data if alreay in masterData or try getting it from the quoteFeed otherwise.
       * stxx.addSeries(
       *		"High",
       *		{color:"purple"}
       * );
       *
       * @example
       * // add a series and display it as a dashed line.
       * stxx.addSeries(
       *		symbolGoesHere,
       *		{color:"purple",pattern:[3,3]}
       * );
       *
       * @example
       * // set location of your legend, if you want one.
       * if(!stxx.chart.legend){
       *		stxx.chart.legend={
       *			x: 260,
       *			y: 10
       *		};
       * }
       *
       * @example
       *	// add a legend relative to the y axis top
       *	if(!stxx.chart.legend) stxx.chart.legend={ x: 260, y: stxx.panels["chart"].yAxis.top+10 };
       *
       * @example
       *	// add the comparison series with a color to immediately render using default renderer (as lines) and dashes for gaps fillers
       *	stxx.addSeries(symbol1, {display:"Description 1",isComparison:true,color:"purple", gaps:{pattern:[3,3]},width:4,permanent:true});
       *	stxx.addSeries(symbol2, {display:"Description 2",isComparison:true,color:"pink", gaps:{pattern:[3,3]},width:4});
       *	stxx.addSeries(symbol3, {display:"Description 3",isComparison:true,color:"brown", gaps:{pattern:[3,3]},width:4});
       *
       * @example
       *	// add the comparison series with only default parameters (no color). The series will not display on the chart after it is added.
       *	stxx.addSeries(symbol1, {display:"Description 1",isComparison:true});
       *	stxx.addSeries(symbol2, {display:"Description 2",isComparison:true});
       *	stxx.addSeries(symbol3, {display:"Description 3",isComparison:true});
       *
       *	// group the series together and select "line" as the rendering type to display the series. Also set a pattern for gaps rendering.
       *	var mdataRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"My Line Series", type:"line", gaps:{pattern:[3,3]}, width:4}}))
       *			.attachSeries(symbol1,{color:"red",permanent:true})
       *			.attachSeries(symbol2,"blue")
       *			.attachSeries(symbol3,"yellow")
       *			.ready();
       *
       * @example
       *	function callbackFunct(field){
       *		 return function(err) {
       *			alert(field);
       *		}
       *	}
       *
       *	// set	your legend location if you want one
       *	if(!stxx.chart.legend){
       *		stxx.chart.legend={
       *			 x: 260,
       *			 y: 10
       *		};
       *	}
       *
       *	// add a series with a color to immediately render. It also calls callbackFunct after the data is returned from the fetch.
       *	stxx.addSeries(symbol1, {display:"Description",color:"brown"},callbackFunct(symbol1));
       *
       * @example
       *	// set up the legend creation callback for the histogram renderer
       *	function histogramLegend(colors){
       *		stxx.chart.legendRenderer(stxx,{legendColorMap:colors, coordinates:{x:260, y:stxx.panels["chart"].yAxis.top+30}, noBase:true});
       *	};
       *
       *	// set up the y axis for the histogram renderer
       *	var axis=new CIQ.ChartEngine.YAxis();
       *	axis.position="left";
       *	axis.textStyle="#FFBE00";
       *	axis.decimalPlaces=0;			// no decimal places on the axis labels
       *	axis.maxDecimalPlaces=0;		// no decimal places on the last price pointer
       *
       *	// set up the parameters for the histogram renderer
       *	var params={
       *		name:				"My stacked histogram",
       *		type:				"histogram",
       *		subtype:			"stacked",
       *		heightPercentage:	.7,	 // how high to go. 1 = 100%
       *		opacity:			.7,	 // only needed if supporting IE8, otherwise can use rgba values in histMap instead
       *		widthFactor:		.8,	 // to control space between bars. 1 = no space in between
       *		yAxis:				axis,
       *		callback: 			histogramLegend
       *	};
       *
       *	// create your histogram renderer
       *	var histRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Histogram({params:params}));
       *
       *	// set up the call back for your addSeries
       *	// in this case we will have it attach the series to the renderer once the data is loaded
       *	function callbackFunct(field, color,renderer){
       *		 return function(err) {
       *			if ( !err) {
       *				renderer.attachSeries(field,color)
       *				.ready();  //use ready() to immediately draw the rendering
       *			}
       *		}
       *	}
       *
       *	// add the series data and have the callback attach it to the renderer and render
       *	stxx.addSeries(symbol4, {display:"Description 1"},callbackFunct(symbol4,'red',histRenderer));
       *	stxx.addSeries(symbol5, {display:"Description 2"},callbackFunct(symbol5,'black',histRenderer));
       *	stxx.addSeries(symbol6, {display:"Description 3"},callbackFunct(symbol6,'green',histRenderer));
       *
       * @example
       *	// add series and attach to a y axis on the left.
       *	// See this example working here : http://jsfiddle.net/chartiq/b6pkzrad/
       *	stxx.addSeries("NOK", {display:"NOK",width:4});
       *	stxx.addSeries("SNE", {display:"Sony",width:4});
       *
       *	var axis=new CIQ.ChartEngine.YAxis();
       *	axis.position="left";
       *	axis.textStyle="#FFBE00";
       *	axis.decimalPlaces=0;			// no decimal places on the axis labels
       *	axis.maxDecimalPlaces=0;		// no decimal places on the last price pointer
       *
       *	renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", yAxis:axis}}));
       *
       *	renderer.removeAllSeries()
       *		.attachSeries("NOK", "#FFBE00")
       *		.attachSeries("SNE", "#FF9300")
       *		.ready();
       *
       * @since
       * <br>- 04-2015 if `isComparison` is true shareYAxis is automatically set to true and setComparison(true) called. createDataSet() and draw() are automatically called to immediately render the series.
       * <br>- 15-07-01 if `color` is defined and chartStyle is not set then it is automatically set to "line".
       * <br>- 15-07-01 ability to use setSeriesRenderer().
       * <br>- 15-07-01 ability to automatically initialize using the quoteFeed.
       * <br>- 15-07-01 `parameters.quoteFeedCallbackRefresh` no lonfer used. Instead if `parameters.data.useDefaultQuoteFeed` is set to `true` the series will be initalized and refreshed using the default quote feed. ( Original documentation:  {boolean} [parameters.quoteFeedCallbackRefresh] Set to true if you want the series to use the attached quote feed (if any) to stay in sync with the main symbol as new data is fetched (only available in Advanced package). )
       * <br>- 2015-11-1 `parameters.symbolObject` is now available
       * <br> 05-2016-10  `parameters.forceData` is now available.
       * <br> 09-2016-19  `parameters.data.DT` can also take an epoch number.
       * <br> 09-2016-19  `parameters.data.useDefaultQuoteFeed` is no longer needed to be specified. If no `parameters.data` is provided the quotefeed will be automatically used, and no longer tries to use an existent masterData field.
       * <br> TBD  when `parameters.data.useDefaultQuoteFeed` is not specified, it will fist attempt to use existing data, and if not available, it will use the quoteFeed.
       */
      CIQ.ChartEngine.prototype.addSeries = function(field, parameters, cb) {
        if (this.runPrepend('addSeries', arguments)) return
        if (!parameters) parameters = {}
        if (!parameters.chartName) parameters.chartName = this.chart.name
        if (!parameters.symbolObject) parameters.symbolObject = { symbol: field }
        var obj = {
          parameters: CIQ.clone(parameters),
          yValueCache: [],
          display: field,
        }
        if ('display' in obj.parameters) obj.display = obj.parameters.display
        if (obj.parameters.isComparison) obj.parameters.shareYAxis = true
        if (!obj.parameters.chartType && obj.parameters.color) obj.parameters.chartType = 'line'
        if (obj.parameters.chartType && obj.parameters.chartType != 'mountain') obj.parameters.chartType = 'line'
        if (!obj.parameters.panel) obj.parameters.panel = this.chart.panel.name
        var chart = this.charts[parameters.chartName]
        var self = this

        function addSeriesData(stx) {
          var mIterator = 0,
            cIterator = 0
          var c, m
          while (parameters.data && mIterator < stx.masterData.length && cIterator < parameters.data.length) {
            c = parameters.data[cIterator]
            m = stx.masterData[mIterator]
            if (!c.DT || typeof c.DT == 'undefined') c.DT = CIQ.strToDateTime(c.Date)
            else c.DT = new Date(c.DT) //in case they sent in an epoch
            if (c.DT.getTime() == m.DT.getTime()) {
              if (typeof c.Value != 'undefined') {
                m[field] = c.Value
              } else if (stx.layout.adj && typeof c.Adj_Close != 'undefined') {
                m[field] = c.Adj_Close
              } else {
                m[field] = c.Close
              }
              cIterator++
              mIterator++
              continue
            }
            if (c.DT < m.DT) {
              if (parameters.forceData) {
                stx.masterData.splice(mIterator, 0, { DT: c.DT })
                continue
              }
              cIterator++
            } else mIterator++
          }
          if (parameters.forceData && mIterator >= stx.masterData.length) {
            while (parameters.data && cIterator < parameters.data.length) {
              c = parameters.data[cIterator]
              if (!c.DT || typeof c.DT == 'undefined') c.DT = CIQ.strToDateTime(c.Date)
              m = { DT: c.DT }
              if (typeof c.Value != 'undefined') {
                m[field] = c.Value
              } else if (stx.layout.adj && typeof c.Adj_Close != 'undefined') {
                m[field] = c.Adj_Close
              } else {
                m[field] = c.Close
              }
              stx.masterData.push(m)
              cIterator++
            }
          }
        }

        function setUpRenderer(stx, obj) {
          // set up a series renderer if there is a color ( to support legacy format )
          if (obj.parameters.color) {
            var r = stx.getSeriesRenderer('_generic_series')
            if (!r) {
              if (!CIQ.Renderer.Lines) {
                alert('ChartIQ: stxLibrary.js is required')
              }
              r = stx.setSeriesRenderer(
                new CIQ.Renderer.Lines({
                  params: { panel: obj.parameters.panel, type: 'legacy', name: '_generic_series', overChart: true },
                }),
              )
            }
            r.attachSeries(field, obj.parameters).ready()
          }
        }

        function handleResponse(params) {
          return function(dataCallback) {
            if (!dataCallback.error && dataCallback.error !== 0) {
              // add data from the fetch
              parameters.data = dataCallback.quotes
              addSeriesData(self)
              setUpRenderer(self, obj)
            }
            if (!self.currentlyImporting)
              self.dispatch('symbolChange', {
                stx: self,
                symbol: params.symbol,
                symbolObject: params.symbolObject,
                action: 'add-series',
              })
            if (cb) cb(dataCallback.error, obj)
            self.runAppend('addSeries', arguments)
          }
        }

        if (chart) {
          chart.series[field] = obj
        }

        if (parameters.isComparison) {
          self.setComparison(true, chart)
        }

        var doneInCallback = false

        if (parameters.data && !parameters.data.useDefaultQuoteFeed /* legacy */) {
          if (this.masterData) {
            addSeriesData(this) // add array of objects sent
          }
        } else {
          if (this.masterData && this.chart.masterData[this.chart.masterData.length - 1][field]) {
            // TODO, this code can probably be removed.
            obj.addSeriesData = addSeriesData
          } else if (this.quoteDriver) {
            // if not already in master data and we have a quote feed, go and fetch it.
            var driver = this.quoteDriver
            var fetchParams = driver.makeParams(field, parameters.symbolObject, this.chart)
            // for comparisons, you must  fetch enough data on the new Comparison to match the masterData, from	 beginning to end ticks
            // if the chart is empty, then don;t send any dates and allow the fetch to do an inital load
            if (this.chart.masterData) {
              if (this.chart.masterData[0]) fetchParams.startDate = this.chart.masterData[0].DT
              if (this.chart.masterData[this.chart.masterData.length - 1])
                fetchParams.endDate = this.chart.masterData[this.chart.masterData.length - 1].DT
            }
            //if(parameters.symbolObject) fetchParams.symbolObject=parameters.symbolObject; // already done by makeParams
            doneInCallback = true
            if (fetchParams.stx.isEquationChart(fetchParams.symbol)) {
              //equation chart
              CIQ.fetchEquationChart(fetchParams, handleResponse(fetchParams))
            } else {
              CIQ.ChartEngine.Driver.fetchData(
                CIQ.QuoteFeed.SERIES,
                driver.quoteFeed,
                fetchParams,
                handleResponse(fetchParams),
              )
            }
          }
        }

        // if we are loading data we want to do this in the fetch callback not here.
        if (!doneInCallback) {
          setUpRenderer(self, obj)
          if (cb) cb(null, obj)
          this.runAppend('addSeries', arguments)
        }

        return obj
      }

      CIQ.ChartEngine.prototype.isEquationChart = function(symbol) {
        if (!this.allowEquations || !CIQ.computeEquationChart) return false
        if (symbol && symbol[0] == '=') return true
        return false
      }

      /**
       * Just deletes the series without removing it from a renderer. Use {@link CIQ.ChartEngine#removeSeries}
       * generally.
       * @param  {string} field Series field
       * @param  {CIQ.ChartEngine.Chart} chart The chart to remove from
       */
      CIQ.ChartEngine.prototype.deleteSeries = function(field, chart) {
        if (this.runPrepend('deleteSeries', arguments)) return
        if (!chart) chart = this.chart
        delete chart.series[field]
        if (this.quoteDriver) this.quoteDriver.updateSubscriptions()
        this.runAppend('deleteSeries', arguments)
      }

      /**
       * Removes a series from the chart
       * <span class="injection">INJECTABLE</span>
       * @param  {string} field The name of the series to remove
       * @param  {CIQ.ChartEngine.Chart} [chart] The chart object from which to remove the series
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.removeSeries = function(field, chart) {
        if (this.runPrepend('removeSeries', arguments)) return
        if (!chart) chart = this.chart
        var symbolObject
        for (var r in chart.seriesRenderers) {
          var renderer = chart.seriesRenderers[r]
          for (var sp = renderer.seriesParams.length - 1; sp >= 0; sp--) {
            var series = renderer.seriesParams[sp]
            if (!series.permanent && series.field === field) {
              symbolObject = series.symbolObject
              renderer.removeSeries(field)
            }
          }
        }
        this.deleteSeries(field, chart) // just in case the renderer didn't...
        var comparing = false
        for (var s in chart.series) {
          if (chart.series[s].parameters.isComparison) comparing = true
        }
        if (!comparing) this.setComparison(false, chart)
        this.createDataSet()
        this.draw()
        this.dispatch('symbolChange', { stx: this, symbol: field, symbolObject: symbolObject, action: 'remove-series' })
        this.runAppend('removeSeries', arguments)
      }

      //@deprecated, use static version
      CIQ.ChartEngine.prototype.isDailyInterval = function(interval) {
        if (interval == 'day') return true
        if (interval == 'week') return true
        if (interval == 'month') return true
        return false
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Sets the periodicity and interval for the chart. Interval describes the raw data interval (1, 5, 30, "day") while
       * period describes the multiple of that interval (7 minutes, 3 days, 7 X 5 minutes). This method sets the new periodicity
       * and creates a new dataSet. If the interval has changed then the underlying data is no longer valid.
       * If a quoteFeed has been attached to the chart (see {@link CIQ.ChartEngine#attachQuoteFeed} ) , it will be called to get the new data, otherwise this.dataCallback will
       * be called in an effort to fetch new data. See {@link CIQ.ChartEngine#dataCallback}. If neither one is set and new data is needed, the function will fail.
       *
       * This function can be called together with newChart() by setting the proper parameter values. See example in this section and {@link CIQ.ChartEngine#newChart} for more details and compatibility with your current version.
       *
       * Note that the kernel is capable of deriving weekly and monthly charts from daily data. Set dontRoll to true to bypass this
       * functionality if you have raw week and month data in the masterData.
       *
       * **See {@link CIQ.ChartEngine#createDataSet} for important notes on rolling up data with gaps.**
       *
       * **Note on 'tick' interval:**<BR>
       * When using 'tick', please note that this is not a time based display, as such, there is no way to predict what the time for the next tick will be.
       * It can come a second later, a minute later or even more depending on how active a particular instrument may be.
       * If using the future tick functionality ( {@link CIQ.ChartEngine.XAxis#futureTicks} ) when in 'tick' mode, the library uses a pre-defined number (  {@link CIQ.ChartEngine.XAxis#futureTicksInterval} )for deciding what interval to use for future ticks.
       * See below example on how to override this default.
       *
       * @type number
       * @default
       * @example
       * // each bar on the screen will represent 15 minutes (a single 15 minute bar from your server)
       * stxx.setPeriodicityV2(1, 15, "minute", function(err){});
       *
       * @example
       * // each bar on the screen will represent 30 minutes formed by combining two 15-minute bars; each masterData element represening 15 minutes.
       * stxx.setPeriodicityV2(2, 15, "minute", function(err){});
       *
       * @example
       * // each bar on the screen will represent 1 tick and no particular grouping will be done.
       * stxx.setPeriodicityV2(1, "tick", null, function(err){});
       *
       * @example
       * // each bar on the screen will represent 1 day. MasterData elements will represent one day each.
       * stxx.setPeriodicityV2(1, "day", null, function(err){});
       *
       * @example
       * // this sets the periodicity to 5 minute bars when newChart is called
       * stxx.newChart(
       * 		newSymbol,
       * 		null,
       * 		null,
       * 		finishedLoadingNewChart(
       * 			stxx.chart.symbol,
       * 			newSymbol
       * 		),
       * 		{
       * 			span:{base:'day',multiplier:2},		// this parameter will cause newChart to call setSpan with these parameters
       * 			periodicity:{period:1,interval:5}	// this parameter will cause newChart to call setPeriodicityV2 with these parameters
       * 		}
       * );
       *
       * @example
       * //How to override stxx.chart.xAxis.futureTicksInterval when in 'tick' mode:
       * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
       * stxx.chart.xAxis.futureTicksInterval=1; // to set to 1 minute, for example
       *
       * @param {number} period The number of elements from masterData to roll-up together into one data point on the chart (one candle, for example). If set to 30 in a candle chart, for example, each candle will represent 30 raw elements of `interval` type.
       * @param {string} interval The type of data to base the `period` on. This can be a numeric value representing minutes, seconds or millisecond as inicated by `timeUnit`, "day","week", "month" or 'tick' for variable time x-axis. ** "hour" is NOT a valid interval.** (This is not how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
       * @param {string} [timeUnit] Optional time unit to further qualify the specified numeric interval. Valid values are "millisecond","second","minute",null. If not set, will default to "minute". ** only applicable and used on numeric intervals**
       * @param {Function} [cb] Optional callback after periodicity is changed. First parameter of callback will be null unless there was an error.
       * @memberOf CIQ.ChartEngine
       * @since  2015-11-1 `second` and `millisecond` periodicities are now supported by setting the `timeUnit` parameter.
       */
      CIQ.ChartEngine.prototype.setPeriodicityV2 = function(period, interval, timeUnit, cb) {
        if (this.runPrepend('setPeriodicityV2', arguments)) return
        if (typeof timeUnit === 'function') {
          cb = timeUnit // backward compatibility
          timeUnit = null
        }
        var switchInterval = false

        // no interval or no period, no periodicity change.
        if (!interval) return
        if (!period) return
        var layout = this.layout,
          cw = layout.candleWidth

        delete layout.setSpan // No longer in a span if we've set a specific periodicity
        // support year
        if (interval == 'year') {
          interval = 'month'
          if (!period) period = 1
          period = period * 12
        }

        var isDaily = this.isDailyInterval(interval),
          wasDaily = this.isDailyInterval(layout.interval)

        // clean up timeUnite
        if (isDaily) timeUnit = null
        else if (interval == 'tick') timeUnit = null
        else if (!timeUnit) timeUnit = 'minute'

        var getDifferentData = false

        if (this.chart.symbol) {
          if (this.dontRoll || !wasDaily) {
            // we are not rolling so monthly and weekly are not the same as daily or any of the intraday... so simply check for different interval.
            if (layout.interval != interval) getDifferentData = true
          } else {
            //we are rolling weeekly and monthly and wasn't intraday mode...so check to see if we an still use daily data for the new periodicity
            if (isDaily != wasDaily) getDifferentData = true
          }

          if (timeUnit != layout.timeUnit) getDifferentData = true // !!! Do not change to !==
        }

        layout.periodicity = period
        layout.interval = interval
        layout.timeUnit = timeUnit

        if (getDifferentData) {
          this.changeOccurred('layout')
          if (this.quoteDriver) {
            for (var c in this.charts) {
              if (this.charts[c].symbol) {
                if (this.displayInitialized)
                  this.quoteDriver.newChart(
                    { symbol: this.charts[c].symbol, symbolObject: this.charts[c].symbolObject, chart: this.charts[c] },
                    cb,
                  )
                else this.newChart(this.charts[c].symbol, null, this.charts[c], cb)
              }
            }
            return
          } else if (this.dataCallback) {
            this.dataCallback()
            if (cb) cb(null)
            return
          } else {
            console.log('cannot change periodicity because neither dataCallback or quoteDriver are set')
            return
          }
        }

        var chartName, chart
        for (chartName in this.charts) {
          chart = this.charts[chartName]
          var dataSegment = chart.dataSegment,
            dataSet = chart.dataSet,
            maxTicks = chart.maxTicks,
            scroll = chart.scroll
          var dataSegmentLength = dataSegment ? dataSegment.length : 0,
            dataSetLength = dataSet ? dataSet.length : 0
          var dt
          var pos = Math.round(chart.maxTicks / 2)
          this.setCandleWidth(cw, chart)
          var centerMe = true,
            rightAligned = false
          if (scroll <= maxTicks)
            // don't attempt to center the chart if we're scrolled into the future
            centerMe = false
          else if (dataSegment && !dataSegment[pos]) {
            // don't attempt to center the chart if we're scrolled into the past
            centerMe = false
            rightAligned = scroll - dataSetLength // We'll use this to keep the same amount of right alignment
          }

          if (centerMe && dataSegmentLength > 0) {
            if (maxTicks < (Math.round(this.chart.width / cw - 0.499) - 1) / 2) {
              pos = dataSegmentLength - 1
            }
            if (pos >= dataSegmentLength) {
              dt = dataSegment[dataSegmentLength - 1].DT
              pos = dataSegmentLength - 1
            } else {
              dt = dataSegment[pos].DT
            }
          }

          this.createDataSet()

          if (centerMe) {
            // If we're scrolled somewhere into the middle of the chart then we will keep the chart centered as we increase or decrease periodicity
            if (dataSegmentLength > 0) {
              for (var i = dataSetLength - 1; i >= 0; i--) {
                var nd = dataSet[i].DT
                if (nd.getTime() < dt.getTime()) {
                  chart.scroll = dataSetLength - i + pos
                  break
                }
              }
            }
          } else if (!rightAligned) {
            var wsInTicks = Math.round(this.preferences.whitespace / cw)
            chart.scroll = maxTicks - wsInTicks // Maintain the same amount of left alignment
          } else {
            chart.scroll = dataSet.length + rightAligned // Maintain the same amount of right alignment
          }
        }

        if (this.displayInitialized) this.draw()
        this.changeOccurred('layout')

        if (this.quoteDriver) {
          for (chartName in this.charts) {
            chart = this.charts[chartName]
            if (chart.symbol && chart.moreAvailable) {
              this.quoteDriver.checkLoadMore(chart)
            }
          }
        }
        if (cb) cb(null)
        this.runAppend('setPeriodicityV2', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * Draws the drawings (vectors). Each drawing is iterated and asked to draw itself. Drawings are automatically
       * clipped by their containing panel.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias drawVectors
       */
      CIQ.ChartEngine.prototype.drawVectors = function() {
        if (this.vectorsShowing) return
        if (this.runPrepend('drawVectors', arguments)) return
        this.vectorsShowing = true
        if (!this.chart.hideDrawings) {
          var tmpPanels = {}
          // First find all the existing panels in the given set of drawings (exluded those that aren't displayed)
          var panelName, i
          for (i = 0; i < this.drawingObjects.length; i++) {
            var drawing = this.drawingObjects[i]
            panelName = drawing.panelName
            if (!this.panels[drawing.panelName]) continue // drawing from a panel that is not enabled
            if (!tmpPanels[panelName]) {
              tmpPanels[panelName] = []
            }
            tmpPanels[panelName].push(drawing)
          }
          // Now render all the drawings in those panels, clipping each panel
          for (panelName in tmpPanels) {
            this.startClip(panelName)
            var arr = tmpPanels[panelName]
            for (i = 0; i < arr.length; i++) {
              arr[i].render(this.chart.context)
            }
            this.endClip()
          }
        }
        this.runAppend('drawVectors', arguments)
      }

      // Constant bitmask for bar evaluation
      CIQ.ChartEngine.NONE = 0 // no evaluation (black bars)
      CIQ.ChartEngine.CLOSEUP = 1 // today's close greater than yesterday's close
      CIQ.ChartEngine.CLOSEDOWN = 2 // today's close less than yesterday's close
      CIQ.ChartEngine.CLOSEEVEN = 4 // today's close the same as yesterday's close
      CIQ.ChartEngine.CANDLEUP = 8 // today's close greater than today's open
      CIQ.ChartEngine.CANDLEDOWN = 16 // today's close less than today's open
      CIQ.ChartEngine.CANDLEEVEN = 32 // today's close equal to today's open

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * Displays the chart by calling the appropriate rendering functions based on the chart type.
       * @param  {CIQ.ChartEngine.Chart} chart The chart to render
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias displayChart
       * @since 05-2016-10.1 "baseline_delta_mountain" and  "colored_mountain" are also available
       */
      CIQ.ChartEngine.prototype.displayChart = function(chart) {
        var noBorders = this.layout.candleWidth - chart.tmpWidth < 2 && chart.tmpWidth <= 3
        if (this.runPrepend('displayChart', arguments)) return

        var layout = this.layout,
          chartType = layout.chartType,
          colorFunction = null,
          panel = chart.panel
        var stxLineUpColor, stxLineDownColor, stxLineColor, baseline, styleArray
        if (chart.customChart) {
          if (chart.customChart.chartType) chartType = chart.customChart.chartType
          if (chart.customChart.colorFunction) colorFunction = chart.customChart.colorFunction
        }
        this.controls.baselineHandle.style.display = 'none'
        this.chart.baseLegendColors = []

        function getColor(stx, style, isBorder, isGradient) {
          var color = style.color
          if (isBorder) {
            color = style['border-left-color']
            if (!color) color = style.borderLeftColor //IE
            if (!color) return null
          }
          if (!isGradient) return color
          var top = stx.pixelFromPrice(panel.chart.highValue, panel)
          if (isNaN(top)) top = 0 // 32 bit IE doesn't like large numbers
          var backgroundColor = style.backgroundColor
          if (color && !CIQ.isTransparent(color)) {
            var gradient = stx.chart.context.createLinearGradient(0, top, 0, 2 * panel.yAxis.bottom - top)
            gradient.addColorStop(0, color)
            gradient.addColorStop(1, backgroundColor)
            return gradient
          } else {
            return backgroundColor
          }
        }
        if (layout.aggregationType == 'kagi' && chartType != 'none') {
          this.drawKagiSquareWave(panel, 'stx_kagi_up', 'stx_kagi_down')
          this.chart.baseLegendColors.push(this.getCanvasColor('stx_kagi_up'))
          this.chart.baseLegendColors.push(this.getCanvasColor('stx_kagi_down'))
        } else if (layout.aggregationType == 'pandf' && chartType != 'none') {
          this.drawPointFigureChart(panel, 'stx_pandf_up', 'X')
          this.chart.baseLegendColors.push(this.getCanvasColor('stx_pandf_up'))
          this.drawPointFigureChart(panel, 'stx_pandf_down', 'O')
          this.chart.baseLegendColors.push(this.getCanvasColor('stx_pandf_down'))
        } else if (chartType == 'line') {
          this.drawLineChart(panel, 'stx_line_chart')
        } else if (chartType == 'mountain') {
          this.startClip(panel.name)
          this.chart.baseLegendColors = null
          this.drawMountainChart(panel)
          this.endClip()
        } else if (chartType == 'colored_mountain') {
          this.startClip(panel.name)
          stxLineUpColor = this.getCanvasColor('stx_line_up')
          stxLineDownColor = this.getCanvasColor('stx_line_down')
          stxLineColor = this.getCanvasColor('stx_line_chart')
          if (!colorFunction)
            colorFunction = function(stx, quote, mode) {
              if (quote.Close > quote.iqPrevClose) return stxLineUpColor
              else if (quote.Close < quote.iqPrevClose) return stxLineDownColor
              else return stxLineColor
              return null
            }
          var colors1 = this.drawMountainChart(panel, 'stx_colored_mountain_chart', colorFunction)
          for (var c1 in colors1) this.chart.baseLegendColors.push(c1)
          this.endClip()
        } else if (chartType == 'wave') {
          this.drawWaveChart(panel)
        } else if (chartType == 'bar') {
          this.startClip(panel.name)
          this.drawBarChartHighPerformance(panel, 'stx_bar_chart')
          this.endClip()
        } else if (chartType == 'colored_line') {
          this.startClip(panel.name)
          stxLineUpColor = this.getCanvasColor('stx_line_up')
          stxLineDownColor = this.getCanvasColor('stx_line_down')
          stxLineColor = this.getCanvasColor('stx_line_chart')
          if (!colorFunction)
            colorFunction = function(stx, quote, mode) {
              if (quote.Close > quote.iqPrevClose) return stxLineUpColor
              else if (quote.Close < quote.iqPrevClose) return stxLineDownColor
              else return stxLineColor
              return null
            }
          var colors2 = this.drawLineChart(panel, 'stx_line_chart', colorFunction)
          for (var c2 in colors2) this.chart.baseLegendColors.push(c2)
          this.endClip()
        } else if (chartType == 'colored_bar') {
          this.startClip(panel.name)
          if (colorFunction) {
            var colors3 = this.drawBarChart(panel, 'stx_bar_chart', colorFunction)
            for (var c3 in colors3) this.chart.baseLegendColors.push(c3)
          } else {
            this.drawBarChartHighPerformance(panel, 'stx_bar_up', CIQ.ChartEngine.CLOSEUP)
            this.drawBarChartHighPerformance(panel, 'stx_bar_down', CIQ.ChartEngine.CLOSEDOWN)
            this.drawBarChartHighPerformance(panel, 'stx_bar_even', CIQ.ChartEngine.CLOSEEVEN)
            this.chart.baseLegendColors.push(this.getCanvasColor('stx_bar_up'))
            this.chart.baseLegendColors.push(this.getCanvasColor('stx_bar_down'))
          }
          this.endClip()
        } else if (chartType == 'hollow_candle' || chartType == 'volume_candle') {
          this.startClip(panel.name)

          if (colorFunction) {
            if (!this.noWicksOnCandles[layout.aggregationType]) this.drawShadows(panel, colorFunction)
            this.drawCandles(panel, colorFunction, false) //all bars
            this.drawCandles(panel, colorFunction, true) //hollow bars only get border
          } else {
            if (!this.noWicksOnCandles[layout.aggregationType]) {
              this.drawShadowsHighPerformance(panel, 'stx_hollow_candle_up', CIQ.ChartEngine.CLOSEUP)
              this.drawShadowsHighPerformance(panel, 'stx_hollow_candle_down', CIQ.ChartEngine.CLOSEDOWN)
              this.drawShadowsHighPerformance(panel, 'stx_hollow_candle_even', CIQ.ChartEngine.CLOSEEVEN)
            }
            var colorUp = this.getCanvasColor('stx_hollow_candle_up')
            var colorDown = this.getCanvasColor('stx_hollow_candle_down')
            var colorEven = this.getCanvasColor('stx_hollow_candle_even')
            this.drawCandlesHighPerformance(
              panel,
              colorUp,
              'transparent',
              CIQ.ChartEngine.CLOSEUP | CIQ.ChartEngine.CANDLEDOWN,
            )
            this.drawCandlesHighPerformance(
              panel,
              colorDown,
              'transparent',
              CIQ.ChartEngine.CLOSEDOWN | CIQ.ChartEngine.CANDLEDOWN,
            )
            this.drawCandlesHighPerformance(
              panel,
              colorEven,
              'transparent',
              CIQ.ChartEngine.CLOSEEVEN | CIQ.ChartEngine.CANDLEDOWN,
            )
            this.drawCandlesHighPerformance(
              panel,
              this.containerColor,
              colorUp,
              CIQ.ChartEngine.CLOSEUP | CIQ.ChartEngine.CANDLEUP,
            )
            this.drawCandlesHighPerformance(
              panel,
              this.containerColor,
              colorDown,
              CIQ.ChartEngine.CLOSEDOWN | CIQ.ChartEngine.CANDLEUP,
            )
            this.drawCandlesHighPerformance(
              panel,
              this.containerColor,
              colorEven,
              CIQ.ChartEngine.CLOSEEVEN | CIQ.ChartEngine.CANDLEUP,
            )
            this.chart.baseLegendColors.push(colorUp)
            this.chart.baseLegendColors.push(colorDown)
          }
          this.endClip()
        } else if (chartType == 'candle') {
          this.startClip(panel.name)

          if (colorFunction) {
            if (!this.noWicksOnCandles[layout.aggregationType]) this.drawShadows(panel, colorFunction)
            this.drawCandles(panel, colorFunction, false) //all candles
            if (!noBorders) this.drawCandles(panel, colorFunction, true) //all candle borders, if candlewidth is too small then don't draw the borders
          } else {
            if (!this.noWicksOnCandles[layout.aggregationType]) {
              var coloredShadowUp = this.getCanvasColor('stx_candle_shadow_up')
              var coloredShadowDown = this.getCanvasColor('stx_candle_shadow_down')
              if (coloredShadowUp != coloredShadowDown) {
                this.drawShadowsHighPerformance(panel, 'stx_candle_shadow_up', CIQ.ChartEngine.CANDLEUP)
                this.drawShadowsHighPerformance(panel, 'stx_candle_shadow_down', CIQ.ChartEngine.CANDLEDOWN)
                this.drawShadowsHighPerformance(panel, 'stx_candle_shadow', CIQ.ChartEngine.CANDLEEVEN)
              } else {
                this.drawShadowsHighPerformance(panel, 'stx_candle_shadow')
              }
            }
            styleArray = this.canvasStyle('stx_candle_up')
            this.drawCandlesHighPerformance(
              panel,
              getColor(this, styleArray, false),
              getColor(this, styleArray, !noBorders),
              CIQ.ChartEngine.CANDLEUP,
            )
            this.chart.baseLegendColors.push(styleArray.color)

            styleArray = this.canvasStyle('stx_candle_down')
            this.drawCandlesHighPerformance(
              panel,
              getColor(this, styleArray, false),
              getColor(this, styleArray, !noBorders),
              CIQ.ChartEngine.CANDLEDOWN,
            )
            this.chart.baseLegendColors.push(styleArray.color)
          }
          this.endClip()
        } else if (chartType == 'histogram') {
          this.startClip(panel.name)

          if (colorFunction) {
            this.drawCandles(panel, colorFunction, false, true) //all bars
            if (!noBorders) this.drawCandles(panel, colorFunction, true, true) //all bar borders, if candlewidth is too small then don't draw the borders
          } else {
            styleArray = this.canvasStyle('stx_histogram_up')
            this.drawCandlesHighPerformance(
              panel,
              getColor(this, styleArray, false, true),
              getColor(this, styleArray, !noBorders, true),
              CIQ.ChartEngine.CANDLEUP,
              true,
            )
            this.chart.baseLegendColors.push(styleArray.color)

            styleArray = this.canvasStyle('stx_histogram_down')
            this.drawCandlesHighPerformance(
              panel,
              getColor(this, styleArray, false, true),
              getColor(this, styleArray, !noBorders, true),
              CIQ.ChartEngine.CANDLEDOWN,
              true,
            )
            this.chart.baseLegendColors.push(styleArray.color)

            styleArray = this.canvasStyle('stx_histogram_even') //TODO: needs its own style
            this.drawCandlesHighPerformance(
              panel,
              getColor(this, styleArray, false, true),
              getColor(this, styleArray, !noBorders, true),
              CIQ.ChartEngine.CANDLEEVEN,
              true,
            )
            this.chart.baseLegendColors.push(styleArray.color)
          }
          this.endClip()
        } else if (chartType == 'baseline_delta') {
          this.startClip(panel.name)
          this.setStyle('stx_baseline_trace', 'opacity', 0)
          this.drawLineChart(panel, 'stx_baseline_trace')
          baseline = chart.baseline.actualLevel
          if (baseline !== null) {
            baseline = this.pixelFromPriceTransform(baseline, chart.panel)
            var styles = { over: 'stx_baseline_up', under: 'stx_baseline_down' }
            for (var s in styles) {
              var parameters = {
                panelName: 'chart',
                band: 'Close',
                threshold: chart.baseline.actualLevel,
                color: this.getCanvasColor(styles[s]),
                direction: s == 'over' ? 1 : -1,
                edgeHighlight: this.getCanvasColor(styles[s]),
                edgeParameters: {
                  pattern: 'solid',
                  lineWidth: parseInt(this.canvasStyle(styles[s]).width, 10) + 0.1,
                  opacity: 1,
                },
              }
              var color = parameters.color
              if (color && color != 'transparent') {
                var gradient = chart.context.createLinearGradient(0, s == 'over' ? 0 : 2 * baseline, 0, baseline)
                gradient.addColorStop(0, CIQ.hexToRgba(color, 60))
                gradient.addColorStop(1, CIQ.hexToRgba(color, 10))
                parameters.color = gradient
                parameters.opacity = 1
              }
              CIQ.preparePeakValleyFill(this, chart.dataSegment, parameters)
              this.chart.baseLegendColors.push(color)
            }
            this.plotLine(0, 1, baseline, baseline, this.containerColor, 'line', chart.context, true, {
              pattern: 'solid',
              lineWidth: '1.1',
              opacity: 1,
            })
            this.plotLine(0, 1, baseline, baseline, this.getCanvasColor('stx_baseline'), 'line', chart.context, true, {
              pattern: 'dotted',
              lineWidth: '2.1',
              opacity: 0.5,
            })
            if (this.chart.baseline.userLevel !== false) {
              this.controls.baselineHandle.style.top =
                baseline - parseInt(getComputedStyle(this.controls.baselineHandle).height, 10) / 2 + 'px'
              this.controls.baselineHandle.style.left =
                this.chart.right - parseInt(getComputedStyle(this.controls.baselineHandle).width, 10) + 'px'
              this.controls.baselineHandle.style.display = 'block'
            }
          }
          this.endClip()
        } else if (chartType == 'baseline_delta_mountain') {
          baseline = chart.baseline.actualLevel
          if (baseline !== null) {
            // do the mountain under
            this.startClip(panel.name)
            this.drawMountainChart(panel, 'stx_baseline_delta_mountain')
            this.endClip()

            this.startClip(panel.name)
            this.setStyle('stx_baseline_trace', 'opacity', 0)
            this.drawLineChart(panel, 'stx_baseline_trace')
            baseline = this.pixelFromPriceTransform(baseline, chart.panel)
            var styles2 = { over: 'stx_baseline_up', under: 'stx_baseline_down' }
            for (var s2 in styles2) {
              var parameters2 = {
                panelName: 'chart',
                band: 'Close',
                threshold: chart.baseline.actualLevel,
                color: this.getCanvasColor(styles2[s2]),
                direction: s2 == 'over' ? 1 : -1,
                edgeHighlight: this.getCanvasColor(styles2[s2]),
                edgeParameters: {
                  pattern: 'solid',
                  lineWidth: parseInt(this.canvasStyle(styles2[s2]).width, 10) + 0.1,
                  opacity: 1,
                },
              }
              this.chart.baseLegendColors.push(parameters2.color)
              parameters2.color = 'transparent' // dont fill Peak and Valley, just draw colored line
              CIQ.preparePeakValleyFill(this, chart.dataSegment, parameters2)
            }
            this.plotLine(0, 1, baseline, baseline, this.containerColor, 'line', chart.context, true, {
              pattern: 'solid',
              lineWidth: '1.1',
              opacity: 1,
            })
            this.plotLine(0, 1, baseline, baseline, this.getCanvasColor('stx_baseline'), 'line', chart.context, true, {
              pattern: 'dotted',
              lineWidth: '2.1',
              opacity: 0.5,
            })
            if (this.chart.baseline.userLevel !== false) {
              this.controls.baselineHandle.style.top =
                baseline - parseInt(getComputedStyle(this.controls.baselineHandle).height, 10) / 2 + 'px'
              this.controls.baselineHandle.style.left =
                this.chart.right - parseInt(getComputedStyle(this.controls.baselineHandle).width, 10) + 'px'
              this.controls.baselineHandle.style.display = 'block'
            }
            this.endClip()
          }
        } else if (chartType == 'scatterplot') {
          this.startClip(panel.name)
          this.scatter(panel)
          this.endClip()
        } else if (chartType && chartType != 'none') {
          console.log('Invalid chart layout.chartType: "' + chartType + '". Defaulting to Line Chart.')
          layout.chartType = 'line'
          this.drawLineChart(panel, 'stx_line_chart')
        } else {
          this.chart.baseLegendColors = null
        }

        this.runAppend('displayChart', arguments)
      }

      /**
       * Calculates the ATR (Average True Range) for the dataSet
       * @private
       * @param  {CIQ.ChartEngine.Chart} chart The chart to calculate
       * @param  {number} period The number of periods
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.calculateATR = function(chart, period) {
        if (!period) period = 20
        var total = 0
        for (var i = 1; i < chart.dataSet.length; i++) {
          var q = chart.dataSet[i],
            q1 = chart.dataSet[i - 1]
          var trueRange = Math.max(q.High - q.Low, Math.abs(q.High - q1.Close), Math.abs(q.Low - q1.Close))
          total += trueRange
          if (i > period) total -= chart.dataSet[i - period].trueRange
          q.trueRange = trueRange
          if (i == period) q.atr = total / period
          else if (i > period) q.atr = (q1.atr * (period - 1) + trueRange) / period
        }
      }

      /**
       * Calculates the Median Price for the dataSet.
       * @private
       * @param {CIQ.ChartEngine.Chart} chart The chart to update.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.calculateMedianPrice = function(chart) {
        var d
        for (var i = 0; i < chart.dataSet.length; ++i) {
          d = chart.dataSet[i]
          d['hl/2'] = (d.High + d.Low) / 2
        }
      }

      /**
       * Calculates the Typical Price for the dataSet.
       * @private
       * @param {CIQ.ChartEngine.Chart} chart The chart to update.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.calculateTypicalPrice = function(chart) {
        var d
        for (var i = 0; i < chart.dataSet.length; ++i) {
          d = chart.dataSet[i]
          d['hlc/3'] = (d.High + d.Low + d.Close) / 3
        }
      }

      /**
       * Calculates the Weighted Close for the dataSet.
       * @private
       * @param {CIQ.ChartEngine.Chart} chart The chart to update.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.calculateWeightedClose = function(chart) {
        var d
        for (var i = 0; i < chart.dataSet.length; ++i) {
          d = chart.dataSet[i]
          d['hlcc/4'] = (d.High + d.Low + 2 * d.Close) / 4
        }
      }

      /**
       * Calculates the (Open + High + Low + Close) / 4 for the dataSet.
       * @private
       * @param {CIQ.ChartEngine.Chart} chart The chart to update.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.calculateOHLC4 = function(chart) {
        var d
        for (var i = 0; i < chart.dataSet.length; ++i) {
          d = chart.dataSet[i]
          d['ohlc/4'] = (d.Open + d.High + d.Low + d.Close) / 4
        }
      }

      /**
       * Returns the current quote (the final element in the dataSet).
       * @return {object} The most recent quote
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.currentQuote = function() {
        var quote = null
        if (!this.chart.dataSet) return null
        for (var i = this.chart.dataSet.length - 1; i >= 0; i--) if (this.chart.dataSet[i]) return this.chart.dataSet[i]
        return null
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * This method ensures that the chart is not scrolled off of either of the horizontal edges.
       * See {@link CIQ.ChartEngine#minimumLeftBars} and {@link CIQ.ChartEngine.Chart#allowScrollPast} for adjustments to defaults.
       * @param  {CIQ.ChartEngine.Chart} theChart The chart to check
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias correctIfOffEdge
       */
      CIQ.ChartEngine.prototype.correctIfOffEdge = function(theChart) {
        if (this.runPrepend('correctIfOffEdge', arguments)) return
        for (var chartName in this.charts) {
          var chart = this.charts[chartName],
            dataSet = chart.dataSet,
            maxTicks = chart.maxTicks

          var leftPad = Math.min(this.minimumLeftBars + 1, maxTicks) // in ase the minimumLeftBars is larger than what we can display
          if (chart.allowScrollPast) {
            // allow scrolling from left to right, creating white space on either side
            var rightPad = maxTicks - leftPad
            if (maxTicks - rightPad > dataSet.length) {
              rightPad = maxTicks - dataSet.length
            }
            if (chart.scroll - rightPad > dataSet.length) {
              chart.scroll = dataSet.length + rightPad
            }
            if (chart.scroll <= leftPad) {
              chart.scroll = leftPad
              this.micropixels = 0
            }
          } else {
            // earliest point in time is always anchored on left side of chart
            if (chart.scroll < leftPad) {
              chart.scroll = leftPad
            }
            if (chart.scroll > dataSet.length) {
              chart.scroll = dataSet.length
            }
          }
        }
        this.runAppend('correctIfOffEdge', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * Creates the dataSegment. The dataSegment is a copy of the portion of the dataSet that is observable in the
       * current chart. That is, the dataSegment is a "view" into the dataSet. chart.scroll and chart.maxTicks are the
       * primary drivers for this method.
       * @param  {CIQ.ChartEngine.Chart} [theChart] If passed then a data segment will be created just for that chart, otherwise all charts
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias createDataSegment
       */
      CIQ.ChartEngine.prototype.createDataSegment = function(theChart) {
        if (this.runPrepend('createDataSegment', arguments)) return
        var chart
        for (var chartName in this.charts) {
          chart = this.charts[chartName]
          if (theChart) chart = theChart

          if (chart.isComparison) CIQ.Comparison.createComparisonSegmentInner(this, chart)

          var dataSet = chart.dataSet,
            baseline = chart.baseline,
            scroll = chart.scroll,
            maxTicks = chart.maxTicks
          var layout = this.layout,
            cw = layout.candleWidth
          baseline.actualLevel = baseline.userLevel ? baseline.userLevel : baseline.defaultLevel
          /*
			chart.baseline.includeInDataSegment forces a line chart (usually a baseline chart) to begin inside the chart
			whereas normally the first point in a line chart is off the left edge of the screen.
			 */
          var dataSegmentStartsOneBack =
            baseline.includeInDataSegment && !CIQ.ChartEngine.chartShowsHighs(this.layout.chartType)

          var quote
          var dataSegment = (chart.dataSegment = [])
          var position = dataSet.length - scroll - 1 // One more to deal with -1 case
          for (var i = -1; i < scroll && i < maxTicks; i++) {
            position++
            if (i == -1 && !dataSegmentStartsOneBack) continue
            if (position < dataSet.length && position >= 0) {
              quote = dataSet[position]
              if (quote.candleWidth) {
                quote.candleWidth = null
                quote.leftOffset = null
              }
              dataSegment.push(quote)
              if (baseline.actualLevel === null && i >= 0) baseline.actualLevel = quote.iqPrevClose
            } else if (position < 0) {
              dataSegment.push(null)
            }
          }
          if (layout.chartType == 'volume_candle') {
            var totalVolume = 0
            for (var v = 0; v < dataSegment.length; v++) {
              quote = dataSegment[v]
              if (quote) totalVolume += quote.Volume
            }
            var accumOffset = 0
            for (var w = 0; w < dataSegment.length; w++) {
              quote = dataSegment[w]
              if (quote) {
                if (quote.Volume) {
                  var workingWidth = chart.width
                  if (scroll < maxTicks) workingWidth -= this.preferences.whitespace
                  quote.candleWidth = (workingWidth * quote.Volume) / totalVolume
                  quote.leftOffset = accumOffset + quote.candleWidth / 2
                  accumOffset += quote.candleWidth
                } else {
                  quote.candleWidth = cw
                  quote.leftOffset = accumOffset + cw / 2
                  accumOffset += cw
                }
              } else {
                accumOffset += cw
              }
            }
          }
          if (theChart) break
        }
        if (chart && chart.isComparison) this.clearPixelCache()
        this.runAppend('createDataSegment', arguments)
      }

      /**
       * Returns the tick position of the leftmost position on the chart.
       * @return {number} The tick for the leftmost position
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.leftTick = function() {
        return this.chart.dataSet.length - this.chart.scroll
      }

      /**
       * Returns the offset from the left side of the screen for the first element
       * on the chart screen. Most times this will be zero except when a user has scrolled
       * past the end of the chart in which case it will be a positive number. This can be used
       * to recreate a saved chart.
       * @return {number} The offset from the left of the chart.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.getStartDateOffset = function() {
        for (var ds = 0; ds < this.chart.dataSegment.length; ds++) {
          if (this.chart.dataSegment[ds]) {
            return ds
          }
        }
        return 0
      }

      /**
       * Scrolls the chart so that the leftmost tick is the requested date. The date must be an exact match.
       * There is no effect if the date is not found.
       * @param {Date} dt The requested date
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setStartDate = function(dt) {
        for (var i = 0; i < this.chart.dataSet.length; i++) {
          var bar = this.chart.dataSet[i]
          if (bar.DT.getTime() == dt.getTime()) {
            this.chart.scroll = this.chart.dataSet.length - i
            this.draw()
            return
          }
        }
      }

      //@private
      CIQ.ChartEngine.prototype.updateListeners = function(event) {
        for (var i in this.plugins) {
          var plugin = this.plugins[i]
          if (plugin.display && plugin.listener) plugin.listener(this, event)
        }
      }

      //@private
      CIQ.ChartEngine.prototype.clearPixelCache = function() {
        for (var x in this.panels) {
          var panel = this.panels[x]
          panel.cacheHigh = null
          panel.cacheLow = null
          panel.cacheLeft = 1000000
          panel.cacheRight = -1
        }
        for (var chartName in this.charts) {
          var chart = this.charts[chartName]
          if (!chart.dataSet) continue
          for (var i = 0; i < chart.dataSet.length; i++) {
            chart.dataSet[i].cache = {}
          }
        }
      }

      /**
       * Creates a label on the y-axis unless {@link CIQ.ChartEngine.YAxis#drawPriceLabels} is false.
       * This can be used for any panel and called multiple times to add multiple labels
       *
       * Style: stx_yaxis ( font only )
       *
       * @param  {CIQ.ChartEngine.Panel} panel			The panel on which to print the label
       * @param  {string} txt				The text for the label
       * @param  {number} y				The Y position on the canvas for the label. This method will ensure that it remains on the requested panel.
       * @param  {string} backgroundColor The background color for the label.
       * @param  {string} color			The foreground color for the label. If none provided then white is used, unless the background is white in which case black is used.
       * @param  {external:CanvasRenderingContext2D} [ctx]		 The canvas context to use, defaults to the chart
       * @param {CIQ.ChartEngine.YAxis} [yAxis] Optionally specifiy which yAxis if there are multiple for the panel
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.createYAxisLabel = function(panel, txt, y, backgroundColor, color, ctx, yAxis) {
        if (panel.yAxis.drawPriceLabels === false) return
        var yax = yAxis ? yAxis : panel.yAxis
        var context = ctx ? ctx : this.chart.context
        var margin = 3
        var height = this.getCanvasFontSize('stx_yaxis') + margin * 2
        this.canvasFont('stx_yaxis', context)
        var drawBorders = yax.displayBorder
        if (this.axisBorders === false) drawBorders = false
        if (this.axisBorders === true) drawBorders = true
        var tickWidth = drawBorders ? 3 : 0 // pixel width of tick off edge of border
        var width
        try {
          width = context.measureText(txt).width + tickWidth + margin * 2
        } catch (e) {
          width = yax.width
        } // Firefox doesn't like this in hidden iframe

        var x = yax.left - margin + 3
        var textx = x + margin + tickWidth
        var radius = 3
        var position = yax.position === null ? panel.chart.yAxis.position : yax.position
        if (position === 'left') {
          x = yax.left + yax.width + margin - 3
          width = width * -1
          textx = x
          radius = -3
          context.textAlign = 'right'
        }
        if (y + height / 2 > yax.bottom) y = yax.bottom - height / 2
        if (y - height / 2 < yax.top) y = yax.top + height / 2
        context.fillStyle = backgroundColor
        if (typeof CIQ[this.yaxisLabelStyle] == 'undefined') {
          this.yaxisLabelStyle = 'roundRectArrow' // in case of user error, set a default.
        }
        var yaxisLabelStyle = this.yaxisLabelStyle
        if (yax.yaxisLabelStyle) yaxisLabelStyle = yax.yaxisLabelStyle
        CIQ[yaxisLabelStyle](context, x, y - height / 2, width, height, radius, true, false)

        context.textBaseline = 'middle'
        context.fillStyle = color ? color : CIQ.chooseForegroundColor(backgroundColor)
        if (context.fillStyle == backgroundColor) {
          // Best effort to pick a foreground color that isn't the same as the background!
          if (backgroundColor.toUpperCase() == '#FFFFFF') context.fillStyle = '#000000'
          else context.fillStyle = '#FFFFFF'
        }
        // offset by 1 for true vertical centering since these only contain numbers
        context.fillText(txt, textx, y + 1)
        context.textAlign = 'left'
      }

      /**
       * Creates a label on the x-axis. Generally used for drawing labels.
       *
       * Note: **This is not used for the floating crosshair date label wich is styled using `stx-float-date` ** See {@link CIQ.ChartEngine.AdvancedInjectable#updateChartAccessories} and {@link CIQ.ChartEngine.AdvancedInjectable#headsUpHR} for more details
       *
       * Label style: `stx-float-date` ( font only )
       *
       * @param  {CIQ.ChartEngine.Panel} panel			The panel on which to print the label
       * @param  {string} txt				The text for the label
       * @param  {number} x				The X position on the canvas for the label. This method will ensure that it remains on the requested panel.
       * @param  {string} backgroundColor The background color for the label.
       * @param  {string} color			The foreground color for the label. If none provided then white is used, unless the background is white in which case black is used.
       * @param  {boolean} pointed		True to put an arrow above the label
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.createXAxisLabel = function(panel, txt, x, backgroundColor, color, pointed) {
        var context = this.chart.context
        var margin = 2
        var fontstyle = 'stx-float-date' //or stx_xaxis
        var height = this.getCanvasFontSize(fontstyle) + margin * 2
        this.canvasFont(fontstyle, context)
        var width
        try {
          width = context.measureText(txt).width + margin * 2
        } catch (e) {
          width = 0
        } // Firefox doesn't like this in hidden iframe
        var y = panel.top + panel.height - height //-margin;
        if (x + width / 2 < panel.left || x - width / 2 > panel.right) return //hopelessly out of bounds
        if (!pointed) {
          if (x + width / 2 > panel.right) x = panel.right - width / 2
          if (x - width / 2 < panel.left) x = panel.left + width / 2
        }
        context.fillStyle = backgroundColor
        CIQ.roundRect(context, x - width / 2, y, width, height, 3, true, false)
        var arrowHeight = panel.bottom - panel.yAxis.bottom - height
        context.beginPath()
        if (pointed) {
          context.moveTo(x - arrowHeight, y)
          context.lineTo(x, y - arrowHeight - 1)
          context.lineTo(x + arrowHeight, y)
          context.closePath()
          context.fill()
        } else {
          context.moveTo(x, y)
          context.lineTo(x, y - arrowHeight)
          context.strokeStyle = backgroundColor
          context.stroke()
        }
        context.textBaseline = 'top'
        context.fillStyle = color ? color : CIQ.chooseForegroundColor(backgroundColor)
        if (context.fillStyle == backgroundColor) {
          // Best effort to pick a foreground color that isn't the same as the background!
          if (backgroundColor.toUpperCase() == '#FFFFFF') context.fillStyle = '#000000'
          else context.fillStyle = '#FFFFFF'
        }
        context.fillText(txt, x - width / 2 + margin, y + margin)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * Draws a label for the last price <b>in the main chart panel's y-axis<b> using {@link CIQ.ChartEngine#createYAxisLabel}
       *
       * Label style: `stx_current_hr_down` and `stx_current_hr_up`
       *
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias drawCurrentHR
       */
      CIQ.ChartEngine.prototype.drawCurrentHR = function() {
        if (this.runPrepend('drawCurrentHR', arguments)) return
        var backgroundColor, color
        for (var chartName in this.charts) {
          var chart = this.charts[chartName]
          var panel = chart.panel
          var yAxis = panel.yAxis
          if (yAxis.drawCurrentPriceLabel === false) continue
          if (chart.customChart && chart.customChart.chartType == 'none') continue
          var whichSet = yAxis.whichSet
          if (!whichSet) whichSet = 'dataSet'
          var l = chart[whichSet].length,
            cw = this.layout.candleWidth
          if (whichSet == 'dataSegment') {
            //this crazy equation just to find the last bar displaying at least 50% on the screen
            while (l > (chart.width - this.micropixels + cw / 2 + 1) / cw) l--
          }
          if (l && chart[whichSet][l - 1]) {
            var quote = chart[whichSet][l - 1]
            var prevClose = quote.Close,
              currentClose = quote.Close
            if (chart[whichSet].length >= 2) {
              var quote2 = chart[whichSet][l - 2]
              if (quote2) prevClose = quote2.Close
            }
            if (currentClose < prevClose) {
              backgroundColor = this.canvasStyle('stx_current_hr_down').backgroundColor
              color = this.canvasStyle('stx_current_hr_down').color
            } else {
              backgroundColor = this.canvasStyle('stx_current_hr_up').backgroundColor
              color = this.canvasStyle('stx_current_hr_up').color
            }
            if (quote.transform) quote = quote.transform
            var txt
            // If a chart panel, then always display at least the number of decimal places as calculated by masterData (panel.chart.decimalPlaces)
            // but if we are zoomed to high granularity then expand all the way out to the y-axis significant digits (panel.yAxis.printDecimalPlaces)
            var labelDecimalPlaces = Math.max(panel.yAxis.printDecimalPlaces, panel.chart.decimalPlaces)
            //	... and never display more decimal places than the symbol is supposed to be quoting at
            if (yAxis.maxDecimalPlaces || yAxis.maxDecimalPlaces === 0)
              labelDecimalPlaces = Math.min(labelDecimalPlaces, yAxis.maxDecimalPlaces)
            if (yAxis.priceFormatter) {
              txt = yAxis.priceFormatter(this, panel, quote.Close, labelDecimalPlaces)
            } else {
              txt = this.formatYAxisPrice(quote.Close, panel, labelDecimalPlaces)
            }

            var y = this.pixelFromPrice(quote.Close, panel)
            this.createYAxisLabel(panel, txt, y, backgroundColor, color)

            if (this.preferences.currentPriceLine === true && this.isHome()) {
              panel.chart.context.globalCompositeOperation = 'destination-over'
              this.plotLine(panel.left, panel.right, y, y, backgroundColor, 'line', panel.chart.context, panel, {
                pattern: 'dashed',
                lineWidth: 1,
                opacity: 0.8,
              })
              panel.chart.context.globalCompositeOperation = 'source-over'
            }
          }
        }
        this.runAppend('drawCurrentHR', arguments)
      }

      /**
       * <span class="animation">Animation Loop</span>
       * Determines the default color for lines and studies drawn on the screen. This is black unless
       * the background color of the chart has a "value" greater than 65%.
       * The result is that this.defaultColor contains the default color.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.getDefaultColor = function() {
        this.defaultColor = '#000000'
        var bgColor = null
        var div = this.chart.container
        while (!bgColor || CIQ.isTransparent(bgColor)) {
          var cStyle = getComputedStyle(div)
          if (!cStyle) return
          bgColor = cStyle.backgroundColor
          if (CIQ.isTransparent(bgColor)) bgColor = 'transparent'
          div = div.parentNode
          if (!div || !div.tagName) break
        }
        if (bgColor) {
          if (bgColor == 'transparent') bgColor = '#FFFFFF'
          this.containerColor = bgColor
          if (!CIQ.isTransparent(bgColor)) {
            var hsv = CIQ.hsv(bgColor)
            var v = hsv[2]
            if (v > 0.65) this.defaultColor = '#000000'
            else this.defaultColor = '#FFFFFF'
          } else {
            this.defaultColor = '#000000'
          }
        } else {
          this.containerColor = '#FFFFFF'
        }
      }

      /**
       * Charts may require asynchronous data to render. This creates a dilemma for any external
       * process that depends on a fully rendered chart (for instance a process to turn a chart into an image).
       * To solve this problem, external processes can register for a callback which will tell them when the chart
       * has been drawn. See {@link CIQ.ChartEngine.registerChartDrawnCallback}.
       *
       * To accommodate this requirement, studies, plugins or injections that render asynchronously should use startAsyncAction
       * and {@link CIQ.ChartEngine#completeAsyncAction} to inform the chart of their asynchronous activity.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.startAsyncAction = function() {
        if (!this.pendingAsyncs) this.pendingAsyncs = []
        this.pendingAsyncs.push(true)
      }

      /**
       * Registers a callback for when the chart has been drawn
       * @param  {function} fc The function to call
       * @return {object} An object that can be passed in to {@link CIQ.ChartEngine#unregisterChartDrawnCallback}
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.registerChartDrawnCallback = function(fc) {
        if (!this.asyncCallbacks) this.asyncCallbacks = []
        this.asyncCallbacks.push(fc)
        return {
          fc: fc,
        }
      }

      /**
       * Removes a callback registration for when the chart has been drawn
       * @param  {function} fc The function to call
       * @memberOf CIQ.ChartEngine
       * @param  {obj} fc An object from {@link CIQ.ChartEngine#registerDrawnCallback}
       */
      CIQ.ChartEngine.prototype.unregisterChartDrawnCallback = function(obj) {
        for (var i = 0; i < this.asyncCallbacks.length; i++) {
          if (this.asyncCallbacks[i] == obj.fc) {
            this.asyncCallbacks.splice(i, 1)
            return
          }
        }
      }

      /**
       * Makes the async callbacks only if no pending async activity
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.makeAsyncCallbacks = function() {
        if (!this.asyncCallbacks) return // no callbacks to make
        if (!this.pendingAsyncs || !this.pendingAsyncs.length) {
          // If no pending asyncs, or the array is empty (all have been fulfilled)
          for (var i = 0; i < this.asyncCallbacks.length; i++) {
            this.asyncCallbacks[i]()
          }
        }
      }
      /**
       * Studies or plugins that use asynchronous data should call this when their async activities are complete.
       * See {@link CIQ.ChartEngine#startAsyncAction}
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.completeAsyncAction = function() {
        this.pendingAsyncs.pop()
        this.makeAsyncCallbacks()
      }
      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * This is the main rendering function in the animation loop. It draws the chart including panels, axis, and drawings.
       * This method is called continually as a user pans or zooms the chart.
       * This would be a typical place to put an injection to add behavior to the chart after a drawing operation is complete.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.draw = function() {
        this.debug()
        if (!this.chart.canvas) return
        if (!this.chart.dataSet) return
        if (!this.chart.canvasHeight) return
        //if(!this.useAnimation && new Date()-this.grossDragging<500) return;

        this.offset = (this.layout.candleWidth * this.candleWidthPercent) / 2
        CIQ.clearCanvas(this.chart.canvas, this)
        if (!this.masterData.length) return
        if (this.runPrepend('draw', arguments)) return
        this.getDefaultColor() //TODO, don't call this in draw() but instead manually when background color is changed?
        this.vectorsShowing = false

        this.drawPanels()
        this.yAxisLabels = []
        var i, chart, chartName, plugin
        for (chartName in this.charts) {
          chart = this.charts[chartName]
          this.correctIfOffEdge()
          this.createDataSegment()
          var axisRepresentation = this.createXAxis(chart)
          this.initializeDisplay(chart)
          this.rendererAction(chart, 'calculate')
          this.renderYAxis(chart)
          this.drawXAxis(chart, axisRepresentation)

          /// Calculate tmpWidth which represents the amount of width that the candle takes, slightly less than candleWidth
          chart.tmpWidth = Math.floor(this.layout.candleWidth * this.candleWidthPercent) // So we don't need to compute it a thousand times for every candle
          if (chart.tmpWidth % 2 === 0) {
            // assure that candles are always odd number of pixels wide
            chart.tmpWidth += 1
            if (chart.tmpWidth > this.layout.candleWidth)
              // If there isn't space then reduce further
              chart.tmpWidth -= 2
          }
          if (chart.tmpWidth < 0.5) chart.tmpWidth = 0.5

          for (i in this.plugins) {
            plugin = this.plugins[i]
            if (plugin.display) {
              if (plugin.drawUnder) plugin.drawUnder(this, chart)
            }
          }
          this.rendererAction(chart, 'yaxis')
          this.rendererAction(chart, 'underlay')
          if (CIQ.Studies) CIQ.Studies.displayStudies(this, chart, true)
          this.displayChart(chart)
          if (CIQ.Studies) CIQ.Studies.displayStudies(this, chart, false)
          this.rendererAction(chart, 'overlay')
        }

        for (chartName in this.charts) {
          chart = this.charts[chartName]
          for (i in this.plugins) {
            plugin = this.plugins[i]
            if (plugin.display) {
              if (plugin.drawOver) plugin.drawOver(this, chart)
            }
          }
        }

        // Do this after all the drawing has taken place. That way the y-axis text sits on top of anything that
        // has been drawn underneath. For instance, if panel.yaxisCalculatedPaddingRight>0 and the y-axis sits on top of the chart
        for (var panel in this.panels) {
          if (!this.panels[panel].hidden) this.plotYAxisText(this.panels[panel])
        }
        for (var yLbl = 0; yLbl < this.yAxisLabels.length; yLbl++) {
          this.createYAxisLabel.apply(this, this.yAxisLabels[yLbl].args)
        }
        this.createCrosshairs() //todo, move out of animation loop
        this.drawVectors()
        this.drawCurrentHR()
        this.displayInitialized = true
        if (this.controls.home) {
          this.controls.home.style.display = this.isHome() ? 'none' : 'block'
        }
        this.positionMarkers()
        for (chartName in this.charts) {
          chart = this.charts[chartName]
          if (this.quoteDriver) this.quoteDriver.checkLoadMore(chart)
        }
        this.runAppend('draw', arguments)
        this.makeAsyncCallbacks()
      }

      /**
       * This method adjusts the canvas for the current backing store. The backing store is used on "retina" style devices
       * to indicate the ratio of actual screen pixels to web pixels. The canvas is adjusted according to this ratio so that
       * pixels appear at the expected size and aren't fuzzy. Note that backing store is sometimes also employed by browsers
       * to effect changes in the size of the view.
       * @private
       * @param  {Canvas} canvas	An HTML5 canvas
       * @param  {external:CanvasRenderingContext2D} context An HTML5 canvas context
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.adjustBackingStore = function(canvas, context) {
        this.devicePixelRatio = window.devicePixelRatio || 1
        //note, let's ignore DPR<1, it is not consistently implemented on all browsers between retina and nonretina displays
        if (this.devicePixelRatio < 1.0) this.devicePixelRatio = 1.0
        var backingStoreRatio =
          context.webkitBackingStorePixelRatio ||
          context.mozBackingStorePixelRatio ||
          context.msBackingStorePixelRatio ||
          context.oBackingStorePixelRatio ||
          context.backingStorePixelRatio ||
          1

        var ratio = this.devicePixelRatio / backingStoreRatio

        if (!CIQ.isAndroid || CIQ.is_chrome) {
          var oldWidth = canvas.width
          var oldHeight = canvas.height

          canvas.width = oldWidth * ratio
          canvas.height = oldHeight * ratio

          canvas.style.width = oldWidth + 'px'
          canvas.style.height = oldHeight + 'px'

          context.scale(ratio, ratio)
          this.adjustedDisplayPixelRatio = ratio
        }
      }

      /**
       * This method resizes the canvas to the dimensions of the containing div. This is called primarily
       * by {@link CIQ.ChartEngine#resizeChart} and also when the chart is initialized (via newChart).
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.resizeCanvas = function() {
        if (!this.chart.panel) this.chart.panel = this.panels.chart
        var canvas = this.chart.canvas
        var context = this.chart.context
        if (canvas && context) {
          this.chart.tempCanvas.height = canvas.height = this.chart.container.clientHeight
          this.chart.tempCanvas.width = canvas.width = this.chart.container.clientWidth
          this.adjustBackingStore(canvas, context)
          this.adjustBackingStore(this.chart.tempCanvas, this.chart.tempCanvas.context)

          this.floatCanvas.height = this.chart.container.clientHeight
          this.floatCanvas.width = this.chart.container.clientWidth
          this.adjustBackingStore(this.floatCanvas, this.floatCanvas.context)
        }
        var rect = this.container.getBoundingClientRect()
        this.top = rect.top
        this.left = rect.left
        this.canvasWidth = this.chart.canvasWidth = this.chart.container.clientWidth
        this.right = this.left + this.canvasWidth
        this.height = this.chart.container.clientHeight
        this.width = this.right - this.left
        if (this.width === 0 && !this.container.dimensionlessCanvas) {
          console.log('warning: zero width chart. Check CSS for chart container.')
        }
        this.bottom = this.top + this.height
        this.calculateYAxisPositions()
        this.chart.canvasRight = this.right
        this.chart.canvasHeight = this.height
        var candleWidth = this.layout.candleWidth
        if (typeof candleWidth == 'undefined') candleWidth = 8
        for (var chartName in this.charts) {
          var chart = this.charts[chartName]
          if (this.layout.span) {
            this.setCandleWidth(this.getSpanCandleWidth(this.layout.span), chart)
          } else {
            this.setCandleWidth(candleWidth, chart)
            if (chart.scroll < chart.width / candleWidth) {
              chart.scroll = Math.floor(chart.width / candleWidth)
              var wsInTicks = Math.round(this.preferences.whitespace / this.layout.candleWidth)
              chart.scroll -= wsInTicks
            }
          }
          var idealNumberOfTicks = 10
          var appxLabelWidth
          try {
            appxLabelWidth = context.measureText('10:00').width * 2
          } catch (e) {
            appxLabelWidth = 100
          }
          while (idealNumberOfTicks > 1) {
            if (this.chart.width / appxLabelWidth > idealNumberOfTicks) break
            idealNumberOfTicks /= 1.5
          }
          chart.xAxis.autoComputedTickSizePixels = Math.round(this.chart.width / idealNumberOfTicks)
          if (chart.xAxis.autoComputedTickSizePixels < 1) chart.xAxis.autoComputedTickSizePixels = 1
        }
      }

      /**
	 * Sets the candleWidth for the chart. The candleWidth represents the number of horizontal pixels from the start
	 * of one bar or candle to the start of the next. This also applies to line charts. It is effectively, the horizontal zoom.
	 * The candleWidth can be read from layout.candleWidth.
	 *
	 * **Note**: if calling `setCandleWidth()` before `newChart()`, with a value less than `minimumCandleWidth`, `newChart()` will reset the candle size to the default candle size (8 pixels).
	 *
	 * @param {number} newCandleWidth The new candle width. If less than or equal to 0, it will be reset to 8
	 * @param {CIQ.ChartEngine.Chart} [chart]	Which chart to set the candleWidth. Defaults to the default chart.
	 * @memberOf CIQ.ChartEngine
	 * @example
	 * stxx.setCandleWidth(10);
	 * stxx.home();	// home() is preferred over draw() in this case to ensure the chart is properly aligned to the right most edge.

	 */
      CIQ.ChartEngine.prototype.setCandleWidth = function(newCandleWidth, chart) {
        if (!chart) chart = this.chart
        if (newCandleWidth < this.minimumCandleWidth) newCandleWidth = this.minimumCandleWidth
        this.layout.candleWidth = newCandleWidth
        //chart.maxTicks=Math.ceil(this.chart.width/newCandleWidth+0.5); // we add half of a candle back in because lines and mountains only draw to the middle of the bar
        chart.maxTicks = Math.round(this.chart.width / newCandleWidth) + 1
      }

      /**
       * Resizes the chart and adjusts the panels. The chart is resized to the size of the container div by calling
       * {@link CIQ.ChartEngine#resizeCanvas}. This method is called automatically if a screen resize event occcurs. The charting
       * engine also attempts to detect size changes whenever the mouse is moved. Ideally, if you know the chart is being
       * resized, perhaps because of a dynamic change to the layout of your screen, you should call this method manually.
       * @param {Boolean} [dontMaintainScroll=true] By default the scroll position will remain pegged on the right side of the chart. Set this to false to override.
       * @memberOf CIQ.ChartEngine
       * @since  2015-11-1 resizeChart now automatically retains scroll position
       * @since  09-2016-19 resizeChart now also manages the resizing of the crosshairs.
       */
      CIQ.ChartEngine.prototype.resizeChart = function(maintainScroll) {
        if (this.runPrepend('resizeChart', arguments)) return
        if (maintainScroll !== false) maintainScroll = true
        if (maintainScroll) this.preAdjustScroll()
        var previousHeight = this.chart.canvasHeight
        this.resizeCanvas()
        if (maintainScroll) this.postAdjustScroll()
        if (this.displayInitialized) {
          this.adjustPanelPositions()
          this.draw()
          // This second case occurs if a chart was initialized hidden but now
          // has suddenly been revealed. displayInitialized hadn't been set yet
          // because draw() has never been completed
        } else if (this.chart.canvasHeight !== 0 && previousHeight === 0) {
          this.adjustPanelPositions()
          this.draw()
        }

        //redraw the crosshairs to adjust to the new size of the screen.
        this.doDisplayCrosshairs()
        this.updateChartAccessories()

        this.runAppend('resizeChart', arguments)
      }

      /**
	 * Renders a chart for a particular instrument from the data passed in or fetches new data from the attached {@link CIQ.QuoteFeed}.
	 * This is the method that should be called every time a new chart needs to be drawn for a different instrument.
	 *
	 * Note that before using this method you must first instantiate the chart and assign it to a DOM container using [`stxx=new CIQ.ChartEngine({container: $$("chartContainer")});`]{@link CIQ.ChartEngine}
	 *
	 * @param  {string/Object}		symbol			The symbol for the new chart - a symbol string or an object representing the symbol can be used. After the new chart is initialized, it will contain both a symbol string (stxx.chart.symbol) and a symbol object (stxx.chart.symbolObject). You can send anything you want in the symbol object, but you must always include at least a 'symbol' element. Both these variables will be available for use wherever the {@link CIQ.ChartEngine.Chart} object is present. For example, if using the [fetch()]{@link CIQ.QuoteFeed#fetch} method for gathering data, params.stx.chart.symbolObject will contain your symbol object.
	 * @param  {array}				[masterData]	An array of [properly formated OHLC objects](index.html#data-format) to create a chart. Each element should at a minimum contain a "Close" field (capitalized).
	 *												If the charting engine has been configured to use a QuoteFeed (@link CIQ.ChartEngine#attachQuoteFeed)
	 *												then masterData does not need to be passed in. The quote feed will be queried instead.
	 * @param  {CIQ.ChartEngine.Chart}		[chart]			Which chart to create. Defaults to the default chart.
	 * @param {Function}			[cb]			Optional callback when newChart is loaded.
	 * @param {Object} [params] Parameters to dictate initial rendering behavior
	 * @param {Object}	[params.span]			Default span to display upon inital rendering. See {@link CIQ.ChartEngine#setSpan}
	 * @param {number} params.span.multiplier   Number of spans to show as required by {@link CIQ.ChartEngine#setSpan}. To show 3 weeks of data, for example, set this to 3 and `params.span` to 'week'.
	 * @param {string} params.span.base The base span to show as required by {@link CIQ.ChartEngine#setSpan}. "minute","hour","day","week","month","year","all", "ytd" or "today". ** These spans are market hours sensitive **, so if you ask for 1 hour, for example, at the time the markets are close, the span will find the last time the markets where open for the active symbol, and include the last market hour in the span. It will also exclude days when the market is closed. This span will be combined with the multiplier. Example 2 days, 4 months. Please note that "all" will attempt to load all of the data the quotefeed has available for that symbol. Use this span with caution.
	 * @param {Object}	[params.periodicity]			Default periodicity to be used upon inital rendering. See {@link CIQ.ChartEngine#setPeriodicityV2}
	 * @param {Number} [params.periodicity.period] `period` as required by {@link CIQ.ChartEngine#setPeriodicityV2}
	 * @param {string} [params.periodicity.interval] `interval` as required by {@link CIQ.ChartEngine#setPeriodicityV2}
	 * @param {string} [params.periodicity.timeUnit] `timeUnit` as required by {@link CIQ.ChartEngine#setPeriodicityV2}
	 * @param {boolean} [params.stretchToFillScreen] Increase the candleWidth to fill the left-side gap created by a small dataSet. Respects {@link CIQ.ChartEngine#preferences.whitespace}. Ignored when params.span is used.
	 * @memberOf CIQ.ChartEngine
	 * @example
	 	// using a symbol object and embedded span and periodicity requirements
	 	stxx.newChart(
		 	{symbol:newSymbol,other:'stuff'},
		 	null,
		 	null,
		 	callbackFunction(stxx.chart.symbol, newSymbol),
		 	{
		 		span:{base:'day',multiplier:2},
		 		periodicity:{period:1,interval:5},
		 		stretchToFillScreen:true
		 	}
	 	);
	 * @example
	 	// using a symbol string
	 	stxx.newChart(
		 	"IBM",
		 	null,
		 	null,
		 	callbackFunction(stxx.chart.symbol, newSymbol)
	 	);
	 *
	 * @since
	 * <br> 2015-11-1 newChart is capable of setting periodicity and span via `params` settings
	 * <br> 04-2016-08 `params.stretchToFillScreen` is available
	 */
      CIQ.ChartEngine.prototype.newChart = function(symbol, masterData, chart, cb, params) {
        //if (!symbol) return; // can't build a chart without a symbol
        if (!chart) chart = this.chart

        if (!params) params = {}

        var layout = this.layout,
          periodicity = params.periodicity
        if (periodicity) {
          if (periodicity.interval) layout.interval = periodicity.interval
          if (periodicity.period) layout.periodicity = periodicity.period
          if (periodicity.periodicity) layout.periodicity = periodicity.periodicity
          layout.timeUnit = periodicity.timeUnit
        }

        var prevSymbol = chart.symbol
        var prevSymbolObject = CIQ.clone(chart.symbolObject)
        var prevMarket = chart.market
        var prevDataSet = chart.dataSet
        var prevMoreAvailable = chart.moreAvailable
        chart.dataSet = []
        chart.moreAvailable = true
        if (!symbol) {
          chart.symbol = null
          chart.symbolObject = { symbol: null }
        } else if (typeof symbol == 'object') {
          // an object was sent in, so initialize the string from the object
          chart.symbol = symbol.symbol
          chart.symbolObject = symbol
        } else {
          // a string was sent in so initaialize the object from the string
          chart.symbol = symbol
          chart.symbolObject.symbol = symbol
        }

        if (this.marketFactory) {
          var marketDef = this.marketFactory(chart.symbolObject)
          this.setMarket(marketDef, chart)
        }

        var self = this
        if (!masterData && this.quoteDriver) {
          var callback = function(err) {
            if (err && err != 'orphaned') {
              // orphaned means that another newChart request came in, overriding this one
              chart.symbol = prevSymbol // revert the symbol back to what it was if there is an error
              chart.symbolObject = prevSymbolObject // revert the symbol objectback to what it was if there is an error
              chart.market = prevMarket
              chart.dataSet = prevDataSet
              chart.moreAvailable = prevMoreAvailable
            }
            if (!self.currentlyImporting)
              self.dispatch('symbolChange', {
                stx: self,
                symbol: self.chart.symbol,
                symbolObject: self.chart.symbolObject,
                action: 'master',
              })
            if (cb) cb(err)
          }

          var setSpan = params.span
          if (!setSpan && layout) setSpan = layout.setSpan
          if (setSpan && setSpan.base) {
            var multiplier = setSpan.multiplier || 1
            // force a new chart to be initialized and new data fetched before calling setSpan to conform with the expectations and purpose of newChart,
            // and not use existing data and symbol names.
            this.chart.masterData = null
            this.displayInitialized = false
            // periodicity will be kept if sent as a parameter.
            this.setSpan(
              {
                maintainPeriodicity: periodicity ? true : false,
                multiplier: multiplier,
                base: setSpan.base,
                symbol: chart.symbol,
                forceLoad: true,
              },
              callback,
            )
          } else {
            this.quoteDriver.newChart(
              { symbol: chart.symbol, symbolObject: chart.symbolObject, chart: chart, initializeChart: true },
              function(err) {
                if (!err) {
                  self.adjustPanelPositions() // to ensure holders are adjusted for current yaxis height
                  self.quoteDriver.updateSubscriptions()
                  if (params.stretchToFillScreen) {
                    self.fillScreen()
                  }
                }
                callback.apply(self, arguments)
              },
            )
          }
        } else {
          if (!masterData) {
            console.log('Warning: No masterData specified and no QuoteFeed configured')
          }
          if (!chart.symbol) chart.symbol = '' // if we are ready to draw but the symbol is mising, it will crash
          this.setMasterData(masterData, chart)
          this.createDataSet()
          this.initializeChart()
          var span = params.span
          if (span && span.multiplier && span.base) {
            this.setSpan({ maintainPeriodicity: true, multiplier: span.multiplier, base: span.base })
          } else if (params.stretchToFillScreen) {
            this.fillScreen()
          } else if (masterData.length) {
            this.draw()
          } else {
            this.clear()
          }
          this.adjustPanelPositions() // to ensure holders are adjusted for current yaxis height
          if (cb) cb()
        }
      }

      CIQ.ChartEngine.prototype.clear = function() {
        this.displayInitialized = false

        for (var id in this.layout.studies) {
          var sd = this.layout.studies[id]
          CIQ.Studies.removeStudy(this, this.layout.studies[id])
        }

        this.controls.chartControls.style.display = 'none'
      }

      /**
       * Adjusts the candleWidth to fill a left-side gap on the chart.
       * @private
       */
      CIQ.ChartEngine.prototype.fillScreen = function() {
        var chart = this.chart
        var candleWidth = this.layout.candleWidth
        var chartWidth = chart.width - this.preferences.whitespace
        var count = chart.dataSet.length

        if (count * candleWidth >= chartWidth) {
          this.draw()
          return
        }

        var newCandleWidth = chartWidth / count
        this.setCandleWidth(newCandleWidth, chart)
        this.home({ maintainWhitespace: true })
      }

      /**
       * Sets the master data for the chart. A dataSet is derived from the master data by {@link CIQ.ChartEngine#createDataSet}.
       *
       * If a [marketFactory]{@link CIQ.ChartEngine#setMarketFactory} has been linked to the chart, this method will also update the market on the chart to match the newly loaded instrument.
       * When no factory is present, the chart assumes that the market will never change and will continue to use market initially set using {@link CIQ.ChartEngine#setMarket}.
       * If none set, then the chart will operate in 24x7 mode.
       *
       * This method also calculates the number of decimal places for the security by checking the maximum number
       * in the data. This is stored in chart.decimalPlaces.
       *
       * @param	{array}				masterData		An array of quotes. Each quote should at a minimum contain a "Close" field (capitalized) and a Date field which is a string form of the date.
       *												This method will set DT to be a JavaScript Date object derived from the string form.
       * @param	{CIQ.ChartEngine.Chart}	[chart]			The chart to put the masterData. Defaults to the default chart.
       * @memberOf CIQ.ChartEngine
       * @since 2016-03-11 - you can now define {@link CIQ.ChartEngine#transformMasterDataQuote} to format each masterData element before inserting it into the chart.
       */
      CIQ.ChartEngine.prototype.setMasterData = function(masterData, chart) {
        if (!chart) chart = this.chart

        if (this.marketFactory) {
          var marketDef = this.marketFactory(chart.symbolObject)
          this.setMarket(marketDef, chart)
        }

        chart.masterData = masterData
        if (chart.name == 'chart') this.masterData = masterData
        //chart.decimalPlaces=2;
        var i
        for (i = 0; masterData && i < masterData.length; i++) {
          if (this.transformMasterDataQuote) masterData[i] = this.transformMasterDataQuote(masterData[i])
          var quotes = masterData[i]
          if (quotes.DT) {
            quotes.DT = new Date(quotes.DT)
            quotes.Date = CIQ.yyyymmddhhmmssmmm(quotes.DT)
          } else if (quotes.Date) quotes.DT = CIQ.strToDateTime(quotes.Date)
          else console.log('setMasterData : Missing DT and Date on masterData object')
          if (quotes.Volume && typeof quotes.Volume !== 'number') quotes.Volume = parseInt(quotes.Volume, 10)
          if (typeof quotes.Close != 'number' && !quotes.Close && quotes.Close !== null) {
            console.log(
              'setMasterData : Close is missing or not a number. Use parseFloat() if your data server provides strings. MasterData Index= ' +
                i +
                ' Value = ' +
                quotes.Close,
            )
          }
          //if (typeof quotes.High != 'number') console.log ('setMasterData : High is not a number. Use parseFloat() if your data server provides strings ' + quotes.High);
          //if (typeof quotes.Low != 'number') console.log ('setMasterData : Low is not a number. Use parseFloat() if your data server provides strings ' + quotes.Low);
          //if (typeof quotes.Open != 'number') console.log ('setMasterData : Open is not a number. Use parseFloat() if your data server provides strings ' + quotes.Open);
          if (quotes.High === null) delete quotes.High
          if (quotes.Low === null) delete quotes.Low
          if (quotes.Open === null) delete quotes.Open
        }
        chart.decimalPlaces = this.callbacks.calculateTradingDecimalPlaces({
          stx: this,
          chart: chart,
          symbol: chart.symbolObject.symbol,
          symbolObject: chart.symbolObject,
        })

        if (!CIQ.ChartEngine.isDailyInterval(this.layout.interval)) this.setDisplayDates(masterData)
        this.chart.roundit = Math.pow(10, chart.decimalPlaces)
        for (i in this.plugins) {
          var plugin = this.plugins[i]
          if (plugin.display) {
            if (plugin.setMasterData) plugin.setMasterData(this, chart)
          }
        }
        // TODO, this code can probably be removed
        for (var s in this.chart.series) {
          var series = this.chart.series[s]
          if (series.addSeriesData) {
            series.addSeriesData(this)
          }
        }
      }

      /**
       * Returns an array of all symbols currently required by the chart.
       * The returned array contains an object for each symbol containing:
       * symbol, symbolObject, interval, periodicity
       * @return {Array} The array of symbol objects required
       * @since  2016-03-11
       */
      CIQ.ChartEngine.prototype.getSymbols = function() {
        var a = [],
          obj,
          layout = this.layout
        function makeObj(symbol, symbolObject, layout) {
          return {
            symbol: symbol,
            symbolObject: symbolObject,
            periodicity: layout.periodicity,
            interval: layout.interval,
            timeUnit: layout.timeUnit,
            setSpan: layout.setSpan,
          }
        }
        for (var chartName in this.charts) {
          var chart = this.charts[chartName]
          a.push(makeObj(chart.symbol, chart.symbolObject, layout))
          for (var field in chart.series) {
            var series = chart.series[field],
              parameters = series.parameters
            if (parameters.data && !parameters.data.useDefaultQuoteFeed) continue // legacy
            obj = makeObj(field, series.symbolObject, layout)
            if (arguments[0] === 'include-parameters') obj.parameters = parameters
            if (!obj.symbolObject) {
              obj.symbolObject = parameters.symbolObject || { symbol: field }
            }
            a.push(obj)
          }
        }
        for (var p in this.panels) {
          if (this.panels[p].studyQuotes) {
            for (var sq in this.panels[p].studyQuotes) {
              obj = makeObj(sq, { symbol: sq }, layout)
              a.push(obj)
            }
          }
        }
        for (var s = a.length - 1; s >= 0; s--) {
          var symbol = a[s].symbol
          if (this.isEquationChart(symbol)) {
            var res = CIQ.formatEquation(symbol)
            if (res) {
              for (var sym = 0; sym < res.symbols.length; sym++) {
                obj = makeObj(res.symbols[sym], a[s].symbolObject, a[s])
                a.push(obj)
              }
              a.splice(s, 1)
            }
          }
        }
        return a
      }

      /**
       * Sets the displayDate for the data element in masterData. The displayDate is the timezone adjusted date.
       * @param {object} quote The quote element to check
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setDisplayDate = function(quote) {
        var dt = quote.DT
        var milli = dt.getSeconds() * 1000 + dt.getMilliseconds()
        var newDT
        if (this.dataZone) {
          newDT = new timezoneJS.Date(
            dt.getFullYear(),
            dt.getMonth(),
            dt.getDate(),
            dt.getHours(),
            dt.getMinutes(),
            this.dataZone,
          )
          dt = new Date(newDT.getTime() + milli)
        }
        if (this.displayZone) {
          newDT = new timezoneJS.Date(dt.getTime(), this.displayZone)
          dt = new Date(newDT.getFullYear(), newDT.getMonth(), newDT.getDate(), newDT.getHours(), newDT.getMinutes())
          dt = new Date(dt.getTime() + milli)
        }
        quote.displayDate = dt
      }

      /**
       * Calls {@link CIQ.ChartEngine#setDisplayDate} for each element in masterData
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setDisplayDates = function(masterData) {
        if (!masterData) return
        for (var i = 0; i < masterData.length; i++) {
          var quote = masterData[i]
          if (quote.DT) this.setDisplayDate(quote)
        }
      }

      /**
       * Use this method to stream "last sale" prices into the chart. (See {@link CIQ.ChartEngine.appendMasterData} for streaming OHLC data into the chart).
       * This method is designed to append ticks to the master data while maintaining the existing periodicity, appending to the last tick or creating new ticks as needed.
       * It will also fill in gaps if there are missing bars in a particular interval.
       * If a trade has a date older than the begining of the next bar, the last bar will be updated even if the trade belongs to a prior bar; this could happen if a trade is sent in after hours at a time when the market is closed, or if it is received out of order.
       * When in 'tick' interval, each trade will be added to a new bar and no aggregation to previous bars will be done.
       * If the optional timestamp [now] is sent in, and it is older than the next period to be rendered, the last tick on the dataset will be updated instead of creating a new tick.
       *
       * ** It is crucial that you ensure the date/time of the trade is in line with your `masterData` and `dataZone` ** See `now` parameter for more details.
       *
       * This method leverages {@link CIQ.ChartEngine.appendMasterData} for the actual data inserion into masterData. Please see  {@link CIQ.ChartEngine.appendMasterData} for additional details and performance throttle setings.
       *
       * **Note: ** versions prior to 15-07-01 must use the legacy arguments : streamTrade(price, volume, now, symbol)
       *
       * @param  {object}		data			Price & Volume Data, may include any or all of the following:
       * @param  {number}		data.last 		Last sale price
       * @param  {number}		[data.volume] 	Trade volume
       * @param  {number}		[data.bid] 		Bid price
       * @param  {number}		[data.ask] 		Offer/Ask price
       * @param  {Date}		[now]			optional argument to specify date of trade. It must be a java script date [new Date().getTime()]. **If omitted, defaults to "right now" in the set `dataZone`** (see {@link CIQ.ChartEngine#setTimeZone}); or if no `dataZone` is set, it will default to the browser's timezone (not recommended for international client-base since different users will see different times). It is important to note that this value must be in the same timezone as the rest of the masterData already sent into the charting engine to prevent tick gaps or overlaps.
       * @param  {string}		[symbol]		trade symbol for series streaming
       * @param {Object} 		[params] 		Optional params to be passed to {@link CIQ.ChartEngine#appendMasterData}
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.streamTrade = function(priceData, now, symbol, params) {
        var chart = this.chart
        if (!params) params = {}
        if (params.chart) chart = params.chart
        var price = null,
          bid = null,
          ask = null,
          volume = 0

        if (typeof priceData == 'object') {
          price = priceData.last
          bid = priceData.bid
          ask = priceData.ask
          volume = priceData.volume
          if (now && typeof now != 'undefined') now = new Date(now)
        } else {
          price = arguments[0]
          volume = arguments[1]
          if (now && typeof now != 'undefined') now = new Date(arguments[2])
          symbol = arguments[3]
        }

        var md = chart.masterData

        if (!now || now == 'Invalid Date') {
          // if no date is sent in, use the current time and adjust to the dataZone
          now = this.convertToDataZone(new Date())
        }

        var quote
        if (!md || !md.length) {
          //if this is the first thing we are adding to the chart, create a basic element to add to.
          // just date in case we are ony adding series elements.
          md = []
          md.push({
            Date: STX.yyyymmddhhmmssmmm(now),
            DT: now,
          })
        }

        if (this.layout.interval == 'tick') {
          // clone the last item in master data since we will be changing it and resending as the object to append
          quote = CIQ.clone(md[md.length - 1])
          if (now <= md[md.length - 1].DT) {
            // not new, update the last tick.
            if (symbol) {
              if (price || price === 0) {
                quote[symbol] = price
              }
            } else {
              if (price || price === 0) {
                quote.Close = price
                if (price > quote.High || quote.High === null) quote.High = price
                if (price < quote.Low || quote.Low === null) quote.Low = price
                if (quote.Open === null) quote.Open = price //this could happen if we advance on a comparison symbol
              }
              if (volume) quote.Volume += volume
              if (bid || bid === 0) quote.Bid = bid
              if (ask || ask === 0) quote.Ask = ask

              if (typeof quote.Adj_Close != 'undefined') {
                // if there is an adjusted close on the candle, then we need to reset of bad things will happen.
                quote.Adj_Close = quote.Close
              }
            }
          } else {
            // new tick, add one.
            if (symbol) {
              // If we advance forward on a symbol that is not the main symbol (a comparison series)
              // Then we need to temporarily advance the main series, but wait for the first tick which
              // will be the Open. So we take the previous close and move it forward
              quote['Date'] = STX.yyyymmddhhmmssmmm(now)
              quote['DT'] = now
              quote['Volume'] = 0
              if (price || price === 0) {
                quote[symbol] = price
              }
            } else {
              quote = {
                Date: CIQ.yyyymmddhhmmssmmm(now),
                DT: now,
                Open: price,
                Close: price,
                High: price,
                Low: price,
                Volume: volume,
                Bid: bid,
                Ask: ask,
              }
            }
          }
          this.appendMasterData([quote], chart, params)
        } else {
          // clone the last item in master data since we will be changing it and resending as the object to append
          quote = CIQ.clone(md[md.length - 1])

          // We use a 24 hour market because we don't want our ticks to artificially stop
          // at the end of a market session. If we get extended hours, or bad ticks we still
          // want to print them on the chart. Trust the data.
          var market24 = new CIQ.Market({})
          var iter_parms = {
            begin: quote.DT,
            interval: this.layout.interval,
            periodicity: 1,
            timeUnit: this.layout.timeUnit,
            inZone: this.dataZone,
            outZone: this.dataZone,
          }
          var iter = market24.newIterator(iter_parms)
          var next = iter.next()
          if (now < next) {
            // update current tick
            // series needs to be updated when symbol is passed
            if (symbol) {
              if (price || price === 0) {
                quote[symbol] = price
              }
            } else {
              if (price || price === 0) {
                quote.Close = price
                if (price > quote.High || quote.High === null) quote.High = price
                if (price < quote.Low || quote.Low === null) quote.Low = price
                if (quote.Open === null) quote.Open = price //this could happen if we advance on a comparison symbol
              }
              if (volume) quote.Volume += volume
              if (bid || bid === 0) quote.Bid = bid
              if (ask || ask === 0) quote.Ask = ask

              if (typeof quote.Adj_Close != 'undefined') {
                // if there is an adjusted close on the candle, then we need to reset of bad things will happen.
                quote.Adj_Close = quote.Close
              }
            }

            this.appendMasterData([quote], chart, params)
          } else {
            // create new tick
            var gaps = []

            // Set now to an even boundary (it is likely a few milliseconds into the interval)
            var iter2_parms = {
              begin: now,
              interval: this.layout.interval,
              periodicity: 1,
              timeUnit: this.layout.timeUnit,
              inZone: this.dataZone,
              outZone: this.dataZone,
            }
            var iter2 = market24.newIterator(iter2_parms)
            iter2.next()
            now = iter2.previous()

            while (next < now) {
              if (this.streamParameters.fillGaps) {
                var gap = {
                  Date: CIQ.yyyymmddhhmmssmmm(next),
                  DT: next,
                  Close: quote.Close,
                  Open: quote.Close,
                  High: quote.Close,
                  Low: quote.Close,
                  Volume: 0,
                  Bid: quote.Bid,
                  Ask: quote.Ask,
                }
                gaps.push(gap)
                if (gaps.length > 10000) {
                  console.log(
                    'StreamTrade: Too many gaps. Reached maximum ',
                    gaps.length,
                    ' at ',
                    gap.Date,
                    '. No more will be added',
                  )
                  break
                }
              }
              next = iter.next()
            }

            if (symbol) {
              // If we advance forward on a symbol that is not the main symbol (a comparison series)
              // Then we need to temporarily advance the main series, but wait for the first tick which
              // will be the Open. So we take the previous close and move it forward
              quote['Date'] = STX.yyyymmddhhmmssmmm(now)
              quote['DT'] = now
              quote['Volume'] = 0
              if (price || price === 0) {
                quote[symbol] = price
              }
            } else {
              quote = {
                Date: CIQ.yyyymmddhhmmssmmm(next),
                DT: next,
                Open: price,
                Close: price,
                High: price,
                Low: price,
                Volume: volume,
                Bid: bid,
                Ask: ask,
              }
            }
            gaps.push(quote)
            this.appendMasterData(gaps, chart, params)
          }
        }
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Use this method to stream OHLC data into a chart. An array of quotes should be passed in (even if only appending a single quote).
       * The quotes should be in the same form as taken by {@link CIQ.ChartEngine#setMasterData}.
       * The method can appended new elements to the end of the master Data or replace existing elements. It will **NOT** insert new elements in the middle.
       * This is driven by the date of the first element on the appendQuotes array.
       * If newer than the last master Data element, the list will be appended to the end of master Data.
       * Otherwise it will systematically replace each element on the masterData with the new elements (**NOT** filling in the date gap by pusing existng masterData elements forward, but actually replacing the existing elements) , beginning at the first matching date,
       * and will continue this process even if new elements are required to be append at the end of the	master Data to exhaust the submitted list.
       *
       * Dates in the appendQuotes array **must maintain the correct periodicity and order** (older to newer) to prevent out of sequence ticks.
       * If your wish is to augment your existing historical data with tick by tick trade data,
       * even though your periodicity is not set to 'tick', you must do this using {@link CIQ.ChartEngine#streamTrade} instead.
       * StreamTrade will take each tick received by your streaming feed and properly update the last bar or create a new one as needed, ensuring the set periodicity is maintained.
       *
       * To maintain system performance you can throttle inbound ticks. See {@link CIQ.ChartEngine#streamParameters } and [Streaming tutorial](tutorial-Data%20Loading.html#Streaming) for more details.
       * It is important to note that although the data will always be added to masterData, `createDataSet()` and `draw()` will **not** be called if data is received quicker than the throttle (governor) wait periods. As such, you will not see any changes until the throttle wait periods are met.
       *
       * Note: this method is not intended to be used as a way to load initial chart data, update individual comparison symbols, or data changes triggered by periodicity changes.
       * See {@tutorial Data Loading} for more detail on how to load initial data.
       * See {@link CIQ.ChartEngine#streamTrade} for more details on how to stream comparison symbols.
       *
       *
       * @param  {array}			appendQuotes		An array of properly formatted OHLC quote objects to append. [See Data Format](index.html#data-format)
       * @param  {CIQ.ChartEngine.Chart}			[chart]				The chart to append the quotes. Defaults to the default chart.
       * @param {Object} [params] Parameters to dictate behavior
       * @param {boolean} [params.noCreateDataSet] If true then do not create the data set automatically, just add the data to the masterData
       * @param {boolean} [params.allowReplaceOHL] Set to true to bypass internal logic that maintains OHL
       * @param {boolean} 			[params.bypassGovernor] If true then masterdata will be immediatelly updated regardless of {@link CIQ.ChartEngine#streamParameters}
       * @memberOf CIQ.ChartEngine
       * @since
       * <br>2015-11-1 params.bypassGovernor added, allowReplaceOHL added
       * <br>2015-11-1 params.force deprecated. Every call will update the tick to maintain the proper volume and createDataSet is now controlled by sp.maxTicks, sp.timout or params.bypassGovernor
       */
      CIQ.ChartEngine.prototype.appendMasterData = function(appendQuotes, chart, params) {
        /* no longer support force -- now controlled by sp.maxTicks, sp.timout or params.bypassGovernor
		if(typeof params!="object"){ // backward compatibility when 3rd argument was boolean for force
			params={
				force: params
			};
		}
		*/
        if (!params) params = {}
        if (!chart) chart = this.chart
        if (appendQuotes.constructor == Object) appendQuotes = [appendQuotes] // When developer mistakenly sends an object instead of an array of objects
        if (this.runPrepend('appendMasterData', [appendQuotes, chart, params])) return
        if (!appendQuotes || !appendQuotes.length) return
        var dt = appendQuotes[0].DT
        if (!dt) dt = CIQ.strToDateTime(appendQuotes[0].Date)
        var masterData = chart.masterData
        var i, quote, master
        if (!masterData || !masterData.length) {
          masterData = chart.masterData = CIQ.clone(appendQuotes)
          for (i = 0; i < masterData.length; i++) {
            quote = masterData[i]
            if (quote.DT) quote.Date = CIQ.yyyymmddhhmmssmmm(quote.DT)
            else quote.DT = CIQ.strToDateTime(quote.Date)
            if (quote.Volume && typeof quote.Volume !== 'number') quote.Volume = parseInt(quote.Volume, 10)
            if (!CIQ.ChartEngine.isDailyInterval(this.layout.interval)) this.setDisplayDate(quote)
          }
        } else {
          i = masterData.length - 1
          while (i >= 0) {
            var dt2 = masterData[i].DT
            if (!dt2) dt2 = CIQ.strToDateTime(masterData[i].Date)
            if (dt2.getTime() <= dt.getTime()) {
              var plusOne = 0 // If time is the same then replace last bar
              if (dt2.getTime() < dt.getTime()) plusOne = 1 // Otherwise append bar
              for (var j = 0; j < appendQuotes.length; j++) {
                if (!plusOne) {
                  // If we're replacing the last bar then we want to save any series and study data, otherwise comparisons will [briefly] disappear during refreshes
                  //Preserve any relevant data from prior fetched quote for this bar.
                  //Here we are assuming that the data being appended to masterData is a data update, perhaps from only one exchange, while
                  //the existing masterData is a consolidated quote. We trust the quote we had in masterData to have the more accurate
                  //volume and open, and use the high/low from there in combination with the updated data's to determine the daily high/low.
                  quote = appendQuotes[j]
                  master = masterData.length < i + j ? masterData[i + j] : null
                  if (master) {
                    if (!quote.Volume && master.Volume) {
                      quote.Volume = master.Volume
                    }
                    if (!params.allowReplaceOHL) {
                      if (master.Open) {
                        quote.Open = master.Open
                      }
                      if (master.High > quote.High) {
                        quote.High = master.High
                      }
                      if (master.Low && master.Low < quote.Low) {
                        quote.Low = master.Low
                      }
                    }
                    //}else{
                    //	advancing++; // This case happens if we have an array that overlaps the existing masterData
                  }
                  for (var field in this.chart.series) {
                    if (typeof quote[field] == 'undefined' && master) quote[field] = master[field]
                  }
                  var panels = this.panels
                  for (var p in panels) {
                    var panel = panels[p]
                    if (panel.studyQuotes) {
                      for (var sq in panel.studyQuotes) {
                        if (!panel.studyQuotes[sq]) continue
                        if (typeof quote[sq] == 'undefined' && master) quote[sq] = master[sq]
                      }
                    }
                  }
                }
                quote = masterData[i + j + plusOne] = appendQuotes[j]
                if (quote.DT) quote.Date = CIQ.yyyymmddhhmmssmmm(quote.DT)
                else quote.DT = CIQ.strToDateTime(quote.Date)
                if (quote.Volume && typeof quote.Volume !== 'number') quote.Volume = parseInt(quote.Volume, 10)
                if (!CIQ.ChartEngine.isDailyInterval(this.layout.interval)) this.setDisplayDate(quote)
              }
              break
            }
            i--
          }
          for (i in this.plugins) {
            var plugin = this.plugins[i]
            if (plugin.display) {
              if (plugin.appendMasterData) plugin.appendMasterData(this, appendQuotes, chart)
            }
          }
        }
        if (!this.masterData || !this.masterData.length) this.masterData = masterData
        if (!params.noCreateDataSet) {
          var sp = this.streamParameters
          if (++sp.count > sp.maxTicks || params.bypassGovernor) {
            clearTimeout(sp.timeout)
            this.createDataSet(null, null, params)
            this.draw()
            this.updateChartAccessories()
            sp.count = 0
            sp.timeout = -1
            //	sp.lastDraw=newDate;
          } else {
            var self = this
            if (sp.timeout == -1) {
              sp.timeout = setTimeout(function() {
                self.createDataSet(null, null, params)
                self.draw()
                self.updateChartAccessories()
                self.streamParameters.count = 0
                self.streamParameters.timeout = -1
              }, sp.maxWait)
            }
          }
        }
        this.runAppend('appendMasterData', arguments)
      }

      /**
       * Sets the maximimum number of ticks to the requested number. This is effected by changing the candleWidth.
       * See also {@link CIQ.ChartEngine#setCandleWidth}.
       *
       * **Note**: if calling `setMaxTicks()` before `newChart()`, and the chart will result in a candle width less than `minimumCandleWidth`, `newChart()` will reset the candle size to the default candle size (8 pixels).
       *
       * @param {number} ticks The number of ticks wide to set the chart.
       * @param {object} params optional Parameters to use with this function.
       * @param {number} params.padding Whitespace in pixels to add to the right of the chart.
       * 									Setting this field will home the chart to the most recent tick.
       * 									To home the chart without padding the right side with whitespace, set padding to 0.
       * 									Omitting the padding field will keep the chart scrolled to the same position.
       * @since 2015-11-1 - params added
       * @memberOf CIQ.ChartEngine
       * @example
       * stxx.setMaxTicks(300);
       * stxx.home();	// home() is preferred over draw() in this case to ensure the chart is properly aligned to the right most edge.
       */
      CIQ.ChartEngine.prototype.setMaxTicks = function(ticks, params) {
        if (!params) params = {}
        ticks = Math.round(ticks)
        if (ticks < 2) ticks = 2
        var pad = params.padding ? params.padding : 0
        this.layout.candleWidth = (this.chart.width - pad) / ticks
        if (!this.layout.candleWidth) this.layout.candleWidth = 8 // Zero candlewidth can only occur if the chart has no width. This might happen if the chart is in a hidden iframe
        this.chart.maxTicks = Math.round(this.chart.width / this.layout.candleWidth - 0.499)
        if (params.padding || params.padding === 0) this.chart.scroll = ticks + 1 // If padding, then by definition we're homing
      }

      /**
       * Private construction of the chart object. This is called from the actual constructor
       * for CIQ.ChartEngine.
       * @private
       * @memberOf CIQ.ChartEngine
       * @since 07/01/2015
       */
      CIQ.ChartEngine.prototype.construct = function() {
        this.stackPanel('chart', 'chart', 1)
        this.adjustPanelPositions()
        this.chart.panel = this.panels[this.chart.name]
        this.cx = 0
        this.cy = 0
        this.micropixels = 0
        this.chart.panel.subholder.appendChild(this.controls.home)
        this.callbackListeners = {}
        this.longHoldTime = 1000
      }

      /**
       * Add a listener for an emitted chart event. Events are tracked in the `CIQ.ChartEngine.callbackListeners` object.
       * @param {string}   type The event to listen for
       * @param {Function} cb   Function to call when event is called
       * @return {Object}       Object that can be passed to {@link CIQ.ChartEngine#removeEventListener}
       * @memberOf CIQ.ChartEngine
       * @since 04-2016-08
       */
      CIQ.ChartEngine.prototype.addEventListener = function(type, cb) {
        if (!type) type = '*'
        var arr = this.callbackListeners[type]
        if (!arr) this.callbackListeners[type] = arr = []
        arr.push(cb)
        return { type: type, cb: cb }
      }

      /**
       * Remove a listener for an emitted chart event. Events are tracked in the `CIQ.ChartEngine.callbackListeners` object.
       * @param  {Object}   obj Object from {@link CIQ.ChartEngine#addEventListener}
       * @memberOf CIQ.ChartEngine
       * @since 04-2016-08
       */
      CIQ.ChartEngine.prototype.removeEventListener = function(obj, cb) {
        if (typeof obj != 'object') {
          // allow the same arguments as "addEventListener"
          obj = {
            type: obj,
            cb: cb,
          }
        }
        if (!obj.type) obj.type = '*'
        var arr = this.callbackListeners[obj.type]
        if (!arr) return
        for (var i = 0; i < arr.length; i++) {
          if (arr[i] === obj.cb) {
            arr.splice(i)
            if (!arr.length) obj[obj.type] = null
            return
          }
        }
      }

      /**
       * Dispatches an event
       * @memberOf CIQ.ChartEngine
       * @private
       */
      CIQ.ChartEngine.prototype.dispatch = function(type, data) {
        if (this.callbacks[type]) this.callbacks[type].call(this, data)
        var arr = this.callbackListeners[type]
        if (arr) {
          for (var i = 0; i < arr.length; i++) arr[i].call(this, data)
        }
        arr = this.callbackListeners['*']
        if (arr) {
          for (var j = 0; j < arr.length; j++) arr[j].call(this, data)
        }
      }

      /**
       * Removes the yAxis from the panel if it is not being used by any current renderers. This could be the case
       * if a renderer has been removed. It could also be the case if a renderer is not attached to any series.
       * @param  {CIQ.ChartEngine.Panel} panel The panel
       * @param  {CIQ.ChartEngine.YAxis} yAxis The axis to be removed
       * @memberOf CIQ.ChartEngine
       * @since 07/01/2015
       */
      CIQ.ChartEngine.prototype.deleteYAxisIfUnused = function(panel, yAxis) {
        if (!yAxis) return
        if (yAxis === panel.yAxis) return
        for (var r in this.chart.seriesRenderers) {
          var renderer = this.chart.seriesRenderers[r]
          if (renderer.params.yAxis === yAxis) {
            if (renderer.seriesParams.length !== 0) return
          }
        }
        var i
        for (i = 0; i < panel.yaxisLHS.length; i++) {
          if (panel.yaxisLHS[i] === yAxis) panel.yaxisLHS.splice(i, 1)
        }
        for (i = 1; i < panel.yaxisRHS.length; i++) {
          if (panel.yaxisRHS[i] === yAxis) panel.yaxisRHS.splice(i, 1)
        }
        this.resizeCanvas()
        this.adjustPanelPositions()
      }

      /**
       * Adds a yAxis to the specified panel. If the yAxis already exists then nothing is done.
       * @param {CIQ.ChartEngine.Panel} panel The panel to add (i.e. stxx.chart.panel)
       * @param {CIQ.ChartEngine.YAxis} yAxis The YAxis to add (create with new CIQ.ChartEngine.YAxis)
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.addYAxis = function(panel, yAxis) {
        if (!yAxis) return
        if (!panel.yaxisLHS) {
          // initialize the arrays of y-axis. This will only happen once.
          panel.yaxisLHS = []
          panel.yaxisRHS = []
          // Our default y-axis goes into the array
          if (panel.yAxis.position == 'right') panel.yaxisRHS.push(panel.yAxis)
          else panel.yaxisLHS.push(panel.yAxis)
        }
        var arr = panel.yaxisLHS.concat(panel.yaxisRHS)
        for (var i = 0; i < arr.length; i++) {
          if (arr[i] === yAxis) return
        }
        if (yAxis.position === 'left') {
          panel.yaxisLHS.unshift(yAxis)
        } else {
          yAxis.position = 'right'
          panel.yaxisRHS.push(yAxis)
        }
        this.preAdjustScroll()
        this.resizeCanvas()
        this.adjustPanelPositions()
        this.postAdjustScroll()
      }
      /**
       * This method calculates the left and width members of each y-axis. Never call this directly. Instead call resizeCanvas().
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.calculateYAxisPositions = function() {
        // We push all the charts to the fore because panel widths will depend on what is calculated for their chart
        var panelsInOrder = []
        for (var chartName in this.charts) {
          panelsInOrder.push(chartName)
        }
        for (var panelName in this.panels) {
          var p = this.panels[panelName]
          if (p.name === p.chart.name) continue
          panelsInOrder.push(panelName)
        }

        for (var j = 0; j < panelsInOrder.length; j++) {
          var panel = this.panels[panelsInOrder[j]]
          if (!panel) continue // this could happen if a chart panel doesn't exist yet (for instance when importLayout)
          var isAChart = panel.name === panel.chart.name
          if (!panel.yaxisLHS) {
            // initialize the arrays of y-axis. This will only happen once.
            panel.yaxisLHS = []
            panel.yaxisRHS = []
            // Our default y-axis goes into the array
            if (panel.name === panel.chart.name || panel.yAxis.position) {
              // If the yaxis position is specified or if this is a chart panel
              if (panel.yAxis.position == 'left') panel.yaxisLHS.push(panel.yAxis)
              else panel.yaxisRHS.push(panel.yAxis) // If a chart panel and position not specified then default to rhs
            } else {
              // Unless specified, the y-axis position for panels will follow the chart default
              var position = panel.chart.panel.yAxis.position // get default position of the yaxis for the chart
              if (!position || position == 'right') panel.yaxisRHS.push(panel.yAxis)
              else panel.yaxisLHS.push(panel.yAxis)
            }
          }
          if (!panel.yAxis.width && panel.yAxis.width !== 0) panel.yAxis.width = this.yaxisWidth // legacy default for main axis

          // Calculate the total amount of space to be allocated to the yaxis
          panel.yaxisTotalWidthRight = 0
          var i, yaxis
          panel.yaxisTotalWidthLeft = 0
          for (i = 0; i < panel.yaxisLHS.length; i++) {
            yaxis = panel.yaxisLHS[i]
            panel.yaxisTotalWidthLeft += yaxis.width

            // justifyRight will default to however the chart panel is set. If that is null, then yes, justifyRight
            yaxis.justifyRight = yaxis.justifyRight === null ? panel.chart.yAxis.justifyRight : yaxis.justifyRight
            if (yaxis.justifyRight === null) yaxis.justifyRight = true
          }
          for (i = 0; i < panel.yaxisRHS.length; i++) {
            yaxis = panel.yaxisRHS[i]
            panel.yaxisTotalWidthRight += yaxis.width
          }

          // Now calculate the position of each axis within the canvas
          var x = 0
          for (i = 0; i < panel.yaxisLHS.length; i++) {
            yaxis = panel.yaxisLHS[i]
            yaxis.left = x
            x += yaxis.width
          }
          x = this.width - panel.yaxisTotalWidthRight
          for (i = 0; i < panel.yaxisRHS.length; i++) {
            yaxis = panel.yaxisRHS[i]
            yaxis.left = x
            x += yaxis.width
          }

          if (typeof this.yaxisLeft != 'undefined') panel.chart.yaxisPaddingRight = this.yaxisLeft // support legacy use of yaxisLeft
          // Calculate the padding. This is enough space for the y-axis' unless overridden by the developer.
          panel.yaxisCalculatedPaddingRight = panel.yaxisTotalWidthRight
          if (panel.chart.yaxisPaddingRight || panel.chart.yaxisPaddingRight === 0)
            panel.yaxisCalculatedPaddingRight = panel.chart.yaxisPaddingRight
          panel.yaxisCalculatedPaddingLeft = panel.yaxisTotalWidthLeft
          if (panel.chart.yaxisPaddingLeft || panel.chart.yaxisPaddingLeft === 0)
            panel.yaxisCalculatedPaddingLeft = panel.chart.yaxisPaddingLeft

          if (isAChart) {
            panel.left = panel.yaxisCalculatedPaddingLeft
            panel.right = this.width - panel.yaxisCalculatedPaddingRight
          } else {
            panel.left = panel.chart.panel.left
            panel.right = panel.chart.panel.right
          }
          panel.width = panel.right - panel.left
          panel.handle.style.left = panel.left + 'px'
          panel.handle.style.width = panel.width + 'px'

          if (isAChart) {
            // Store this in the chart too
            panel.chart.left = panel.left
            panel.chart.right = panel.right
            panel.chart.width = panel.right - panel.left
          }
        }
      }

      /**
       * Initializes a new chart. This is called by {@link CIQ.ChartEngine#newChart}. This method initializes the chart container events
       * and various internal variables. It also initializes the canvas and creates the chart panel.
       *
       * Note that the candle width will be rest to 8px if larger than 50px. Even if the value comes from a layout import. This is done to ensure a reasonable candle size is available across devices that may have different screen size.
       *
       * @param  {HTMLElement} [container] The container object. Note, it is preferred to set this in the constructor for CIQ.ChartEngine.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.initializeChart = function(container) {
        if (this.runPrepend('initializeChart', arguments)) return
        if (!this.chart.symbolObject.symbol) this.chart.symbolObject.symbol = this.chart.symbol // for backwards compatibility so the symbol object is allways initialized in case we don't use newChart()
        if (this.locale) this.setLocale(this.locale)
        if (!this.displayZone && CIQ.ChartEngine.defaultDisplayTimeZone) {
          this.setTimeZone(null, CIQ.ChartEngine.defaultDisplayTimeZone)
        }
        this.calculateYAxisPositions()
        this.micropixels = 0

        if (container) this.chart.container = container
        else container = this.chart.container
        container.stx = this
        if (!container.CIQRegistered) {
          container.CIQRegistered = true
          CIQ.ChartEngine.registeredContainers.push(container)
        }
        if (CIQ.isSurface) {
          if (!this.gesture) {
            this.gesture = new MSGesture()
            if (this.manageTouchAndMouse) {
              this.gesture.target = container
            } else {
              this.gesture.target = document.body
            }
            this.gesturePointerId = null
          }
        }
        this.registerHTMLElements() // Sets all of the internal HTML elements to those in the container
        var canvas = this.chart.canvas,
          tempCanvas = this.chart.tempCanvas,
          floatCanvas = this.floatCanvas
        if (canvas && document.createElement('canvas').getContext) {
          if (!canvas.id) {
            //Don't play with canvases which have id's since you don't own them
            container.removeChild(canvas)
            this.chart.canvas = null
          }
          if (tempCanvas && !tempCanvas.id) {
            container.removeChild(tempCanvas)
            this.chart.tempCanvas = null
          }
          if (floatCanvas && !floatCanvas.id) {
            container.removeChild(floatCanvas)
            this.floatCanvas = null
          }
        } else {
          // Just make sure the candleWidth is sane
          if (this.layout.candleWidth < this.minimumCandleWidth) this.layout.candleWidth = this.minimumCandleWidth
          if (this.layout.candleWidth > 200) this.layout.candleWidth = 8
        }

        if (!this.chart.canvas) canvas = this.chart.canvas = document.createElement('canvas')
        if (!this.chart.canvas.getContext) {
          canvas = this.chart.canvas = container.querySelectorAll('#ie8canvas')[0]
          if (!canvas.getContext) {
            //IE8, didn't initialize canvas yet, we will do manually
            if (window.G_vmlCanvasManager) G_vmlCanvasManager.initElement(canvas)
          }
          canvas.style.display = 'block'
        } else {
          container.appendChild(canvas)
        }
        canvas.style.position = 'absolute'
        canvas.style.left = '0px'
        var ctx = (canvas.context = this.chart.context = canvas.getContext('2d'))

        ctx.lineWidth = 1

        if (!this.chart.tempCanvas) tempCanvas = this.chart.tempCanvas = document.createElement('canvas')
        if (!this.chart.tempCanvas.getContext) {
          tempCanvas = this.chart.tempCanvas = container.querySelectorAll('#ie8canvasTemp')[0]
          if (!tempCanvas.getContext) {
            //IE8, didn't initialize canvas yet, we will do manually
            if (window.G_vmlCanvasManager) G_vmlCanvasManager.initElement(tempCanvas)
          }
          tempCanvas.style.display = 'block'
        } else {
          container.appendChild(tempCanvas)
        }

        tempCanvas.style.position = 'absolute'
        tempCanvas.style.left = '0px'
        tempCanvas.context = this.chart.tempCanvas.getContext('2d')
        tempCanvas.context.lineWidth = 1

        if (!this.floatCanvas) floatCanvas = this.floatCanvas = document.createElement('canvas')
        if (!this.floatCanvas.getContext) {
          floatCanvas = this.floatCanvas = container.querySelectorAll('#ie8canvasFloat')[0]
          if (!floatCanvas.getContext) {
            //IE8, didn't initialize canvas yet, we will do manually
            if (window.G_vmlCanvasManager) G_vmlCanvasManager.initElement(floatCanvas)
          }
          floatCanvas.style.display = 'block'
        } else {
          container.appendChild(floatCanvas)
        }

        floatCanvas.style.position = 'absolute'
        floatCanvas.style.left = '0px'
        floatCanvas.context = floatCanvas.getContext('2d')
        floatCanvas.context.lineWidth = 1

        this.resizeCanvas()

        if (CIQ.isAndroid) {
          this.chart.tempCanvas.ontouchstart = function(e) {
            if (e.preventDefault) e.preventDefault()
          }
          this.floatCanvas.ontouchstart = function(e) {
            if (e.preventDefault) e.preventDefault()
          }
        }

        var chart = this.chart,
          panels = this.panels
        panels.chart.display = chart.symbol
        if (chart.symbolDisplay) panels.chart.display = chart.symbolDisplay
        this.adjustPanelPositions()
        this.chart.panel = panels[chart.name]
        this.calculateYAxisMargins(chart.panel.yAxis)

        this.initialWhitespace = this.preferences.whitespace
        if (chart.dataSet && chart.dataSet.length > 0) {
          chart.scroll = Math.floor(chart.width / this.layout.candleWidth) //this.chart.maxTicks;
          var wsInTicks = Math.round(this.preferences.whitespace / this.layout.candleWidth)
          chart.scroll -= wsInTicks
        }
        if (CIQ.touchDevice) {
          var overlayEdit = $$$('.overlayEdit', container)
          var overlayTrashCan = $$$('#overlayTrashCan', container)
          var vectorTrashCan = $$$('#vectorTrashCan', container)
          if (overlayEdit) {
            CIQ.safeClickTouch(
              overlayEdit,
              (function(self) {
                return function(e) {
                  self.deleteHighlighted(true, true)
                }
              })(this),
            )
            if (overlayTrashCan) {
              CIQ.safeClickTouch(
                overlayTrashCan,
                (function(self) {
                  return function(e) {
                    self.deleteHighlighted(false)
                  }
                })(this),
              )
            }
          } else if (overlayTrashCan) {
            CIQ.safeClickTouch(
              overlayTrashCan,
              (function(self) {
                return function(e) {
                  self.deleteHighlighted(true)
                }
              })(this),
            )
          }
          if (vectorTrashCan) {
            CIQ.safeClickTouch(
              vectorTrashCan,
              (function(self) {
                return function(e) {
                  self.deleteHighlighted(true)
                }
              })(this),
            )
          }
        }
        if (this.manageTouchAndMouse) {
          this.registerTouchAndMouseEvents()
        }
        container.onmouseout = (function(self) {
          return function(e) {
            self.handleMouseOut(e)
          }
        })(this)

        if (this.controls.chartControls) {
          this.controls.chartControls.style.display = 'block'
        }
        this.abortDrawings()
        this.undoStamps = []
        for (var panelName in panels) {
          var panel = panels[panelName]
          if (panel.markerHolder) {
            container.removeChild(panel.markerHolder)
            panel.markerHolder = null
          }
        }
        for (var i in this.plugins) {
          var plugin = this.plugins[i]
          if (plugin.display) {
            if (plugin.initializeChart) plugin.initializeChart(this)
          }
        }
        // This sets a resize listener for when the screen itself is resized.
        if (!this.resizeListenerInitialized) {
          this.resizeListenerInitialized = true
          var closure = function(self) {
            return function(e) {
              self.resizeChart()
            }
          }
          if (window.attachEvent) {
            window.attachEvent('onresize', closure(this))
          } else {
            var c = closure(this)
            window.addEventListener('resize', c, true)
            this.eventListeners.push({ element: window, event: 'resize', function: c })
          }
        }
        if (chart.baseline.userLevel) chart.baseline.userLevel = null
        // This sets the interval timer which checks fore resize condition every X milliseconds (if non zero)
        this.setResizeTimer(this.resizeDetectMS)
        this.runAppend('initializeChart', arguments)
      }

      /**
       * Clears out a chart, eliminating all references including the resizeTimer, quoteDriver, styles and eventListeners.
       * To destroy the complete chart and related UI use {@link CIQ.destroy}
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.destroy = function() {
        this.setResizeTimer(0)
        if (this.quoteDriver) this.quoteDriver.die()
        this.styles = {} // Get rid of any external style references that could cause us to hang around
        for (var i = 0; i < this.eventListeners.length; i++) {
          var listener = this.eventListeners[i]
          listener.element.removeEventListener(listener.event, listener['function'])
        }
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * This is called whenever the mouse leaves the chart area. Crosshairs are disabled, stickies are hidden, dragDrawings are completed.
       * @param  {Event} e The mouseout event
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias handleMouseOut
       */
      CIQ.ChartEngine.prototype.handleMouseOut = function(e) {
        e = e || window.event
        if (!CIQ.withinElement(this.chart.container, e.pageX, e.pageY)) {
          if (this.runPrepend('handleMouseOut', arguments)) return
          this.undisplayCrosshairs()
          // Added 9/19/2013 to unleash grabbing when the mouse moves out of the container
          this.grabbingScreen = false
          this.touches = []
          this.touching = false
          if (this.activeDrawing && this.userPointerDown) {
            //end the drawing
            this.userPointerDown = false
            this.drawingLine = false
            var cy = this.backOutY(e.pageY)
            var cx = this.backOutX(e.pageX)
            this.drawingClick(this.currentPanel, cx, cy)
          }
          CIQ.ChartEngine.insideChart = false
          // Added to remove sticky when the mouse moves out of the container
          this.displaySticky()
          this.findHighlights(false, true)
          this.runAppend('handleMouseOut', arguments)
        }
      }

      /**
       * Registers touch and mouse events for the chart (for dragging, clicking, zooming). The events are registered on the container div (not the canvas).
       * Set {@link CIQ.ChartEngine#manageTouchAndMouse} to false to disable the built in event handling (events will not be registered with the container).
       * @memberof CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.registerTouchAndMouseEvents = function() {
        if (this.touchAndMouseEventsRegistered) return
        this.touchAndMouseEventsRegistered = true
        var el = this.chart.container
        var homeEl = $$$('#home', this.controls.chartControls)
        var zoomInEl = $$$('#zoomIn', this.controls.chartControls)
        var zoomOutEl = $$$('#zoomOut', this.controls.chartControls)
        if (!CIQ.touchDevice) {
          el.addEventListener(
            'mousemove',
            (function(self) {
              return function(e) {
                self.mousemove(e)
              }
            })(this),
            false,
          )
          el.addEventListener(
            'mousedown',
            (function(self) {
              return function(e) {
                self.mousedown(e)
              }
            })(this),
            false,
          )
          el.addEventListener(
            'mouseup',
            (function(self) {
              return function(e) {
                self.mouseup(e)
              }
            })(this),
            false,
          )
        } else {
          if (CIQ.isSurface) {
            el.addEventListener(
              'mousemove',
              (function(self) {
                return function(e) {
                  self.msMouseMoveProxy(e)
                }
              })(this),
              false,
            )
            el.addEventListener(
              'mousedown',
              (function(self) {
                return function(e) {
                  self.msMouseDownProxy(e)
                }
              })(this),
              false,
            )
            el.addEventListener(
              'mouseup',
              (function(self) {
                return function(e) {
                  self.msMouseUpProxy(e)
                }
              })(this),
              false,
            )

            if (window.navigator.msPointerEnabled) {
              el.addEventListener(
                'MSPointerDown',
                (function(self) {
                  return function(e) {
                    return self.startProxy(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'MSGestureStart',
                (function(self) {
                  return function(e) {
                    self.gestureInEffect = true
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'MSGestureChange',
                (function(self) {
                  return function(e) {
                    return self.touchmove(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'MSGestureEnd',
                (function(self) {
                  return function(e) {
                    self.gestureInEffect = false
                    return self.touchend(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'MSPointerMove',
                (function(self) {
                  return function(e) {
                    self.moveProxy(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'MSPointerUp',
                (function(self) {
                  return function(e) {
                    return self.endProxy(e)
                  }
                })(this),
                false,
              )
            } else {
              el.addEventListener(
                'pointerdown',
                (function(self) {
                  return function(e) {
                    return self.startProxy(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'MSGestureStart',
                (function(self) {
                  return function(e) {
                    self.gestureInEffect = true
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'MSGestureChange',
                (function(self) {
                  return function(e) {
                    return self.touchmove(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'MSGestureEnd',
                (function(self) {
                  return function(e) {
                    self.gestureInEffect = false
                    return self.touchend(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'pointermove',
                (function(self) {
                  return function(e) {
                    self.moveProxy(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'pointerup',
                (function(self) {
                  return function(e) {
                    return self.endProxy(e)
                  }
                })(this),
                false,
              )
            }
          } else {
            // We need mouse events for all-in-one computers that accept both mouse and touch commands
            // Actually, only for Firefox and Chrome browsers. IE10 sends pointers which are managed by the isSurface section
            if (!CIQ.isAndroid && !CIQ.ipad && !CIQ.iphone) {
              el.addEventListener(
                'mousemove',
                (function(self) {
                  return function(e) {
                    self.iosMouseMoveProxy(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'mousedown',
                (function(self) {
                  return function(e) {
                    self.iosMouseDownProxy(e)
                  }
                })(this),
                false,
              )
              el.addEventListener(
                'mouseup',
                (function(self) {
                  return function(e) {
                    self.iosMouseUpProxy(e)
                  }
                })(this),
                false,
              )
            }

            el.addEventListener(
              'touchstart',
              (function(self) {
                return function(e) {
                  self.touchstart(e)
                }
              })(this),
              false,
            )
            el.addEventListener(
              'touchmove',
              (function(self) {
                return function(e) {
                  self.touchmove(e)
                }
              })(this),
              false,
            )
            el.addEventListener(
              'touchend',
              (function(self) {
                return function(e) {
                  self.touchend(e)
                }
              })(this),
              false,
            )

            if (zoomInEl) {
              zoomInEl.removeAttribute('onMouseOver')
              zoomInEl.removeAttribute('onMouseOut')
            }
            if (zoomOutEl) {
              zoomOutEl.removeAttribute('onMouseOver')
              zoomOutEl.removeAttribute('onMouseOut')
            }
          }
        }

        var wheelEvent = CIQ.wheelEvent

        if (this.captureMouseWheelEvents)
          el.addEventListener(
            wheelEvent,
            (function(self) {
              return function(e) {
                self.mouseWheel(e)
              }
            })(this),
            false,
          )
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * This function is called when the user right clicks on a highlighted overlay, series or drawing.
       * Calls deleteHighlighted() which calls rightClickOverlay() for studies.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias rightClickHighlighted
       */
      CIQ.ChartEngine.prototype.rightClickHighlighted = function() {
        if (this.runPrepend('rightClickHighlighted', arguments)) return
        this.deleteHighlighted(true)
        this.runAppend('rightClickHighlighted', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Removes any and all highlighted overlays, series or drawings.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias deleteHighlighted
       */
      CIQ.ChartEngine.prototype.deleteHighlighted = function(callRightClick, forceEdit) {
        if (this.runPrepend('deleteHighlighted', arguments)) return
        this.cancelTouchSingleClick = true
        CIQ.clearCanvas(this.chart.tempCanvas, this)
        for (var i = this.drawingObjects.length - 1; i >= 0; i--) {
          var drawing = this.drawingObjects[i]
          if (drawing.highlighted && !drawing.permanent) {
            var dontDeleteMe = drawing.abort()
            if (!dontDeleteMe) {
              var before = CIQ.shallowClone(this.drawingObjects)
              this.drawingObjects.splice(i, 1)
              this.undoStamp(before, CIQ.shallowClone(this.drawingObjects))
            }
            this.changeOccurred('vector')
          }
        }
        for (var name in this.overlays) {
          var o = this.overlays[name]
          if (o.highlight && !o.permanent) {
            if (callRightClick || forceEdit) this.rightClickOverlay(name, forceEdit)
            else this.removeOverlay(name)
          }
        }

        var chart = this.currentPanel.chart
        for (var r in chart.seriesRenderers) {
          var renderer = chart.seriesRenderers[r]
          for (var sp = renderer.seriesParams.length - 1; sp >= 0; sp--) {
            var series = renderer.seriesParams[sp]
            if (series.highlight && !series.permanent) {
              renderer.removeSeries(series.field)
            }
          }
        }
        var comparing = false
        for (var s in chart.series) {
          if (chart.series[s].parameters.isComparison) comparing = true
        }
        if (!comparing) this.setComparison(false, chart)

        this.draw()
        if (this.controls.mSticky) {
          this.controls.mSticky.style.display = 'none'
          this.controls.mSticky.children[0].innerHTML = ''
        }
        this.runAppend('deleteHighlighted', arguments)
      }

      /**
       * Returns true if the panel exists
       * @param  {string} name Name of panel to search for
       * @return {boolean}	  True if the panel exists
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.panelExists = function(name) {
        for (var p in this.panels) {
          var panel = this.panels[p]
          if (panel.name == name) return true
        }
        return false
      }

      /**
       * Turns crosshairs off
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.hideCrosshairs = function() {
        this.displayCrosshairs = false
      }

      /**
       * Turns crosshairs on
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.showCrosshairs = function() {
        this.displayCrosshairs = true
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Event handler that is called when the handle of a panel is grabbed, for resizing
       * @param  {Event} e	 The mousedown or touchdown event
       * @param  {CIQ.ChartEngine.Panel} panel The panel that is being grabbed
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias grabHandle
       */
      CIQ.ChartEngine.prototype.grabHandle = function(panel) {
        if (this.runPrepend('grabHandle', arguments)) return
        //if(e.preventDefault) e.preventDefault();
        if (!panel) return
        CIQ.ChartEngine.crosshairY = panel.top + this.top
        CIQ.ChartEngine.resizingPanel = panel
        this.drawTemporaryPanel()
        CIQ.appendClassName(panel.handle, 'stx-grab')
        this.runAppend('grabHandle', arguments)
      }

      /**
       * Event handler that is called when a panel handle is released.
       * @param  {Event} e The mouseup or touchup event
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias releaseHandle
       */
      CIQ.ChartEngine.prototype.releaseHandle = function() {
        if (this.runPrepend('releaseHandle', arguments)) return
        //if(e.preventDefault) e.preventDefault();
        CIQ.clearCanvas(this.chart.tempCanvas, this)
        this.resizePanels()
        if (CIQ.ChartEngine.resizingPanel) CIQ.unappendClassName(CIQ.ChartEngine.resizingPanel.handle, 'stx-grab')
        CIQ.ChartEngine.resizingPanel = null
        this.runAppend('releaseHandle', arguments)
      }

      /**
       * Takes the existing panels and stores them in the layout.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.storePanels = function() {
        if (!this.layout) this.layout = {}
        var view = this.layout
        view.panels = {}
        for (var p in this.panels) {
          var panel = this.panels[p]
          view.panels[panel.name] = {
            percent: panel.percent,
            display: panel.display,
          }
        }
      }

      /**
       * Saves the panel state in the layout. Called whenever there is a change to panel layout (resizing, opening, closing).
       * @param  {boolean} saveLayout If false then a change event will not be called. See (@link CIQ.ChartEngine#changeOccurred)
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.savePanels = function(saveLayout) {
        this.storePanels()
        if (saveLayout !== false) this.changeOccurred('layout')
      }

      /**
       * Returns the absolute screen position given a Y pixel on the canvas
       * @param  {number} y Y pixel on the canvas
       * @return {number}	  Absolute Y screen position
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.resolveY = function(y) {
        return this.top + y
      }

      /**
       * Returns the absolute screen position given a X pixel on the canvas
       * @param  {number} x X pixel on the canvas
       * @return {number}	  Absolute X screen position
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.resolveX = function(x) {
        return this.left + x
      }

      /**
       * Returns the relative canvas position given an absolute Y position on the screen
       * @param  {number} y Y pixel on the screen
       * @return {number}	  Relative Y position on canvas
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.backOutY = function(y) {
        return y - this.top
      }

      /**
       * Returns the relative canvas position given an absolute X position on the screen
       * @param  {number} x X pixel on the screen
       * @return {number}	  Relative X position on canvas
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.backOutX = function(x) {
        return x - this.left
      }

      /**
       * Cleans up a removed study. called by {@link CIQ.ChartEngine#privateDeletePanel} or {@link CIQ.ChartEngine#removeOverlay}
       * Calls removeFN, removes tagalongquotefeed, and plugins associated with study.
       * Finally, removes study from layout.
       * @param  {object} stx A chart object
       * @param  {object} sd  A study descriptor
       * @memberOf CIQ.ChartEngine
       * @private
       * @since 2015-11-1
       */
      CIQ.ChartEngine.prototype.cleanupRemovedStudy = function(sd) {
        if (sd.study.removeFN) sd.study.removeFN(this, sd)
        if (sd.study.feed && sd.study.quoteFeed) {
          this.detachTagAlongQuoteFeed(sd.study.feed)
        }
        // delete any plugins associated with this study
        for (var p in this.plugins) {
          if (p.indexOf('{' + sd.id + '}') > -1) delete this.plugins[p]
        }
        if (this.layout.studies) delete this.layout.studies[sd.name]
      }

      /**
       * Internal function for deleting a panel and its associated DOM objects
       * Do not call directly. Always call panelClose
       * @private
       */
      CIQ.ChartEngine.prototype.privateDeletePanel = function(panel) {
        if (this.layout.studies) {
          var mySD = this.layout.studies[panel.name]
          if (mySD) this.cleanupRemovedStudy(mySD)
        }
        // If we ever want to delete any drawing objects in a panel
        /*var drawingDeleted=false;
		for(var i=0;i<this.drawingObjects.length;i++){
			var drawing=this.drawingObjects[i];
			if(this.panels[drawing.panelName]==panel){
				drawing.abort();
				this.drawingObjects.splice(i,1);
				drawingDeleted=true;
			}
		}*/
        delete this.panels[panel.name]
        if (CIQ.Studies) {
          for (var spm in CIQ.Studies.studyPanelMap) {
            if (CIQ.Studies.studyPanelMap[spm].panel == panel.name) delete CIQ.Studies.studyPanelMap[spm]
          }
        }
        for (var series in this.overlays) {
          if (this.overlays[series].panel == panel.name) {
            delete this.layout.studies[series]
            delete this.overlays[series]
            //delete CIQ.Studies.studyPanelMap[series];
          }
        }

        if (panel.holder) {
          this.chart.container.removeChild(panel.holder)
          if (this.getMarkerArray) {
            var arr = this.getMarkerArray('panelName', panel.name)
            for (var i = 0; i < arr.length; i++) {
              this.removeFromHolder(arr[i])
            }
          }
        }
        panel.handle.parentNode.removeChild(panel.handle)
        //if(drawingDeleted) this.changeOccurred("vector");
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Closes the panel. This is called when a chart panel is closed manually or programatically.
       * For example, after removing a study panel with the {@link CIQ.Studies.removeStudy} function, or when a user clicks on the "X" for a panel.
       * @param  {CIQ.ChartEngine.Panel} panel The panel to close
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias panelClose
       *
       */
      CIQ.ChartEngine.prototype.panelClose = function(panel) {
        if (!panel) return
        if (this.runPrepend('panelClose', arguments)) return
        this.cancelTouchSingleClick = true
        CIQ.ChartEngine.drawingLine = false
        if (panel.soloing) this.panelSolo(panel)

        // If we're deleting a panel with a chart in it
        if (this.charts[panel.name]) {
          // Then delete all the panels that reference that chart
          for (var panelName in this.panels) {
            var subPanel = this.panels[panelName]
            if (subPanel.chart.name == panel.name) {
              this.privateDeletePanel(subPanel)
            }
          }
          // and delete the chart itself
          delete this.charts[panel.name]
        } else {
          // otherwise just delete the panel
          this.privateDeletePanel(panel)
        }
        this.showCrosshairs()
        this.createDataSet()
        this.adjustPanelPositions()
        this.draw()
        this.savePanels()
        this.runAppend('panelClose', arguments)
      }

      /**
       * Deletes all of the panels (except for the default chart panel)
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.deleteAllPanels = function() {
        for (var p in this.panels) {
          var panel = this.panels[p]
          this.privateDeletePanel(panel)
        }
        this.layout.panels = {}
        this.panels = {}
      }

      /**
       * This moves a panel up one position (when the user clicks the up arrow).
       * @param  {CIQ.ChartEngine.Panel} panel The panel to move up.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.panelUp = function(panel) {
        this.cancelTouchSingleClick = true
        CIQ.ChartEngine.drawingLine = false
        this.showCrosshairs()
        var newPanels = {}
        var pos = 0
        var p
        for (p in this.panels) {
          if (p == panel.name) break
          pos++
        }

        if (!pos) return //already at top

        var i = 0
        for (p in this.panels) {
          if (i == pos - 1) newPanels[panel.name] = panel
          if (p == panel.name) continue
          newPanels[p] = this.panels[p]
          i++
        }
        this.panels = newPanels
        this.adjustPanelPositions()
        this.draw()
        this.savePanels()
      }

      /**
       * This moves a panel down one position (when the user clicks the down arrow).
       * @param  {CIQ.ChartEngine.Panel} panel The panel to move down.
       * @memberOf CIQ.ChartEngine
       */

      CIQ.ChartEngine.prototype.panelDown = function(panel) {
        this.cancelTouchSingleClick = true
        CIQ.ChartEngine.drawingLine = false
        this.showCrosshairs()
        var newPanels = {}
        var pos = 0
        var p
        for (p in this.panels) {
          if (p == panel.name) break
          pos++
        }

        var length = 0
        for (p in this.panels) length++
        if (pos == length - 1) return //already at bottom

        var i = 0
        for (p in this.panels) {
          if (p == panel.name) {
            i++
            continue
          }
          newPanels[p] = this.panels[p]
          if (i == pos + 1) newPanels[panel.name] = panel
          i++
        }
        this.panels = newPanels
        this.adjustPanelPositions()
        this.draw()
        this.savePanels()
      }

      /**
       * This "solos" the panel (when the user clicks the solo button). All panels other than this panel and the chart
       * are temporarily hidden. If the solo panel is the chart then all other panels will be hidden.
       * @param  {CIQ.ChartEngine.Panel} panel The panel to be soloed.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.panelSolo = function(panel) {
        this.cancelTouchSingleClick = true
        CIQ.ChartEngine.drawingLine = false
        this.showCrosshairs()
        var hideOrNot = true
        if (panel.soloing) {
          hideOrNot = false
          panel.soloing = false
          CIQ.unappendClassName(panel.solo, 'stx_solo_lit')
          panel.percent = panel.oldPercent
          this.panels.chart.percent = this.panels.chart.oldPercent
        } else {
          panel.soloing = true
          CIQ.appendClassName(panel.solo, 'stx_solo_lit')
          if (panel.name == 'chart') {
            panel.oldPercent = panel.percent
          } else {
            panel.oldPercent = panel.percent
            this.panels.chart.oldPercent = this.panels.chart.percent
            panel.percent = 1 - this.panels.chart.percent
          }
        }
        for (var p in this.panels) {
          this.panels[p].hidden = hideOrNot
        }
        this.panels.chart.hidden = false
        panel.hidden = false
        this.adjustPanelPositions()
        this.draw()
        this.savePanels()
      }

      //@private
      CIQ.ChartEngine.prototype.calculatePanelPercent = function(panel) {
        var h = panel.bottom - panel.top
        panel.percent = h / this.chart.canvasHeight
      }

      /**
       * Called when the user moves a panel handle, to resize all of the panels relative to the movement.
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.resizePanels = function() {
        if (!CIQ.ChartEngine.resizingPanel) return
        var up = true
        var p, newY, priorPanel
        if (CIQ.ChartEngine.crosshairY > this.resolveY(CIQ.ChartEngine.resizingPanel.top)) up = false
        if (up) {
          priorPanel = null
          for (p in this.panels) {
            if (this.panels[p] == CIQ.ChartEngine.resizingPanel) break
            if (this.panels[p].hidden) continue
            priorPanel = this.panels[p]
          }
          newY = this.backOutY(CIQ.ChartEngine.crosshairY)
          if (newY < priorPanel.top + 30) {
            newY = priorPanel.top + 30
            CIQ.ChartEngine.crosshairY = this.resolveY(newY)
          }
          priorPanel.bottom = newY
          CIQ.ChartEngine.resizingPanel.top = newY
          this.calculatePanelPercent(priorPanel)
          this.calculatePanelPercent(CIQ.ChartEngine.resizingPanel)
        } else {
          priorPanel = null
          for (p in this.panels) {
            if (this.panels[p] == CIQ.ChartEngine.resizingPanel) break
            if (this.panels[p].hidden) continue
            priorPanel = this.panels[p]
          }
          newY = this.backOutY(CIQ.ChartEngine.crosshairY)
          if (newY > CIQ.ChartEngine.resizingPanel.bottom - 30) {
            newY = CIQ.ChartEngine.resizingPanel.bottom - 30
            CIQ.ChartEngine.crosshairY = this.resolveY(newY)
          }
          priorPanel.bottom = newY
          CIQ.ChartEngine.resizingPanel.top = newY
          this.calculatePanelPercent(priorPanel)
          this.calculatePanelPercent(CIQ.ChartEngine.resizingPanel)
        }

        this.adjustPanelPositions()
        this.draw()
        this.savePanels()
      }

      // First, adjust the panel percentages so that they all add up to 1
      // Secondly, set the pixel top and bottom of each panel based on the percentages
      /**
       * <span class="injection">INJECTABLE</span>
       * Adjusts the positions of all of the panels. Ensures that panel percentages add up to 100%. Sets the panel top and bottom
       * based on the percentages. Also sets the icon template icons appropriately for each panel's position. And adjusts
       * any drawings. Finally it makes some calculations that are used by the y-axis.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias adjustPanelPositions
       */
      CIQ.ChartEngine.prototype.adjustPanelPositions = function() {
        if (!this.chart.symbol) return
        if (this.runPrepend('adjustPanelPositions', arguments)) return
        var lastBottom = 0
        var h = this.chart.canvasHeight
        var pixels = 0
        var first = false
        var acc = 0
        var n = 0
        var activeSolo = false
        var x, panel
        for (x in this.panels) {
          panel = this.panels[x]
          if (isNaN(panel.percent) || panel.percent <= 0) panel.percent = 0.05
          if (panel.hidden) continue
          acc += panel.percent
          n++
          if (panel.soloing) activeSolo = true
        }

        for (x in this.panels) {
          var zoomRatio = 0
          panel = this.panels[x]

          if (panel.hidden) {
            if (panel.markerHolder) {
              panel.markerHolder.style.display = 'none'
            }
            continue
          }
          if (!first) {
            first = true
            panel.up.style.display = 'none'
          } else {
            if (this.displayIconsUpDown) panel.up.style.display = ''
          }
          if (activeSolo) {
            if (panel.soloing) {
              if (this.displayIconsSolo) panel.solo.style.display = ''
            } else {
              panel.solo.style.display = 'none'
            }
          } else if (n == 1 || n == 2) {
            panel.solo.style.display = 'none'
          } else {
            if (this.displayIconsSolo) panel.solo.style.display = ''
          }
          if (n == 1) {
            panel.down.style.display = 'none'
          } else {
            if (this.displayIconsUpDown) panel.down.style.display = ''
          }
          if (panel.editFunction) panel.edit.style.display = ''
          else panel.edit.style.display = 'none'

          panel.percent = panel.percent / acc
          panel.top = lastBottom
          panel.bottom = panel.top + h * panel.percent
          panel.height = panel.bottom - panel.top
          if (panel.chart.name == panel.name) {
            panel.chart.top = panel.top
            panel.chart.bottom = panel.bottom
            panel.chart.height = panel.height
          }
          var yAxis = panel.yAxis

          if (yAxis.zoom && yAxis.height > 0) {
            zoomRatio = yAxis.zoom / yAxis.height
          }
          this.adjustYAxisHeightOffset(panel, yAxis)
          yAxis.top = panel.top + yAxis.topOffset
          yAxis.bottom = panel.bottom - yAxis.bottomOffset
          yAxis.height = yAxis.bottom - yAxis.top
          if (zoomRatio) {
            yAxis.zoom = zoomRatio * yAxis.height
            if (yAxis.zoom > yAxis.height) {
              //console.log('adjustPanelPositions adjusted zoom and scroll to 0',yAxis.zoom,yAxis.height);
              yAxis.zoom = 0 // If the zoom is greater than the height then we'll have an upside down y-axis
              yAxis.scroll = 0
            }
          }
          lastBottom = panel.bottom

          if (!yAxis.high && yAxis.high !== 0) {
            // panels without values will use percentages to position drawings
            yAxis.high = 100
            yAxis.low = 0
            yAxis.shadow = 100
          }
          yAxis.multiplier = yAxis.height / yAxis.shadow

          if (panel.holder) {
            panel.holder.style.right = '0px'
            panel.holder.style.top = panel.top + 'px'
            panel.holder.style.left = '0px'
            panel.holder.style.height = panel.height + 'px'

            panel.subholder.style.left = panel.left + 'px'
            panel.subholder.style.width = panel.width + 'px'
            panel.subholder.style.top = '0px'
            if (yAxis.height >= 0) panel.subholder.style.height = yAxis.height + 'px'
          }
        }
        if (x) this.panels[x].down.style.display = 'none'
        if (n == 2 && !activeSolo) {
          this.panels.chart.solo.style.display = ''
        }
        if (this.controls.chartControls && this.panels.chart)
          this.controls.chartControls.style.bottom = this.chart.canvasHeight - this.panels.chart.bottom + 22 + 'px'
        this.clearPixelCache()

        this.adjustDrawings()

        this.runAppend('adjustPanelPositions', arguments)
      }

      //Unused
      CIQ.ChartEngine.prototype.addChart = function(name, chart) {
        chart.name = name
        this.charts[name] = chart
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Create a new panel and make room for it by squeezing all the existing panels
       * @param  {string} display	  The display name for the panel
       * @param  {string} name	  The name of the panel (usually the study ID)
       * @param  {number} [height]	Requested height of panel in pixels. Defaults to 1/5 of the screen size.
       * @param  {string} [chartName] The chart to associate with this panel. Defaults to "chart".
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias createPanel
       */
      CIQ.ChartEngine.prototype.createPanel = function(display, name, height, chartName) {
        if (this.runPrepend('createPanel', arguments)) return
        if (!chartName) chartName = 'chart'
        var h = this.chart.canvasHeight
        if (!height) {
          height = h * 0.2
        }
        var percent = height / h
        var reduce = 1 - percent
        for (var p in this.panels) {
          var panel = this.panels[p]
          panel.percent *= reduce
        }
        this.stackPanel(display, name, percent, chartName)
        this.adjustPanelPositions()
        this.savePanels(false)
        this.runAppend('createPanel', arguments)
      }

      /**
       * Configures the panel controls
       * @param  {CIQ.ChartEngine.Panel} panel The panel
       * @private
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.configurePanelControls = function(panel) {
        var isChart = panel.name == panel.chart.name

        panel.icons = $$$('.stx-panel-control', panel.holder)
        panel.close = panel.icons.children[4]
        panel.close = $$$('.stx-ico-close', panel.icons).parentNode
        CIQ.appendClassName(panel.icons, 'stx-show')

        panel.title = $$$('.stx-panel-title', panel.icons)
        panel.up = $$$('.stx-ico-up', panel.icons).parentNode
        panel.solo = $$$('.stx-ico-focus', panel.icons).parentNode
        panel.down = $$$('.stx-ico-down', panel.icons).parentNode
        panel.edit = $$$('.stx-ico-edit', panel.icons).parentNode

        if (!this.displayIconsUpDown) panel.up.style.display = 'none'
        if (!this.displayIconsUpDown) panel.down.style.display = 'none'
        if (!this.displayIconsSolo) panel.solo.style.display = 'none'
        if (!this.displayIconsClose) {
          panel.close.style.display = 'none'
        }
        if (!this.displayPanelResize) panel.handle.style.display = 'none'

        panel.title.innerHTML = ''
        panel.title.appendChild(document.createTextNode(panel.display))
        if (isChart) {
          CIQ.appendClassName(panel.title, 'chart-title')
          CIQ.appendClassName(panel.icons, 'stx-chart-panel')
        }
        if (!CIQ.touchDevice || CIQ.isSurface)
          panel.icons.onmouseover = (function(self) {
            return function(e) {
              self.hideCrosshairs()
            }
          })(this)
        if (!CIQ.touchDevice || CIQ.isSurface)
          panel.icons.onmouseout = (function(self) {
            return function(e) {
              self.showCrosshairs()
            }
          })(this)

        if (!CIQ.touchDevice || CIQ.isSurface)
          panel.handle.onmouseover = (function(self) {
            return function() {
              self.hideCrosshairs()
            }
          })(this)
        if (!CIQ.touchDevice || CIQ.isSurface)
          panel.handle.onmouseout = (function(self) {
            return function() {
              self.showCrosshairs()
            }
          })(this)
        if (CIQ.touchDevice) {
          panel.handle.ontouchstart = (function(stx, panel) {
            return function(e) {
              if (stx.resizingPanel) return
              e.preventDefault()
              stx.grabHandle(panel)
            }
          })(this, panel)
          panel.handle.ontouchend = (function(stx) {
            return function(e) {
              e.preventDefault()
              stx.releaseHandle()
            }
          })(this)
        }
        panel.handle.onmousedown = (function(stx, panel) {
          return function(e) {
            if (!e) e = event
            stx.grabHandle(panel)
          }
        })(this, panel)
        panel.handle.onmouseup = (function(stx) {
          return function(e) {
            if (!e) e = event
            stx.releaseHandle()
          }
        })(this)
        CIQ.safeClickTouch(
          panel.close,
          (function(stx, panel) {
            return function() {
              stx.panelClose(panel)
            }
          })(this, panel),
        )
        CIQ.safeClickTouch(
          panel.up,
          (function(stx, panel) {
            return function() {
              stx.panelUp(panel)
            }
          })(this, panel),
        )
        CIQ.safeClickTouch(
          panel.down,
          (function(stx, panel) {
            return function() {
              stx.panelDown(panel)
            }
          })(this, panel),
        )
        CIQ.safeClickTouch(
          panel.solo,
          (function(stx, panel) {
            return function() {
              stx.panelSolo(panel)
            }
          })(this, panel),
        )
        if (panel.name == 'chart') panel.close.style.display = 'none' // never close primary chart
      }
      /**
       * <span class="injection">INJECTABLE</span>
       * Adds a panel with a prespecified percentage. This should be called iteratively when rebuilding a set
       * of panels from a previous layout. Use {@link CIQ.ChartEngine#createPanel} when creating a new panel for an existing chart layout.
       * @param  {string} display	  The display name for the panel
       * @param  {string} name	  The name of the panel (usually the study ID)
       * @param  {number} percent	  The percentage of chart to use
       * @param  {string} [chartName] The chart to associate with this panel. Defaults to "chart".
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias stackPanel
       */
      CIQ.ChartEngine.prototype.stackPanel = function(display, name, percent, chartName) {
        if (this.runPrepend('stackPanel', arguments)) return
        if (!chartName) chartName = 'chart'
        var chart = this.charts[chartName]
        var isChart = name == chartName
        var yAxis = null
        if (isChart) {
          display = chart.symbol
          if (chart.symbolDisplay) display = chart.symbolDisplay
          yAxis = chart.yAxis
        }
        var panel = (this.panels[name] = new CIQ.ChartEngine.Panel(name, yAxis))
        if (!isChart && chart.yAxis) {
          panel.yAxis.width = chart.yAxis.width // make it match the width of the main panel so the y axis align
        }

        panel.percent = percent
        panel.chart = chart
        panel.display = display
        panel.holder = CIQ.newChild(this.container, 'div', 'stx-holder') // the main holder extends to the edges of the panel
        panel.subholder = CIQ.newChild(panel.holder, 'div', 'stx-subholder') // the sub holder does not include the axis area
        panel.subholder.style.zIndex = 1
        panel.holder.setAttribute('cq-panel-name', name)
        panel.subholder.setAttribute('cq-panel-name', name)
        var appendClass = isChart ? 'stx-panel-chart' : 'stx-panel-study'
        CIQ.appendClassName(panel.holder, appendClass)

        panel.subholder.appendChild(this.controls.iconsTemplate.cloneNode(true))
        panel.handle = this.controls.handleTemplate.cloneNode(true)
        this.container.appendChild(panel.handle)
        //panel.handle.style.display=""; // let the drawPanels manage this otherwise if we set to "" here but the developer wants a picture (png) handle using CSS, the hande will flicker on on initial load on the top of the screen
        panel.handle.id = null
        panel.handle.panel = panel

        this.configurePanelControls(panel)
        this.resizeCanvas()

        this.runAppend('stackPanel', arguments)
      }

      CIQ.ChartEngine.prototype.setPanelEdit = function(panel, editFunction) {
        panel.editFunction = editFunction
        CIQ.safeClickTouch(panel.edit, editFunction)
        this.adjustPanelPositions()
      }
      /**
       * <span class="injection">INJECTABLE</span>
       * <span class="animation">Animation Loop</span>
       * Draws the panels for the chart and chart studies. CSS style stx_panel_border can be modified to change the color
       * or width of the panel dividers.
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias drawPanels
       */
      CIQ.ChartEngine.prototype.drawPanels = function() {
        if (this.runPrepend('drawPanels', arguments)) return
        var first = false
        for (var p in this.panels) {
          var panel = this.panels[p]
          panel.axisDrawn = false // to prevent y-axis from being drawn multiple times -- a panel can have multiple studies

          if (panel.title.innerHTML != panel.display) {
            panel.title.innerHTML = ''
            panel.title.appendChild(document.createTextNode(panel.display))
          }
          CIQ.appendClassName(panel.icons, 'stx-show')
          if (panel.hidden) {
            CIQ.unappendClassName(panel.icons, 'stx-show')
            panel.handle.style.display = 'none'
            panel.holder.style.display = 'none'
            continue
          } else {
            if (!this.displayIconsUpDown) panel.up.style.display = 'none'
            if (!this.displayIconsUpDown) panel.down.style.display = 'none'
            if (!this.displayIconsSolo) panel.solo.style.display = 'none'
            panel.holder.style.display = 'block'
          }
          if (!first) {
            panel.handle.style.display = 'none'
            first = true
            continue
          }
          var y = panel.top
          y = Math.round(y) + 0.5
          this.plotLine(
            panel.left,
            panel.right,
            y,
            y,
            this.canvasStyle('stx_panel_border'),
            'segment',
            this.chart.context,
            false,
            {},
          )
          if (!this.displayPanelResize) {
            panel.handle.style.display = 'none'
          } else {
            panel.handle.style.display = ''
          }
          panel.handle.style.top = y - panel.handle.offsetHeight / 2 + 'px'
          //panel.handle.style.left=panel.left+ "px";
        }
        this.runAppend('drawPanels', arguments)
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * This method captures a tap event (single click) on a touch device. It supports both touch and pointer events.
       * @param  {number} finger Which finger is pressed
       * @param  {number} x	   X location on screen of the press
       * @param  {number} y	   Y location on screen of the press
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias touchSingleClick
       */
      CIQ.ChartEngine.prototype.touchSingleClick = function(finger, x, y) {
        var self = this
        var args = arguments
        return function() {
          ;(function() {
            if (!this.cancelTouchSingleClick) {
              if (this.runPrepend('touchSingleClick', args)) return
              if (this.editingAnnotation) return
              this.clicks = { s1MS: -1, e1MS: -1, s2MS: -1, e2MS: -1 }
              if (!this.displayCrosshairs) return
              if (!this.displayInitialized) return // No chart displayed yet
              if (this.openDialog !== '') return
              if (x < this.left || x > this.right || y < this.top || y > this.bottom) return
              var cy = this.backOutY(CIQ.ChartEngine.crosshairY)
              var cx = this.backOutX(CIQ.ChartEngine.crosshairX)
              this.currentPanel = this.whichPanel(cy)
              if (
                !CIQ.Drawing ||
                !this.currentVectorParameters.vectorType ||
                !CIQ.Drawing[this.currentVectorParameters.vectorType] ||
                !new CIQ.Drawing[this.currentVectorParameters.vectorType]().dragToDraw
              ) {
                if (!this.drawingClick(this.currentPanel, cx, cy)) {
                  if (!this.layout.crosshair) {
                    //clear existing highlights?
                    CIQ.ChartEngine.crosshairY = 0
                    CIQ.ChartEngine.crosshairX = 0
                    this.cx = this.backOutX(CIQ.ChartEngine.crosshairX)
                    this.cy = this.backOutY(CIQ.ChartEngine.crosshairY)
                    this.findHighlights()
                    // find highlights for things we tapped on, exactly (not crosshair hover)
                    CIQ.ChartEngine.crosshairY = y
                    CIQ.ChartEngine.crosshairX = x
                    var rect = this.container.getBoundingClientRect()
                    this.top = rect.top
                    this.left = rect.left
                    this.right = this.left + this.width
                    this.bottom = this.top + this.height
                    this.cx = this.backOutX(CIQ.ChartEngine.crosshairX)
                    this.cy = this.backOutY(CIQ.ChartEngine.crosshairY)
                    if (this.currentPanel && this.currentPanel.chart.dataSet) {
                      this.crosshairTick = this.tickFromPixel(this.cx, this.currentPanel.chart)
                      this.crosshairValue = this.adjustIfNecessary(
                        this.currentPanel,
                        this.crosshairTick,
                        this.valueFromPixel(this.cy, this.currentPanel),
                      )
                    }
                    this.headsUpHR()
                    this.findHighlights(true)
                  }
                }
                if (!this.currentVectorParameters.vectorType) {
                  this.dispatch('tap', { stx: this, panel: this.currentPanel, x: cx, y: cy })
                }
              }
            }
            self.cancelTouchSingleClick = false
            this.runAppend('touchSingleClick', args)
          }.apply(self, args))
        }
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * This method detects a double tap on a touch device. It circumvents {@link CIQ.ChartEngine#touchSingleClick}. Double taps
       * are used to delete overlays, series or drawings on touch devices.
       * It also resets the vertical zoom level (y axis) if tapping on an empty area of the pannel ( see {@link CIQ.ChartEngine#calculateYAxisMargins}).
       * @param  {number} finger Which finger double tapped.
       * @param  {number} x	   X location of screen of tap
       * @param  {nubmer} y	   Y location on screen of tap
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias touchDoubleClick
       */
      CIQ.ChartEngine.prototype.touchDoubleClick = function(finger, x, y) {
        if (x < this.left || x > this.right || y < this.panels.chart.top || y > this.panels.chart.bottom) return
        if (this.editingAnnotation) return
        if (this.runPrepend('touchDoubleClick', arguments)) return
        if (CIQ.ChartEngine.drawingLine) {
          this.undo()
        } else {
          if (this.anyHighlighted) {
            this.deleteHighlighted()
          } else {
            // Reset vertical
            var yAxis = this.currentPanel.yAxis
            if (
              yAxis.scroll == (yAxis.initialMarginTop - yAxis.initialMarginBottom) / 2 &&
              yAxis.zoom == yAxis.initialMarginTop + yAxis.initialMarginBottom
            ) {
              this.home()
            } else {
              this.calculateYAxisMargins(this.currentPanel.yAxis)
              //this.currentPanel.chart.verticalScroll=0;
              //this.currentPanel.chart.zoom=0;
            }
            this.draw()
          }
        }
        this.clicks = { s1MS: -1, e1MS: -1, s2MS: -1, e2MS: -1 }
        this.runAppend('touchDoubleClick', arguments)
      }

      // Proxy for handling MS pointer events, specifically to deal with all-in-one computers that
      // support both mouse and touch
      CIQ.ChartEngine.prototype.startProxy = function(e) {
        if (e.pointerType == 4 || e.pointerType == 'mouse') {
          this.mouseMode = true
        } else {
          this.mouseMode = false
        }
        if (this.mouseMode) return
        this.touches[this.touches.length] = {
          pointerId: e.pointerId,
          pageX: e.clientX,
          pageY: e.clientY,
        }
        this.changedTouches = [
          {
            pointerId: e.pointerId,
            pageX: e.clientX,
            pageY: e.clientY,
          },
        ]
        if (!this.gestureInEffect && this.touches.length == 1) {
          this.gesturePointerId = e.pointerId
          this.overrideGesture = false
          if (!this.gesture) return
          this.gesture.addPointer(e.pointerId)
          this.touchstart(e)
        } else {
          this.gesture.stop()
          this.touchstart(e)
        }
      }

      // Proxy for dealing with MS pointer move events
      CIQ.ChartEngine.prototype.moveProxy = function(e) {
        if (e.pointerType == 4 || e.pointerType == 'mouse') {
          this.mouseMode = true
        } else {
          this.mouseMode = false
        }
        if (this.mouseMode) return
        if (!this.gestureInEffect) this.touchmove(e)
      }

      // Proxy for dealing with MS pointer end events
      CIQ.ChartEngine.prototype.endProxy = function(e) {
        if (this.mouseMode) return
        var hm = this.touches.length
        for (var i = 0; i < this.touches.length; i++) {
          if (this.touches[i].pointerId == e.pointerId) {
            this.touches.splice(i, 1)
            break
          }
        }
        if (i == hm) {
          this.touches = []
          this.grabbingScreen = false
          this.touching = false
          return
        }
        this.changedTouches = [
          {
            pointerId: e.pointerId,
            pageX: e.clientX,
            pageY: e.clientY,
          },
        ]
        if (!this.gestureInEffect) {
          this.touchend(e)
        }
      }

      // Proxy for dealing with mousemove on MS devices
      CIQ.ChartEngine.prototype.msMouseMoveProxy = function(e) {
        if (this.touches.length || !this.mouseMode) return
        //if(this.touches.length) return;
        //this.mouseMode=true;
        this.mousemove(e)
      }

      // Proxy for dealing with mousedown on MS devices
      CIQ.ChartEngine.prototype.msMouseDownProxy = function(e) {
        if (!this.mouseMode) return
        this.mousedown(e)
      }

      // Proxy for dealing with mouseup on MS devices
      CIQ.ChartEngine.prototype.msMouseUpProxy = function(e) {
        if (!this.mouseMode) return
        this.mouseup(e)
      }

      // Proxy for dealing with mousemove for ios style events on all-in-one computers (FF and Chrome)
      CIQ.ChartEngine.prototype.iosMouseMoveProxy = function(e) {
        if (this.touching) return
        this.mousemove(e)
      }

      // Proxy for dealing with mousedown for ios style events on all-in-one computers (FF and Chrome)
      CIQ.ChartEngine.prototype.iosMouseDownProxy = function(e) {
        if (this.touching) {
          this.mouseMode = false
          return
        }
        this.mouseMode = true
        this.mousedown(e)
      }

      // Proxy for dealing with mouseup for ios style events on all-in-one computers (FF and Chrome)
      CIQ.ChartEngine.prototype.iosMouseUpProxy = function(e) {
        if (this.touching) return
        this.mouseup(e)
      }

      /**
	 * Creates watermarked text on the canvas. See {@link CIQ.ChartEngine#watermark} to create a watermark relative to a particular panel.
	 * CSS style stx_watermark defines the watermark (opacity of .5 is automatically applied)
	 *
	 * **Note** that the watermark will not persist unless called from within the animation loop (study display function, for example).
	 * As such, it may be necessary to use a `prepend` to the `draw` function to create persistence. See example section.
	 * @param  {external:CanvasRenderingContext2D} context [description]
	 * @param  {number} x		X position on canvas
	 * @param  {number} y		Y position on canvas
	 * @param  {string} text	The text to watermark
	 * @memberOf CIQ.ChartEngine
	 * @example
		STXChart.prototype.prepend("draw",function(){
	       // create persistence by forcing it  be called in every animation frame.
	       rawWatermark(stxx.chart.context,20,30,stxx.chart.symbol);
		});
	 */
      CIQ.ChartEngine.prototype.rawWatermark = function(context, x, y, text) {
        this.canvasFont('stx_watermark', context)
        context.fillStyle = this.defaultColor
        context.globalAlpha = 0.5
        this.chart.context.textBaseline = 'alphabetic'
        context.fillText(text, x, y)
        context.globalAlpha = 1
      }

      /**
	 * Creates watermarked text relative to a panel on the canvas.
	 * Use CSS style stx_watermark to control the text size and color.
	 *
	 * **Note** that the watermark will not persist unless called from within the animation loop (study display function, for example).
	 * As such, it may be necessary to use a `prepend` to the `draw` function to create persistence. See example section.
	 * @param  {string} panel The name of the panel
	 * @param  {object} [config] Parameters for the request
	 * @param  {string} [config.h]			"left", "right", "center" to place the watermark
	 * @param  {string} [config.v]			"top", "bottom", "middle" to place the watermark
	 * @param  {string} [config.text]		The text to watermark
	 * @param  {string} [config.hOffset]	offset in pixels of upper left corner from left or right margin
	 * @param  {string} [config.vOffset]	offset in pixels of upper left corner from top or bottom margin
	 * @memberOf CIQ.ChartEngine
	 * @example
		STXChart.prototype.prepend("draw",function(){
	       // create persistence by forcing it  be called in every animation frame.
	       stxx.watermark("chart",{h:"center",v:"middle",text:stxx.chart.symbol});
		});	 */
      CIQ.ChartEngine.prototype.watermark = function(panel, config) {
        if (config && typeof config != 'object') {
          // Handle legacy argument list implementation
          config = {
            h: arguments[1],
            v: arguments[2],
            text: arguments[3],
          }
        }
        config = {
          // set defaults
          h: config.h || 'left',
          v: config.v || 'bottom',
          text: config.text || '',
          hOffset: config.hOffset || 10,
          vOffset: config.vOffset || 20,
        }

        if (!this.chart.context) return
        var c = this.panels[panel]
        if (!c || c.hidden) return

        var y = c.yAxis.bottom - config.vOffset
        if (config.v == 'top') y = c.top + config.vOffset
        else if (config.v == 'middle') y = (c.top + c.yAxis.bottom) / 2

        this.chart.context.save()
        this.canvasFont('stx_watermark')
        this.canvasColor('stx_watermark')
        this.chart.context.textBaseline = 'alphabetic'

        var x = c.left + config.hOffset
        if (config.h == 'right') x = c.right - config.hOffset
        else if (config.h == 'center') {
          x = (c.right + c.left - this.chart.context.measureText(config.text).width) / 2
        }

        this.chart.context.globalAlpha = 0.5
        this.chart.context.fillText(config.text, x, y)
        this.chart.context.globalAlpha = 1
        this.chart.context.restore()
      }
      /**
       * Call this before a resizing operation in order to maintain the scroll position. See {@link CIQ.ChartEngine#postAdjustScroll}.
       * @param  {CIQ.ChartEngine.Chart} [whichChart] The chart to adjust. Otherwise adjusts the main symbol chart.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.preAdjustScroll = function(chart) {
        if (!chart) chart = this.chart
        this.previousAdjust = {
          chart: chart,
          scroll: chart.scroll,
          maxTicks: chart.maxTicks,
        }
      }

      /**
       * Call this after a resizing operation in order to maintain the scroll position. See {@link CIQ.ChartEngine#preAdjustScroll}.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.postAdjustScroll = function() {
        if (!this.previousAdjust) return
        var chart = this.previousAdjust.chart
        chart.scroll = this.previousAdjust.scroll + (chart.maxTicks - this.previousAdjust.maxTicks)
        if (this.displayInitialized) this.draw()
      }
      /**
       * Loops through the existing drawings and asks them to adjust themselves to the chart dimensions.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.adjustDrawings = function() {
        for (var i = 0; i < this.drawingObjects.length; i++) {
          var drawing = this.drawingObjects[i]
          if (this.panels[drawing.panelName]) drawing.adjust()
        }
      }

      /**
       * Convenience function returns the next or previous interval from the provided date-time at the current chart's periodicity.
       * See {@link CIQ.Market} and {@link CIQ.Market.Iterator} for more details.
       *
       * For 'tick' intervals, since there is no predictable periodicity, the next interval will be determined by {@link CIQ.ChartEngine.futureTicksInterval}
       * @param  {Date}		DT			A JavaScript Date representing the base time for the request in {@link CIQ.ChartEngine#dataZone} timezone.
       * @param {number}		[period]		The number of periods to jump. Defaults to 1. Can be negative to go back in time.
       * @param {Boolean}		[useDataZone=true] By default the next interval will be returned in {@link CIQ.ChartEngine#dataZone}. Set to false to receive a date in {@link CIQ.ChartEngine#displayZone} instead.
       * @return {Date}	 The next interval date
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.getNextInterval = function(DT, period, useDataZone) {
        if (!period) period = 1
        if (useDataZone !== false) useDataZone = true

        var iter = this.standardMarketIterator(DT, useDataZone ? this.dataZone : this.displayZone)
        if (period < 1) {
          return iter.previous(period * -1)
        }
        return iter.next(period)
      }

      /**
       * Convenience function returns a new market iterator at the current chart's periodicity.
       * For 'tick' intervals, since there is no predictable periodicity, the iterator interval will be determined by {@link CIQ.ChartEngine.futureTicksInterval}
       * See {@link CIQ.Market} and {@link CIQ.Market.Iterator} for more details.
       * @param {Date}		begin A JavaScript Date representing the iterator begin date in {@link CIQ.ChartEngine#dataZone} timezone. See {@link CIQ.Market#newIterator} for details.
       * @param {string} 		[outZone] A valid timezone from the timeZoneData.js library. This should represent the time zone for the returned date. Defaults {@link CIQ.ChartEngine#dataZone}. See {@link CIQ.Market#newIterator} for details.
       * @param {CIQ.ChartEngine} 	[chart] The chart object.
       * @return {Object} A new iterator.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.standardMarketIterator = function(begin, outZone, chart) {
        var otz = outZone ? outZone : this.dataZone
        var cht = chart ? chart : this.chart
        var iter_parms = {
          begin: begin,
          interval: this.layout.interval == 'tick' ? 1 : this.layout.interval,
          periodicity: this.layout.interval == 'tick' ? this.chart.xAxis.futureTicksInterval : this.layout.periodicity,
          timeUnit: this.layout.timeUnit,
          inZone: this.dataZone,
          outZone: otz,
        }
        return cht.market.newIterator(iter_parms)
      }

      /**
       * Effects a zoom from either zoomIn() or zoomOut(). Called from an EaseMachine
       * @param  {Number} candleWidth  The new candleWidth
       * @param  {CIQ.ChartEngine.Chart} chart        The chart to center
       */
      CIQ.ChartEngine.prototype.zoomSet = function(candleWidth, chart) {
        var scroll = this.chart.scroll
        var maintainTick, distanceFromFront
        var halfCandle = 0,
          halfNewCandle = 0
        if (this.isHome()) {
          maintainTick = chart.dataSet.length - 1
          halfCandle = this.layout.candleWidth / 2
          halfNewCandle = candleWidth / 2
        } else {
          maintainTick = this.tickFromPixel(this.chart.width / 2, chart)
        }

        distanceFromFront = chart.dataSet.length - 1 - maintainTick
        var initialpx = Math.floor(this.pixelFromTick(maintainTick, chart) + halfCandle)
        this.setCandleWidth(candleWidth)
        if (this.layout.chartType !== 'volume_candle') {
          // this is the code that keeps the chart's position stable.
          // Bypassing this code will cause the chart's left position to remain stable
          // which is really the only way to get a smooth zoom for variable width candles (because the act of scrolling inherently changes the number of candles that fit on the screen)
          this.micropixels = 0
          this.chart.scroll = Math.floor((initialpx - halfCandle) / candleWidth) + 1 + distanceFromFront

          var newpx = Math.floor(this.pixelFromTick(maintainTick, chart) + halfNewCandle)
          this.micropixels = initialpx - newpx
        }
        chart.spanLock = false
        this.draw()
        this.doDisplayCrosshairs()
        this.updateChartAccessories()
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Zooms the chart out. The chart is zoomed incrementally by they percentage indicated (pct) each time this is called.
       * @param  {Event} e The mouse click event, if it exists (from clicking on the chart control)
       * @param  {Number} pct The percentage to zoom out the chart (default = 10%)
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias zoomOut
       */
      CIQ.ChartEngine.prototype.zoomOut = function(e, pct) {
        if (this.runPrepend('zoomOut', arguments)) return
        this.grabbingScreen = false //in case they were grabbing the screen and let go to zoom.
        if (CIQ.ChartEngine.insideChart) CIQ.unappendClassName(this.container, 'stx-drag-chart') //in case they were grabbing the screen and let go to zoom.
        if (this.preferences.zoomOutSpeed) pct = this.preferences.zoomOutSpeed
        else if (!pct) pct = 1.3
        if (e && e.preventDefault) e.preventDefault()
        this.cancelTouchSingleClick = true

        var self = this
        function closure(chart) {
          return function(candleWidth) {
            self.zoomSet(candleWidth, chart)
            if (self.animations.zoom.hasCompleted) {
              if (self.runAppend('zoomOut', arguments)) return
              self.changeOccurred('layout')
            }
          }
        }

        for (var chartName in this.charts) {
          var chart = this.charts[chartName]
          if (CIQ.ipad && chart.maxTicks > CIQ.ChartEngine.ipadMaxTicks) {
            return
          }
          var newTicks = Math.round(chart.maxTicks * pct) // 10% more ticks with each click
          var newCandleWidth = this.chart.width / newTicks
          if (newCandleWidth < this.minimumCandleWidth) newCandleWidth = this.minimumCandleWidth
          this.layout.span = null
          this.animations.zoom.run(closure(chart), this.layout.candleWidth, newCandleWidth)
        }
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Zooms the chart based on a mousewheel event. A built in timeout prevents the mousewheel from zooming too quickly.
       * @param  {Event} e		  The event
       * @return {boolean}			Returns false if action is taken
       * @memberof CIQ.ChartEngine.AdvancedInjectable#
       * @alias mouseWheel
       */

      CIQ.ChartEngine.prototype.mouseWheel = function(e) {
        if (this.runPrepend('mouseWheel', arguments)) return
        if (!e) e = event //IE8
        if (e.preventDefault) e.preventDefault()
        var deltaX = e.deltaX,
          deltaY = e.deltaY
        var diff = Date.now() - this.lastMouseWheelEvent

        /*
		// OSX trackpad is very sensitive since it accomodates diagonal
		// motion which is not relevant to us. So we ignore any changes
		// in direction below the threshold time value
		var threshold=50; //ms
		if(Date.now()-this.lastMouseWheelEvent<threshold){
			if(this.lastMove=="horizontal") deltaY=0;
			else deltaX=0;
		}*/
        if (Math.abs(deltaY) > Math.abs(deltaX)) deltaX = 0
        else deltaY = 0

        this.lastMouseWheelEvent = Date.now()
        if (Math.abs(deltaX) === 0 && Math.abs(deltaY) === 0) return

        if (this.allowSideswipe && deltaX !== 0 && Math.abs(deltaX) > Math.abs(deltaY)) {
          this.lastMove = 'horizontal'
          var delta = deltaX * -1
          if (delta > 50) delta = 50
          if (delta < -50) delta = -50
          this.grabbingScreen = true
          this.grabStartX = CIQ.ChartEngine.crosshairX
          this.grabStartY = CIQ.ChartEngine.crosshairY
          if (!this.currentPanel) this.currentPanel = this.chart.panel
          this.grabStartScrollX = this.currentPanel.chart.scroll
          this.grabStartScrollY = this.currentPanel.chart.panel.yAxis.scroll
          this.mousemoveinner(CIQ.ChartEngine.crosshairX - delta, CIQ.ChartEngine.crosshairY)
          CIQ.ChartEngine.crosshairX = this.grabStartX
          CIQ.ChartEngine.crosshairY = this.grabStartY
          this.updateChartAccessories()
          this.grabbingScreen = false
          return
        }
        this.lastMove = 'vertical'
        if (!this.allowZoom) return
        if (!this.displayInitialized) return
        /* originally added to address a magic mouse issue - removing this code because it is affecting new Macs which seem to come back for more zooming immediately causing uneven zooming.
		if(this.wheelInMotion) return;
		this.wheelInMotion=true;
		setTimeout(function(self){return function(){self.wheelInMotion=false;};}(this), 40);
		*/
        if (!deltaY) {
          if (CIQ.wheelEvent == 'onmousewheel') {
            deltaY = (-1 / 40) * e.wheelDelta
            if (e.wheelDeltaX) deltaX = (-1 / 40) * e.wheelDeltaX
          } else {
            deltaY = e.detail
          }
        }
        if (typeof e.deltaMode == 'undefined') e.deltaMode = e.type == 'MozMousePixelScroll' ? 0 : 1

        //var distance=e.deltaX;
        //if(!distance) distance=e.deltaY;
        var distance = deltaY
        if (e.deltaMode == 1) {
          // 1 is line mode so we approximate the distance in pixels, arrived at through trial and error
          distance *= 33
        }

        var pctIn = null
        var pctOut = null
        // Calculate the percentage change to the chart. Arrived at heuristically, cube root of the mousewheel distance.
        // The multipliers are adjusted to take into consideration reversed compounding rates between a zoomin and a zoomout
        if (this.mouseWheelAcceleration) {
          var multiplier = Math.max(Math.pow(Math.abs(distance), 0.3), 1)
          pctIn = 1 - 0.1 * multiplier
          pctOut = 1 + 0.2 * multiplier
        }

        if (distance > 0) {
          if (this.reverseMouseWheel) this.zoomOut(null, pctOut)
          else this.zoomIn(null, pctIn)
        } else if (distance < 0) {
          if (this.reverseMouseWheel) this.zoomIn(null, pctIn)
          else this.zoomOut(null, pctOut)
        }
        if (this.runAppend('mouseWheel', arguments)) return
        return false
      }

      /**
       * <span class="injection">INJECTABLE</span>
       * Zooms the chart in. The chart is zoomed incrementally by they percentage indicated (pct) each time this is called.
       * @param  {Event} e The mouse click event, if it exists (from clicking on the chart control)
       * @param  {Number} pct The percentage to zoom out the chart (default = 10%)
       * @memberOf CIQ.ChartEngine.AdvancedInjectable#
       * @alias zoomIn
       */
      CIQ.ChartEngine.prototype.zoomIn = function(e, pct) {
        if (this.runPrepend('zoomIn', arguments)) return
        this.grabbingScreen = false //in case they were grabbing the screen and let go to zoom.
        if (CIQ.ChartEngine.insideChart) CIQ.unappendClassName(this.container, 'stx-drag-chart') //in case they were grabbing the screen and let go to zoom.
        if (this.preferences.zoomInSpeed) pct = this.preferences.zoomInSpeed
        else if (!pct) pct = 0.7

        var self = this
        function closure(chart) {
          return function(candleWidth) {
            self.zoomSet(candleWidth, chart)
            if (self.animations.zoom.hasCompleted) {
              if (self.runAppend('zoomIn', arguments)) return
              self.changeOccurred('layout')
            }
          }
        }

        for (var chartName in this.charts) {
          var chart = this.charts[chartName]
          if (e && e.preventDefault) e.preventDefault()
          this.cancelTouchSingleClick = true

          var newTicks = Math.round(chart.maxTicks * pct) // 10% fewer ticks displayed when zooming in
          // At some point the zoom percentage compared to the bar size may be too small, we get stuck at the same candle width.
          // (bacause we ceil() and 0.5 candle when we set the maxTicks in setCandleWidth()).
          // So we want to for force a candle when this happens.
          if (chart.maxTicks - newTicks < 2) newTicks = chart.maxTicks - 2
          if (newTicks < this.minimumZoomTicks) newTicks = this.minimumZoomTicks
          var newCandleWidth = this.chart.width / newTicks
          this.layout.span = null
          this.animations.zoom.run(closure(chart), this.layout.candleWidth, newCandleWidth)
        }
      }

      /**
       * Translates a built-in word if this.translationCallback callback function is set.
       * @param  {string} english The word to translate
       * @return {string}			The translated word, or the word itself if no callback is set.
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.translateIf = function(english) {
        if (this.translationCallback) return this.translationCallback(english)
        return english
      }

      /**
	 * Sets the data timezone (`dataZone`) and display timezone (`displayZone`) on an intraday chart.
	 *
	 * If the 'DT' fields have been adjusted prior to loading to reflect the proper time offset between the browser and the data server,
	 * or the 'Date' fields are loaded with a an ISO9601 date string such as'2015-01-01T09:10:00Z',
	 * there will be no need to use this function to set the `dataZone`.
	 *
	 * If not embedded with a timezone, `masterData` dates are interpreted in reference to the {@link CIQ.ChartEngine#dataZone} (or the browser timezone if no dataZone is specified).
	 * The {@link CIQ.ChartEngine#displayZone} is then created and used to translate dates based on either the local browser's timezone, or the timezone selected by the end user.
	 *
	 * ** Important: This method is only used to generate a display date for `intraday` periodicity. No time conversions will be done in daily, weekly or monthly periodicities, which only display a date without a time.**
	 * ** As such, if the date has an implied timezone (as in the case of the epoch or ISO9601 date), the date will be displayed in a timezone to match the browser's timezone (12 midnight ET will show as 11 PM the previous day on CT).**
	 * ** If the date does not have an implied timezone (as in the case of a string such as 'yyyy-mm-dd' for the Date field ) then the date will be displayed exactly as sent into the chart since the library will assume it is already in the desired timezone.**

	 * ** Time zone and the {@link CIQ.QuoteFeed#fetch}:**<br>
	 * It is important to understand that if your quote feed returns a date string such as  '07/07/16 9:30' as the time-stamp for a tick, (note there is no timezone specified) ,
	 * the library will also store that in master data with no timezone specified (which really means the browser is storing it in local time on the 'DT' field).
	 * Setting the time zone using this method **does not alter the date in the master data array** but simply allows the chart to know how to deal with it.
	 * On a fetch call, that same raw date from the master data array will be sent in on the parameters object. So if your date did not have a time zone when added, then you must assume there is no time zone for it when provided as a parameter. The easiest way to remove a timezone from a date is to take that exact date and convert it to a string using {@link CIQ.yyyymmddhhmmssmmm}, for example.
	 *
	 *
	 * @param {string} dataZone	   A valid timezone from the timeZoneData.js library. This should represent the time zone that the master data comes from, or set to 'null' if your dates are already time zone aware.
	 * @param {string} displayZone A valid timezone from the timeZoneData.js library. This should represent the time zone that the user wishes displayed, or set to null to use the browser time zone.
	 * @memberOf CIQ.ChartEngine
	 */
      CIQ.ChartEngine.prototype.setTimeZone = function(dataZone, displayZone) {
        if (typeof timezoneJS == 'undefined') {
          this.timeZoneOffset = 0
          return
        }

        var now = new Date()
        var myTimeZoneOffset = now.getTimezoneOffset()
        var dataTimeZoneOffset = myTimeZoneOffset
        var displayTimeZoneOffset = myTimeZoneOffset
        if (dataZone) this.dataZone = dataZone
        if (this.dataZone) dataTimeZoneOffset = new timezoneJS.Date(now, this.dataZone).getTimezoneOffset()
        if (displayZone) this.displayZone = displayZone
        if (this.displayZone) displayTimeZoneOffset = new timezoneJS.Date(now, this.displayZone).getTimezoneOffset()
        this.timeZoneOffset = dataTimeZoneOffset - myTimeZoneOffset - (displayTimeZoneOffset - myTimeZoneOffset)
        for (var chartName in this.charts) {
          var chart = this.charts[chartName]
          if (chart.masterData && !CIQ.ChartEngine.isDailyInterval(this.layout.interval))
            this.setDisplayDates(chart.masterData)
        }

        this.createDataSet()
      }

      /**
       * Sets the locale for the charts. If set, display prices and dates will be displayed in localized format.
       * The locale should be a valid IANA locale. For instance de-AT represents German as used in Austria. Localization
       * is supported through the Intl object which is a W3 standard, however not all browsers support Intl natively. The
       * Intl.js polyfill is included through the inclusion of stxThirdParty.js. To enable localization, the locale-data/jsonp
       * directory should be included and the JSONP loaded. This is done automatically by calling {@link CIQ.I18N.setLocale}
       * rather than calling this method directly.
       *
       * Once a locale is set, this.internationalizer will be an object that will contain several Intl formatters.
       * These can be overridden manually if the specified format is not acceptable.
       *
       * @param {string} locale A valid IANA locale
       * @memberOf CIQ.ChartEngine
       */
      CIQ.ChartEngine.prototype.setLocale = function(locale) {
        if (typeof Intl == 'undefined') return
        if (this.locale != locale) {
          this.locale = locale
        } else {
          return
        }
        var internationalizer = (this.internationalizer = {})
        internationalizer.hourMinute = new Intl.DateTimeFormat(this.locale, {
          hour: 'numeric',
          minute: 'numeric',
          hour12: false,
        })
        internationalizer.hourMinuteSecond = new Intl.DateTimeFormat(this.locale, {
          hour: 'numeric',
          minute: 'numeric',
          second: 'numeric',
          hour12: false,
        })
        internationalizer.mdhm = new Intl.DateTimeFormat(this.locale, {
          year: '2-digit',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
        })
        internationalizer.monthDay = new Intl.DateTimeFormat(this.locale, { month: 'numeric', day: 'numeric' })
        internationalizer.yearMonthDay = new Intl.DateTimeFormat(this.locale, {
          year: 'numeric',
          month: 'numeric',
          day: 'numeric',
        })
        internationalizer.yearMonth = new Intl.DateTimeFormat(this.locale, { year: 'numeric', month: 'numeric' })
        internationalizer.month = new Intl.DateTimeFormat(this.locale, { month: 'short' })
        internationalizer.numbers = new Intl.NumberFormat(this.locale)
        internationalizer.priceFormatters = []
        internationalizer.priceFormatters[0] = new Intl.NumberFormat(this.locale, {
          maximumFractionDigits: 0,
          minimumFractionDigits: 0,
        })
        internationalizer.priceFormatters[1] = new Intl.NumberFormat(this.locale, {
          maximumFractionDigits: 1,
          minimumFractionDigits: 1,
        })
        internationalizer.priceFormatters[2] = new Intl.NumberFormat(this.locale, {
          maximumFractionDigits: 2,
          minimumFractionDigits: 2,
        })
        internationalizer.priceFormatters[3] = new Intl.NumberFormat(this.locale, {
          maximumFractionDigits: 3,
          minimumFractionDigits: 3,
        })
        internationalizer.priceFormatters[4] = new Intl.NumberFormat(this.locale, {
          maximumFractionDigits: 4,
          minimumFractionDigits: 4,
        })
        internationalizer.priceFormatters[5] = new Intl.NumberFormat(this.locale, {
          maximumFractionDigits: 5,
          minimumFractionDigits: 5,
        })
        internationalizer.percent = new Intl.NumberFormat(this.locale, {
          style: 'percent',
          minimumFractionDigits: 2,
          maximumFractionDigits: 2,
        })
        internationalizer.percent0 = new Intl.NumberFormat(this.locale, {
          style: 'percent',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0,
        })
        internationalizer.percent1 = new Intl.NumberFormat(this.locale, {
          style: 'percent',
          minimumFractionDigits: 1,
          maximumFractionDigits: 1,
        })
        internationalizer.percent2 = new Intl.NumberFormat(this.locale, {
          style: 'percent',
          minimumFractionDigits: 2,
          maximumFractionDigits: 2,
        })
        internationalizer.percent3 = new Intl.NumberFormat(this.locale, {
          style: 'percent',
          minimumFractionDigits: 3,
          maximumFractionDigits: 3,
        })
        internationalizer.percent4 = new Intl.NumberFormat(this.locale, {
          style: 'percent',
          minimumFractionDigits: 4,
          maximumFractionDigits: 4,
        })

        if (CIQ.I18N.createMonthArrays) CIQ.I18N.createMonthArrays(this, internationalizer.month, this.locale)
      }

      /**
       * Imports a layout (panels, studies, candleWidth, etc) from a previous serialization. See {@link CIQ.ChartEngine#exportLayout}.
       *
       * ***Please note that `stxx.callbacks.studyOverlayEdit` and `stxx.callbacks.studyPanelEdit`
       * must be set *before* you call {@link CIQ.ChartEngine#importLayout}. Otherwise your imported studies will not have an edit capability***
       *
       * It will also load symbols if your {@link CIQ.ChartEngine#exportLayout} call included symbols. When symbols are included, this
       * function will set the primary symbol ( first on the serialized symbol list) with {@link CIQ.ChartEngine#newChart}
       * and any overlayed symbol with {@link CIQ.ChartEngine#addSeries}.
       * Note that you must be using a QuoteFeed to use this workflow; otherwise data updates may break.
       *
       * @param  {object} config						A serialized layout
       * @param  {object} params						Parameters to dictate layout behaviour
       * @param  {boolean} [params.managePeriodicity]			If true then the periodicity will be set from the layout, otherwise periodicity will remain as currently set. It is only possible
       * for this to change the periodicity if this.dataCallback or this.quoteDriver has been set. See {@link CIQ.ChartEngine#setPeriodicityV2}
       * @param  {boolean} [params.preserveTicksAndCandleWidth=true] If true then the candleWidth (horizontal zoom) will be maintained up to 50px, otherwise it will be taken from the layout. **Note that the candle width will be reset to 8px if larger than 50px. Even if the value comes from a layout import. This is done to ensure a reasonable candle size is available across devices that may have different screen size. **
       * @param  {Function} [params.cb] An optional callback function to pass into CIQ.ChartEngine#newChart if there are symbols to load.
       * @memberOf CIQ.ChartEngine
       * @since 05-2016-10 Symbols are also loaded if included on the serialization.
       * @since  2016-06-21 preserveTicksAndCandleWidth now defaults to true
       */
      CIQ.ChartEngine.prototype.importLayout = function(config, params) {
        if (typeof params !== 'object') {
          // backwards compatibility hack, this function used to accept three named arguments
          params = {
            managePeriodicity: arguments[1],
            preserveTicksAndCandleWidth: arguments[2],
          }
        }
        if (!params.preserveTicksAndCandleWidth && params.preserveTicksAndCandleWidth !== false)
          params.preserveTicksAndCandleWidth = true

        var originalLayout = CIQ.shallowClone(this.layout)

        var serializedDrawings = this.serializeDrawings()
        this.abortDrawings()

        this.currentlyImporting = true
        // must remove studies before cleaning the overlays, or the remove function will be lost.
        if (CIQ.Studies) {
          for (var s in this.layout.studies) {
            var sd = this.layout.studies[s]
            CIQ.Studies.removeStudy(this, sd)
          }
        }
        this.overlays = {}
        var view = CIQ.clone(config)

        if (view) {
          // Keep a copy of the prior panels. We'll need these in order to transfer the holders
          var priorPanels = CIQ.shallowClone(this.panels)

          this.panels = {}
          var v = CIQ.clone(view)
          // these are special cases handled elsewhere
          delete v.periodicity
          delete v.interval
          delete v.timeUnit
          delete v.setSpan

          CIQ.dataBindSafeAssignment(this.layout, v)

          this.layout.periodicity = originalLayout.periodicity
          this.layout.interval = originalLayout.interval
          this.layout.timeUnit = originalLayout.timeUnit
          this.layout.setSpan = originalLayout.setSpan
          // must restore candleWidth before you draw any charts or series, including study charts. The view does not allays provide the candleWidth
          if (params.preserveTicksAndCandleWidth) {
            this.layout.candleWidth = originalLayout.candleWidth
          } else {
            if (!this.layout.candleWidth) this.layout.candleWidth = 8
          }

          // Just make sure the candleWidth is sane so we end up with a reasonable number of maxticks to fetch.
          if (this.layout.candleWidth < this.minimumCandleWidth) this.layout.candleWidth = this.minimumCandleWidth
          this.setCandleWidth(this.layout.candleWidth)

          var panels = view.panels // make a copy of the panels
          this.layout.panels = {} // erase the panels
          for (var p in panels) {
            // rebuild the panels
            var panel = panels[p]
            this.stackPanel(panel.display, p, panel.percent, panel.chartName)
          }
          if (CIQ.isEmpty(panels)) {
            this.stackPanel('chart', 'chart', 1, 'chart')
          }

          // Transfer the holders and DOM element references to panels that were retained when the view switched
          // Delete panels that weren't
          for (var panelName in priorPanels) {
            var oldPanel = priorPanels[panelName]
            var newPanel = this.panels[panelName]
            if (newPanel) {
              this.container.removeChild(newPanel.holder)
              this.container.removeChild(oldPanel.handle)
              var copyFields = { holder: true, subholder: true, display: true }
              for (var f in copyFields) {
                newPanel[f] = oldPanel[f]
              }
              this.configurePanelControls(newPanel)
              if (oldPanel.chart.panel == oldPanel) oldPanel.chart.panel = newPanel // retain reference to the actual chart panel
            } else {
              this.privateDeletePanel(oldPanel)
            }
          }

          this.adjustPanelPositions()

          this.storePanels()
          if (CIQ.Studies) {
            var studies = CIQ.clone(this.layout.studies)
            delete this.layout.studies
            for (var ss in studies) {
              var study = studies[ss]
              CIQ.Studies.addStudy(this, study.type, study.inputs, study.outputs, study.parameters, study.panel)
            }
          }
        }
        if (typeof this.layout.chartType == 'undefined') this.layout.chartType = 'line'

        this.adjustPanelPositions()

        var self = this
        if (config.symbols) {
          if (!this.quoteDriver || !this.quoteDriver.quoteFeed) {
            console.log("WARNING: loading a symbol through 'importLayout' without a QuoteFeed may break data updates")
          }

          var params2 = {}
          if (params.managePeriodicity) {
            if (config.symbols[0].setSpan) {
              params2.span = config.symbols[0].setSpan
            }
            if (config.symbols[0].interval) {
              params2.periodicity = {
                interval: config.symbols[0].interval,
                periodicity: config.symbols[0].periodicity,
                timeUnit: config.symbols[0].timeUnit,
              }
            }
          }
          var symbolObject = config.symbols[0].symbolObject || config.symbols[0].symbol

          this.newChart(
            symbolObject,
            null,
            this.chart,
            function(err) {
              if (!err) {
                for (var smbl, i = 1; i < config.symbols.length; ++i) {
                  smbl = config.symbols[i]
                  self.addSeries(smbl.symbol, smbl.parameters)
                }
              }
              self.reconstructDrawings(serializedDrawings)
              self.draw()
              self.currentlyImporting = false
              self.updateListeners('layout') // tells listening objects that layout has changed
              if (params.cb) params.cb.apply(null, arguments)
            },
            params2,
          )
          return
        } else {
          if (view && params.managePeriodicity) {
            if (view.setSpan && this.chart.symbol) {
              this.setSpan(view.setSpan, function() {
                self.reconstructDrawings(serializedDrawings)
                self.draw()
                self.currentlyImporting = false
                self.updateListeners('layout') // tells listening objects that layout has changed
                if (params.cb) params.cb()
              })
              return
            } else {
              interval = view.interval
              periodicity = view.periodicity
              timeUnit = view.timeUnit
              if (isNaN(periodicity)) periodicity = 1
              if (!interval) interval = 'day'
              if (interval != this.layout.interval || periodicity != this.layout.periodicity) {
                this.setPeriodicityV2(periodicity, interval, timeUnit, function() {
                  self.reconstructDrawings(serializedDrawings)
                  self.draw()
                  self.currentlyImporting = false
                  self.updateListeners('layout') // tells listening objects that layout has changed
                  if (params.cb) params.cb()
                }) // this will get new data or roll up existing, createDataSet() and draw()
                return
              } else {
                this.createDataSet()
              }
            }
          } else {
            this.createDataSet()
          }
        }

        this.reconstructDrawings(serializedDrawings)
        this.draw()
        if (!params.preserveTicksAndCandleWidth) this.home()
        this.currentlyImporting = false
        this.updateListeners('layout') // tells listening objects that layout has changed
        if (params.cb) params.cb()
      }

      /*
       * exportLayout - We jump through a lot of hoops here to avoid deep, circular or illegal cloning
       */
      /**
       * Exports the current layout into a serialized form. The returned object can be passed into
       * {@link CIQ.ChartEngine#importLayout} to restore the layout at a future time.
       * @param {boolean} withSymbols  If set to `true', include the chart's current symbols in the serialized object.
       * @return {object} The serialized form of the layout.
       * @memberOf CIQ.ChartEngine
       * @since 05-2016-10 `withSymbols` parameter is available
       */
      CIQ.ChartEngine.prototype.exportLayout = function(withSymbols) {
        var obj = {}
        // First clone all the fields, these describe the layout
        for (var field in this.layout) {
          if (field != 'studies' && field != 'panels') {
            obj[field] = CIQ.clone(this.layout[field])
          } else if (field == 'studies') {
            obj.studies = {}
          } else if (field == 'panels') {
            obj.panels = {}
          }
        }
        // Serialize the panels
        for (var panelName in this.panels) {
          var panel = (obj.panels[panelName] = {})
          var p = this.panels[panelName]
          panel.percent = p.percent
          panel.display = p.display
          panel.chartName = p.chart.name
        }

        // Serialize the studies
        for (var studyName in this.layout.studies) {
          var study = (obj.studies[studyName] = {})
          var s = this.layout.studies[studyName]
          study.type = s.type
          study.inputs = CIQ.clone(s.inputs)
          study.outputs = CIQ.clone(s.outputs)
          study.panel = s.panel
          study.parameters = CIQ.clone(s.parameters)
        }

        if (withSymbols) {
          obj.symbols = this.getSymbols('include-parameters')
        }

        return obj
      }

      /**
       * Inserts bars in an array of quotes for those periods missing a record according to the logic present in {@link CIQ.ChartEngine#getNextInterval}. See "{@link CIQ.Market}" or the "{@tutorial Market Hours and the Charts--LegacyMarket}" tutorial for details on how to properly configure the library to your market hours requirements.
       *
       * The missing bars will have OHLC all set to the previous Close.
       *
       * This method is automatically called if you are using a quoteFeed and have {@link CIQ.ChartEngine#cleanupGaps} set, but can be manually called if pushing data into the chart.
       *
       * This method will affect intraday and **underlying daily**  periods **only**. If the feed is already returning weekly and monthly data rolled up, the clean up will not be done ( see {@link CIQ.ChartEngine#dontRoll} ).
       *
       * @param  {array} quotes The quote array to be gap-filled
       * @param  {CIQ.ChartEngine.Chart} [chart] Optional chart
       * @return {array} The quote array with gaps filled in.
       * @memberOf CIQ.ChartEngine
       * @since 07/01/2015 it now supports cleanups for daily intervals and foreign exchanges insted of just intraday equities.
       */
      CIQ.ChartEngine.prototype.doCleanupGaps = function(quotes, chart) {
        var interval = this.layout.interval
        var makeGaps = this.cleanupGaps == 'gap' // "carry" or any other non-false will cause the closing price to carry, otherwise a null will be injected

        if (!this.cleanupGaps) return quotes
        if (interval == 'tick') return quotes
        if (!quotes || !quotes.length) return quotes
        if (!chart) chart = this.chart

        // doCleanupGaps works on the raw masterData, so if we're rolling up month or week then be sure to actually
        // cleanup gaps on the masterData which will be "day"
        if (interval == 'month' || interval == 'week') {
          if (this.dontRoll) return quotes // We won't try to fill gaps on raw month or week data
          interval = 'day'
        }

        var _make_date = function(_quote) {
          var _dt
          if (_quote.DT) {
            _dt = _quote.DT
          } else {
            _dt = CIQ.strToDateTime(_quote.Date)
          }
          return _dt
        }

        var new_quotes = []
        var currentQuote = quotes[0]
        new_quotes.push(quotes[0])

        var iter_parms = {
          begin: _make_date(currentQuote),
          interval: interval,
          periodicity: 1,
          timeUnit: this.layout.timeUnit,
          inZone: this.dataZone,
          outZone: this.dataZone,
        }
        var iter = chart.market.newIterator(iter_parms)
        for (var i = 1; i < quotes.length; i++) {
          var nextQuote = quotes[i]
          var mdt = iter.next() // market date
          var qdt = _make_date(nextQuote) // quote date

          // Loop through the iterator adding a dummy quote for every missing market date between currentQuote and nextQuote
          while (mdt < qdt) {
            var close = makeGaps ? null : currentQuote.Close
            var adjClose = makeGaps ? null : currentQuote.Adj_Close
            new_quotes.push({
              DT: mdt,
              Open: close,
              High: close,
              Low: close,
              Close: close,
              Volume: 0,
              Adj_Close: adjClose,
            })
            mdt = iter.next()
          }
          new_quotes.push(nextQuote)
          currentQuote = nextQuote
        }
        return new_quotes
      }

      /**
       * ** The UI portion if this namespace is maintained for legacy implementations only (not using web components). New implementations should use functionality included in the web components (stxUI.js) **<br>
       * Comparison namespace
       * @namespace
       * @name  CIQ.Comparison
       */
      CIQ.Comparison = function() {} // Create namespace

      /**
       * Transform function for comparison charting
       * @param  {CIQ.ChartEngine} stx	  The charting object
       * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
       * @param  {number} price The price to transform
       * @return {number}			The transformed price (into percentage)
       * @memberOf CIQ.Comparison
       */
      CIQ.Comparison.priceToPercent = function(stx, chart, price) {
        return Math.round(((price - CIQ.Comparison.baseline) / CIQ.Comparison.baseline) * 100 * 10000) / 10000
      }

      /**
       * Untransform function for comparison charting
       * @param  {CIQ.ChartEngine} stx	  The charting object
       * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
       * @param  {number} percent The price to untransform
       * @return {number}			The untransformed price
       * @memberOf CIQ.Comparison
       */
      CIQ.Comparison.percentToPrice = function(stx, chart, percent) {
        return CIQ.Comparison.baseline * (1 + percent / 100)
      }

      CIQ.Comparison.stopSort = function(lhs, rhs) {
        return lhs - rhs
      }

      CIQ.Comparison.createComparisonSegmentInner = function(stx, chart) {
        // create an array of the fields that we're going to compare
        var fields = []
        var field
        for (field in chart.series) {
          if (chart.series[field].parameters.isComparison) {
            fields.push(field)
          }
        }
        var priceFields = ['Close', 'Open', 'High', 'Low', 'iqPrevClose']

        chart.dataSegment = []
        var firstQuote = null
        var firstTick = chart.dataSet.length - chart.scroll
        var lastTick = firstTick + chart.maxTicks

        // Create the list of displayable comparison stops
        var stopPointer = 0
        var stops = []
        var i
        for (i = 0; i < stx.drawingObjects.length; i++) {
          var drawing = stx.drawingObjects[i]
          if (drawing.name == 'comparison_stop')
            if (drawing.tick > firstTick && drawing.tick <= lastTick) stops.push(drawing.tick)
        }
        stops.sort(CIQ.Comparison.stopSort)
        var transformsToProcess = chart.maxTicks + 3 //make sure we have transformed enough data points that we plot the y-axis intercept correctly
        for (i = 0; i <= transformsToProcess; i++) {
          if (i == transformsToProcess) i = -1 //go back and revisit the tick before the first
          position = firstTick + i
          if (position < chart.dataSet.length && position >= 0) {
            var quote = chart.dataSet[position]
            if (!firstQuote && quote.Close === 0) continue // can't calculate the percentage gain/los if the close is 0.
            if (!firstQuote) {
              firstQuote = CIQ.clone(quote)
            }

            // iterate through the fields calculating the percentage gain/loss
            // We store the results in the "transform" subobject of the data set
            // Note we inline the math calculation to save overhead of JS function call
            if (!quote.transform)
              quote.transform = {
                cache: {},
                DT: quote.DT,
                Date: quote.Date,
              }
            CIQ.Comparison.baseline = firstQuote.Close
            var j
            for (j = 0; j < priceFields.length; j++) {
              field = priceFields[j]
              if (quote[field] || quote[field] === 0)
                quote.transform[field] =
                  Math.round(((quote[field] - CIQ.Comparison.baseline) / CIQ.Comparison.baseline) * 100 * 10000) / 10000 // first compute the close pct, our baseline
            }

            var s = stx.layout.studies
            if (s) {
              for (var n in s) {
                var sd = s[n]
                if (!stx.panels[sd.panel] || stx.panels[sd.panel].name != sd.chart.name) continue
                for (field in sd.outputMap) {
                  if (quote[field] || quote[field] === 0)
                    quote.transform[field] =
                      Math.round(((quote[field] - CIQ.Comparison.baseline) / CIQ.Comparison.baseline) * 100 * 10000) /
                      10000 // first compute the close pct, our baseline
                }
                if (
                  sd.referenceOutput &&
                  (quote[sd.referenceOutput + ' ' + sd.name] || quote[sd.referenceOutput + ' ' + sd.name] === 0)
                )
                  quote.transform[sd.referenceOutput + ' ' + sd.name] =
                    Math.round(
                      ((quote[sd.referenceOutput + ' ' + sd.name] - CIQ.Comparison.baseline) /
                        CIQ.Comparison.baseline) *
                        100 *
                        10000,
                    ) / 10000 // first compute the close pct, our baseline
              }
            }

            for (j in stx.plugins) {
              var plugin = stx.plugins[j]
              if (!plugin.transformOutputs) continue
              for (field in plugin.transformOutputs) {
                if (quote[field] || quote[field] === 0)
                  quote.transform[field] =
                    Math.round(((quote[field] - CIQ.Comparison.baseline) / CIQ.Comparison.baseline) * 100 * 10000) /
                    10000 // first compute the close pct, our baseline
              }
            }

            // Reset baseline for each series at each stop
            var createAStop = false
            if (stops && stopPointer < stops.length) {
              if (position === stops[stopPointer]) {
                createAStop = true
                stopPointer++
              }
            }
            var mouseStop = null
            if (stx.activeDrawing && stx.activeDrawing.name == 'comparison_stop') {
              mouseStop = stx.activeDrawing.tick
            }
            var current
            if (createAStop || position == mouseStop) {
              for (j = 0; j < fields.length; j++) {
                field = fields[j]
                current = quote[field]
                firstQuote[field] = current / (1 + quote.transform.Close / 100)
              }
            }

            // Transform the series comparisons to percent
            for (j = 0; j < fields.length; j++) {
              field = fields[j]
              current = quote[field]
              if (current || current === 0) {
                // Skip blanks
                var baseline = firstQuote[field]
                if (!baseline && baseline !== 0) {
                  // This takes care of a stock that starts part way through the comparison
                  // assumes the the quote.comparison.Close has already been calculated and sets us at that value
                  firstQuote[field] = baseline = current / (1 + quote.transform.Close / 100)
                }
                if (baseline !== 0)
                  quote.transform[field] = Math.round(((current - baseline) / baseline) * 100 * 10000) / 10000
              }
            }
            chart.dataSegment.push(quote)
          } else if (position < 0) {
            chart.dataSegment.push(null)
          }
          if (i < 0) break //we revisited tick before first so we are done
        }
      }

      /**
       * Formats the percentage values on the comparison chart
       * @param  {CIQ.ChartEngine} stx	The chart object
       * @param  {CIQ.ChartEngine.Panel} panel The panel
       * @param  {number} price The percentage (whole number)
       * @return {string}		  The percentage formatted as a percent (possibly using localization if set in stx)
       * @memberOf CIQ.Comparison
       */
      CIQ.Comparison.priceFormat = function(stx, panel, price) {
        if (price === null || typeof price == 'undefined') return ''
        var priceTick = panel.yAxis.priceTick
        var internationalizer = stx.internationalizer
        if (internationalizer) {
          if (priceTick >= 1) price = internationalizer.percent0.format(price / 100)
          else if (priceTick >= 0.1) price = internationalizer.percent1.format(price / 100)
          else if (priceTick >= 0.01) price = internationalizer.percent2.format(price / 100)
          else if (priceTick >= 0.001) price = internationalizer.percent3.format(price / 100)
          else price = internationalizer.percent4.format(price)
        } else {
          if (priceTick >= 1) price = price.toFixed(0) + '%'
          else if (priceTick >= 0.1) price = price.toFixed(1) + '%'
          else if (priceTick >= 0.01) price = price.toFixed(2) + '%'
          else if (priceTick >= 0.001) price = price.toFixed(3) + '%'
          else price = price.toFixed(4) + '%'
        }
        if (parseFloat(price) === 0 && price.charAt(0) == '-') {
          // remove minus sign from -0%, -0.0%, etc
          price = price.substring(1)
        }
        return price
      }
      /**
       * Creates and maintains correlation coefficient panels. Called from CIQ.Comparison.add but could be called from elsewhere as well.
       * @param {object} stx			 The chart object
       * @param {string} symbol The symbol to correlate
       * @private
       */
      CIQ.Comparison.correlate = function(stx, symbol) {
        if (!CIQ.Comparison.requestCorrelation || correlationPeriod <= 0) return
        var correlationPeriod = parseInt($$$('.stxCorrelate .stx-input-field').value, 10)

        var corrPanel = stx.panels[CIQ.Comparison.correlationPanel + ' (' + correlationPeriod + ')']
        var inputs = {
          id: CIQ.Comparison.correlationPanel + ' (' + correlationPeriod + ')',
          Period: correlationPeriod,
          'Compare To': [],
        }
        var outputs = {}
        var panelName = null
        if (corrPanel) {
          for (var i = 0; i < stx.layout.studies[corrPanel.name].inputs['Compare To'].length; i++) {
            inputs['Compare To'].push(stx.layout.studies[corrPanel.name].inputs['Compare To'][i])
          }
          for (var o in stx.layout.studies[corrPanel.name].outputs) {
            outputs[o] = stx.layout.studies[corrPanel.name].outputs[o]
          }
          panelName = corrPanel.name
        }
        inputs['Compare To'].push(symbol)
        outputs['Result ' + symbol] = CIQ.Comparison.colorSelection
        CIQ.Studies.addStudy(stx, 'correl', inputs, outputs, null, panelName)

        for (var panel in stx.panels) {
          if (stx.panels[panel].name.indexOf(CIQ.Comparison.correlationPanel) === 0) {
            var compareArray = stx.layout.studies[stx.panels[panel].name].inputs['Compare To']
            for (var ii = 0; ii < compareArray.length; ii++) {
              if (compareArray[ii] == symbol) {
                stx.layout.studies[stx.panels[panel].name].outputs['Result ' + symbol] = CIQ.Comparison.colorSelection
              }
            }
          }
        }
      }

      /**
       * Turns on and off the checkbox for generating correlation coefficient
       * @memberOf CIQ.Comparison
       */
      CIQ.Comparison.toggleCorrelate = function(stx) {
        CIQ.Comparison.requestCorrelation = !CIQ.Comparison.requestCorrelation
        var display = $$$('.stxCorrelate .stx-checkbox')
        if (display) {
          CIQ.unappendClassName(display, (!CIQ.Comparison.requestCorrelation).toString())
          CIQ.appendClassName(display, CIQ.Comparison.requestCorrelation.toString())
        }
      }
      /**
       * Turns comparison charting on or off and sets the transform
       * @param {boolean} onOff Turn on or off
       * @param {CIQ.ChartEngine.Chart} [chart] The specific chart for comparisons
       * @memberOf CIQ.ChartEngine
       * @since  04-2015 Signature has been revised
       */
      CIQ.ChartEngine.prototype.setComparison = function(onOff, chart) {
        if (!chart) chart = this.chart
        if (typeof chart == 'string') chart = this.charts[chart]
        if (!chart.isComparison && onOff) {
          this.setTransform(chart, CIQ.Comparison.priceToPercent, CIQ.Comparison.percentToPrice)
          chart.panel.yAxis.priceFormatter = CIQ.Comparison.priceFormat
          chart.panel.yAxis.whichSet = 'dataSegment'
        } else if (chart.isComparison && !onOff) {
          this.unsetTransform(chart)
          chart.panel.yAxis.priceFormatter = null
          chart.panel.yAxis.whichSet = 'dataSet'
        }
        chart.isComparison = onOff
      }

      /**
       * ID of the study panel to create for the correlation coefficient
       * @memberOf CIQ.Comparison
       * @version ChartIQ Advanced Package
       */
      CIQ.Comparison.correlationPanel = 'correl'

      /**
       * ** This function is maintained for legacy implementations only (not using web components). New implementations should use functionality included in the web components (stxUI.js) **<br>
       * Initial value of UI input for toggling correlation coefficient
       * @memberOf CIQ.Comparison
       * @version ChartIQ Advanced Package
       */
      CIQ.Comparison.requestCorrelation = false

      if (typeof document != 'undefined') document.addEventListener('contextmenu', CIQ.ChartEngine.handleContextMenu)

      return _exports
    }

  var __js_core_market_ =
    // -------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc
    // -------------------------------------------------------------------------------------------
    function(_exports) {
      if (!_exports) _exports = {}

      /**
	 * The market class is what the chart uses to to manage market hours for the different exchanges.
	 * It uses `Market Definitions` to decide when the market is open or closed.
	 * Although you can construct many market classes with different definitions to be used in your functions, only one market definition can be attached to the chart at any given time. 
	 * Once a market is defined, an [iterator]{@link CIQ.Market#newIterator} can be created to traverse trough time, taking into account the market hours. 
	 * Additionally a variety of convenience functions can be used to check the market status, such as {@link CIQ.Market#isOpen} or {@link CIQ.Market#isMarketDay}.
	 *
	 * A chart will operate 24x7, unless a market definition is assigned to it. 
	 * See {@link CIQ.ChartEngine#setMarket} and {@link CIQ.ChartEngine#setMarketFactory} for instructions on how to assign a market definition to a chart.
	 * The chart also provides convenience functions that allows you to traverse trough time at the current chart periodicity without having to explicitly create a new iterator. 
	 * See {@link CIQ.ChartEngine#getNextInterval} and {@link CIQ.ChartEngine#standardMarketIterator} for details.
	 *
	 * `Market Definitions` are JavaScript objects which must contain the following elements:
	 * - `name` : A string. Name of the market for which the rules are for. 
	 * - `rules` : An array. The rules indicating the times the market is open or closed.
	 * - `market_tz` : A string. Time zone in which the market operates. A valid timezone from the timeZoneData.js library.
	 * - `hour_aligned`: A boolean. If set to true, market opening and closing times will be set to the exact start of the hour of time, ignoring any minutes, seconds or millisecond offsets.
	 * - `convertOnDaily` : A boolean. By default, daily charts are not converted for timezone. Set this to true to convert for daily charts.
	 *
	 * Example:
	 * ```
	 * 	{
	 * 		name: "SAMPLE-MARKET",
	 * 		market_tz: "America/Chicago",
	 * 		hour_aligned: true,
	 * 		rules: [
	 * 				{"dayofweek": 1, "open": "09:00", "close": "17:00"}
	 * 		]
	 *	};
	 * ```
	 *
	 * Instructions for creating `Market Definitions`:
	 *
	 * - By default a market assumes that it is always open unless otherwise defined.
	 * - Seconds are not considered for open or close times, but are okay for intra day data.
	 * - Rules are processed top to bottom.
	 * - All non-default market rules are disabled by default.  Non-default market rules will have a `name` parameter included.
	 *  
	 * 		This is a rule for a 'pre' market session: 
	 * 			`{"dayofweek": 1, "open": "08:00", "close": "09:30", name: "pre"}`
	 *  
	 * - First the `dayofweek` wild card rules are processed. As soon as a rule is matched processing breaks.
	 *
	 * 		This rule says the market is open every Monday from 9:30 to 16:00:
	 * 			`{"dayofweek": 1, "open": "09:30", "close": "16:00"}`
	 *
	 * - After the `dayofweek` rules are processed all of the extra rules are processed.
	 * - Wildcard rules should be placed first and more specific rules should be placed later.
	 *
	 * 		This rule is a wildcard rule for Christmas. If Christmas is on Mon the
	 * 		first set of rules will evaluate to true because the dayofweek rule for day
	 * 		one will match. Then this rule will match if the date is the 25th of
	 * 		December in any year and because open is 00:00 and close is 00:00 it will evaluate to false:
	 * 			`{"date": "*-12-25", "open": "00:00", "close": "00:00"}`
	 *
	 * - After wildcard exceptions any specific day and time can be matched.
	 *
	 * 		This rule says closed on this day only. Note that open and closed attributes
	 * 		can be omitted to save typing if the market is closed the entire day:
	 * 			`{"date": "2016-01-18"} //Martin Luther King day.`
	 *
	 * 		This rules says closed on 12-26:
	 * 			`{"date": "2016-12-26"}, //Observed Christmas in 2016`
	 *
	 * 		This rule says partial session
	 * 			`{"date": "2015-12-24", "open": "9:30", "close": "13:00"} //Christmas eve`
	 *
	 * See example section for a compete NYSE definition.
	 * 
	 * Once defined, it can be used to create a new market instnce.
	 * 
	 * Example:
	 * 
	 * ```
	 *	var thisMarket = new CIQ.Market(marketDefinition);
	 * ```
	 *
	 * If no definition is provded, the market will operate 24x7.
	 * 
	 * Example:
	 * ```
	 * new CIQ.Market();
	 * ```
	 * 
	 * @param {Object} [market_definition] A json object that contains the rules for some market. If not defined default market is always open.
	 *
	 * @constructor
	 * @name  CIQ.Market
	 * @since 
	 * <br>04-2016-08
	 * <br>06-2016-02 - You can now specify times for different market sessions ('pre',post', etc) to be used with the sessions visualization tools. See {@link CIQ.ExtendedHours}
	 * 
	 * @example
	 * CIQ.Market.NYSE = {
			"name": "NYSE",
			"market_tz": "America/New_York",
			"hour_aligned": false,
			"rules": [
				//First open up the regular trading times
				//Note that sat and sun (in this example) are always closed because
				//everything is closed by default and we didn't explicitly open
				//them.
				{"dayofweek": 1, "open": "09:30", "close": "16:00"}, //mon
				{"dayofweek": 2, "open": "09:30", "close": "16:00"},
				{"dayofweek": 3, "open": "09:30", "close": "16:00"},
				{"dayofweek": 4, "open": "09:30", "close": "16:00"},
				{"dayofweek": 5, "open": "09:30", "close": "16:00"}, //fri
	
				//After Hours premarket
				{"dayofweek": 1, "open": "08:00", "close": "09:30", name: "pre"}, //mon
				{"dayofweek": 2, "open": "08:00", "close": "09:30", name: "pre"},
				{"dayofweek": 3, "open": "08:00", "close": "09:30", name: "pre"},
				{"dayofweek": 4, "open": "08:00", "close": "09:30", name: "pre"},
				{"dayofweek": 5, "open": "08:00", "close": "09:30", name: "pre"}, //fri

				//After Hours post
				{"dayofweek": 1, "open": "16:00", "close": "20:00", name: "post"}, //mon
				{"dayofweek": 2, "open": "16:00", "close": "20:00", name: "post"},
				{"dayofweek": 3, "open": "16:00", "close": "20:00", name: "post"},
				{"dayofweek": 4, "open": "16:00", "close": "20:00", name: "post"},
				{"dayofweek": 5, "open": "16:00", "close": "20:00", name: "post"}, //fri

				//Now mon thru friday is open. Close any exceptions
	
				//always closed on Christmas
				{"date": "*-12-25", "open": "00:00", "close": "00:00"},
	
				//always closed on 4th of July
				{"date": "*-07-04", "open": "00:00", "close": "00:00"},
	
				//always close on new years day
				{"date": "*-01-01", "open": "00:00", "close": "00:00"},
	
				//Some holidays are observed on different days each year or if
				//the day falls on a weekend. Each of those rules must be specified.
				{"date": "2012-01-02", "open": "00:00", "close": "00:00"},
	
				//As a special case if no open and close attributes are set they
				//will be assumed "00:00" and "00:00" respectively
				{"date": "2017-01-02"},
	
				{"date": "2016-01-18"},
				{"date": "2016-02-15"},
				{"date": "2016-03-25"},
				{"date": "2016-05-30"},
				{"date": "2016-09-05"},
				{"date": "2016-11-24"},
				{"date": "2016-11-25", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2016-11-25", "open": "9:30", "close": "13:00"},
				{"date": "2016-12-26"},
	
				{"date": "2015-01-19"},
				{"date": "2015-02-16"},
				{"date": "2015-04-03"},
				{"date": "2015-05-25"},
				{"date": "2015-07-03"},
				{"date": "2015-09-07"},
				{"date": "2015-11-26"},
				{"date": "2015-11-27", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2015-11-27", "open": "9:30", "close": "13:00"},
				{"date": "2015-12-24", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2015-12-24", "open": "9:30", "close": "13:00"},
	
				{"date": "2014-01-20"},
				{"date": "2014-02-17"},
				{"date": "2014-04-18"},
				{"date": "2014-05-26"},
				{"date": "2014-09-01"},
				{"date": "2014-11-27"},
				{"date": "2014-07-03", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2014-07-03", "open": "9:30", "close": "13:00"},
				{"date": "2014-11-28", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2014-11-28", "open": "9:30", "close": "13:00"},
				{"date": "2014-12-24", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2014-12-24", "open": "9:30", "close": "13:00"},
	
				{"date": "2013-01-21"},
				{"date": "2013-02-18"},
				{"date": "2013-03-29"},
				{"date": "2013-05-27"},
				{"date": "2013-09-02"},
				{"date": "2013-11-28"},
				{"date": "2013-07-03", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2013-07-03", "open": "9:30", "close": "13:00"},
				{"date": "2013-11-29", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2013-11-29", "open": "9:30", "close": "13:00"},
				{"date": "2013-12-24", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2013-12-24", "open": "9:30", "close": "13:00"},
	
				{"date": "2012-01-16"},
				{"date": "2012-02-20"},
				{"date": "2012-04-06"},
				{"date": "2012-05-28"},
				{"date": "2012-09-03"},
				{"date": "2012-10-29"},
				{"date": "2012-10-30"},
				{"date": "2012-11-22"},
				{"date": "2012-07-03", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2012-07-03", "open": "9:30", "close": "13:00"},
				{"date": "2012-11-23", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2012-11-23", "open": "9:30", "close": "13:00"},
				{"date": "2012-12-24", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2012-12-24", "open": "9:30", "close": "13:00"}
			]
		};
	 */
      var CIQ = _exports.CIQ
      if (!CIQ) {
        CIQ = function() {}
        _exports.CIQ = CIQ
      }

      CIQ.Market = function(market_definition) {
        this.market_def = false
        this.rules = false
        this.normalHours = []
        this.extraHours = []
        this.class_name = 'Market'
        if (typeof timezoneJS === 'undefined') {
          this.tz_lib = Date //needed to run unit tests
        } else {
          this.tz_lib = timezoneJS.Date
        }
        this.market_tz = ''
        this.hour_aligned = false
        this.convertOnDaily = false
        this.enabled_by_default = false

        //needed to run unit tests otherwise should do nothing
        if (typeof market_definition != 'undefined' && market_definition && market_definition != {}) {
          if (market_definition.market_definition) {
            market_definition = market_definition.market_definition
          }
          if (market_definition.rules) {
            this.rules = market_definition.rules
          }
          if (market_definition.market_tz) {
            this.market_tz = market_definition.market_tz
          }
          if (market_definition.convertOnDaily) {
            this.convertOnDaily = market_definition.convertOnDaily
          }
          if (typeof market_definition.hour_aligned) {
            this.hour_aligned = market_definition.hour_aligned
          }
          if (typeof market_definition.enabled_by_default !== 'undefined') {
            if (market_definition.enabled_by_default instanceof Array) {
              this.enabled_by_default = market_definition.enabled_by_default
            }
          }

          this.market_def = market_definition
          if (this.market_def.name === undefined) {
            this.market_def.name = 'no market name specified'
          }
        } else {
          return
        }

        CIQ.Market._createTimeSegments(this)
      }

      //String constants used with market iterators
      CIQ.Market.MILLISECOND = 'millisecond'
      CIQ.Market.SECOND = 'second'
      CIQ.Market.MINUTE = 'minute'
      CIQ.Market.HOUR = 'hour'
      CIQ.Market.DAY = 'day'
      CIQ.Market.WEEK = 'week'
      CIQ.Market.MONTH = 'month'

      // TODO, holidays for futures,forex,metals
      CIQ.Market.GLOBEX = {
        name: 'GLOBEX',
        market_tz: 'America/Chicago',
        hour_aligned: true,
        rules: [
          { dayofweek: 0, open: '15:00', close: '24:00' }, //sun
          { dayofweek: 1, open: '00:00', close: '24:00' },
          { dayofweek: 2, open: '00:00', close: '24:00' },
          { dayofweek: 3, open: '00:00', close: '24:00' },
          { dayofweek: 4, open: '00:00', close: '24:00' },
          { dayofweek: 5, open: '00:00', close: '18:00' },
        ],
      }

      CIQ.Market.FOREX = {
        name: 'FOREX',
        market_tz: 'America/New_York',
        hour_aligned: true,
        rules: [
          { dayofweek: 0, open: '15:00', close: '24:00' }, //  9AM NZ time in the winter and 7AM NZ time in the summer.
          { dayofweek: 1, open: '00:00', close: '17:00' },
          { dayofweek: 1, open: '17:00', close: '24:00' },
          { dayofweek: 2, open: '00:00', close: '17:00' },
          { dayofweek: 2, open: '17:00', close: '24:00' },
          { dayofweek: 3, open: '00:00', close: '17:00' },
          { dayofweek: 3, open: '17:00', close: '24:00' },
          { dayofweek: 4, open: '00:00', close: '17:00' },
          { dayofweek: 4, open: '17:00', close: '24:00' },
          { dayofweek: 5, open: '00:00', close: '17:00' },
        ],
      }

      CIQ.Market.METALS = {
        name: 'METALS',
        market_tz: 'America/New_York',
        hour_aligned: true,
        rules: [
          { dayofweek: 0, open: '18:00', close: '24:00' },
          { dayofweek: 1, open: '00:00', close: '17:15' },
          { dayofweek: 1, open: '18:00', close: '24:00' },
          { dayofweek: 2, open: '00:00', close: '17:15' },
          { dayofweek: 2, open: '18:00', close: '24:00' },
          { dayofweek: 3, open: '00:00', close: '17:15' },
          { dayofweek: 3, open: '18:00', close: '24:00' },
          { dayofweek: 4, open: '00:00', close: '17:15' },
          { dayofweek: 4, open: '18:00', close: '24:00' },
          { dayofweek: 5, open: '00:00', close: '17:15' },
        ],
      }

      CIQ.Market.NYSE = {
        name: 'NYSE',
        market_tz: 'America/New_York',
        hour_aligned: false,
        rules: [
          //First open up the regular trading times
          //Note that sat and sun (in this example) are always closed because
          //everything is closed by default and we didn't explicitly open
          //them.
          { dayofweek: 1, open: '09:30', close: '16:00' }, //mon
          { dayofweek: 2, open: '09:30', close: '16:00' },
          { dayofweek: 3, open: '09:30', close: '16:00' },
          { dayofweek: 4, open: '09:30', close: '16:00' },
          { dayofweek: 5, open: '09:30', close: '16:00' }, //fri

          //After Hours premarket
          { dayofweek: 1, open: '04:00', close: '09:30', name: 'pre' }, //mon
          { dayofweek: 2, open: '04:00', close: '09:30', name: 'pre' },
          { dayofweek: 3, open: '04:00', close: '09:30', name: 'pre' },
          { dayofweek: 4, open: '04:00', close: '09:30', name: 'pre' },
          { dayofweek: 5, open: '04:00', close: '09:30', name: 'pre' }, //fri

          //After Hours post
          { dayofweek: 1, open: '16:00', close: '20:00', name: 'post' }, //mon
          { dayofweek: 2, open: '16:00', close: '20:00', name: 'post' },
          { dayofweek: 3, open: '16:00', close: '20:00', name: 'post' },
          { dayofweek: 4, open: '16:00', close: '20:00', name: 'post' },
          { dayofweek: 5, open: '16:00', close: '20:00', name: 'post' }, //fri

          //Now mon thru friday is open. Close any exceptions

          //always closed on Christmas
          { date: '*-12-25', open: '00:00', close: '00:00' },

          //always closed on 4th of July
          { date: '*-07-04', open: '00:00', close: '00:00' },

          //always close on new years day
          { date: '*-01-01', open: '00:00', close: '00:00' },

          //Some holidays are observed on different days each year or if
          //the day falls on a weekend. Each of those rules must be specified.
          { date: '2012-01-02', open: '00:00', close: '00:00' },

          //As a special case if no open and close attributes are set they
          //will be assumed "00:00" and "00:00" respectively
          { date: '2017-01-02' },
          { date: '2017-01-16' },
          { date: '2017-02-20' },
          { date: '2017-04-14' },
          { date: '2017-05-29' },
          { date: '2017-07-03', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2017-07-03', open: '9:30', close: '13:00' },
          { date: '2017-09-04' },
          { date: '2017-11-23' },
          { date: '2017-11-24', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2017-11-24', open: '9:30', close: '13:00' },
          { date: '2017-12-26' },

          { date: '2016-01-18' },
          { date: '2016-02-15' },
          { date: '2016-03-25' },
          { date: '2016-05-30' },
          { date: '2016-09-05' },
          { date: '2016-11-24' },
          { date: '2016-11-25', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2016-11-25', open: '9:30', close: '13:00' },
          { date: '2016-12-26' },

          { date: '2015-01-19' },
          { date: '2015-02-16' },
          { date: '2015-04-03' },
          { date: '2015-05-25' },
          { date: '2015-07-03' },
          { date: '2015-09-07' },
          { date: '2015-11-26' },
          { date: '2015-11-27', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2015-11-27', open: '9:30', close: '13:00' },
          { date: '2015-12-24', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2015-12-24', open: '9:30', close: '13:00' },

          { date: '2014-01-20' },
          { date: '2014-02-17' },
          { date: '2014-04-18' },
          { date: '2014-05-26' },
          { date: '2014-09-01' },
          { date: '2014-11-27' },
          { date: '2014-07-03', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2014-07-03', open: '9:30', close: '13:00' },
          { date: '2014-11-28', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2014-11-28', open: '9:30', close: '13:00' },
          { date: '2014-12-24', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2014-12-24', open: '9:30', close: '13:00' },

          { date: '2013-01-21' },
          { date: '2013-02-18' },
          { date: '2013-03-29' },
          { date: '2013-05-27' },
          { date: '2013-09-02' },
          { date: '2013-11-28' },
          { date: '2013-07-03', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2013-07-03', open: '9:30', close: '13:00' },
          { date: '2013-11-29', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2013-11-29', open: '9:30', close: '13:00' },
          { date: '2013-12-24', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2013-12-24', open: '9:30', close: '13:00' },

          { date: '2012-01-16' },
          { date: '2012-02-20' },
          { date: '2012-04-06' },
          { date: '2012-05-28' },
          { date: '2012-09-03' },
          { date: '2012-10-29' },
          { date: '2012-10-30' },
          { date: '2012-11-22' },
          { date: '2012-07-03', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2012-07-03', open: '9:30', close: '13:00' },
          { date: '2012-11-23', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2012-11-23', open: '9:30', close: '13:00' },
          { date: '2012-12-24', open: '4:00', close: '9:30', name: 'pre' },
          { date: '2012-12-24', open: '9:30', close: '13:00' },
        ],
      }

      /**
       * Set of rules for identifying instrument's exchange and deriving a market definition from a symbol.
       * This is only required if your chart will need to know the operating hours for the different exchanges.
       * If using a 24x7 chart, this class is not needed.
       *
       * By default these rules are assigned to functions using ChartIQ symbology to identify the exchange.
       *
       * **Before using, they must be reviewed and if necessary assigned to functions containing logic to match symbology rules for your quote data.**
       * @namespace
       * @name  CIQ.Market.Symbology
       * @since 04-2016-08
       */
      CIQ.Market.Symbology = function() {}

      /**
       * Returns true if the instrument is foreign.
       * This is dependent on the market data feed and should be overridden accordingly.
       * Currently if the instrument contains a period (.) it will be considered foreign (non US). (e.g. .XXXX)
       * @param  {string}  symbol The symbol
       * @return {Boolean}        True if it's a foreign symbol
       * @memberOf CIQ.Market.Symbology
       * @since 04-2016-08
       */
      CIQ.Market.Symbology.isForeignSymbol = function(symbol) {
        if (!symbol) return false
        return symbol.indexOf('.') != -1
      }

      /**
       * Returns true if the instrument is a futures.
       * This is dependent on the market data feed and should be overridden accordingly.
       * Currently if the symbol begins with `/` it will be considered a future. (e.g. /C)
       * @param  {string}  symbol The symbol
       * @return {Boolean}        True if it's a futures symbol
       * @memberOf CIQ.Market.Symbology
       * @since 04-2016-08
       */
      CIQ.Market.Symbology.isFuturesSymbol = function(symbol) {
        if (!symbol) return false
        if (symbol.indexOf('/') !== 0 || symbol == '/') return false
        return true
      }

      /**
       * Returns true if the instrument is a forex symbol.
       * This is dependent on the market data feed and should be overridden accordingly.
       * Currently if the symbol begins with `^` and is followed by 6 alpha caracters, or just 6 alpha characters long without a '^', it will be considered forex.(e.g. ^EURUSD)
       * @param  {string}  symbol The symbol
       * @return {Boolean}        True if it's a forex symbol
       * @memberOf CIQ.Market.Symbology
       * @since 04-2016-08
       */
      CIQ.Market.Symbology.isForexSymbol = function(symbol) {
        if (!symbol) return false
        if (CIQ.Market.Symbology.isForeignSymbol(symbol)) return false
        if (CIQ.Market.Symbology.isFuturesSymbol(symbol)) return false
        if (symbol.length < 6 || symbol.length > 7) return false
        if (symbol.length == 6 && symbol[5] == 'X') return false
        if (/\^?[A-Za-z]{6}/.test(symbol)) return true
        return false
      }

      /**
       * Returns true if the symbol is a metal/currency or currency/metal pair
       * This is dependent on the market data feed and should be overridden accordingly.
       * Currently it must be a [forex]{@link CIQ.Market.Symbology.isForexSymbol} for a precious metal. (e.g. ^XAUUSD - looks for XAU,XPD,XPT,XAG only)
       * @param  {string}   symbol The symbol
       * @param  {boolean}  inverse Set to true to test specifically for a currency/metal pair.
       * @return {Boolean}        True if it's a metal symbol
       * @memberOf CIQ.Market.Symbology
       * @since 04-2016-08
       */
      CIQ.Market.Symbology.isForexMetal = function(symbol, inverse) {
        if (!symbol) return false
        if (!CIQ.Market.Symbology.isForexSymbol(symbol)) return false
        if (symbol.charAt(0) != '^') symbol = '^' + symbol
        if (',XAU,XPD,XPT,XAG,'.indexOf(',' + symbol.substr(4, 3) + ',') != -1) return true
        else if (!inverse && ',XAU,XPD,XPT,XAG,'.indexOf(',' + symbol.substr(1, 3) + ',') != -1) return true
        return false
      }

      /**
       * Returns true if the symbol is a forex or a future
       * This is dependent on the market data feed and should be overridden accordingly.
       * @param  {string}   symbol The symbol
       * @return {Boolean}        True if the symbol is a forex or a future
       * @memberOf CIQ.Market.Symbology
       * @since 04-2016-08
       */
      CIQ.Market.Symbology.isForexFuturesSymbol = function(symbol) {
        if (CIQ.Market.Symbology.isForexSymbol(symbol)) return true
        if (CIQ.Market.Symbology.isFuturesSymbol(symbol)) return true
        return false
      }

      /**
       * This is a function that takes a symbolObject of form accepted by {@link CIQ.ChartEngine#newChart}, and returns a market definition.
       * When loading it with {@link CIQ.ChartEngine#setMarketFactory}, it will be used by the chart to dynamically change market definitions when a new instrument is activated.
       * See {@link CIQ.Market} for instruction on how to create a market definition.
       * @param  {Object} symbolObject Symbol object of form accepted by {@link CIQ.ChartEngine#newChart}
       * @return {Object} A market definition. See {@link CIQ.Market} for instructions.
       * @memberOf CIQ.Market.Symbology
       * @since 04-2016-08
       */
      CIQ.Market.Symbology.factory = function(symbolObject) {
        var symbol = symbolObject.symbol
        if (CIQ.Market.Symbology.isForeignSymbol(symbol)) return null // 24 hour market definition
        if (CIQ.Market.Symbology.isFuturesSymbol(symbol)) return CIQ.Market.GLOBEX
        if (CIQ.Market.Symbology.isForexMetal(symbol)) return CIQ.Market.METALS
        if (CIQ.Market.Symbology.isForexSymbol(symbol)) return CIQ.Market.FOREX
        return CIQ.Market.NYSE
      }

      /**
       * Primitive to find the next matching time segement taking into account
       * rules for adjacent sessions.
       * @param {Date} date A start date time.
       * @param {Boolean} open True if looking for an open time
       * @return A date that falls somewhere in a matching time segment. Probably 1 before close. Or null if no rules are defined
       * @memberOf CIQ.Market
       * @since  05-2016-10
       * @private
       */
      CIQ.Market.prototype._find_next_segment = function(date, open) {
        if (!this.market_def) return null // special case
        if (!this.rules) return null //special case
        var d = new Date(date)
        var iter = this.newIterator({
          begin: d,
          interval: 1,
        })
        if (this._wasOpenIntraDay(d)) {
          var hours = this.zseg_match.close_parts.hours
          var minutes = this.zseg_match.close_parts.minutes
          d.setHours(hours)
          d.setMinutes(minutes)
          iter = this.newIterator({
            begin: d,
            interval: 1,
          })
        }
        return iter.next()
      }

      /**
       * Primitive to find the previous matching time segement taking into account
       * rules for adjacent sessions.
       * @param {Date} date A start date time.
       * @param {Boolean} open True if looking for an open time
       * @return A date that falls somewhere in a matching time segment. Probably 1 before close. Or null of no rules are defined.
       * @memberOf CIQ.Market
       * @since  05-2016-10
       * @private
       */
      CIQ.Market.prototype._find_prev_segment = function(date, open) {
        if (!this.market_def) return null // special case
        if (!this.rules) return null //special case
        var d = new Date(date)
        var iter = this.newIterator({
          begin: d,
          interval: 1,
        })
        if (this._wasOpenIntraDay(d)) {
          var hours = this.zseg_match.open_parts.hours
          var minutes = this.zseg_match.open_parts.minutes
          d.setHours(hours)
          d.setMinutes(minutes)
          iter = this.newIterator({
            begin: d,
            interval: 1,
          })
          d = iter.previous()

          if (this.zseg_match.close_parts.hours === hours) {
            if (this.zseg_match.close_parts.minutes === minutes) {
              // segments are adjacent use the previous
              if (open) {
                return iter.next()
              }
              return d
            }
          }
          if (this.zseg_match.adjacent_child) {
            // segments are adjacent use the previous
            return d
          }
          if (open) {
            // segments are not adjacent go back
            return iter.next()
          }
          return d
        }
        return iter.previous()
      }

      /**
       * Toggle on/off a market session by name.
       * @param {String} session_name A session name matching a valid name present in the market definition.
       * @param {Object} [inverted] Any true value (`true`, non-zero value or string) passed here will enable the session, otherwise the session will be disabled.
       * @memberOf CIQ.Market
       * @since  06-2016-02
       */
      CIQ.Market.prototype.disableSession = function(session_name, inverted) {
        var inverted_ = false
        if (typeof inverted !== 'undefined' && inverted) {
          inverted_ = true
        }
        if (session_name) {
          for (var i = 0; i < this.normalHours.length; i++) {
            if (this.normalHours[i].name === session_name) {
              this.normalHours[i].enabled = inverted_
            }
          }
          for (i = 0; i < this.extraHours.length; i++) {
            if (this.extraHours[i].name === session_name) {
              this.extraHours[i].enabled = inverted_
            }
          }
        }
      }

      /**
       * Enable a market session by name. See {@link CIQ.Market#disableSession}
       * @param {String} session_name A session name
       * @memberOf CIQ.Market
       * @since  06-2016-02
       */
      CIQ.Market.prototype.enableSession = function(session_name) {
        this.disableSession(session_name, 'enable_instead')
      }

      /**
       * Get the close date/time for the trading session.
       * @param [Date=now] date The date on which to check.
       * @param {String} [session_name] Specific market session. If a session name is passed in, then not only does the market
       * need to be open on the day in question but also within the time specified, otherwise null will be returned.
       * @param [inZone] Optional datazone to translate from - If no market zone is present it will not be converted.
       * @param [outZone] Optional datazone to translate to - If no market zone is present it will not be converted.
       * @return {Date} Close date/time for the trading session or null if the market is
       * closed for the given date.
       * @memberOf CIQ.Market
       * @since  05-2016-10
       */
      CIQ.Market.prototype.getClose = function(date, session_name, inZone, outZone) {
        if (!this.market_def) return null // special case
        if (!this.rules) return null //special case
        var d = date ? date : new Date()
        d = this._convertToMarketTZ(d, inZone)

        if (typeof session_name !== 'undefined') {
          if (this._wasOpenIntraDay(d)) {
            if (this.zseg_match.name === session_name) {
              d.setHours(this.zseg_match.close_parts.hours)
              d.setMinutes(this.zseg_match.close_parts.minutes)
              d.setSeconds(0)
              d.setMilliseconds(0)
              d = this._convertFromMarketTZ(d, outZone)
              return d
            }
          }
        } else {
          if (this._wasOpenDaily(d)) {
            var zseg_match = this.zseg_match

            //find the last session of the day
            while (zseg_match.child_) {
              zseg_match = zseg_match.child_
            }

            //find the last enabled session ... maybe back where we started
            while (!zseg_match.enabled) {
              zseg_match = zseg_match.parent_
            }

            d.setHours(zseg_match.close_parts.hours)
            d.setMinutes(zseg_match.close_parts.minutes)
            d.setSeconds(0)
            d.setMilliseconds(0)
            d = this._convertFromMarketTZ(d, outZone)
            return d
          }
        }
        return null
      }

      /**
       * Get the close time for the current market session, or if the market is closed, the close time for the next market session.
       * @param [Date=now] date The date on which to check.
       * @param [inZone] Optional datazone to translate from - If no market zone is present it will not be converted.
       * @param [outZone] Optional datazone to translate to - If no market zone is present it will not be converted.
       * @return {Date} A date set to the close time of the next open market session.
       * @memberOf CIQ.Market
       * @since  05-2016-10
       */
      CIQ.Market.prototype.getNextClose = function(date, inZone, outZone) {
        if (!this.market_def) return null // special case
        if (!this.rules) return null //special case

        var d = date ? date : new Date()
        d = this._convertToMarketTZ(d, inZone)
        if (!this._wasOpenIntraDay(d)) {
          var iter = this.newIterator({
            begin: d,
            interval: 1,
          })
          d = iter.next()
        }
        var date_ = d.getDate()
        var zseg_match = this.zseg_match
        while (zseg_match.adjacent_child) {
          zseg_match = zseg_match.adjacent_child
          date_ += 1
        }
        d.setDate(date_)
        d.setHours(zseg_match.close_parts.hours)
        d.setMinutes(zseg_match.close_parts.minutes)
        d.setSeconds(0)
        d.setMilliseconds(0)
        d = this._convertFromMarketTZ(d, outZone)
        return d
      }

      /**
       * Get the next market session open time. If the requested date is the opening time for the session, then
       * it will iterate to opening time for the next market session.
       * @param [Date=now] date An The date on which to check.
       * @param [inZone] Optional datazone to translate from - If no market zone is present it will not be converted.
       * @param [outZone] Optional datazone to translate to - If no market zone is present it will not be converted.
       * @return {Date} A date aligned to the open time of the next open session. If no rules are defined, it will return null.
       * @memberOf CIQ.Market
       * @since  05-2016-10
       */
      CIQ.Market.prototype.getNextOpen = function(date, inZone, outZone) {
        if (!this.market_def) return null // special case
        if (!this.rules) return null //special case
        var d = date ? date : new Date()
        d = this._convertToMarketTZ(d, inZone)
        d = this._find_next_segment(d)
        if (this.zseg_match.adjacent_parent) {
          d = this.getNextOpen(d)
          d = this._convertFromMarketTZ(d, outZone)
          return d
        }
        d.setHours(this.zseg_match.open_parts.hours)
        d.setMinutes(this.zseg_match.open_parts.minutes)
        d = this._convertFromMarketTZ(d, outZone)
        return d
      }

      /**
       * Get the open date/time for a market session. The market session must be
       * enabled.
       * @param [Date=now] date The date on which to check.
       * @param [inZone] Optional datazone to translate from - If no market zone is present it will not be converted.
       * @param [outZone] Optional datazone to translate to - If no market zone is present it will not be converted.
       * @param {String} [session_name] Specific market session. If a session name is passed in, then not only does the market
       * need to be open on the day in question but also within the time specified, otherwise null will be returned.
       * @return {Date} A date time for the open of a session or null if the market is
       * closed for the given date or there are no rules to check.
       * @memberOf CIQ.Market
       * @since  05-2016-10
       */
      CIQ.Market.prototype.getOpen = function(date, session_name, inZone, outZone) {
        if (!this.market_def) return null // special case
        if (!this.rules) return null //special case
        var d = date ? date : new Date()
        d = this._convertToMarketTZ(d, inZone)
        if (typeof session_name !== 'undefined') {
          if (this._wasOpenIntraDay(d)) {
            if (this.zseg_match.name == session_name) {
              d.setHours(this.zseg_match.open_parts.hours)
              d.setMinutes(this.zseg_match.open_parts.minutes)
              d.setSeconds(0)
              d.setMilliseconds(0)
              d = this._convertFromMarketTZ(d, outZone)
              return d
            }
          }
        } else {
          if (this._wasOpenDaily(d)) {
            var zseg_match = this.zseg_match

            //find all of the parents if any
            while (zseg_match.parent_) {
              zseg_match = zseg_match.parent_
            }

            //find the first enabled child ... might end up back where we started
            while (!zseg_match.enabled) {
              zseg_match = zseg_match.child_
            }

            d.setHours(zseg_match.open_parts.hours)
            d.setMinutes(zseg_match.open_parts.minutes)
            d.setSeconds(0)
            d.setMilliseconds(0)
            d = this._convertFromMarketTZ(d, outZone)
            return d
          }
        }
        return null
      }

      /**
       * Get the previous session close time. If the date lands exactly on the close time for a session then
       * it will still seek to the previous market session's close.
       * @param [Date=now] date The date on which to check.
       * @param [inZone] Optional datazone to translate from - If no market zone is present it will not be converted.
       * @param [outZone] Optional datazone to translate to - If no market zone is present it will not be converted.
       * @return {Date} A date aligned to the previous close date/time of a session. If no rules are defined, it will return null.
       * @memberOf CIQ.Market
       * @since  05-2016-10
       */
      CIQ.Market.prototype.getPreviousClose = function(date, inZone, outZone) {
        if (!this.market_def) return null // special case
        if (!this.rules) return null //special case
        var d = date ? date : new Date()
        d = this._convertToMarketTZ(d, inZone)
        d = this._find_prev_segment(d, false)
        if (this.zseg_match.adjacent_child) {
          return this.getPreviousClose(d)
        }
        d.setHours(this.zseg_match.close_parts.hours)
        d.setMinutes(this.zseg_match.close_parts.minutes)
        d = this._convertFromMarketTZ(d, outZone)
        return d
      }

      /**
       * Get the previous session open time. If the date lands exactly on the open time for a session then
       * it will still seek to the previous market session's open.
       * @param [Date=now] date An The date on which to check.
       * @param [inZone] Optional datazone to translate from - If no market zone is present it will not be converted.
       * @param [outZone] Optional datazone to translate to - If no market zone is present it will not be converted.
       * @return {Date} A date aligned to previous open date/time of a session. If no rules are defined, it will return null.
       * @memberOf CIQ.Market
       * @since  05-2016-10
       */
      CIQ.Market.prototype.getPreviousOpen = function(date, inZone, outZone) {
        if (!this.market_def) return null // special case
        if (!this.rules) return null //special case
        var d = date ? date : new Date()
        d = this._convertToMarketTZ(d, inZone)
        d = this._find_prev_segment(d, true)
        if (this.zseg_match.adjacent_parent) {
          return this.getPreviousOpen(d)
        }
        d.setHours(this.zseg_match.open_parts.hours)
        d.setMinutes(this.zseg_match.open_parts.minutes)
        d = this._convertFromMarketTZ(d, outZone)
        return d
      }

      /**
       * Return the session name for a date. If the name is defined and if the date
       * lands in a session that is open. Otherwise return null.
       * @param {Date} date A date object
       * @param {String} [inZone] Timezone of incoming date - If no market zone is present it will not be converted.
       * @return {Object} String or null
       */
      CIQ.Market.prototype.getSession = function(date, inZone) {
        date = this._convertToMarketTZ(date, inZone)
        if (this._wasOpenIntraDay(date) && this.zseg_match) {
          return this.zseg_match.name
        }
        return null
      }

      /**
       * @return {Date} Current time in the market zone
       * @memberOf CIQ.Market
       * @since 04-2016-08
       */
      CIQ.Market.prototype.marketZoneNow = function() {
        return this._convertToMarketTZ(new Date())
      }

      /**
       * @return {Boolean} `true` if this market is hour aligned.
       * @memberOf CIQ.Market
       * @since 04-2016-08
       */
      CIQ.Market.prototype.isHourAligned = function() {
        return this.hour_aligned
      }

      /**
       * Checks if the market is currently open.
       * @return {Boolean} `true` if the market is open right now.
       * @memberOf CIQ.Market
       * @since 04-2016-08
       */
      CIQ.Market.prototype.isOpen = function() {
        var now = new Date()
        if (this.market_tz) {
          now = new this.tz_lib(now.getTime(), this.market_tz)
        }
        return this._wasOpenIntraDay(now)
      }

      /**
       * Checks if today it is a market day.
       * @return {Boolean} `true` if it is a market day.
       * @memberOf CIQ.Market
       * @since 04-2016-08
       */
      CIQ.Market.prototype.isMarketDay = function() {
        var now = new Date()
        if (this.market_tz) {
          now = new this.tz_lib(now.getTime(), this.market_tz)
        }
        return this._wasOpenDaily(now)
      }

      /**
	 * Creates iterators for the associated Market to traverse trough time taking into account market hours. 
	 * An iterator instance can go forward or backward in time any arbitrary amount.
	 * However, the internal state cannot be changed once it is constructed. A new iterator should be
	 * constructed whenever one of the parameters changes. For example if the
	 * `interval` changes a new iterator will need to be built. If the `displayZone`
	 * or `dataZone` changes on the market new iterators will also need to be
	 * constructed.
	 * 
	 * See {@link CIQ.Market.Iterator} for all available methods.
	 * 
	 * See the following convenience functions: {@link CIQ.ChartEngine#getNextInterval} and  {@link CIQ.ChartEngine#standardMarketIterator}
	 *
	 * @param {Object} parms Parameters used to initialize the Market object.
	 * @param {string} [parms.interval] A valid interval as required by {@link CIQ.ChartEngine#setPeriodicityV2}. Default is 1 (minute).
	 * @param {Integer} [parms.periodicity] A valid periodicity as required by {@link CIQ.ChartEngine#setPeriodicityV2}. Default is 1.
	 * @param {String} [parms.timeUnit] A valid timeUnit as required by {@link CIQ.ChartEngine#setPeriodicityV2}. Default is "minute"
	 * @param {Date} [parms.begin] The date to set as the start date for this iterator instance. Default is `now`. Will be assumed to be `inZone` if one set.
	 * @param {String} [parms.inZone] A valid timezone from the timeZoneData.js library. This should represent the time zone for any input dates such as `parms.begin` in this function or `parms.end` in {@link CIQ.Market.Iterator#futureTick}. Defaults to browser timezone if none set.  - If no market zone is present it will not be converted.
	 * @param {String} [parms.outZone] A valid timezone from the timeZoneData.js library. This should represent the time zone for the returned dates. Defaults to browser timezone if none set.  - If no market zone is present it will not be converted.
	 * @return {Object} A new iterator.
	 * @memberOf CIQ.Market
	 * @since 04-2016-08
	 * @example
	    var iter = stxx.market.newIterator(
				{
					'begin': now,
	                'interval': stxx.layout.interval,
	                'periodicity': stxx.layout.periodicity,
	                'timeUnit': stxx.layout.timeUnit,
	                'inZone': stxx.dataZone,
	                'outZone': stxx.displayZone
				}
		);
	 */
      CIQ.Market.prototype.newIterator = function(parms) {
        var _multiple = false
        if (parms.periodicity) {
          _multiple = parms.periodicity
        } else if (parms.multiple) {
          _multiple = parms.multiple
        }
        var _interval = parms.interval
        if (!_interval) {
          _interval = CIQ.Market.MINUTE
        }
        if (!_multiple) {
          _multiple = 1
        }
        if (!parms.begin) {
          parms.begin = new Date()
        }
        if (_interval == parseInt(_interval, 10)) {
          _interval = parseInt(_interval, 10) // in case it was a string, which is allowed in setPeriodicity.

          // if the periodicity is less than one then the x-axis might be in seconds
          if (parms.periodicity < 1) {
            _multiple = _multiple * _interval * 60
            _interval = 'second'
          } else {
            _multiple = _multiple * _interval
            _interval = 'minute'
          }
        }
        if (parms.timeUnit) {
          if (parms.timeUnit === CIQ.Market.MILLISECOND) {
            _interval = parms.timeUnit
          } else if (parms.timeUnit === CIQ.Market.SECOND) {
            _interval = parms.timeUnit
          }
        }
        parms.interval = _interval
        parms.multiple = _multiple
        parms.market = this
        return new CIQ.Market.Iterator(parms)
      }

      /**
       * Calculate whether this market was open on some date. This will depend on
       * the data used when creating this market. This function does not take into
       * account intra day data. It simply checks the date to see if the market was
       * open at all on that day. Hours, minutes, seconds are ignored.
       * @param {Date} historical_date Javascript date object with timezone in the market time zone.
       * @return {Boolean} true if the market was open.
       * @memberOf CIQ.Market
       * @since 04-2016-08
       * @private
       */
      CIQ.Market.prototype._wasOpenDaily = function(historical_date) {
        return this._was_open(historical_date, false)
      }

      /**
       * Calculate whether this market was open on some date. This will depend on
       * The data used when creating this market. This function will take into
       * account intra day date that is minutes and seconds. Not only does a market
       * need to be open on the day in question but also within the time specified.
       * @param {Date} historical_date Javascript date object with timezone in the market time zone.
       * @return {Boolean} true if the market was open.
       * @memberOf CIQ.Market
       * @since 04-2016-08
       * @private
       */
      CIQ.Market.prototype._wasOpenIntraDay = function(historical_date) {
        return this._was_open(historical_date, true)
      }

      /**
       * Given some javascript date object calculate whether this market was open.
       * Use _wasOpenDaily or _wasOpenIntraDay instead. As a special case if
       * no market json has been defined this function will always return true.
       * @param {Date} historical a valid Javascript date object with timezone in the market time zone.
       * @param {Boolean}
       * @return {Boolean} true if open else false
       * @private
       */
      CIQ.Market.prototype._was_open = function(historical, intra_day) {
        this.zopen_hour = 0
        this.zopen_minute = 0
        this.zclose_hour = 0
        this.zclose_minute = 0
        this.zmatch_open = false
        if (!this.market_def) return true // special case
        if (!this.rules) return true //special case
        var normally_open = false
        var extra_open = false
        var year = historical.getFullYear()
        var month = historical.getMonth() + 1
        var day = historical.getDay()
        var date = historical.getDate()
        var hour = historical.getHours()
        var minutes = historical.getMinutes()
        var seconds = historical.getSeconds()
        var segment
        var midnight_secs = hour * 60 * 60 + minutes * 60 + seconds

        if (typeof intra_day === 'undefined') {
          intra_day = true
        }

        var i
        for (i = 0; i < this.normalHours.length; i++) {
          segment = this.normalHours[i]
          if (!segment.enabled) {
            continue
          }
          normally_open = segment.dayofweek === day
          if (normally_open && intra_day) {
            normally_open = midnight_secs >= segment.open && midnight_secs < segment.close
          }
          if (normally_open) {
            this.zopen_hour = segment.open_parts.hours
            this.zopen_minute = segment.open_parts.minutes
            this.zclose_hour = segment.close_parts.hours
            this.zclose_minute = segment.close_parts.minutes
            this.zmatch_open = midnight_secs === segment.open
            this.zseg_match = segment
            break
          }
        }

        for (i = 0; i < this.extraHours.length; i++) {
          segment = this.extraHours[i]
          if (!segment.enabled) {
            continue
          }
          if ('*' === segment.year || year === segment.year) {
            if (month === segment.month && date === segment.day) {
              extra_open = midnight_secs >= segment.open && midnight_secs < segment.close
              if (!extra_open && normally_open) {
                normally_open = false
              }
              if (extra_open) {
                this.zopen_hour = segment.open_parts.hours
                this.zopen_minute = segment.open_parts.minutes
                this.zclose_hour = segment.close_parts.hours
                this.zclose_minute = segment.close_parts.minutes
                this.zmatch_open = midnight_secs === segment.open
                this.zseg_match = segment
                break
              }
            }
          }
        }

        return normally_open || extra_open
      }

      /**
       * Convenience function for unit testing.
       */
      CIQ.Market.prototype._wasClosed = function(test_date) {
        return !this._was_open(test_date, true)
      }

      /**
       * Convenience function for unit testing.
       */
      CIQ.Market.prototype._wasOpen = function(test_date) {
        return this._was_open(test_date, true)
      }

      /**
       * Get the difference in millis between two time zones. May be positive or
       * negative depending on the time zones. The purpose is to shift the source
       * time zone some number of millis to the target timezone. For example shifting
       * a data feed from UTC to Eastern time. Or shifting Eastern time to Mountain
       * time for display purposes. Note that it is important to pass the source
       * and the target in the correct order. The algorithm does source - target. This
       * will calculate the correct offset positive or negative.
       * @param {Date} A date object. Could be any date object the javascript one
       * or for example the timezone.js one. Must implement getTime() and
       * getTimezoneOffset()
       * @param {String} src_tz_str The source time zone. For example the data feed
       * @param {String} target_tz_str The target time zone for example the market.
       * @return {Integer} The number of milliseconds difference between the time
       * zones.
       */
      CIQ.Market.prototype._tzDifferenceMillis = function(date, src_tz_str, target_tz_str) {
        var millis = 0
        var src_date = date
        var target_date = date
        var minutes = src_date.getTimezoneOffset() - target_date.getTimezoneOffset()
        millis = minutes * 60 * 1000
        return millis
      }

      /**
       * Static function that reads the json rules in the market definition and
       * creates in memory time segments that are used later to match market dates.
       * @param {Object} market An instance of a market.
       */
      CIQ.Market._createTimeSegments = function(market) {
        var link_adjacent = function(r0_, r1_) {
          if (r0_.close_parts.hours === 24 && r1_.open_parts.hours === 0) {
            if (r1_.open_parts.minutes === 0) {
              if (p_rule.dayofweek === rd.dayofweek - 1) {
                return true
              }
              if (p_rule.dayofweek === 6 && rd.dayofweek === 0) {
                return true
              }
            }
          }
          return false
        }
        var p_rule
        for (var i = 0; i < market.rules.length; i++) {
          var rule = JSON.parse(JSON.stringify(market.rules[i]))
          if (typeof rule.open === 'undefined' && typeof rule.close === 'undefined') {
            rule.open = '00:00'
            rule.close = '00:00'
          }
          if (!rule.hasOwnProperty('name')) {
            rule.name = null
          }
          try {
            var rd
            if (typeof rule.dayofweek !== 'undefined') {
              rule.year = '*'
              rd = _TimeSegmentS._createDayOfWeekSegment(market, rule)
              if (p_rule) {
                if (p_rule.dayofweek === rd.dayofweek) {
                  //These links are used for finding open and close times
                  //On the same day in multiple sessions
                  p_rule.child_ = rd
                  rd.parent_ = p_rule
                } else {
                  if (link_adjacent(p_rule, rd)) {
                    //These links are used for finding open and close
                    //times for sessions that span days
                    p_rule.adjacent_child = rd
                    rd.adjacent_parent = p_rule
                  }
                }
              }
              p_rule = rd
            } else if (typeof rule.date !== 'undefined') {
              rule.isDayOfWeek = false
              rule.dayofweek = -1
              rd = _TimeSegmentS._createDateTimeSegment(market, rule)
            } else {
              console.log('Error, unknown rule type ' + rule)
            }
            if (market.enabled_by_default) {
              for (var x = 0; x < market.enabled_by_default.length; x++) {
                var n = market.enabled_by_default[x]
                if (rd.name === n) {
                  rd.enabled = true
                  break
                }
              }
            } else {
              //always enabled if no defaults are defined
              //rd.enabled = true;
            }
          } catch (err) {
            console.log('Error, creating market rules ' + err)
          }
        }
      }

      /**
       * Internal static utility methods used to create market time segments.
       */
      CIQ.Market._timeSegment = {}
      var _TimeSegmentS = CIQ.Market._timeSegment

      _TimeSegmentS.re_wild_card_iso = /^(\*)-(\d\d)-(\d\d)$/
      _TimeSegmentS.re_regular_iso = /^(\d\d\d\d)-(\d\d)-(\d\d)$/
      _TimeSegmentS.re_split_hours_minutes = /^(\d\d):(\d\d)$/
      _TimeSegmentS.re_split_hour_minutes = /^(\d):(\d\d)$/

      /**
       * Create a hash code for a string. We may move this to 3rd party later if
       * we find a wider need for it. This came from Stackoverflow and claims to be
       * the same implementation used by Java.
       * @param {String} str A string.
       * @return {Integer} A number suitable for
       */
      _TimeSegmentS._hashCode = function(str) {
        var hash = 0,
          i,
          chr,
          len
        if (str.length === 0) return hash
        for (i = 0, len = str.length; i < len; i++) {
          chr = str.charCodeAt(i)
          hash = (hash << 5) - hash + chr
          hash |= 0 // Convert to 32bit integer
        }
        return hash
      }

      /**
       * Split the hours and minutes from a json time segment rule.
       * @param {String} str \d\d:\d\d or \d:\d\d
       * @return {Object} {minutes:int, hours:int}
       */
      _TimeSegmentS._splitHoursMinutes = function(str) {
        var parts = _TimeSegmentS.re_split_hour_minutes.exec(str)
        var ret_val = { hours: NaN, minutes: NaN }
        if (parts === null) {
          parts = _TimeSegmentS.re_split_hours_minutes.exec(str)
          if (parts === null) {
            return ret_val
          }
        }
        ret_val.hours = parseInt(parts[1], 10)
        ret_val.minutes = parseInt(parts[2], 10)
        return ret_val
      }

      /**
       * Create a time segment for some day of the week. This creates a wildcard
       * segment that matches the same weekday in any month and any year.
       * @param {object} market The instance of this market
       * @param {object} rule Represents the data from one rule in the JSON
       * configuration.
       */
      _TimeSegmentS._createDayOfWeekSegment = function(market, rule) {
        var data = {
          name: rule.name,
          isDayOfWeek: true,
          dayofweek: rule.dayofweek,
          date_str: '*',
          open_parts: _TimeSegmentS._splitHoursMinutes(rule.open),
          close_parts: _TimeSegmentS._splitHoursMinutes(rule.close),
          open: _TimeSegmentS._secSinceMidnight(market, rule.open, true),
          close: _TimeSegmentS._secSinceMidnight(market, rule.close, false),
          child_: false,
          parent_: false,
          adjacent_child: false,
          adjacent_parent: false,
          enabled: false,
        }
        if (data.name === null) {
          data.enabled = true
        }
        data.hash_code = this._hashCode((data.open + data.close).toString())
        market.normalHours.push(data)
        return data
      }

      /**
       * Create a time segment for a specific date and time. This can also create
       * a wild card segment that matches any year with a specific day and specific
       * month. For example *-12-25 to match all Christmas days. It can also build
       * any specific year month day open close time that will only match that
       * specific range.
       * @param {Object} market an instance of a market
       * @param {Object} rule a single rule from a market definition
       * @return Nothing this function works on the market object.
       */
      _TimeSegmentS._createDateTimeSegment = function(market, rule) {
        var pieces = this.re_regular_iso.exec(rule.date)
        var year
        if (pieces === null) {
          pieces = this.re_wild_card_iso.exec(rule.date)
          if (pieces === null) {
            console.log('Warning: invalid date format on rule -> ' + rule.date)
            return
          }
          year = '*' //all years
        } else {
          year = parseInt(pieces[1], 10)
        }
        var data = {
          name: rule.name,
          isDayOfWeek: false,
          dayofweek: -1,
          year: year,
          month: parseInt(pieces[2], 10),
          day: parseInt(pieces[3], 10),
          date_str: rule.date,
          open_parts: _TimeSegmentS._splitHoursMinutes(rule.open),
          close_parts: _TimeSegmentS._splitHoursMinutes(rule.close),
          open: _TimeSegmentS._secSinceMidnight(market, rule.open, true),
          close: _TimeSegmentS._secSinceMidnight(market, rule.close, false),
          enabled: false,
        }
        if (data.name === null) {
          data.enabled = true
        }
        data.hash_key = this._hashCode(data.date_str + data.open + data.close)
        market.extraHours.push(data)
        return data
      }

      /**
       * Calculate the seconds since midnight for some time string. These time strings
       * come from the market definition. These are intended to be open and close
       * times.
       * @param {Object} market An instance of a market
       * @param {string} time_str A time string like this "\d\d:\d\d"
       * @param {Boolean} open_time If true the time is used for opening a market
       * otherwise the time is used for closing a market. This is so that we can
       * handle 00:00 and 24:00.
       */
      _TimeSegmentS._secSinceMidnight = function(market, time_str, open_time) {
        var parts = time_str.split(':')
        var hours = parseInt(parts[0], 10)
        var minutes = parseInt(parts[1], 10)
        var seconds = hours * 60 * 60 + minutes * 60

        if (!open_time) {
          if (hours === 24) {
            seconds = hours * 60 * 60 + 1
          }
        }
        return seconds
      }

      /**
       * Converts from the given timezone into the market's native time zone
       * If no market zone is present, the date will be returned un changed.
       * @param  {Date} dt JavaScript Date
       * @param  {String} [tz] timezoneJS timezone, or null to indicate browser localtime/UTC (dataZone)
       * @return {Date}    A JavaScript Date offset by the timezone change
       */
      CIQ.Market.prototype._convertToMarketTZ = function(dt, tz) {
        if (!this.market_tz) return dt
        var tzdt
        if (tz) {
          tzdt = new this.tz_lib(
            dt.getFullYear(),
            dt.getMonth(),
            dt.getDate(),
            dt.getHours(),
            dt.getMinutes(),
            dt.getSeconds(),
            dt.getMilliseconds(),
            tz,
          )
        } else {
          tzdt = new this.tz_lib(
            dt.getFullYear(),
            dt.getMonth(),
            dt.getDate(),
            dt.getHours(),
            dt.getMinutes(),
            dt.getSeconds(),
            dt.getMilliseconds(),
          )
        }
        if (tzdt.setTimezone) tzdt.setTimezone(this.market_tz)
        return new Date(
          tzdt.getFullYear(),
          tzdt.getMonth(),
          tzdt.getDate(),
          tzdt.getHours(),
          tzdt.getMinutes(),
          tzdt.getSeconds(),
          tzdt.getMilliseconds(),
        )
      }

      /**
       * Converts to the given timezone from the market's native time zone.
       * If no market zone is present, the date will be returned un changed.
       * @param  {Date} dt JavaScript Date
       * @param  {String} [tz] timezoneJS timezone, or null to indicate browser localtime/UTC (displayZone)
       * @return {Date}    A JavaScript Date offset by the timezone change
       */
      CIQ.Market.prototype._convertFromMarketTZ = function(dt, tz) {
        if (!this.market_tz) return dt
        var tzdt = new this.tz_lib(
          dt.getFullYear(),
          dt.getMonth(),
          dt.getDate(),
          dt.getHours(),
          dt.getMinutes(),
          dt.getSeconds(),
          dt.getMilliseconds(),
          this.market_tz,
        )
        if (tz) {
          if (tzdt.setTimezone) tzdt.setTimezone(tz)
        } else {
          return new Date(tzdt.getTime())
        }
        return new Date(
          tzdt.getFullYear(),
          tzdt.getMonth(),
          tzdt.getDate(),
          tzdt.getHours(),
          tzdt.getMinutes(),
          tzdt.getSeconds(),
          tzdt.getMilliseconds(),
        )
      }

      /**
	 * Builds an iterator instance and returns it to the requesting market when {@link CIQ.Market#newIterator} is called. Do not call this constructor directly.
	 * 
	 * @name CIQ.Market.Iterator
	 * @constructor
	 * @since 04-2016-08
	 * @example
	    var market24=new CIQ.Market();
	    var iter_parms = {
	        'begin': stxx.chart.dataSet[stxx.chart.dataSet.length-1],	// last item on the dataset
	        'interval': stxx.layout.interval,
	        'periodicity': stxx.layout.periodicity,
	        'timeUnit': stxx.layout.timeUnit,
	        'inZone': stxx.dataZone,
	        'outZone': stxx.dataZone
	    };
	    var iter = market24.newIterator(iter_parms);
	    var next = iter.next();
	 * 
	 */
      CIQ.Market.Iterator = function(parms) {
        this.market = parms.market
        this.begin = parms.begin
        this.interval = parms.interval
        this.multiple = parms.multiple
        this.inZone = parms.inZone
        this.outZone = parms.outZone
        this.clock = new CIQ.Market.Iterator._Clock(parms.market, parms.interval, parms.multiple)
        this.intraDay = this.clock.intra_day
        if (this.intraDay) this.begin = this.market._convertToMarketTZ(this.begin, parms.inZone)
        this.clock._setStart(this.begin)
        this.clock.minutes_aligned = false
      }

      /**
       * Returns the current date of the iterator without moving forwards or backwards.
       * Takes into account display zone settings.
       * @return {Date} The current date of the iterator.
       * @memberOf CIQ.Market.Iterator
       * @since 04-2016-08
       * @example
       * iteratorDate = iter.date();
       */
      CIQ.Market.Iterator.prototype.date = function() {
        return this.clock._date()
      }

      /**
       * Calculate the number of ticks from begin date to end date taking into account
       * market open, close, and holidays.
       * If the end date is older than the begin date,it will work backward into the past.
       * If the end date is newer than the begin date,it will work forward into the future.
       * Note that the begin date is set when this
       * instance of the iterator is created and one should NOT call `previous` or `next`
       * before calling this function, or the 'begin' pointer will change.
       * @param {Date} parms.end An end date. Will be assumed to be `inZone` if one set.
       * @param {Integer} [parms.sample_size] Default is 25. Maximum amount of time
       * (in milliseconds) taken to count ticks. If sample size is
       * reached before the number of ticks is found the number of ticks will be
       * estimated mathematically. The bigger the sample size couple with the
       * distance between begin date and end date affect how precise the return value
       * is.
       * @param {Integer} [parms.sample_rate] Default is 1000. Maximum number of ticks to evaluate before checking `parms.sample_size`.
       * @return {Integer} The number of ticks between begin and end.
       * @memberOf CIQ.Market.Iterator
       * @since 04-2016-08
       * @example
       * // find out how many ticks in the past a date is from the beginning of the dataSet
       * // (assumes the target date is older than the first dataSet item)
       *	var iter = this.standardMarketIterator(chart.dataSet[0].DT);
       *	var ticks=iter.futureTick({someRandomDate});
       */
      CIQ.Market.Iterator.prototype.futureTick = function(parms) {
        this.clock.skip = 1
        var ticks = 0
        var end
        if (this.intraDay) end = this.market._convertToMarketTZ(parms.end, this.inZone).getTime()
        else end = parms.end.getTime()
        var begin = this.clock.ctime
        if (end === begin) {
          return ticks
        }
        var sample_size = 2 //milliseconds // May not be necessary at all. Looks accurate whenever past 1,000 ticks into future
        var sample_rate = 1000 //iterations
        var sample_ctr = 0
        if (parms.sample_size) {
          sample_size = parms.sample_size
        }
        var start = new Date().getTime()
        var now
        var ave
        if (end > begin) {
          this.clock.forward = true
          while (this.clock.ctime < end) {
            ticks += 1
            sample_ctr += 1
            this.clock._findNext()
            if (sample_ctr === sample_rate) {
              sample_ctr = 0
              now = new Date().getTime()
              if (now - start >= sample_size) {
                ave = (this.clock.ctime - begin) / ticks
                ticks = Math.floor((end - begin) / ave)
                break
              }
            }
          }
        } else {
          this.clock.forward = false
          while (this.clock.ctime > end) {
            ticks += 1
            sample_ctr += 1
            this.clock._findPrevious()
            if (sample_ctr === sample_rate) {
              sample_ctr = 0
              now = new Date().getTime()
              if (now - start >= sample_size) {
                ave = (begin - this.clock.ctime) / ticks
                ticks = Math.floor((begin - end) / ave)
                break
              }
            }
          }
        }
        return ticks
      }

      /**
       * As a convenience exposed on an instance of an iterator.
       * @return {Boolean} true if this market is hour aligned.
       * @memberOf CIQ.Market.Iterator
       * @since 04-2016-08
       */
      CIQ.Market.Iterator.prototype.isHourAligned = function() {
        return this.market.isHourAligned()
      }

      /**
       * Check and see if this Market is open now.
       * @return {Boolean} true or false
       * @memberOf CIQ.Market.Iterator
       * @since 04-2016-08
       */
      CIQ.Market.Iterator.prototype.isOpen = function() {
        return this.market.isOpen()
      }

      /**
       * Move the iterator one interval forward
       * @param {Integer} [skip] Default 1. Jump forward skip * periodicity at once.
       * @return {Date} Next date in iterator `outZone`.
       * @alias next
       * @memberOf CIQ.Market.Iterator
       * @since 04-2016-08
       * @example
       * now = iter.next();
       */
      CIQ.Market.Iterator.prototype.next = function(skip) {
        this.clock.skip = 1
        if (skip) {
          this.clock.skip = skip
        }
        this.clock.forward = true
        for (var i = 0; i < this.clock.skip; i++) this.begin = this.clock._findNext()
        if (this.intraDay || this.market.convertOnDaily) {
          return this.market._convertFromMarketTZ(this.clock.display_date, this.outZone)
        } else {
          return this.clock.display_date
        }
      }

      /**
       * Does not move the iterator. Takes into account display zone settings.
       * Note. This is a convenience function for debugging or whatever else, but
       * should not be called in the draw loop in production.
       * @return {String} The current date of the iterator as a string.
       * @memberOf CIQ.Market.Iterator
       * @since 04-2016-08
       * @private
       */
      CIQ.Market.Iterator.prototype.peek = function() {
        return this.clock._peek()
      }

      /**
       * Move the iterator one interval backward
       * @param {Integer} skip Default is one. Move this many multiples of interval.
       * @return {Date} Previous date in iterator `outZone`.
       * @alias previous
       * @memberOf CIQ.Market.Iterator
       * @since 04-2016-08
       * @example
       * now = iter.previous();
       */
      CIQ.Market.Iterator.prototype.previous = function(skip) {
        this.clock.skip = 1
        if (skip) {
          this.clock.skip = skip
        }
        this.clock.forward = false
        for (var i = 0; i < this.clock.skip; i++) this.begin = this.clock._findPrevious()
        if (this.intraDay || this.market.convertOnDaily) {
          return this.market._convertFromMarketTZ(this.clock.display_date, this.outZone)
        } else {
          return this.clock.display_date
        }
      }

      /**
       * Internal object that simulates a clock that ticks forward and backwards
       * at different intervals. Used internally by the iterator and not intended
       * to be used outside of the context of a Market.
       * @param {Object} market An instance of market.
       * @param {string} interval minute, hour, day, week or month
       * @param {Integer} multiple Move in mulitple of intervals.
       */
      CIQ.Market.Iterator._Clock = function(market, interval, multiple) {
        this.market = market
        this.interval = interval
        this.multiple = multiple
        this.intra_day = false
        this.intervals = []
        this.max_iters = 10080 //max minutes to check for rules. (one week);
        this.MINUTE_MILLIS = 1000 * 60
        this.HOUR_MILLIS = this.MINUTE_MILLIS * 60
        this.DAY_MILLIS = this.HOUR_MILLIS * 24
        if (interval === 'today') {
          interval = CIQ.Market.DAY
        }
        if (interval === CIQ.Market.MILLISECOND || interval === 'milliseconds') {
          this._findNext = this._millisImpl
          this._findPrevious = this._millisImpl
          this.intra_day = true
          this.tick_time = 1 * this.multiple //small as we can go
        } else if (interval === CIQ.Market.SECOND || interval === 'seconds') {
          this._findNext = this._secondImpl
          this._findPrevious = this._secondImpl
          this.intra_day = true
          this.tick_time = 1000 * this.multiple
        } else if (interval === CIQ.Market.MINUTE || interval === 'minutes') {
          this._findNext = this._minuteImpl
          this._findPrevious = this._minuteImpl
          this.intra_day = true
          this.tick_time = this.MINUTE_MILLIS * this.multiple
        } else if (interval === CIQ.Market.HOUR || interval === 'hours') {
          this._findNext = this._hourImpl
          this._findPrevious = this._hourImpl
          this.intra_day = true
          this.tick_time = this.HOUR_MILLIS * this.multiple
        } else if (interval === CIQ.Market.DAY || interval === 'days') {
          this._findNext = this._dayImpl
          this._findPrevious = this._dayImpl
          this.tick_time = this.DAY_MILLIS * this.multiple
        } else if (interval === CIQ.Market.WEEK || interval === 'weeks') {
          this._findNext = this._weekImpl
          this._findPrevious = this._weekImpl
          this.tick_time = this.DAY_MILLIS * 7 * this.multiple
        } else if (interval === CIQ.Market.MONTH || interval === 'months') {
          this._findNext = this._monthImpl
          this._findPrevious = this._monthImpl
          this.tick_time = this.DAY_MILLIS * 30 * this.multiple
        } else {
          console.log(
            'Periodicity ERROR: "' + interval + '" is not a valid interval. Please see setperiodcityV2() for details.',
          )
        }
      }

      //Save me some carpal tunnel please.
      var _ClockP = CIQ.Market.Iterator._Clock.prototype

      /**
       * Calculate how many minutes in some time span. Assumes hours are 24 hour
       * format.
       *
       * NOTE! Does not know how to jump a 24 hour period, assumes that
       * o_hour is always less then c_hour on the same day.
       *
       * This could be done with two dates instead and remove the limitations. Not
       * sure if that is necessary at this point. We don't actually have two date
       * objects at the point that we need this number. It would take some doin to
       * figure out the date objects that would be needed.
       */
      _ClockP._total_minutes = function(o_hour, o_min, c_hour, c_min) {
        //the parens are important in this case
        return (c_hour - o_hour) * 60 - o_min + c_min
      }

      /**
       * Create an array of minutes from the open minute to the close minute at
       * some periodictiy. This array will run the entire time of the last segment
       * time segment matched.
       */
      _ClockP._alignMinutes = function() {
        //TODO maybe need some caching here.
        if (this.market.zopen_minute === undefined) {
          return []
        }
        var o_min = this.market.zopen_minute
        var total_minutes = this._total_minutes(
          this.market.zopen_hour,
          o_min,
          this.market.zclose_hour,
          this.market.zclose_minute,
        )
        var periods = []
        var next_minute = 0
        while (next_minute < total_minutes) {
          periods.push(o_min + next_minute)
          next_minute += this.multiple
        }
        return periods
      }

      /**
       * Create an array of second boundaries. This only needs to be done once
       * per clock instance.
       * @param {Integer} The high end of the range before wrapping back to zero.
       * Example for seconds this would be 60.
       */
      _ClockP._alignBaseZero = function(max) {
        var base = 0
        var periods = [base]
        while (true) {
          base += this.multiple
          if (base >= max) {
            break
          }
          periods.push(base)
        }
        return periods
      }

      /**
       * Turn this instance of the clock into a date object at the current
       * date time.
       * @return {Date} A new Date object.
       */
      _ClockP._date = function() {
        var current_date = new Date(this.ctime)

        if (this.intra_day) {
          this.display_date = new Date(this.ctime + this.shift_millis)
        } else {
          this.display_date = current_date
        }

        return current_date
      }

      /**
       * Find the boundary for minutes, seconds or milliseconds.
       * @param {Array} periods A pre calculated list of boundaries.
       * @param {Integer} search_for Any number to align.
       * @return {Integer} one of the boundaries in the array.
       */
      _ClockP._alignToBoundary = function(periods, search_for) {
        var low = 0
        var high = 0
        var result = search_for

        for (var ctr = 0; ctr < periods.length - 1; ctr++) {
          low = periods[ctr]
          high = periods[ctr + 1]
          if (search_for === low || search_for === high) {
            break //already aligned;
          }
          if (search_for > low && search_for < high) {
            result = low
            break
          } else if (ctr + 1 === periods.length - 1) {
            //wrap around gap
            result = high
          }
        }
        return result
      }

      /**
       * Convenience for debugging.
       */
      _ClockP._peek = function() {
        return this._date().toString()
      }

      /**
       * When searching for open days look in hour increments.
       * Inverted.
       */
      _ClockP._seekHr = function() {
        if (this.forward) {
          this.ctime -= this.HOUR_MILLIS
        } else {
          this.ctime += this.HOUR_MILLIS
        }
      }

      /**
       * Set this instance of the iterator clock to some date. Calls to next or
       * previous will move the clock some interval from this point in time.
       * @param {Date} date Any javascript date.
       */
      _ClockP._setStart = function(date) {
        var millis = this.market._tzDifferenceMillis(date)
        var shift_date = new Date(date.getTime() + millis)
        this.shift_millis = millis
        this.ctime = shift_date.getTime()
        // Terry override timezone shift
        this.shift_millis = 0
        this.ctime = date.getTime()
      }

      /**
       * Regular clock move
       */
      _ClockP._tickTock = function() {
        if (this.forward) {
          //this.ctime += (this.tick_time * this.skip);
          this.ctime += this.tick_time
        } else {
          //this.ctime -= (this.tick_time * this.skip);
          this.ctime -= this.tick_time
        }
      }

      /**
       * Inverted clock move
       */
      _ClockP._tockTick = function() {
        if (this.forward) {
          //this.ctime -= (this.tick_time * this.skip);
          this.ctime -= this.tick_time
        } else {
          //this.ctime += (this.tick_time * this.skip);
          this.ctime += this.tick_time
        }
      }

      /**
       * Move a day at a time. Useful for finding the first open day
       * of a week or month. Always moves forward.
       */
      _ClockP._tickTock24 = function() {
        this.ctime += this.DAY_MILLIS
      }

      /**
       * Move a day at a time inverted. Useful for finding Sunday when
       * moving by weeks. Always moves backwards.
       */
      _ClockP._tockTick24 = function() {
        this.ctime -= this.DAY_MILLIS
      }

      /**
       * Wind the clock to the next open market time. If the market is already open
       * then don't move. Break out of the loop after max_iters regardless.
       * @param was_open Function. Intraday or daily function to see if the market
       * was open.
       * @param wind Function. _tockTick (inverted) or _tickTock (regular)
       */
      _ClockP._windMaybe = function(was_open, wind) {
        var max = 0
        var working_date = new Date(this.ctime)
        var moved = false
        while (!was_open.call(this.market, working_date)) {
          wind.call(this)
          moved = true
          working_date = new Date(this.ctime)
          max += 1
          if (max > this.max_iters) {
            var m = 'Warning! max iterations (' + this.max_iters
            m += ') reached with no rule match.'
            console.log(m)
            break
          }
        }
        return moved
      }

      /**
       * Move the clock some number of milliseconds
       */
      _ClockP._millisImpl = function() {
        if (!this.mperiods_aligned) {
          var periods = this._alignBaseZero(1000)
          var current_date = new Date(this.ctime)
          var current_millis = current_date.getMilliseconds()
          current_millis = this._alignToBoundary(periods, current_millis)
          current_date.setMilliseconds(current_millis)
          this.ctime = current_date.getTime()
          this.mperiods_aligned = true
        }
        this._tickTock()
        return this._date()
      }

      /**
       * Move the clock some number of seconds
       */
      _ClockP._secondImpl = function() {
        if (!this.speriod_aligned) {
          var periods = this._alignBaseZero(60)
          var current_date = new Date(this.ctime)
          var current_second = current_date.getSeconds()
          current_second = this._alignToBoundary(periods, current_second)
          current_date.setSeconds(current_second)
          current_date.setMilliseconds(0)
          this.ctime = current_date.getTime()
          this.speriod_aligned = true
        }
        this._tickTock()
        return this._date()
      }

      /**
       * Move the clock some number of minutes. Takes into account market start time
       * and could change alignment each time it is called.
       * @return {Date}
       */
      _ClockP._minuteImpl = function() {
        var closed = this._windMaybe(this.market._wasOpenIntraDay, this._tockTick)
        var current_date = new Date(this.ctime)
        var tzOffset = current_date.getTimezoneOffset()
        var current_minute = current_date.getMinutes()
        var current_hour = current_date.getHours()
        var periods = this._alignMinutes() //takes into account market start time
        var boundary_min =
          this._total_minutes(this.market.zopen_hour, this.market.zopen_minute, current_hour, current_minute) +
          this.market.zopen_minute
        if (closed) {
          if (this.forward) {
            boundary_min = periods[periods.length - 1]
          } else {
            boundary_min = periods[0]
          }
        } else {
          boundary_min = this._alignToBoundary(periods, boundary_min)
        }
        current_hour = Math.floor(boundary_min / 60) + this.market.zopen_hour
        current_date.setHours(current_hour)
        current_date.setMinutes(boundary_min % 60)
        current_date.setSeconds(0)
        current_date.setMilliseconds(0)
        var offsetDiff = current_date.getTimezoneOffset() - tzOffset
        if ((this.forward && offsetDiff < 0) || (!this.forward && offsetDiff > 0)) {
          //crossed a fallback timezone boundary
          current_date.setTime(current_date.getTime() - offsetDiff * 60000)
        }
        this.ctime = current_date.getTime() //boundary aligned
        this._tickTock() //move once
        if (this._windMaybe(this.market._wasOpenIntraDay, this._tickTock)) {
          if (this.forward) {
            current_date = new Date(this.ctime)
            current_date.setMinutes(this.market.zopen_minute)
            current_date.setHours(this.market.zopen_hour)
            this.ctime = current_date.getTime()
          } else {
            current_date = new Date(this.ctime)
            periods = this._alignMinutes()
            var last_boundary = periods[periods.length - 1]
            current_date.setMinutes(last_boundary % 60)
            current_date.setHours(Math.floor(last_boundary / 60) + this.market.zopen_hour)
            this.ctime = current_date.getTime()
          }
        }
        return this._date()
      }

      /**
       * Move the clock some number of hours.
       * @return {Date}
       */
      _ClockP._hourImpl = function() {
        this._windMaybe(this.market._wasOpenIntraDay, this._tockTick)
        var current_time = new Date(this.ctime)
        if (this.market.isHourAligned()) {
          current_time.setMinutes(0)
        } else {
          current_time.setMinutes(this.market.zopen_minute)
        }
        current_time.setSeconds(0)
        current_time.setMilliseconds(0)
        this.ctime = current_time.getTime() //boundary aligned
        this._tickTock() //move once
        this._windMaybe(this.market._wasOpenIntraDay, this._tickTock)
        return this._date()
      }

      /**
       * Move the clock some number of days.
       * @return {Date}
       */
      _ClockP._dayImpl = function() {
        this._windMaybe(this.market._wasOpenDaily, this._seekHr)
        var current_date = new Date(this.ctime) //closest open day
        current_date.setHours(current_date.getHours() + 2) //DST adjust
        current_date.setHours(0)
        current_date.setMinutes(0)
        current_date.setSeconds(0)
        current_date.setMilliseconds(0)
        this.ctime = current_date.getTime() //boundary aligned
        var ctr = 0
        while (ctr < this.multiple) {
          if (this.forward) {
            this._tickTock24()
          } else {
            this._tockTick24()
          }
          var dstOffset = this._date().getHours() * 60 + this._date().getMinutes()
          this.ctime -= dstOffset * 60000
          if (dstOffset > 720) this.ctime += this.DAY_MILLIS
          if (!this.market._wasOpenDaily(this._date())) {
            continue
          }
          ctr += 1
        }
        return this._date()
      }

      /**
       * Move the clock some number of weeks.
       * @return {Date}
       */
      _ClockP._weekImpl = function() {
        this._tickTock() // move once

        //Move to Sunday
        var current_date = new Date(this.ctime)
        while (current_date.getDay() !== 0) {
          this._tockTick24()
          current_date = new Date(this.ctime)
        }

        //now align to first open day of week.
        this._windMaybe(this.market._wasOpenDaily, this._tickTock24)
        current_date = new Date(this.ctime)
        current_date.setHours(0)
        current_date.setMinutes(0)
        current_date.setSeconds(0)
        current_date.setMilliseconds(0)
        this.ctime = current_date.getTime() //boundary aligned;
        return this._date()
      }

      /**
       * Move the clock some number of months
       * @return {Date}
       */
      _ClockP._monthImpl = function() {
        //Allow some room to account for different lengths of months.
        var current_date = new Date(this.ctime)
        current_date.setDate(15)
        this.ctime = current_date.getTime()

        this._tickTock() // move once
        current_date = new Date(this.ctime)

        //Now re align back to the first day of the month
        current_date.setDate(1)
        this.ctime = current_date.getTime()

        //Now find the first open day of month
        this._windMaybe(this.market._wasOpenDaily, this._tickTock24)
        current_date = new Date(this.ctime)
        current_date.setHours(0)
        current_date.setMinutes(0)
        current_date.setSeconds(0)
        current_date.setMilliseconds(0)
        this.ctime = current_date.getTime() //boundary aligned;
        return this._date()
      }

      /**
       * Search forward for the next market open
       * @param {Date} date Some begin date.
       * @param {Integer} skip The number of intervals to move. Defaults
       * to one.
       * @return {Date} A new date that has been set to the previous open of the
       * market.
       */
      _ClockP._findNext = null

      /**
       * Search backward for the next market open
       * @param {Date} date Some begin date.
       * @param {Integer} skip The number of intervals to move. Defaults
       * to one.
       * @return {Date} A new date that has been set to the previous open of the
       * market.
       */
      _ClockP._findPrevious = null

      return _exports
    }

  var __js_core_polyfills_ =
    //-------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc.
    // All rights reserved
    //-------------------------------------------------------------------------------------------
    function() {
      var _exports = {}

      // Update console polyfill. Fix #731 #732 - https://github.com/zhukov/webogram/pull/732
      // Console-polyfill. MIT license.
      // https://github.com/paulmillr/console-polyfill
      // Make it safe to do console.log() always.
      ;(function(global) {
        'use strict'
        if (global.console) return
        global.console = {}
        var con = global.console
        var prop, method
        var empty = {}
        var dummy = function() {}
        var properties = 'memory'.split(',')
        var methods = (
          'assert,clear,count,debug,dir,dirxml,error,exception,group,' +
          'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +
          'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn'
        ).split(',')
        while ((prop = properties.pop())) if (!con[prop]) con[prop] = empty
        while ((method = methods.pop())) if (!con[method]) con[method] = dummy
      })(typeof window === 'undefined' ? this : window)
      // Using `this` for web workers while maintaining compatibility with browser
      // targeted script loaders such as Browserify or Webpack where the only way to
      // get to the global object is via `window`.

      //http://jsfiddle.net/JRKwH/1/
      function saveSelection() {
        if (window.getSelection) {
          var sel = window.getSelection()
          if (sel.getRangeAt && sel.rangeCount) {
            var ranges = []
            for (var i = 0, len = sel.rangeCount; i < len; ++i) {
              ranges.push(sel.getRangeAt(i))
            }
            return ranges
          }
        } else if (document.selection && document.selection.createRange) {
          return document.selection.createRange()
        }
        return null
      }
      function restoreSelection(savedSel) {
        if (savedSel) {
          if (window.getSelection) {
            var sel = window.getSelection()
            sel.removeAllRanges()
            for (var i = 0, len = savedSel.length; i < len; ++i) {
              sel.addRange(savedSel[i])
            }
          } else if (document.selection && savedSel.select) {
            savedSel.select()
          }
        }
      }
      _exports.saveSelection = saveSelection
      _exports.restoreSelection = restoreSelection

      /* Easing cubics from
	http://gizma.com/easing/#expo1
	t = current time (t should move from zero to d)
	b = starting value
	c = change in value (b + c = ending value )
	d = duration
	*/

      Math.easeInOutQuad = function(t, b, c, d) {
        t /= d / 2
        if (t < 1) return (c / 2) * t * t + b
        t--
        return (-c / 2) * (t * (t - 2) - 1) + b
      }

      Math.easeInOutCubic = function(t, b, c, d) {
        t /= d / 2
        if (t < 1) return (c / 2) * t * t * t + b
        t -= 2
        return (c / 2) * (t * t * t + 2) + b
      }

      // From MDN:
      // Reference: http://es5.github.io/#x15.4.4.14
      if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(searchElement, fromIndex) {
          var k
          if (this == null) {
            throw new TypeError('"this" is null or not defined')
          }
          var o = Object(this)
          var len = o.length >>> 0
          if (len === 0) {
            return -1
          }
          var n = +fromIndex || 0
          if (Math.abs(n) === Infinity) {
            n = 0
          }
          if (n >= len) {
            return -1
          }
          k = Math.max(n >= 0 ? n : len - Math.abs(n), 0)
          while (k < len) {
            if (k in o && o[k] === searchElement) {
              return k
            }
            k++
          }
          return -1
        }
      }

      return _exports
    }

  var __js_core_timezone_ =
    // -------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc
    // -------------------------------------------------------------------------------------------
    function(_exports) {
      var CIQ = _exports.CIQ

      /**
       * The comprehensive list of timezones can be overwhelming. This is a reduced list that provides
       * what is necessary out of box.
       * @type {Object}
       * @memberOf CIQ.TimeZoneWidget
       */
      CIQ.timeZoneMap = {
        '(UTC-11:00) American Samoa, Midway Island': 'Pacific/Midway',
        '(UTC-10:00) Hawaii': 'Pacific/Honolulu',
        '(UTC-09:00) Alaska': 'America/Juneau',
        '(UTC-08:00) Pacific Time (US and Canada)': 'America/Los_Angeles',
        '(UTC-08:00) Tijuana': 'America/Tijuana',
        '(UTC-07:00) Arizona': 'America/Phoenix',
        '(UTC-07:00) Chihuahua, La Paz, Mazatlan': 'America/Chihuahua',
        '(UTC-07:00) Mountain Time (US and Canada)': 'America/Denver',
        '(UTC-06:00) Central America': 'America/Costa_Rica',
        '(UTC-06:00) Central Time (US and Canada)': 'America/Chicago',
        '(UTC-06:00) Guadalajara, Mexico City, Monterrey': 'America/Mexico_City',
        '(UTC-06:00) Saskatchewan': 'America/Regina',
        '(UTC-05:00) Bogota, Lima, Quito, Rio Branco': 'America/Bogota',
        '(UTC-05:00) Eastern Time (US and Canada)': 'America/New_York',
        '(UTC-05:00) Indiana (East)': 'America/Indiana/Indianapolis',
        '(UTC-04:00) Caracas': 'America/Caracas',
        '(UTC-04:00) Atlantic Time (Canada)': 'America/Halifax',
        '(UTC-04:00) Georgetown, La Paz, Manaus, San Juan': 'America/Puerto_Rico',
        '(UTC-03:30) Newfoundland and Labrador': 'America/St_Johns',
        '(UTC-03:00) Buenos Aires': 'America/Argentina/Buenos_Aires',
        '(UTC-03:00) Santiago': 'America/Santiago',
        '(UTC-03:00) Sao Paulo, Montevideo': 'America/Sao_Paulo',
        '(UTC-02:00) Mid-Atlantic': 'Atlantic/South_Georgia',
        '(UTC-01:00) Azores': 'Atlantic/Azores',
        '(UTC-01:00) Cape Verde Islands': 'Atlantic/Cape_Verde',
        '(UTC) Greenwich Mean Time, Reykjavik': 'UTC',
        '(UTC) Casablanca': 'Africa/Casablanca',
        '(UTC) Dublin, Lisbon, London': 'Europe/London',
        '(UTC+01:00) Algiers, Tunis': 'Africa/Tunis',
        '(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna': 'Europe/Amsterdam',
        '(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague': 'Europe/Belgrade',
        '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris': 'Europe/Brussels',
        '(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb': 'Europe/Sarajevo',
        '(UTC+02:00) Kaliningrad': 'Europe/Kaliningrad',
        '(UTC+02:00) Athens, Nicosia': 'Europe/Athens',
        '(UTC+02:00) Bucharest': 'Europe/Bucharest',
        '(UTC+02:00) Cairo': 'Africa/Cairo',
        '(UTC+02:00) Harare, Johannesburg': 'Africa/Johannesburg',
        '(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius': 'Europe/Helsinki',
        '(UTC+02:00) Jerusalem': 'Asia/Jerusalem',
        '(UTC+03:00) Istanbul': 'Europe/Istanbul',
        '(UTC+03:00) Baghdad, Doha, Kuwait, Riyadh': 'Asia/Kuwait',
        '(UTC+03:00) Minsk, Moscow, Kirov, Volgograd': 'Europe/Moscow',
        '(UTC+03:00) Simferopol': 'Europe/Simferopol',
        '(UTC+03:00) Nairobi': 'Africa/Nairobi',
        '(UTC+03:30) Tehran': 'Asia/Tehran',
        '(UTC+04:00) Baku': 'Asia/Baku',
        '(UTC+04:00) Dubai, Muscat': 'Asia/Muscat',
        '(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk': 'Europe/Samara',
        '(UTC+04:30) Kabul': 'Asia/Kabul',
        '(UTC+05:00) Karachi, Tashkent': 'Asia/Karachi',
        '(UTC+05:00) Yekaterinburg': 'Asia/Yekaterinburg',
        '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi': 'Asia/Kolkata',
        '(UTC+05:45) Kathmandu': 'Asia/Kathmandu',
        '(UTC+06:00) Almaty, Novosibirsk, Omsk': 'Asia/Novosibirsk',
        '(UTC+06:00) Astana, Dhaka': 'Asia/Dhaka',
        '(UTC+06:30) Yangon': 'Asia/Yangon',
        '(UTC+07:00) Bangkok, Hanoi, Jakarta': 'Asia/Bangkok',
        '(UTC+07:00) Hovd': 'Asia/Hovd',
        '(UTC+07:00) Barnaul, Tomsk, Novokuznetsk, Krasnoyarsk': 'Asia/Krasnoyarsk',
        '(UTC+08:00) Beijing, Chongqing, Hong Kong SAR, Urumqi': 'Asia/Hong_Kong',
        '(UTC+08:00) Brunei, Kuala Lumpur, Singapore': 'Asia/Kuala_Lumpur',
        '(UTC+08:00) Irkutsk': 'Asia/Irkutsk',
        '(UTC+08:00) Perth': 'Australia/Perth',
        '(UTC+08:00) Taipei': 'Asia/Taipei',
        '(UTC+08:00) Ulaanbaatar': 'Asia/Ulaanbaatar',
        '(UTC+08:30) Pyongyang': 'Asia/Pyongyang',
        '(UTC+08:45) Eucla': 'Australia/Eucla',
        '(UTC+09:00) Osaka, Sapporo, Tokyo': 'Asia/Tokyo',
        '(UTC+09:00) Seoul': 'Asia/Seoul',
        '(UTC+09:00) Yakutsk, Khandyga, Chita': 'Asia/Yakutsk',
        '(UTC+09:30) Adelaide': 'Australia/Adelaide',
        '(UTC+09:30) Darwin': 'Australia/Darwin',
        '(UTC+10:00) Brisbane': 'Australia/Brisbane',
        '(UTC+10:00) Canberra, Melbourne, Sydney': 'Australia/Sydney',
        '(UTC+10:00) Guam, Port Moresby': 'Pacific/Guam',
        '(UTC+10:00) Vladivostok, Ust-Nera': 'Asia/Vladivostok',
        '(UTC+11:00) Noumea, Solomon Islands': 'Pacific/Noumea',
        '(UTC+11:00) Magadan': 'Asia/Magadan',
        '(UTC+11:00) Sakhalin, Srednekolymsk': 'Asia/Srednekolymsk',
        '(UTC+12:00) Auckland, Wellington': 'Pacific/Auckland',
        '(UTC+12:00) Kamchatka, Anadyr': 'Asia/Kamchatka',
        '(UTC+12:45) Chatham': 'Pacific/Chatham',
        '(UTC+13:00) Tonga': 'Pacific/Tongatapu',
        '(UTC+13:00) Samoa': 'Pacific/Apia',
        '(UTC+14:00) Kiritimati': 'Pacific/Kiritimati',
      }

      // -----
      // The `timezoneJS.Date` object gives you full-blown timezone support, independent from the timezone set on the end-user's machine running the browser. It uses the Olson zoneinfo files for its timezone data.
      //
      // The constructor function and setter methods use proxy JavaScript Date objects behind the scenes, so you can use strings like '10/22/2006' with the constructor. You also get the same sensible wraparound behavior with numeric parameters (like setting a value of 14 for the month wraps around to the next March).
      //
      // The other significant difference from the built-in JavaScript Date is that `timezoneJS.Date` also has named properties that store the values of year, month, date, etc., so it can be directly serialized to JSON and used for data transfer.

      /*
       * Copyright 2010 Matthew Eernisse (mde@fleegix.org)
       * and Open Source Applications Foundation
       *
       * Licensed under the Apache License, Version 2.0 (the 'License');
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an 'AS IS' BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
       * Credits: Ideas included from incomplete JS implementation of Olson
       * parser, 'XMLDAte' by Philippe Goetz (philippe.goetz@wanadoo.fr)
       *
       * Contributions:
       * Jan Niehusmann
       * Ricky Romero
       * Preston Hunt (prestonhunt@gmail.com)
       * Dov. B Katz (dov.katz@morganstanley.com)
       * Peter Bergström (pbergstr@mac.com)
       * Long Ho
       *
       * Modified from original by ChartIQ to include caching for improved performance
       */

      /*jshint laxcomma:true, laxbreak:true, expr:true, supernew:true*/
      ;(function() {
        // Standard initialization stuff to make sure the library is
        // usable on both client and server (node) side.
        'use strict'
        var root = this

        var timezoneJS = {}
        _exports.timezoneJS = timezoneJS

        timezoneJS.VERSION = '0.4.11'

        // Grab the ajax library from global context.
        // This can be jQuery, Zepto or fleegix.
        // You can also specify your own transport mechanism by declaring
        // `timezoneJS.timezone.transport` to a `function`. More details will follow
        var ajax_lib = root.$ || root.jQuery || root.Zepto,
          fleegix = root.fleegix,
          // Declare constant list of days and months. Unfortunately this doesn't leave room for i18n due to the Olson data being in English itself
          DAYS = (timezoneJS.Days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']),
          MONTHS = (timezoneJS.Months = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
          ]),
          SHORT_MONTHS = {},
          SHORT_DAYS = {},
          EXACT_DATE_TIME = {}

        //`{ 'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5, 'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11 }`
        for (var i = 0; i < MONTHS.length; i++) {
          SHORT_MONTHS[MONTHS[i].substr(0, 3)] = i
        }

        //`{ 'Sun': 0, 'Mon': 1, 'Tue': 2, 'Wed': 3, 'Thu': 4, 'Fri': 5, 'Sat': 6 }`
        for (i = 0; i < DAYS.length; i++) {
          SHORT_DAYS[DAYS[i].substr(0, 3)] = i
        }

        //Handle array indexOf in IE
        //From https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf
        //Extending Array prototype causes IE to iterate thru extra element
        var _arrIndexOf =
          Array.prototype.indexOf ||
          function(el) {
            if (this === null) {
              throw new TypeError()
            }
            var t = Object(this)
            var len = t.length >>> 0
            if (len === 0) {
              return -1
            }
            var n = 0
            if (arguments.length > 1) {
              n = Number(arguments[1])
              if (n != n) {
                // shortcut for verifying if it's NaN
                n = 0
              } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n))
              }
            }
            if (n >= len) {
              return -1
            }
            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0)
            for (; k < len; k++) {
              if (k in t && t[k] === el) {
                return k
              }
            }
            return -1
          }

        // Format a number to the length = digits. For ex:
        //
        // `_fixWidth(2, 2) = '02'`
        //
        // `_fixWidth(1998, 2) = '98'`  // year, shorten it to the 2 digit representation
        //
        // `_fixWidth(23, 1) = '23'`  // hour, even with 1 digit specified, do not trim
        //
        // This is used to pad numbers in converting date to string in ISO standard.
        var _fixWidth = function(number, digits) {
          if (typeof number !== 'number') {
            throw 'not a number: ' + number
          }
          var trim = number > 1000 // only trim 'year', as the others don't make sense why anyone would want that
          var s = number.toString()
          var s_len = s.length
          if (trim && s_len > digits) {
            return s.substr(s_len - digits, s_len)
          }
          s = [s]
          while (s_len < digits) {
            s.unshift('0')
            s_len++
          }
          return s.join('')
        }

        // Abstraction layer for different transport layers, including fleegix/jQuery/Zepto/Node.js
        //
        // Object `opts` include
        //
        // - `url`: url to ajax query
        //
        // - `async`: true for asynchronous, false otherwise. If false, return value will be response from URL. This is true by default
        //
        // - `success`: success callback function
        //
        // - `error`: error callback function
        // Returns response from URL if async is false, otherwise the AJAX request object itself
        var _transport = function(opts) {
          if (!opts) return
          if (!opts.url) throw new Error('URL must be specified')
          if (!('async' in opts)) opts.async = true
          // Client-side
          if ((!fleegix || typeof fleegix.xhr === 'undefined') && (!ajax_lib || typeof ajax_lib.ajax === 'undefined')) {
            throw new Error(
              'Please use the Fleegix.js XHR module, jQuery ajax, Zepto ajax, or define your own transport mechanism for downloading zone files.',
            )
          }
          if (!opts.async) {
            return fleegix && fleegix.xhr
              ? fleegix.xhr.doReq({ url: opts.url, async: false })
              : ajax_lib.ajax({ url: opts.url, async: false, dataType: 'text' }).responseText
          }
          return fleegix && fleegix.xhr
            ? fleegix.xhr.send({
                url: opts.url,
                method: 'get',
                handleSuccess: opts.success,
                handleErr: opts.error,
              })
            : ajax_lib.ajax({
                url: opts.url,
                dataType: 'text',
                method: 'GET',
                error: opts.error,
                success: opts.success,
              })
        }

        timezoneJS.ruleCache = {}

        // Constructor, which is similar to that of the native Date object itself
        timezoneJS.Date = function() {
          if (this === timezoneJS) {
            throw "timezoneJS.Date object must be constructed with 'new'"
          }
          var args = Array.prototype.slice.apply(arguments),
            dt = null,
            tz = null,
            arr = [],
            valid = false
          //We support several different constructors, including all the ones from `Date` object
          // with a timezone string at the end.
          //
          //- `[tz]`: Returns object with time in `tz` specified.
          //
          // - `utcMillis`, `[tz]`: Return object with UTC time = `utcMillis`, in `tz`.
          //
          // - `Date`, `[tz]`: Returns object with UTC time = `Date.getTime()`, in `tz`.
          //
          // - `year, month, [date,] [hours,] [minutes,] [seconds,] [millis,] [tz]: Same as `Date` object
          // with tz.
          //
          // - `Array`: Can be any combo of the above.
          //
          //If 1st argument is an array, we can use it as a list of arguments itself
          if (Object.prototype.toString.call(args[0]) === '[object Array]') {
            args = args[0]
          }
          // If the last string argument doesn't parse as a Date, treat it as tz
          if (typeof args[args.length - 1] === 'string') {
            valid = Date.parse(args[args.length - 1].replace(/GMT[\+\-]\d+/, ''))
            if (isNaN(valid) || valid === null) {
              // Checking against null is required for compatability with Datejs
              tz = args.pop()
            }
          }
          // Old code: still need it?
          //if (typeof args[args.length - 1] === 'string' /*&& isNaN(Date.parse(args[args.length - 1].replace(/GMT\+\d+/, '')))*/) { // This was causing any timezone with GMT to stop working as in "Etc/GMT-7"
          //  tz = args.pop();
          //}
          var is_dt_local = false
          switch (args.length) {
            case 0:
              dt = new Date()
              break
            case 1:
              dt = new Date(args[0])
              // Date strings are local if they do not contain 'Z', 'T' or timezone offsets like '+0200'
              //  - more info below
              if (
                typeof args[0] == 'string' &&
                args[0].search(/[+-][0-9]{4}/) == -1 &&
                args[0].search(/Z/) == -1 &&
                args[0].search(/T/) == -1
              ) {
                is_dt_local = true
              }
              break
            case 2:
              dt = new Date(args[0], args[1])
              is_dt_local = true
              break
            default:
              for (var i = 0; i < 7; i++) {
                arr[i] = args[i] || 0
              }
              dt = new Date(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])
              is_dt_local = true
              break
          }

          if (isNaN(dt.getTime())) {
            // invalid date were passed
            throw new Error('Invalid date')
          }

          this._useCache = false
          this._tzInfo = {}
          this._day = 0
          this.year = 0
          this.month = 0
          this.date = 0
          this.hours = 0
          this.minutes = 0
          this.seconds = 0
          this.milliseconds = 0
          this.timezone = tz || null
          // Tricky part:
          // The date is either given as unambiguous UTC date or otherwise the date is assumed
          // to be a date in timezone `tz` or a locale date if `tz` is not provided. Thus, to
          // determine how to use `dt` we distinguish between the following cases:
          //  - UTC   (is_dt_local = false)
          //    `timezoneJS.Date(millis, [tz])`
          //    `timezoneJS.Date(Date, [tz])`
          //    `timezoneJS.Date(dt_str_tz, [tz])`
          //  - local/timezone `tz`   (is_dt_local = true)
          //    `timezoneJS.Date(year, mon, day, [hour], [min], [second], [tz])`
          //    `timezoneJS.Date(dt_str, [tz])`
          //
          // `dt_str_tz` is a date string containing timezone information, i.e. containing 'Z', 'T' or
          // /[+-][0-9]{4}/ (e.g. '+0200'), while `dt_str` is a string which does not contain
          // timezone information. See: http://dygraphs.com/date-formats.html
          if (is_dt_local) {
            this.setFromDateObjProxy(dt)
          } else {
            this.setFromTimeProxy(dt.getTime(), tz)
          }
        }

        // Implements most of the native Date object
        timezoneJS.Date.prototype = {
          getDate: function() {
            return this.date
          },
          getDay: function() {
            return this._day
          },
          getFullYear: function() {
            return this.year
          },
          getMonth: function() {
            return this.month
          },
          getYear: function() {
            return this.year - 1900
          },
          getHours: function() {
            return this.hours
          },
          getMilliseconds: function() {
            return this.milliseconds
          },
          getMinutes: function() {
            return this.minutes
          },
          getSeconds: function() {
            return this.seconds
          },
          getUTCDate: function() {
            return this.getUTCDateProxy().getUTCDate()
          },
          getUTCDay: function() {
            return this.getUTCDateProxy().getUTCDay()
          },
          getUTCFullYear: function() {
            return this.getUTCDateProxy().getUTCFullYear()
          },
          getUTCHours: function() {
            return this.getUTCDateProxy().getUTCHours()
          },
          getUTCMilliseconds: function() {
            return this.getUTCDateProxy().getUTCMilliseconds()
          },
          getUTCMinutes: function() {
            return this.getUTCDateProxy().getUTCMinutes()
          },
          getUTCMonth: function() {
            return this.getUTCDateProxy().getUTCMonth()
          },
          getUTCSeconds: function() {
            return this.getUTCDateProxy().getUTCSeconds()
          },
          // Time adjusted to user-specified timezone
          getTime: function() {
            return this._timeProxy + this.getTimezoneOffset() * 60 * 1000
          },
          getTimezone: function() {
            return this.timezone
          },
          getTimezoneOffset: function() {
            return this.getTimezoneInfo().tzOffset
          },
          getTimezoneAbbreviation: function() {
            return this.getTimezoneInfo().tzAbbr
          },
          getTimezoneInfo: function() {
            if (this._useCache) return this._tzInfo
            var res
            // If timezone is specified, get the correct timezone info based on the Date given
            if (this.timezone) {
              res =
                this.timezone === 'Etc/UTC' || this.timezone === 'Etc/GMT'
                  ? { tzOffset: 0, tzAbbr: 'UTC' }
                  : timezoneJS.timezone.getTzInfo(this._timeProxy, this.timezone)
            }
            // If no timezone was specified, use the local browser offset
            else {
              res = { tzOffset: this.getLocalOffset(), tzAbbr: null }
            }
            this._tzInfo = res
            this._useCache = true
            return res
          },
          getUTCDateProxy: function() {
            var dt = new Date(this._timeProxy)
            dt.setUTCMinutes(dt.getUTCMinutes() + this.getTimezoneOffset())
            return dt
          },
          setDate: function(date) {
            this.setAttribute('date', date)
            return this.getTime()
          },
          setFullYear: function(year, month, date) {
            if (date !== undefined) {
              this.setAttribute('date', 1)
            }
            this.setAttribute('year', year)
            if (month !== undefined) {
              this.setAttribute('month', month)
            }
            if (date !== undefined) {
              this.setAttribute('date', date)
            }
            return this.getTime()
          },
          setMonth: function(month, date) {
            this.setAttribute('month', month)
            if (date !== undefined) {
              this.setAttribute('date', date)
            }
            return this.getTime()
          },
          setYear: function(year) {
            year = Number(year)
            if (0 <= year && year <= 99) {
              year += 1900
            }
            this.setUTCAttribute('year', year)
            return this.getTime()
          },
          setHours: function(hours, minutes, seconds, milliseconds) {
            this.setAttribute('hours', hours)
            if (minutes !== undefined) {
              this.setAttribute('minutes', minutes)
            }
            if (seconds !== undefined) {
              this.setAttribute('seconds', seconds)
            }
            if (milliseconds !== undefined) {
              this.setAttribute('milliseconds', milliseconds)
            }
            return this.getTime()
          },
          setMinutes: function(minutes, seconds, milliseconds) {
            this.setAttribute('minutes', minutes)
            if (seconds !== undefined) {
              this.setAttribute('seconds', seconds)
            }
            if (milliseconds !== undefined) {
              this.setAttribute('milliseconds', milliseconds)
            }
            return this.getTime()
          },
          setSeconds: function(seconds, milliseconds) {
            this.setAttribute('seconds', seconds)
            if (milliseconds !== undefined) {
              this.setAttribute('milliseconds', milliseconds)
            }
            return this.getTime()
          },
          setMilliseconds: function(milliseconds) {
            this.setAttribute('milliseconds', milliseconds)
            return this.getTime()
          },
          setTime: function(n) {
            if (isNaN(n)) {
              throw new Error('Units must be a number.')
            }
            this.setFromTimeProxy(n, this.timezone)
            return this.getTime()
          },
          setUTCFullYear: function(year, month, date) {
            if (date !== undefined) {
              this.setUTCAttribute('date', 1)
            }
            this.setUTCAttribute('year', year)
            if (month !== undefined) {
              this.setUTCAttribute('month', month)
            }
            if (date !== undefined) {
              this.setUTCAttribute('date', date)
            }
            return this.getTime()
          },
          setUTCMonth: function(month, date) {
            this.setUTCAttribute('month', month)
            if (date !== undefined) {
              this.setUTCAttribute('date', date)
            }
            return this.getTime()
          },
          setUTCDate: function(date) {
            this.setUTCAttribute('date', date)
            return this.getTime()
          },
          setUTCHours: function(hours, minutes, seconds, milliseconds) {
            this.setUTCAttribute('hours', hours)
            if (minutes !== undefined) {
              this.setUTCAttribute('minutes', minutes)
            }
            if (seconds !== undefined) {
              this.setUTCAttribute('seconds', seconds)
            }
            if (milliseconds !== undefined) {
              this.setUTCAttribute('milliseconds', milliseconds)
            }
            return this.getTime()
          },
          setUTCMinutes: function(minutes, seconds, milliseconds) {
            this.setUTCAttribute('minutes', minutes)
            if (seconds !== undefined) {
              this.setUTCAttribute('seconds', seconds)
            }
            if (milliseconds !== undefined) {
              this.setUTCAttribute('milliseconds', milliseconds)
            }
            return this.getTime()
          },
          setUTCSeconds: function(seconds, milliseconds) {
            this.setUTCAttribute('seconds', seconds)
            if (milliseconds !== undefined) {
              this.setUTCAttribute('milliseconds', milliseconds)
            }
            return this.getTime()
          },
          setUTCMilliseconds: function(milliseconds) {
            this.setUTCAttribute('milliseconds', milliseconds)
            return this.getTime()
          },
          setFromDateObjProxy: function(dt) {
            this.year = dt.getFullYear()
            this.month = dt.getMonth()
            this.date = dt.getDate()
            this.hours = dt.getHours()
            this.minutes = dt.getMinutes()
            this.seconds = dt.getSeconds()
            this.milliseconds = dt.getMilliseconds()
            this._day = dt.getDay()
            this._dateProxy = dt
            this._timeProxy = Date.UTC(
              this.year,
              this.month,
              this.date,
              this.hours,
              this.minutes,
              this.seconds,
              this.milliseconds,
            )
            this._useCache = false
          },
          setFromTimeProxy: function(utcMillis, tz) {
            var dt = new Date(utcMillis)
            var tzOffset = tz ? timezoneJS.timezone.getTzInfo(utcMillis, tz, true).tzOffset : dt.getTimezoneOffset()
            dt.setTime(utcMillis + (dt.getTimezoneOffset() - tzOffset) * 60000)
            this.setFromDateObjProxy(dt)
          },
          setAttribute: function(unit, n) {
            if (isNaN(n)) {
              throw new Error('Units must be a number.')
            }
            var dt = this._dateProxy
            var meth = unit === 'year' ? 'FullYear' : unit.substr(0, 1).toUpperCase() + unit.substr(1)
            dt['set' + meth](n)
            this.setFromDateObjProxy(dt)
          },
          setUTCAttribute: function(unit, n) {
            if (isNaN(n)) {
              throw new Error('Units must be a number.')
            }
            var meth = unit === 'year' ? 'FullYear' : unit.substr(0, 1).toUpperCase() + unit.substr(1)
            var dt = this.getUTCDateProxy()
            dt['setUTC' + meth](n)
            dt.setUTCMinutes(dt.getUTCMinutes() - this.getTimezoneOffset())
            this.setFromTimeProxy(dt.getTime() + this.getTimezoneOffset() * 60000, this.timezone)
          },
          setTimezone: function(tz) {
            var previousOffset = this.getTimezoneInfo().tzOffset
            this.timezone = tz
            this._useCache = false
            // Set UTC minutes offsets by the delta of the two timezones
            this.setUTCMinutes(this.getUTCMinutes() - this.getTimezoneInfo().tzOffset + previousOffset)
          },
          removeTimezone: function() {
            this.timezone = null
            this._useCache = false
          },
          valueOf: function() {
            return this.getTime()
          },
          clone: function() {
            return this.timezone
              ? new timezoneJS.Date(this.getTime(), this.timezone)
              : new timezoneJS.Date(this.getTime())
          },
          toGMTString: function() {
            return this.toString('EEE, dd MMM yyyy HH:mm:ss Z', 'Etc/GMT')
          },
          toLocaleStringIntl: function() {},
          toLocaleDateString: function() {},
          toLocaleTimeString: function() {},
          toSource: function() {},
          toISOString: function() {
            return this.toString('yyyy-MM-ddTHH:mm:ss.SSS', 'Etc/UTC') + 'Z'
          },
          toJSON: function() {
            return this.toISOString()
          },
          toDateString: function() {
            return this.toString('EEE MMM dd yyyy')
          },
          toTimeString: function() {
            return this.toString('H:mm k')
          },
          // Allows different format following ISO8601 format:
          toString: function(format, tz) {
            // Default format is the same as toISOString
            if (!format) format = 'yyyy-MM-ddTHH:mm:ss.SSS'
            var result = format
            var tzInfo = tz ? timezoneJS.timezone.getTzInfo(this.getTime(), tz) : this.getTimezoneInfo()
            var _this = this
            // If timezone is specified, get a clone of the current Date object and modify it
            if (tz) {
              _this = this.clone()
              _this.setTimezone(tz)
            }
            var hours = _this.getHours()
            return (
              result
                // fix the same characters in Month names
                .replace(/a+/g, function() {
                  return 'k'
                })
                // `y`: year
                .replace(/y+/g, function(token) {
                  return _fixWidth(_this.getFullYear(), token.length)
                })
                // `d`: date
                .replace(/d+/g, function(token) {
                  return _fixWidth(_this.getDate(), token.length)
                })
                // `m`: minute
                .replace(/m+/g, function(token) {
                  return _fixWidth(_this.getMinutes(), token.length)
                })
                // `s`: second
                .replace(/s+/g, function(token) {
                  return _fixWidth(_this.getSeconds(), token.length)
                })
                // `S`: millisecond
                .replace(/S+/g, function(token) {
                  return _fixWidth(_this.getMilliseconds(), token.length)
                })
                // 'h': 12 hour format
                .replace(/h+/g, function(token) {
                  return _fixWidth(hours % 12 === 0 ? 12 : hours % 12, token.length)
                })
                // `M`: month. Note: `MM` will be the numeric representation (e.g February is 02) but `MMM` will be text representation (e.g February is Feb)
                .replace(/M+/g, function(token) {
                  var _month = _this.getMonth(),
                    _len = token.length
                  if (_len > 3) {
                    return timezoneJS.Months[_month]
                  } else if (_len > 2) {
                    return timezoneJS.Months[_month].substring(0, _len)
                  }
                  return _fixWidth(_month + 1, _len)
                })
                // `k`: AM/PM
                .replace(/k+/g, function() {
                  if (hours >= 12) {
                    if (hours > 12) {
                      hours -= 12
                    }
                    return 'PM'
                  }
                  return 'AM'
                })
                // `H`: hour
                .replace(/H+/g, function(token) {
                  return _fixWidth(hours, token.length)
                })
                // `E`: day
                .replace(/E+/g, function(token) {
                  return DAYS[_this.getDay()].substring(0, token.length)
                })
                // `Z`: timezone abbreviation
                .replace(/Z+/gi, function() {
                  return tzInfo.tzAbbr
                })
            )
          },
          toUTCString: function() {
            return this.toGMTString()
          },
          civilToJulianDayNumber: function(y, m, d) {
            var a
            // Adjust for zero-based JS-style array
            m++
            if (m > 12) {
              a = parseInt(m / 12, 10)
              m = m % 12
              y += a
            }
            if (m <= 2) {
              y -= 1
              m += 12
            }
            a = Math.floor(y / 100)
            var b = 2 - a + Math.floor(a / 4),
              jDt = Math.floor(365.25 * (y + 4716)) + Math.floor(30.6001 * (m + 1)) + d + b - 1524
            return jDt
          },
          getLocalOffset: function() {
            return this._dateProxy.getTimezoneOffset()
          },
        }

        timezoneJS.timezone = new (function() {
          var _this = this,
            regionMap = {
              Etc: 'etcetera',
              EST: 'northamerica',
              MST: 'northamerica',
              HST: 'northamerica',
              EST5EDT: 'northamerica',
              CST6CDT: 'northamerica',
              MST7MDT: 'northamerica',
              PST8PDT: 'northamerica',
              America: ['northamerica', 'southamerica'],
              Pacific: 'australasia',
              Atlantic: 'europe',
              Africa: 'africa',
              Indian: 'africa',
              Antarctica: 'antarctica',
              Asia: 'asia',
              Australia: 'australasia',
              Europe: 'europe',
              WET: 'europe',
              CET: 'europe',
              MET: 'europe',
              EET: 'europe',
            },
            regionExceptions = {
              'Pacific/Honolulu': 'northamerica',
              'Atlantic/Bermuda': 'northamerica',
              'Atlantic/Cape_Verde': 'africa',
              'Atlantic/St_Helena': 'africa',
              'Indian/Kerguelen': 'antarctica',
              'Indian/Chagos': 'asia',
              'Indian/Maldives': 'asia',
              'Indian/Christmas': 'australasia',
              'Indian/Cocos': 'australasia',
              'America/Danmarkshavn': 'europe',
              'America/Scoresbysund': 'europe',
              'America/Godthab': 'europe',
              'America/Thule': 'europe',
              'Asia/Istanbul': 'europe',
              'Asia/Yekaterinburg': 'europe',
              'Asia/Omsk': 'europe',
              'Asia/Novosibirsk': 'europe',
              'Asia/Krasnoyarsk': 'europe',
              'Asia/Irkutsk': 'europe',
              'Asia/Yakutsk': 'europe',
              'Asia/Vladivostok': 'europe',
              'Asia/Sakhalin': 'europe',
              'Asia/Magadan': 'europe',
              'Asia/Kamchatka': 'europe',
              'Asia/Anadyr': 'europe',
              'Africa/Ceuta': 'europe',
              GMT: 'etcetera',
              'Europe/Nicosia': 'asia',
            }
          function invalidTZError(t) {
            throw new Error("Timezone '" + t + "' is either incorrect, or not loaded in the timezone registry.")
          }
          function builtInLoadZoneFile(fileName, opts) {
            var url = _this.zoneFileBasePath + '/' + fileName
            return !opts || !opts.async
              ? _this.parseZones(_this.transport({ url: url, async: false }))
              : _this.transport({
                  async: true,
                  url: url,
                  success: function(str) {
                    return _this.parseZones(str) && typeof opts.callback === 'function' && opts.callback()
                  },
                  error: function() {
                    throw new Error("Error retrieving '" + url + "' zoneinfo files")
                  },
                })
          }
          function getRegionForTimezone(tz) {
            var exc = regionExceptions[tz],
              reg,
              ret
            if (exc) return exc
            reg = tz.split('/')[0]
            ret = regionMap[reg]
            // If there's nothing listed in the main regions for this TZ, check the 'backward' links
            if (ret) return ret
            var link = _this.zones[tz]
            if (typeof link === 'string') {
              return getRegionForTimezone(link)
            }
            // Backward-compat file hasn't loaded yet, try looking in there
            if (!_this.loadedZones.backward) {
              // This is for obvious legacy zones (e.g., Iceland) that don't even have a prefix like 'America/' that look like normal zones
              _this.loadZoneFile('backward')
              return getRegionForTimezone(tz)
            }
            invalidTZError(tz)
          }
          //str has format hh:mm, can be negative
          function parseTimeString(str) {
            var pat = /(\d+)(?::0*(\d*))?(?::0*(\d*))?([wsugz])?$/
            var hms = str.match(pat)
            hms[1] = parseInt(hms[1], 10)
            hms[2] = hms[2] ? parseInt(hms[2], 10) : 0
            hms[3] = hms[3] ? parseInt(hms[3], 10) : 0
            return hms.slice(1, 5)
          }
          //z is something like `[ '-3:44:40', '-', 'LMT', '1911', 'May', '15', '' ]` or `[ '-5:00', '-', 'EST', '1974', 'Apr', '28', '2:00' ]`
          function processZone(z) {
            if (!z[3]) {
              return
            }
            var yea = parseInt(z[3], 10),
              mon = 11,
              dat = 31
            //If month is there
            if (z[4]) {
              mon = SHORT_MONTHS[z[4].substr(0, 3)]
              dat = parseInt(z[5], 10) || 1
            }
            var t = z[6] ? parseTimeString(z[6]) : [0, 0, 0]
            return [yea, mon, dat, t[0], t[1], t[2]]
          }
          function getZone(dt, tz) {
            var utcMillis = typeof dt === 'number' ? dt : new Date(dt).getTime()
            var t = tz
            var zoneList = _this.zones[t]
            // Follow links to get to an actual zone
            while (typeof zoneList === 'string') {
              t = zoneList
              zoneList = _this.zones[t]
            }
            if (!zoneList) {
              // Backward-compat file hasn't loaded yet, try looking in there
              if (!_this.loadedZones.backward) {
                //This is for backward entries like 'America/Fort_Wayne' that
                // getRegionForTimezone *thinks* it has a region file and zone
                // for (e.g., America => 'northamerica'), but in reality it's a
                // legacy zone we need the backward file for.
                _this.loadZoneFile('backward')
                return getZone(dt, tz)
              } else if (t && t !== tz) {
                //Load the linked zone found in the backward file
                _this.lazyLoadZoneFiles(t)
                return getZone(dt, t)
              }
              invalidTZError(t)
            }
            if (zoneList.length === 0) {
              throw new Error("No Zone found for '" + tz + "' on " + dt)
            }
            //Do backwards lookup since most use cases deal with newer dates.
            for (var i = zoneList.length - 1; i >= 0; i--) {
              var z = zoneList[i]
              if (z[3] && utcMillis > z[3]) break
            }
            return zoneList[i + 1]
          }
          function getBasicOffset(time) {
            var off = parseTimeString(time),
              adj = time.charAt(0) === '-' ? -1 : 1
            off = adj * (((off[0] * 60 + off[1]) * 60 + off[2]) * 1000)
            return off / 60 / 1000
          }
          function getAdjustedOffset(off, min) {
            return -Math.ceil(min - off)
          }

          //if isUTC is true, date is given in UTC, otherwise it's given
          // in local time (ie. date.getUTC*() returns local time components)
          function getRule(dt, zone, isUTC, cacheKey) {
            var date = typeof dt === 'number' ? new Date(dt) : dt
            var ruleset = zone[1]
            var basicOffset = zone[0]

            // If the zone has a DST rule like '1:00', create a rule and return it
            // instead of looking it up in the parsed rules
            var staticDstMatch = ruleset.match(/^([0-9]):([0-9][0-9])$/)
            if (staticDstMatch) {
              return [
                -1000000,
                'max',
                '-',
                'Jan',
                1,
                [0, 0, 0],
                parseInt(staticDstMatch[1], 10) * 60 + parseInt(staticDstMatch[2], 10),
                '-',
              ]
            }

            //Convert a date to UTC. Depending on the 'type' parameter, the date
            // parameter may be:
            //
            // - `u`, `g`, `z`: already UTC (no adjustment).
            //
            // - `s`: standard time (adjust for time zone offset but not for DST)
            //
            // - `w`: wall clock time (adjust for both time zone and DST offset).
            //
            // DST adjustment is done using the rule given as third argument.
            var convertDateToUTC = function(date, type, rule) {
              var offset = 0

              if (type === 'u' || type === 'g' || type === 'z') {
                // UTC
                offset = 0
              } else if (type === 's') {
                // Standard Time
                offset = basicOffset
              } else if (type === 'w' || !type) {
                // Wall Clock Time
                offset = getAdjustedOffset(basicOffset, rule[6])
              } else {
                throw new Error('unknown type ' + type)
              }
              offset *= 60 * 1000 // to millis

              return new Date(date.getTime() + offset)
            }

            //Step 1:  Find applicable rules for this year.
            //
            //Step 2:  Sort the rules by effective date.
            //
            //Step 3:  Check requested date to see if a rule has yet taken effect this year.  If not,
            //
            //Step 4:  Get the rules for the previous year.  If there isn't an applicable rule for last year, then
            // there probably is no current time offset since they seem to explicitly turn off the offset
            // when someone stops observing DST.
            //
            // FIXME if this is not the case and we'll walk all the way back (ugh).
            //
            //Step 5:  Sort the rules by effective date.
            //Step 6:  Apply the most recent rule before the current time.
            var convertRuleToExactDateAndTime = function(yearAndRule, prevRule) {
              var year = yearAndRule[0],
                rule = yearAndRule[1]
              // Assume that the rule applies to the year of the given date.

              var hms = rule[5]
              var effectiveDate

              if (!EXACT_DATE_TIME[year]) EXACT_DATE_TIME[year] = {}

              // Result for given parameters is already stored
              if (EXACT_DATE_TIME[year][rule]) effectiveDate = EXACT_DATE_TIME[year][rule]
              else {
                //If we have a specific date, use that!
                if (!isNaN(rule[4])) {
                  effectiveDate = new Date(Date.UTC(year, SHORT_MONTHS[rule[3]], rule[4], hms[0], hms[1], hms[2], 0))
                }
                //Let's hunt for the date.
                else {
                  var targetDay, operator
                  //Example: `lastThu`
                  if (rule[4].substr(0, 4) === 'last') {
                    // Start at the last day of the month and work backward.
                    effectiveDate = new Date(
                      Date.UTC(year, SHORT_MONTHS[rule[3]] + 1, 1, hms[0] - 24, hms[1], hms[2], 0),
                    )
                    targetDay = SHORT_DAYS[rule[4].substr(4, 3)]
                    operator = '<='
                  }
                  //Example: `Sun>=15`
                  else {
                    //Start at the specified date.
                    effectiveDate = new Date(
                      Date.UTC(year, SHORT_MONTHS[rule[3]], rule[4].substr(5), hms[0], hms[1], hms[2], 0),
                    )
                    targetDay = SHORT_DAYS[rule[4].substr(0, 3)]
                    operator = rule[4].substr(3, 2)
                  }
                  var ourDay = effectiveDate.getUTCDay()
                  //Go forwards.
                  if (operator === '>=') {
                    effectiveDate.setUTCDate(
                      effectiveDate.getUTCDate() + (targetDay - ourDay + (targetDay < ourDay ? 7 : 0)),
                    )
                  }
                  //Go backwards.  Looking for the last of a certain day, or operator is '<=' (less likely).
                  else {
                    effectiveDate.setUTCDate(
                      effectiveDate.getUTCDate() + (targetDay - ourDay - (targetDay > ourDay ? 7 : 0)),
                    )
                  }
                }
                EXACT_DATE_TIME[year][rule] = effectiveDate
              }

              //If previous rule is given, correct for the fact that the starting time of the current
              // rule may be specified in local time.
              if (prevRule) {
                effectiveDate = convertDateToUTC(effectiveDate, hms[3], prevRule)
              }
              return effectiveDate
            }

            var findApplicableRules = function(year, ruleset) {
              var applicableRules = []
              for (var i = 0; ruleset && i < ruleset.length; i++) {
                //Exclude future rules.
                if (
                  ruleset[i][0] <= year &&
                  // Date is in a set range.
                  (ruleset[i][1] >= year ||
                    // Date is in an 'only' year.
                    (ruleset[i][0] === year && ruleset[i][1] === 'only') ||
                    //We're in a range from the start year to infinity.
                    ruleset[i][1] === 'max')
                ) {
                  //It's completely okay to have any number of matches here.
                  // Normally we should only see two, but that doesn't preclude other numbers of matches.
                  // These matches are applicable to this year.
                  applicableRules.push([year, ruleset[i]])
                }
              }
              return applicableRules
            }

            var compareDates = function(a, b, prev) {
              var year, rule
              if (!(a instanceof Date)) {
                year = a[0]
                rule = a[1]
                a =
                  !prev && EXACT_DATE_TIME[year] && EXACT_DATE_TIME[year][rule]
                    ? EXACT_DATE_TIME[year][rule]
                    : convertRuleToExactDateAndTime(a, prev)
              } else if (prev) {
                a = convertDateToUTC(a, isUTC ? 'u' : 'w', prev)
              }
              if (!(b instanceof Date)) {
                year = b[0]
                rule = b[1]
                b =
                  !prev && EXACT_DATE_TIME[year] && EXACT_DATE_TIME[year][rule]
                    ? EXACT_DATE_TIME[year][rule]
                    : convertRuleToExactDateAndTime(b, prev)
              } else if (prev) {
                b = convertDateToUTC(b, isUTC ? 'u' : 'w', prev)
              }
              a = Number(a)
              b = Number(b)
              return a - b
            }

            var year = date.getUTCFullYear()
            var applicableRules

            var cache = timezoneJS.ruleCache[cacheKey]
            if (!cache) cache = timezoneJS.ruleCache[cacheKey] = {}
            applicableRules = cache[year]
            if (!applicableRules) {
              applicableRules = findApplicableRules(year - 1, _this.rules[ruleset])
              applicableRules = applicableRules.concat(findApplicableRules(year, _this.rules[ruleset]))
              applicableRules.sort(compareDates) // Probably already sorted?
              cache[year] = applicableRules
            }

            if (!applicableRules || !applicableRules.length) return null // No applicable rules

            var prev
            for (var i = applicableRules.length - 1; i >= 0; i--) {
              if (i > 0) prev = applicableRules[i - 1][1]
              else prev = null
              var rule = applicableRules[i]
              if (!rule[2]) {
                rule[2] = convertRuleToExactDateAndTime(rule, prev) // cache the exactDateAndTime, this saves a lot of cycles!
              }
              if (compareDates(date, rule, prev) >= 0) return rule[1]
            }
            return null

            /*
	      applicableRules = findApplicableRules(year, _this.rules[ruleset]);
	      applicableRules.push(date);
	      //While sorting, the time zone in which the rule starting time is specified
	      // is ignored. This is ok as long as the timespan between two DST changes is
	      // larger than the DST offset, which is probably always true.
	      // As the given date may indeed be close to a DST change, it may get sorted
	      // to a wrong position (off by one), which is corrected below.
	      applicableRules.sort(compareDates);

	      //If there are not enough past DST rules...
	      if (_arrIndexOf.call(applicableRules, date) < 2) {
		applicableRules = applicableRules.concat(findApplicableRules(year-1, _this.rules[ruleset]));
		applicableRules.sort(compareDates);
	      }
	      var pinpoint = _arrIndexOf.call(applicableRules, date);
	      if (pinpoint > 1 && compareDates(date, applicableRules[pinpoint-1], applicableRules[pinpoint-2][1]) < 0) {
		//The previous rule does not really apply, take the one before that.
		return applicableRules[pinpoint - 2][1];
	      } else if (pinpoint > 0 && pinpoint < applicableRules.length - 1 && compareDates(date, applicableRules[pinpoint+1], applicableRules[pinpoint-1][1]) > 0) {

		//The next rule does already apply, take that one.
		return applicableRules[pinpoint + 1][1];
	      } else if (pinpoint === 0) {
		//No applicable rule found in this and in previous year.
		return null;
	      }
	      return applicableRules[pinpoint - 1][1];
	     */
          }
          function getAbbreviation(zone, rule) {
            var base = zone[2]
            if (base.indexOf('%s') > -1) {
              var repl
              if (rule) {
                repl = rule[7] === '-' ? '' : rule[7]
              }
              //FIXME: Right now just falling back to Standard --
              // apparently ought to use the last valid rule,
              // although in practice that always ought to be Standard
              else {
                repl = 'S'
              }
              return base.replace('%s', repl)
            } else if (base.indexOf('/') > -1) {
              //Chose one of two alternative strings.
              return base.split('/', 2)[rule ? (rule[6] ? 1 : 0) : 0]
            }
            return base
          }

          this.zoneFileBasePath = null
          this.zoneFiles = [
            'africa',
            'antarctica',
            'asia',
            'australasia',
            'backward',
            'etcetera',
            'europe',
            'northamerica',
            'pacificnew',
            'southamerica',
          ]
          this.loadingSchemes = {
            PRELOAD_ALL: 'preloadAll',
            LAZY_LOAD: 'lazyLoad',
            MANUAL_LOAD: 'manualLoad',
          }
          this.getRegionForTimezone = getRegionForTimezone
          this.loadingScheme = this.loadingSchemes.LAZY_LOAD
          this.loadedZones = {}
          this.zones = {}
          this.rules = {}

          this.init = function(o) {
            var opts = { async: true },
              def =
                this.loadingScheme === this.loadingSchemes.PRELOAD_ALL
                  ? this.zoneFiles
                  : this.defaultZoneFile || 'northamerica'
            //Override default with any passed-in opts
            for (var p in o) {
              opts[p] = o[p]
            }
            return this.loadZoneFiles(def, opts)
          }

          //Get a single zone file, or all files in an array
          this.loadZoneFiles = function(fileNames, opts) {
            var callbackFn,
              done = 0
            if (typeof fileNames === 'string') {
              return this.loadZoneFile(fileNames, opts)
            }
            //Wraps callback function in another one that makes
            // sure all files have been loaded.
            opts = opts || {}
            callbackFn = opts.callback
            opts.callback = function() {
              done++
              done === fileNames.length && typeof callbackFn === 'function' && callbackFn()
            }
            for (var i = 0; i < fileNames.length; i++) {
              this.loadZoneFile(fileNames[i], opts)
            }
          }
          //Get the zone files via XHR -- if the sync flag
          // is set to true, it's being called by the lazy-loading
          // mechanism, so the result needs to be returned inline.
          this.loadZoneFile = function(fileName, opts) {
            if (typeof this.zoneFileBasePath === 'undefined') {
              throw new Error(
                'Please define a base path to your zone file directory -- timezoneJS.timezone.zoneFileBasePath.',
              )
            }
            //Ignore already loaded zones.
            if (this.loadedZones[fileName]) {
              return
            }
            this.loadedZones[fileName] = true
            return builtInLoadZoneFile(fileName, opts)
          }
          this.loadZoneJSONData = function(url, sync) {
            var processData = function(data) {
              /*jslint evil: true */ /*jshint -W061 */ /*eslint no-eval: 0 */
              data = eval('(' + data + ')') /*eslint no-eval: 1 */ /*jshint +W061 */
              /*jslint evil: false */ for (var z in data.zones) {
                _this.zones[z] = data.zones[z]
              }
              for (var r in data.rules) {
                _this.rules[r] = data.rules[r]
              }
            }
            return sync
              ? processData(_this.transport({ url: url, async: false }))
              : _this.transport({ url: url, success: processData })
          }
          this.loadZoneDataFromObject = function(data) {
            if (!data) {
              return
            }
            for (var z in data.zones) {
              _this.zones[z] = data.zones[z]
            }
            for (var r in data.rules) {
              _this.rules[r] = data.rules[r]
            }
          }
          this.getAllZones = function() {
            var arr = []
            for (var z in this.zones) {
              arr.push(z)
            }
            return arr.sort()
          }
          this.parseZones = function(str) {
            if (!str) {
              return false
            }

            var lines = str.split('\n'),
              arr = [],
              chunk = '',
              l,
              zone = null,
              rule = null
            for (var i = 0; i < lines.length; i++) {
              l = lines[i]
              if (l.match(/^\s/)) {
                l = 'Zone ' + zone + l
              }
              l = l.split('#')[0]
              if (l.length > 3) {
                arr = l.split(/\s+/)
                chunk = arr.shift()
                //Ignore Leap.
                switch (chunk) {
                  case 'Zone':
                    zone = arr.shift()
                    if (!_this.zones[zone]) {
                      _this.zones[zone] = []
                    }
                    if (arr.length < 3) break
                    //Process zone right here and replace 3rd element with the processed array.
                    arr.splice(3, arr.length, processZone(arr))
                    if (arr[3]) arr[3] = Date.UTC.apply(null, arr[3])
                    arr[0] = -getBasicOffset(arr[0])
                    _this.zones[zone].push(arr)
                    break
                  case 'Rule':
                    rule = arr.shift()
                    if (!_this.rules[rule]) {
                      _this.rules[rule] = []
                    }
                    //Parse int FROM year and TO year
                    arr[0] = parseInt(arr[0], 10)
                    arr[1] = parseInt(arr[1], 10) || arr[1]
                    //Parse time string AT
                    arr[5] = parseTimeString(arr[5])
                    //Parse offset SAVE
                    arr[6] = getBasicOffset(arr[6])
                    _this.rules[rule].push(arr)
                    break
                  case 'Link':
                    //No zones for these should already exist.
                    if (_this.zones[arr[1]]) {
                      throw new Error('Error with Link ' + arr[1] + '. Cannot create link of a preexisted zone.')
                    }
                    //Create the link.
                    //Links are saved as strings that are the keys
                    //of their referenced values.
                    //Ex: "US/Central": "America/Chicago"
                    if (isNaN(arr[0])) {
                      _this.zones[arr[1]] = arr[0]
                    } else {
                      _this.zones[arr[1]] = parseInt(arr[0], 10)
                    }
                    break
                }
              }
            }
            return true
          }
          //Expose transport mechanism and allow overwrite.
          this.transport = _transport
          this.getTzInfo = function(dt, tz, isUTC) {
            this.lazyLoadZoneFiles(tz)
            var z = getZone(dt, tz)
            var off = +z[0]
            //See if the offset needs adjustment.
            var rule = getRule(dt, z, isUTC, tz)
            if (rule) {
              off = getAdjustedOffset(off, rule[6])
            }
            var abbr = getAbbreviation(z, rule)
            return { tzOffset: off, tzAbbr: abbr }
          }
          //Lazy-load any zones not yet loaded.
          this.lazyLoadZoneFiles = function(tz) {
            if (this.loadingScheme === this.loadingSchemes.LAZY_LOAD) {
              //Get the correct region for the zone.
              var zoneFile = getRegionForTimezone(tz)
              if (!zoneFile) {
                throw new Error('Not a valid timezone ID.')
              }
              //Get the file and parse it -- use synchronous XHR.
              this.loadZoneFiles(zoneFile)
            }
          }
        })()
      }.call(typeof window !== 'undefined' ? window : this))

      // Load all the necessary timezones and their rules
      _exports.timezoneJS.timezone.loadingScheme = _exports.timezoneJS.timezone.loadingSchemes.MANUAL_LOAD
      _exports.timezoneJS.timezone.loadZoneDataFromObject({
        zones: {
          'Atlantic/Cape_Verde': [[60, '-', 'CVT', null]],
          'Africa/Cairo': [[-120, 'Egypt', 'EE%sT', null]],
          'Africa/Nairobi': [[-180, '-', 'EAT', null]],
          'Africa/Casablanca': [[0, 'Morocco', 'WE%sT', null]],
          'Africa/Johannesburg': [[-120, 'SA', 'SAST', null]],
          'Africa/Tunis': [[-60, 'Tunisia', 'CE%sT', null]],
          'Asia/Kabul': [[-270, '-', 'AFT', null]],
          'Asia/Baku': [[-240, 'Azer', '+04/+05', null]],
          'Asia/Dhaka': [[-360, 'Dhaka', 'BD%sT', null]],
          'Asia/Yangon': [[-390, '-', 'MMT', null]],
          'Asia/Rangoon': 'Asia/Yangon', // backwards compatibility
          'Asia/Hong_Kong': [[-480, 'HK', 'HK%sT', null]],
          'Asia/Taipei': [[-480, 'Taiwan', 'C%sT', null]],
          'Asia/Kolkata': [[-330, '-', 'IST', null]],
          'Asia/Tehran': [[-210, 'Iran', 'IR%sT', null]],
          'Asia/Jerusalem': [[-120, 'Zion', 'I%sT', null]],
          'Asia/Tokyo': [[-540, 'Japan', 'J%sT', null]],
          'Asia/Seoul': [[-540, 'ROK', 'K%sT', null]],
          'Asia/Pyongyang': [[-540, '-', 'KST', 1439596800000], [-510, '-', 'KST', null]],
          'Asia/Kuwait': [[-180, '-', 'AST', null]],
          'Asia/Kuala_Lumpur': [[-480, '-', 'MYT', null]],
          'Asia/Hovd': [[-420, 'Mongol', 'HOV%sT', null]],
          'Asia/Ulaanbaatar': [[-480, 'Mongol', 'ULA%sT', null]],
          'Asia/Kathmandu': [[-345, '-', 'NPT', null]],
          'Asia/Muscat': [[-240, '-', 'GST', null]],
          'Asia/Karachi': [[-300, 'Pakistan', 'PK%sT', null]],
          'Asia/Bangkok': [[-420, '-', 'ICT', null]],
          'Australia/Darwin': [[-570, 'Aus', 'CST', null]],
          'Australia/Perth': [[-480, 'AW', 'WST', null]],
          'Australia/Eucla': [[-525, 'AW', 'CWST', null]],
          'Australia/Brisbane': [[-600, 'AQ', 'EST', null]],
          'Australia/Adelaide': [[-570, 'AS', 'CST', null]],
          'Australia/Sydney': [[-600, 'AN', 'EST', null]],
          'Pacific/Guam': [[-600, '-', 'ChST', null]],
          'Pacific/Kiritimati': [[-840, '-', 'LINT', null]],
          'Pacific/Noumea': [[-660, 'NC', 'NC%sT', null]],
          'Pacific/Auckland': [[-720, 'NZ', 'NZ%sT', null]],
          'Pacific/Chatham': [[-765, 'Chatham', 'CHA%sT', null]],
          'Pacific/Apia': [
            [660, '1:00', 'WSDT', 1325203200000],
            [-780, '1:00', 'WSDT', 1333252800000],
            [-780, 'WS', 'WS%sT', null],
          ],
          'Pacific/Tongatapu': [[-780, 'Tonga', '+13/+14', null]],
          'Pacific/Midway': [[660, '-', 'SST', null]],
          'Atlantic/Reykjavik': 'Etc/UTC', // backwards compatibility
          UTC: 'Etc/UTC',
          'Etc/UTC': [[0, '-', 'UTC', null]],
          'Europe/London': [[0, 'EU', 'GMT/BST', null]],
          'Europe/Brussels': [[-60, 'EU', 'CE%sT', null]],
          'Europe/Helsinki': [[-120, 'EU', 'EE%sT', null]],
          'Europe/Athens': [[-120, 'EU', 'EE%sT', null]],
          'Europe/Amsterdam': [[-60, 'EU', 'CE%sT', null]],
          'Atlantic/Azores': [[60, 'EU', 'AZO%sT', null]],
          'Europe/Bucharest': [[-120, 'EU', 'EE%sT', null]],
          'Europe/Kaliningrad': [[-180, '-', '+03', 1414288800000], [-120, '-', 'EET', null]],
          'Europe/Moscow': [[-240, '-', 'MSK', 1414288800000], [-180, '-', 'MSK', null]],
          'Europe/Simferopol': [
            [-120, 'EU', 'EE%sT', 1396144800000],
            [-240, '-', 'MSK', 1414288800000],
            [-180, '-', 'MSK', null],
          ],
          'Europe/Samara': [[-240, '-', '+04', null]],
          'Asia/Yekaterinburg': [[-360, '-', '+06', 1414288800000], [-300, '-', '+05', null]],
          'Asia/Novosibirsk': [
            [-420, '-', '+07', 1414288800000],
            [-360, '-', '+06', 1469325600000],
            [-420, '-', '+07', null],
          ],
          'Asia/Krasnoyarsk': [[-480, '-', '+08', 1414288800000], [-420, '-', '+07', null]],
          'Asia/Irkutsk': [[-540, '-', '+09', 1414288800000], [-480, '-', '+08', null]],
          'Asia/Yakutsk': [[-600, '-', '+10', 1414288800000], [-540, '-', '+09', null]],
          'Asia/Vladivostok': [[-660, '-', '+11', 1414288800000], [-600, '-', '+10', null]],
          'Asia/Magadan': [
            [-720, '-', '+12', 1414288800000],
            [-600, '-', '+10', 1461463200000],
            [-660, '-', '+11', null],
          ],
          'Asia/Srednekolymsk': [[-720, '-', '+12', 1414288800000], [-660, '-', '+11', null]],
          'Asia/Kamchatka': [[-720, '-', '+12', null]],
          'Europe/Belgrade': [[-60, 'EU', 'CE%sT', null]],
          'Europe/Sarajevo': 'Europe/Belgrade',
          'Europe/Istanbul': [
            [-120, 'EU', 'EE%sT', 1396141200000],
            [-120, '-', 'EET', 1396227600000],
            [-120, 'EU', 'EE%sT', 1445734800000],
            [-120, '1:00', 'EEST', 1446944400000],
            [-120, 'EU', 'EE%sT', 1473206400000],
            [-180, '-', '+03', null],
          ],
          'Asia/Istanbul': 'Europe/Istanbul', // backwards compatibility
          'America/New_York': [[300, 'US', 'E%sT', null]],
          'America/Chicago': [[360, 'US', 'C%sT', null]],
          'America/Denver': [[420, 'US', 'M%sT', null]],
          'America/Los_Angeles': [[480, 'US', 'P%sT', null]],
          'America/Juneau': [[540, 'US', 'AK%sT', null]],
          'Pacific/Honolulu': [[600, '-', 'HST', null]],
          'America/Phoenix': [[420, '-', 'MST', null]],
          'America/Indiana/Indianapolis': [[300, 'US', 'E%sT', null]],
          'America/St_Johns': [[210, 'Canada', 'N%sT', null]],
          'America/Halifax': [[240, 'Canada', 'A%sT', null]],
          'America/Regina': [[360, '-', 'CST', null]],
          'America/Mexico_City': [[360, 'Mexico', 'C%sT', null]],
          'America/Chihuahua': [[420, 'Mexico', 'M%sT', null]],
          'America/Tijuana': [[480, 'US', 'P%sT', null]],
          'America/Costa_Rica': [[360, 'CR', 'C%sT', null]],
          'America/Puerto_Rico': [[240, '-', 'AST', null]],
          'America/Argentina/Buenos_Aires': [[180, 'Arg', 'AR%sT', null]],
          'America/Sao_Paulo': [[180, 'Brazil', 'BR%sT', null]],
          'America/Santiago': [[240, 'Chile', 'CL%sT', null]],
          'America/Bogota': [[300, 'CO', 'CO%sT', null]],
          'Atlantic/South_Georgia': [[120, '-', 'GST', null]],
          'America/Caracas': [[270, '-', 'VET', 1462069800000], [240, '-', 'VET', null]],
        },
        rules: {
          Egypt: [
            [2014, 'only', '-', 'May', '16', [0, 0, 0, null], 60, 'S'],
            [2014, 'only', '-', 'Jun', '27', [0, 0, 0, null], 0, '-'],
            [2014, 'only', '-', 'Aug', '1', [0, 0, 0, null], 60, 'S'],
            [2014, 'only', '-', 'Sep', 'lastThu', [23, 0, 0, 's'], 0, '-'],
          ],
          Morocco: [
            [2011, 'only', '-', 'Apr', '3', [0, 0, 0, null], 60, 'S'],
            [2011, 'only', '-', 'Jul', '31', [0, 0, 0, null], 0, '-'],
            [2012, 2013, '-', 'Apr', 'lastSun', [2, 0, 0, null], 60, 'S'],
            [2012, 'only', '-', 'Jul', '20', [3, 0, 0, null], 0, '-'],
            [2012, 'only', '-', 'Aug', '20', [2, 0, 0, null], 60, 'S'],
            [2012, 'only', '-', 'Sep', '30', [3, 0, 0, null], 0, '-'],
            [2013, 'only', '-', 'Jul', '7', [3, 0, 0, null], 0, '-'],
            [2013, 'only', '-', 'Aug', '10', [2, 0, 0, null], 60, 'S'],
            [2013, 'max', '-', 'Oct', 'lastSun', [3, 0, 0, null], 0, '-'],
            [2014, 2021, '-', 'Mar', 'lastSun', [2, 0, 0, null], 60, 'S'],
            [2014, 'only', '-', 'Jun', '28', [3, 0, 0, null], 0, '-'],
            [2014, 'only', '-', 'Aug', '2', [2, 0, 0, null], 60, 'S'],
            [2015, 'only', '-', 'Jun', '14', [3, 0, 0, null], 0, '-'],
            [2015, 'only', '-', 'Jul', '19', [2, 0, 0, null], 60, 'S'],
            [2016, 'only', '-', 'Jun', '5', [3, 0, 0, null], 0, '-'],
            [2016, 'only', '-', 'Jul', '10', [2, 0, 0, null], 60, 'S'],
            [2017, 'only', '-', 'May', '21', [3, 0, 0, null], 0, '-'],
            [2017, 'only', '-', 'Jul', '2', [2, 0, 0, null], 60, 'S'],
            [2018, 'only', '-', 'May', '13', [3, 0, 0, null], 0, '-'],
            [2018, 'only', '-', 'Jun', '17', [2, 0, 0, null], 60, 'S'],
            [2019, 'only', '-', 'May', '5', [3, 0, 0, null], 0, '-'],
            [2019, 'only', '-', 'Jun', '9', [2, 0, 0, null], 60, 'S'],
            [2020, 'only', '-', 'Apr', '19', [3, 0, 0, null], 0, '-'],
            [2020, 'only', '-', 'May', '24', [2, 0, 0, null], 60, 'S'],
            [2021, 'only', '-', 'Apr', '11', [3, 0, 0, null], 0, '-'],
            [2021, 'only', '-', 'May', '16', [2, 0, 0, null], 60, 'S'],
          ],
          SA: [],
          Tunisia: [],
          Azer: [
            [1997, 2015, '-', 'Mar', 'lastSun', [4, 0, 0, null], 60, 'S'],
            [1997, 2015, '-', 'Oct', 'lastSun', [5, 0, 0, null], 0, '-'],
          ],
          Dhaka: [],
          HK: [],
          Taiwan: [],
          Iran: [
            [2009, 2011, '-', 'Mar', '22', [0, 0, 0, null], 60, 'D'],
            [2009, 2011, '-', 'Sep', '22', [0, 0, 0, null], 0, 'S'],
            [2012, 'only', '-', 'Mar', '21', [0, 0, 0, null], 60, 'D'],
            [2012, 'only', '-', 'Sep', '21', [0, 0, 0, null], 0, 'S'],
            [2013, 2015, '-', 'Mar', '22', [0, 0, 0, null], 60, 'D'],
            [2013, 2015, '-', 'Sep', '22', [0, 0, 0, null], 0, 'S'],
            [2016, 'only', '-', 'Mar', '21', [0, 0, 0, null], 60, 'D'],
            [2016, 'only', '-', 'Sep', '21', [0, 0, 0, null], 0, 'S'],
            [2017, 2019, '-', 'Mar', '22', [0, 0, 0, null], 60, 'D'],
            [2017, 2019, '-', 'Sep', '22', [0, 0, 0, null], 0, 'S'],
            [2020, 'only', '-', 'Mar', '21', [0, 0, 0, null], 60, 'D'],
            [2020, 'only', '-', 'Sep', '21', [0, 0, 0, null], 0, 'S'],
            [2021, 2023, '-', 'Mar', '22', [0, 0, 0, null], 60, 'D'],
            [2021, 2023, '-', 'Sep', '22', [0, 0, 0, null], 0, 'S'],
          ],
          Zion: [
            [2011, 'only', '-', 'Apr', '1', [2, 0, 0, null], 60, 'D'],
            [2011, 'only', '-', 'Oct', '2', [2, 0, 0, null], 0, 'S'],
            [2012, 'only', '-', 'Mar', 'Fri>=26', [2, 0, 0, null], 60, 'D'],
            [2012, 'only', '-', 'Sep', '23', [2, 0, 0, null], 0, 'S'],
            [2013, 'max', '-', 'Mar', 'Fri>=23', [2, 0, 0, null], 60, 'D'],
            [2013, 'max', '-', 'Oct', 'lastSun', [2, 0, 0, null], 0, 'S'],
          ],
          Japan: [],
          ROK: [],
          Mongol: [
            [2015, 'max', '-', 'Mar', 'lastSat', [2, 0, 0, null], 60, 'S'],
            [2015, 'max', '-', 'Sep', 'lastSat', [0, 0, 0, null], 0, '-'],
          ],
          Pakistan: [],
          Aus: [],
          AW: [],
          AQ: [],
          AS: [
            [2008, 'max', '-', 'Apr', 'Sun>=1', [2, 0, 0, 's'], 0, '-'],
            [2008, 'max', '-', 'Oct', 'Sun>=1', [2, 0, 0, 's'], 60, '-'],
          ],
          AN: [
            [2008, 'max', '-', 'Apr', 'Sun>=1', [2, 0, 0, 's'], 0, '-'],
            [2008, 'max', '-', 'Oct', 'Sun>=1', [2, 0, 0, 's'], 60, '-'],
          ],
          NC: [],
          NZ: [
            [2007, 'max', '-', 'Sep', 'lastSun', [2, 0, 0, 's'], 60, 'D'],
            [2008, 'max', '-', 'Apr', 'Sun>=1', [2, 0, 0, 's'], 0, 'S'],
          ],
          Chatham: [
            [2007, 'max', '-', 'Sep', 'lastSun', [2, 45, 0, 's'], 60, 'D'],
            [2008, 'max', '-', 'Apr', 'Sun>=1', [2, 45, 0, 's'], 0, 'S'],
          ],
          WS: [
            [2011, 'only', '-', 'Apr', 'Sat>=1', [4, 0, 0, null], 0, 'S'],
            [2011, 'only', '-', 'Sep', 'lastSat', [3, 0, 0, null], 60, 'D'],
            [2012, 'max', '-', 'Apr', 'Sun>=1', [4, 0, 0, null], 0, '-'],
            [2012, 'max', '-', 'Sep', 'lastSun', [3, 0, 0, null], 60, 'D'],
          ],
          Tonga: [
            [2016, 'max', '-', 'Nov', 'Sun>=1', [2, 0, 0, null], 60, 'S'],
            [2017, 'max', '-', 'Jan', 'Sun>=15', [3, 0, 0, null], 0, 'S'],
          ],
          EU: [
            [1981, 'max', '-', 'Mar', 'lastSun', [1, 0, 0, 'u'], 60, 'S'],
            [1996, 'max', '-', 'Oct', 'lastSun', [1, 0, 0, 'u'], 0, '-'],
          ],
          US: [
            [2007, 'max', '-', 'Mar', 'Sun>=8', [2, 0, 0, null], 60, 'D'],
            [2007, 'max', '-', 'Nov', 'Sun>=1', [2, 0, 0, null], 0, 'S'],
          ],
          Canada: [
            [2007, 'max', '-', 'Mar', 'Sun>=8', [2, 0, 0, null], 60, 'D'],
            [2007, 'max', '-', 'Nov', 'Sun>=1', [2, 0, 0, null], 0, 'S'],
          ],
          Mexico: [
            [2002, 'max', '-', 'Apr', 'Sun>=1', [2, 0, 0, null], 60, 'D'],
            [2002, 'max', '-', 'Oct', 'lastSun', [2, 0, 0, null], 0, 'S'],
          ],
          CR: [],
          Arg: [],
          Brazil: [
            [2008, 'max', '-', 'Oct', 'Sun>=15', [0, 0, 0, null], 60, 'S'],
            [2008, 2011, '-', 'Feb', 'Sun>=15', [0, 0, 0, null], 0, '-'],
            [2012, 'only', '-', 'Feb', 'Sun>=22', [0, 0, 0, null], 0, '-'],
            [2013, 2014, '-', 'Feb', 'Sun>=15', [0, 0, 0, null], 0, '-'],
            [2015, 'only', '-', 'Feb', 'Sun>=22', [0, 0, 0, null], 0, '-'],
            [2016, 2022, '-', 'Feb', 'Sun>=15', [0, 0, 0, null], 0, '-'],
          ],
          Chile: [
            [2011, 'only', '-', 'May', 'Sun>=2', [3, 0, 0, 'u'], 0, '-'],
            [2011, 'only', '-', 'Aug', 'Sun>=16', [4, 0, 0, 'u'], 60, 'S'],
            [2012, 2014, '-', 'Apr', 'Sun>=23', [3, 0, 0, 'u'], 0, '-'],
            [2012, 2014, '-', 'Sep', 'Sun>=2', [4, 0, 0, 'u'], 60, 'S'],
            [2016, 'max', '-', 'May', 'Sun>=9', [3, 0, 0, 'u'], 0, '-'],
            [2016, 'max', '-', 'Aug', 'Sun>=9', [4, 0, 0, 'u'], 60, 'S'],
          ],
          CO: [],
        },
      })

      /**
       * Converts a Date object from one time zone to another using the timezoneJS.Date library
       * @param  {Date} dt                    Original JavaScript Date object, from the original time zone
       * @param  {string} originalTimeZone    The original time zone
       * @param  {string} targetTimeZone      The target time zone
       * @return {timezoneJS.Date}            The date in the target timezone. This behaves the same as a native Date.
       * @memberOf CIQ
       */
      CIQ.convertTimeZone = function(dt, originalTimeZone, targetTimeZone) {
        // Convert from original timezone to local time
        var newDT = new _exports.timezoneJS.Date(
          dt.getFullYear(),
          dt.getMonth(),
          dt.getDate(),
          dt.getHours(),
          dt.getMinutes(),
          dt.getSeconds(),
          dt.getMilliseconds(),
          originalTimeZone,
        )

        // Convert from local time to new timezone
        newDT.setTimezone(targetTimeZone)
        return newDT
      }

      /**
       * This method converts a time from another timezone to local time on the browser
       * @param  {Date} dt               The original time
       * @param  {string} originalTimeZone A valid timezone
       * @return {Date}                  The date converted to local time
       * @memberOf CIQ
       */
      CIQ.convertToLocalTime = function(dt, originalTimeZone) {
        var seconds = dt.getSeconds()
        var milliseconds = dt.getMilliseconds()
        var newDT = new _exports.timezoneJS.Date(
          dt.getFullYear(),
          dt.getMonth(),
          dt.getDate(),
          dt.getHours(),
          dt.getMinutes(),
          originalTimeZone,
        )
        return new Date(newDT.getTime() + seconds * 1000 + milliseconds)
      }

      return _exports
    }

  var __js_core_utility_ =
    // -------------------------------------------------------------------------------------------
    // Copyright 2012-2016 by ChartIQ, Inc
    // -------------------------------------------------------------------------------------------
    // Be sure your webserver is set to deliver UTF-8 charset
    // For apache add "AddDefaultCharset UTF-8" to httpd.conf
    // otherwise use \u unicode escapes for non-ascii characters
    function(_exports) {
      // Node.js compatibility
      if (typeof global !== 'undefined') {
        if (typeof global.CanvasRenderingContext2D === 'undefined') global.CanvasRenderingContext2D = function() {}
      }

      /* TOC()************* IQQUERY ************** */

      /**
       * Shorthand for getElementById(). Equivalent to prototype style $() which is faster but less powerful than jquery style $()
       * @param  {string} id     An ID tag for a valid DOM object
       * @param  {object} [source] - An optional valid DOM node to search within. If not provided then the entire document will be searched.
       * @return {object}        The DOM node associated with the id or null if it is not found
       * @name  $$
       */
      function $$(id, source) {
        if (!source) return document.getElementById(id)
        if (source.id == id) return source // Found it!
        if (!source.hasChildNodes) return null
        for (var i = 0; i < source.childNodes.length; i++) {
          var element = $$(id, source.childNodes[i])
          if (element) return element
        }
        return null
      }
      _exports.$$ = $$

      /**
       * Functional equivalent of querySelector(). Functionally equivalent to jquery $().
       * This uses querySelectorAll in order to maintain compatibility with IE 9.
       * Note that if multiple objects match the selector then only the first will be returned.
       * @param  {string} selector - CSS style selector
       * @param  {object} [source]   Optional node to select within. If not provided then entire document will be searched.
       * @return {object}          The first object to match the selector
       * @name  $$$
       */
      function $$$(selector, source) {
        if (!source) source = document
        return source.querySelectorAll(selector)[0] // We use querySelectorAll for backward compatibility with IE
      }
      _exports.$$$ = $$$

      /* TOC()************* PROTOTYPE EXTENSION ************** */

      /**
       * Capitalizes the first letter of a string
       * @return {string} Capitalized version of the string
       */
      String.prototype.capitalize = function() {
        return this.charAt(0).toUpperCase() + this.slice(1)
      }

      if (!Function.prototype.ciqInheritsFrom) {
        /**
         * Template for JavaScript inheritence.
         * @param  {object} parentClassOrObject The parent class or object
         * @param {Boolean} [autosuper=true] Set to false to prevent the base class constructor from being called automatically
         */
        Function.prototype.ciqInheritsFrom = function(parentClassOrObject, autosuper) {
          if (autosuper !== false) {
            this.prototype = new parentClassOrObject()
          } else {
            this.prototype = Object.create(parentClassOrObject)
            for (var key in parentClassOrObject.prototype) {
              this.prototype[key] = parentClassOrObject.prototype[key]
            }
          }
          this.prototype.constructor = this
          this.prototype.parent = parentClassOrObject.prototype
        }
        Function.prototype.stxInheritsFrom = Function.prototype.ciqInheritsFrom // backward compatiblity
      }

      /**
       * The built-in 2D rendering context for the drawing surface of a {@link external:canvas}.
       * @external CanvasRenderingContext2D
       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D CanvasRenderingContext2D at the Mozilla Developer Network}
       */

      /**
       * Dashed line polyfill for the canvas. Note that dashed lines are expensive operations when not supported natively! @see CanvasRenderingContext2D.stxLine
       * @memberOf external:CanvasRenderingContext2D
       */
      CanvasRenderingContext2D.prototype.dashedLineTo = function(fromX, fromY, toX, toY, pattern) {
        // Our growth rate for our line can be one of the following:
        // (+,+), (+,-), (-,+), (-,-)
        // Because of this, our algorithm needs to understand if the x-coord and
        // y-coord should be getting smaller or larger and properly cap the
        // values
        // based on (x,y).
        var lt = function(a, b) {
          return a - b <= 0.00000001
        }
        var gt = function(a, b) {
          return a - b >= -0.00000001
        }
        var capmin = function(a, b) {
          return Math.min(a, b)
        }
        var capmax = function(a, b) {
          return Math.max(a, b)
        }

        var checkX = { thereYet: gt, cap: capmin }
        var checkY = { thereYet: gt, cap: capmin }

        if (fromY - toY > 0) {
          checkY.thereYet = lt
          checkY.cap = capmax
        }
        if (fromX - toX > 0) {
          checkX.thereYet = lt
          checkX.cap = capmax
        }

        this.moveTo(fromX, fromY)
        if (isNaN(fromX) || isNaN(fromY)) return
        var offsetX = fromX
        var offsetY = fromY
        var idx = 0,
          dash = true
        while (!(checkX.thereYet(offsetX, toX) && checkY.thereYet(offsetY, toY))) {
          var ang = Math.atan2(toY - fromY, toX - fromX)
          var len = pattern[idx]

          offsetX = checkX.cap(toX, offsetX + Math.cos(ang) * len)
          offsetY = checkY.cap(toY, offsetY + Math.sin(ang) * len)

          if (dash) this.lineTo(offsetX, offsetY)
          else this.moveTo(offsetX, offsetY)

          idx = (idx + 1) % pattern.length
          dash = !dash
        }
      }

      /**
       * Convenience function for rendering lines of various types on the canvas. Pattern should be an array that contains
       * the number of pixels on and then the number of pixels off. For instance [1,1] would create a dotted pattern by turning
       * one pixel on and then one pixel off repeatedly.
       * @memberOf external:CanvasRenderingContext2D
       */
      CanvasRenderingContext2D.prototype.stxLine = function(
        fromX,
        fromY,
        toX,
        toY,
        color,
        opacity,
        lineWidth,
        pattern,
      ) {
        this.beginPath()
        this.lineWidth = lineWidth
        this.strokeStyle = color
        this.globalAlpha = opacity
        if (pattern) {
          this.dashedLineTo(fromX, fromY, toX, toY, pattern)
        } else {
          this.moveTo(fromX, fromY)
          this.lineTo(toX, toY)
        }
        this.stroke()
        this.closePath()
        this.lineWidth = 1
      }

      /**
       * Add native circle drawing to the canvas
       * @param  {number} x      X position of center of circle
       * @param  {number} y      Y position of center of circle
       * @param  {number} radius Radius of circle
       * @param  {boolean} filled If true then circle will be filled
       * @memberOf external:CanvasRenderingContext2D
       */
      CanvasRenderingContext2D.prototype.stxCircle = function(x, y, radius, filled) {
        this.beginPath()
        this.arc(x, y, radius, 0, 2 * Math.PI, false)
        if (filled) this.fill()
        this.stroke()
        this.closePath()
      }

      /* TOC()************* CIQ ************** */
      /**
       * Base namespace for CIQ library
       * @name CIQ
       * @namespace
       */
      function CIQ() {}
      _exports.CIQ = CIQ
      _exports.STX = CIQ // backward compatibility

      /* TOC()************* PLATFORM DETECTION ************** */

      var nav = typeof navigator !== 'undefined' ? navigator : { userAgent: '' }
      var userAgent = nav.userAgent
      var win = typeof window !== 'undefined' ? window : {}
      var doc = typeof document !== 'undefined' ? document : {}
      CIQ.ipad = userAgent.indexOf('iPad') != -1
      CIQ.iphone = userAgent.indexOf('iPhone') != -1
      CIQ.isSurface = nav.msMaxTouchPoints && nav.msMaxTouchPoints > 1
      CIQ.touchDevice = typeof doc.ontouchstart != 'undefined' || CIQ.isSurface
      CIQ.is_chrome = userAgent.toLowerCase().indexOf('chrome') > -1
      CIQ.isAndroid = userAgent.toLowerCase().indexOf('android') > -1
      CIQ.isIE = userAgent.toLowerCase().indexOf('msie') > -1 || userAgent.indexOf('Trident') > -1
      CIQ.isIE9 = userAgent.indexOf('Trident/5') > -1 || userAgent.indexOf('MSIE 9.0') > -1
      CIQ.isIE8 = win.isIE8 || userAgent.indexOf('MSIE 8.0') > -1
      CIQ.isIOS7 = userAgent.match(/(iPad|iPhone);.*CPU.*OS 7_\d/i)
      CIQ.isIOS8 = userAgent.match(/(iPad|iPhone);.*CPU.*OS 8_\d/i)
      CIQ.isIOS9 = userAgent.match(/(iPad|iPhone);.*CPU.*OS 9_\d/i)
      CIQ.isIOS10 = userAgent.match(/(iPad|iPhone);.*CPU.*OS 10_\d/i)
      CIQ.isIOS7or8 = CIQ.isIOS7 || CIQ.isIOS8 || CIQ.isIOS9 || CIQ.isIOS10
      CIQ.isSurfaceApp = win.MSApp
      CIQ.noKeyboard = CIQ.ipad || CIQ.iphone || CIQ.isAndroid || CIQ.isSurfaceApp
      CIQ.wheelEvent =
        'wheel' in document.createElement('div') || 'onwheel' in document
          ? 'wheel'
          : document.onmousewheel !== undefined
          ? 'mousewheel'
          : 'DOMMouseScroll'
      if (CIQ.isIE) CIQ.wheelEvent = 'wheel'

      /* TOC()************* MATH ************** */

      /**
       * Returns the log base 10 of a value
       * @param  {number} y The value
       * @return {number}   log10 value
       * @memberOf CIQ
       */
      CIQ.log10 = function(y) {
        return Math.log(y) / Math.LN10
      }

      /* TOC()************* OBJECT MANIPULATION ************** */

      /**
       * Deletes the map entries for which the right hand side is the object in question.
       * @param  {Object} map    JavaScript map object
       * @param  {Object} object The actual object to be deleted from the map
       * @return {Boolean}        Returns true if any object actually deleted
       */
      CIQ.deleteRHS = function(map, object) {
        var deletedOne = false
        for (var i in map) {
          if (map[i] == object) {
            delete map[i]
            deletedOne = true
          }
        }
        return deletedOne
      }

      /**
       * Deletes (removes) nulls or undefined fields (names) from an object. This is useful when marshalling (saving) an object where you don't wish
       * null or undefined values to show up in the marshalled object (such as when converting to JSON)
       * @param  {object} obj         The object to scrub
       * @param  {boolean} [removeNulls] Whether or not to remove null values
       * @memberOf CIQ
       */
      CIQ.scrub = function(obj, removeNulls) {
        for (var i in obj) {
          if (typeof obj[i] == 'undefined') delete obj[i]
          if (removeNulls && obj[i] === null) delete obj[i]
        }
      }

      /**
       * This method changes the target object's contents to match the contents of the source object. This is functionality equivalent
       * to `target=source` except that it preserves the existence of the target object. This is vitally important if there are data bindings
       * to the target object otherwise those data bindings would remain attached to a phantom object! The logic here is orchestrated so that you
       * will receive update, add and delete notifications for each field that changes.
       * @param  {Object} target The target object
       * @param  {Object} source The source object
       * @since 2015-11-1
       */
      CIQ.dataBindSafeAssignment = function(target, source) {
        /*for(var prop in source) {
			target[prop]=source[prop];
		}*/
        CIQ.extend(target, source)
        for (var prop in target) {
          if (typeof source[prop] == 'undefined') {
            delete target[prop]
          }
        }
      }

      /**
       * Clones an object. This function creates a deep (recursive) clone of an object. The object can be a primitive or an object or an array.
       * Note that cloning objects that reference DOM nodes can result in stack overflows. Use with caution.
       * @param  {object} from The source object
       * @param  {object} [to]   Optional existing object of same type. Can improve performance when objects are reusable.
       * @return {object}      A deep clone of the "from" object
       * @memberOf CIQ
       */
      CIQ.clone = function(from, to) {
        if (from === null || typeof from != 'object') return from
        // if (from.constructor != Object && from.constructor != Array) return from;
        if (
          from.constructor == Date ||
          from.constructor == RegExp ||
          from.constructor == Function ||
          from.constructor == String ||
          from.constructor == Number ||
          from.constructor == Boolean
        )
          return new from.constructor(from)

        to = to || new from.constructor()

        for (var n in from) {
          to[n] = typeof to[n] == 'undefined' ? CIQ.clone(from[n], null) : to[n]
        }

        return to
      }

      /**
       * Non recursive clone. This will only clone the top layer and is safe to use when objects contain DOM nodes.
       * @param  {object} from - Object to be cloned
       * @return {object}      A shallow clone of the "from" object
       * @memberOf CIQ
       */
      CIQ.shallowClone = function(from) {
        if (!from) return from
        var to
        if (from.constructor == Array) {
          to = new Array(from.length)
          for (var i = 0; i < from.length; i++) {
            to[i] = from[i]
          }
          return to
        } else {
          to = {}
          for (var field in from) {
            to[field] = from[field]
          }
          return to
        }
      }

      /**
       * Extends an object, similar to jquery.extend() with a deep copy
       * @param {Object} target Target object
       * @param  {Object} source Original object
       * @param {Boolean} [shallow] If true then extend will not recurse through objects
       * @return {Object} Target object after extension
       */
      CIQ.extend = function(target, source, shallow) {
        for (var field in source) {
          var datum = source[field]
          if (!datum) target[field] = datum
          else if (datum.constructor == Object) {
            if (!target[field]) target[field] = {}
            if (shallow) {
              target[field] = source[field]
            } else {
              CIQ.extend(target[field], source[field])
            }
          } else if (datum.constructor == Array) {
            target[field] = datum.slice()
          } else {
            target[field] = datum
          }
        }
        return target
      }

      /**
       * Returns true if the objects are an exact match
       * @param  {Object} a First object
       * @param  {Object} b Second object
       * @param  {Object} [exclude] Exclude these fields
       * @return {Boolean}   True if they are an exact match
       */
      CIQ.equals = function(a, b, exclude) {
        if (!a && b) return false
        if (a && !b) return false
        if (typeof a !== typeof b) return false
        for (var field in a) {
          if (exclude && exclude[field]) continue
          if (typeof a[field] === 'object') {
            var result = CIQ.equals(a[field], b[field])
            if (!result) return false
            continue
          }
          if (b[field] != a[field]) return false
        }
        return true
      }

      /**
       * Returns true if an object has no members
       * @param  {object}  o A JavaScript object
       * @return {Boolean}   True if there are no members in the object
       * @memberOf CIQ
       */
      CIQ.isEmpty = function(o) {
        for (var p in o) {
          if (o.hasOwnProperty(p)) {
            return false
          }
        }
        return true
      }

      /**
       * Convenience function returns the first property in an object. Note that while this works in all known browsers
       * the EMCA spec does not guarantee that the order of members in an object remain static. This method should therefore
       * be avoided. When ordering is important use an Array!
       * @param  {object} o A JavaSCript object
       * @return {object}   The first element in the object or null if it is empty
       * @memberOf CIQ
       */
      CIQ.first = function(o) {
        for (var p in o) {
          return p
        }
        return null
      }

      /**
       * Convenience function for returning the last property in an object. Note that while this works in all known browsers
       * the EMCA spec does not guarantee that the order of members in an object remain static. This method should therefore
       * be avoiding. When ordering is important use an Array!
       * @param  {object} o A JavaScript object
       * @return {object}   The final member of the object or null if the object is empty
       * @memberOf CIQ
       */
      CIQ.last = function(o) {
        var l = null
        for (var p in o) {
          l = p
        }
        return l
      }

      /**
       * Returns the number of members in an object
       * @param  {object} o A valid JavaScript object
       * @return {number}   The number of members in the object
       * @memberOf CIQ
       */
      CIQ.objLength = function(o) {
        var i = 0
        for (var p in o) {
          i++
        }
        return i
      }

      /**
       * Given a dot notation string, we want to navigate to the location
       * in a base object, creating the path along the way
       * @param  {Object} base      Base object.
       * @param  {String} extension String in dot notation
       * @return {Object}           A tuple containing obj and member
       * @memberOf CIQ
       * @since  2015-11-1
       * @example
       * var tuple=CIQ.deriveFromObjectChain(stx.layout, "pandf.box");
       * tuple.obj===stx.layout.pandf
       * tuble.member==="box"
       * tuple.obj[tuple.member]=3;  // stx.layout.pandf.box=3
       */
      CIQ.deriveFromObjectChain = function(base, extension) {
        var objectString = extension.split('.')
        if (objectString.length === 1) return { obj: base, member: extension }
        for (var i = 0; i < objectString.length - 1; i++) {
          if (!base[objectString[i]]) base[objectString[i]] = {}
          base = base[objectString[i]]
        }
        return { obj: base, member: objectString[i] }
      }

      /**
       * Replacement for isPrototypeOf and instanceof so that both types of inheritance can be checked
       * @param  {Object} parent Prototype
       * @return {boolean} True if the object is derived from the parent
       * @memberOf CIQ
       * @since 07/01/2015
       */
      CIQ.derivedFrom = function(child, parent) {
        if (parent.isPrototypeOf(child)) return true
        if (child instanceof parent) return true
        return false
      }

      /**
       * This method will iterate through the object and replace all of the fields
       * using the mapping object. This would generally be used to compress an object
       * for serialization. so that for instance "lineWidth" becomes "lw". This method
       * is called recursively.
       * @param {object} obj Object to compress
       * @param {object} mapping Object containing name value pairs. Each name will be replaced with its corresponding value in the object.
       * @return {object} The newly compressed object
       * @memberOf CIQ
       */
      CIQ.replaceFields = function(obj, mapping) {
        if (!obj) return obj
        var newObj = {}
        for (var field in obj) {
          var value = obj[field]
          var replaced = mapping[field]
          if (!replaced) replaced = field
          if (value && typeof value == 'object') {
            if (value.constructor == Array) {
              var arr = (newObj[replaced] = new Array(value.length))
              for (var i = 0; i < arr.length; i++) {
                var val = value[i]
                if (typeof val == 'object') {
                  arr[i] = CIQ.replaceFields(val, mapping)
                } else {
                  arr[i] = val
                }
              }
            } else {
              newObj[replaced] = CIQ.replaceFields(value, mapping)
            }
          } else {
            newObj[replaced] = value
          }
        }
        return newObj
      }

      /**
       * Returns an object copy with any null values removed
       * @param  {object} obj Object to remove nulls
       * @return {object}     Object with nulls removed
       */
      CIQ.removeNullValues = function(obj) {
        var n = CIQ.clone(obj)
        for (var f in n) {
          if (!n[f]) delete n[f]
        }
        return n
      }

      /**
       * This method reverses the fields and values in an object
       * @memberOf CIQ
       */
      CIQ.reverseObject = function(obj) {
        var newObj = {}
        for (var field in obj) {
          newObj[obj[field]] = field
        }
        return newObj
      }

      /* TOC()************* CLASSNAME MANIPULATION ************** */

      CIQ.camelCaseRegExp = /-([a-z])/g
      /**
       * Converts from hyphenated to camel case. Used primarily for converting css style names (which are hyphenated) to property values (which are camel case)
       * @param  {string} name Hyphenated style name
       * @return {string}		 Camel case style name
       * @memberOf CIQ
       */
      CIQ.makeCamelCase = function(name) {
        return name.replace(CIQ.camelCaseRegExp, function(g) {
          return g[1].toUpperCase()
        })
      }

      /**
       * Appends a class name to a node if it isn't already there. This is frequently used to control dynamic behavior via CSS.
       * @example
       * // Apply an "active" css look to an object
       * CIQ.appendClassName(myNode, "active");
       * @param  {object} node      A valid DOM element
       * @param  {string} className Name of class to add to the DOM element
       * @memberOf CIQ
       */
      CIQ.appendClassName = function(node, className) {
        if (node.className == className) return // already a class
        var s = node.className.split(' ')
        for (var i = 0; i < s.length; i++) {
          if (s[i] == className) return // already a class
        }
        if (!node.className) node.className = className
        else node.className += ' ' + className
      }

      /**
       * Removes a class name from a node if it is set
       * @param  {object} node      A valid DOM element
       * @param  {string} className The class name to remove
       * @memberOf CIQ
       */
      CIQ.unappendClassName = function(node, className) {
        if (!node) return
        if (node.className.indexOf(className) == -1) return
        if (node.className == className) {
          node.className = ''
        } else {
          var s = node.className.split(' ')
          var newClassName = ''
          for (var i = 0; i < s.length; i++) {
            if (s[i] == className) continue
            if (newClassName !== '') newClassName += ' '
            newClassName += s[i]
          }
          node.className = newClassName
        }
      }

      /**
       * Convenience method for swapping two class names within a node. Such as for changing state.
       * @param  {object} node         A valid DOM element
       * @param  {string} newClassName The class name to swap in
       * @param  {string} oldClassName The class name to swap out
       * @memberOf CIQ
       */
      CIQ.swapClassName = function(node, newClassName, oldClassName) {
        CIQ.unappendClassName(node, oldClassName)
        CIQ.appendClassName(node, newClassName)
      }

      /**
       * Returns true if a class name is currently assigned to the DOM node
       * @param  {object}  node      A valid DOM element
       * @param  {string}  className The class name to search for
       * @return {Boolean}           True if the class name is currently assigned to the DOM node
       * @memberOf CIQ
       */
      CIQ.hasClassName = function(node, className) {
        if ((' ' + node.className + ' ').indexOf(' ' + className + ' ') > -1) return true
        else return false
      }

      /**
       * Toggles the className on or off
       * @param  {HtmlElement} node      The node to toggle
       * @param  {String} className The class name to toggle
       */
      CIQ.toggleClassName = function(node, className) {
        if (CIQ.hasClassName(node, className)) CIQ.unappendClassName(node, className)
        else CIQ.appendClassName(node, className)
      }

      /* TOC()************* DOM MANIPULATION ************** */

      /**
       * Convenience function for dynamically creating a new node and appending it into the DOM.
       * @param  {object} div       The targeted parent node
       * @param  {string} tagName   The type of node to be created
       * @param  {string} [className] Optional class name to set the new node
       * @param {string} [txt] Optional text to insert
       * @return {object}           The new node
       * @memberOf CIQ
       */
      CIQ.newChild = function(div, tagName, className, txt) {
        var div2 = document.createElement(tagName)
        if (className) div2.className = className
        div.appendChild(div2)
        if (txt) div2.innerHTML = txt
        return div2
      }

      /**
       * Microsoft RT disallows innerHTML that contains DOM elements. Use this method to override when necessary.
       * @param  {object} node A valid DOM element to change innerHTML
       * @param  {string} html The html text to change
       * @example
       * CIQ.innerHTML(node, "My innerHTML contains <span>a span</span> and MS RT doesn't like that");
       * @memberOf CIQ
       */
      CIQ.innerHTML = function(node, html) {
        if (window.MSApp) {
          MSApp.execUnsafeLocalFunction(function() {
            node.innerHTML = html
          })
        } else {
          node.innerHTML = html
        }
      }

      /**
       * Microsoft surface bug requires a timeout in oreder for the cursor to show up in a focused
       * text box. iPad also, sometimes, when embedded in an iframe, so set useTimeout if in an iframe!
       * @param  {object} node       A DOM element to focus
       * @param  {number} useTimeout Whether to apply a timeout or not. If number then the number of milliseconds.
       * @memberOf CIQ
       */
      CIQ.focus = function(node, useTimeout) {
        if (CIQ.isSurface || useTimeout) {
          var timeout = 0
          if (!isNaN(parseInt(useTimeout, 10))) timeout = useTimeout
          setTimeout(function() {
            node.focus()
          }, timeout)
        } else {
          node.focus()
        }
      }

      /**
       * Reliable, cross-device blur method
       * @param  {HTMLElement} [node] The element to blur. If not supplied then document.activeElement will be blurred
       */
      CIQ.blur = function(node) {
        if (!node) node = document.activeElement
        if (node) node.blur()
        window.focus()
      }
      /**
       * Find all nodes that match the given text. This is a recursive function so be careful not to start too high in the DOM tree.
       * @param  {object} startNode A valid DOM element from which to start looking
       * @param  {string} text      The text to search for
       * @return {array}           An array of nodes that match the text
       * @memberOf CIQ
       */
      CIQ.findNodesByText = function(startNode, text) {
        if (startNode.innerHTML == text) return [startNode]
        var nodes = []
        for (var i = 0; i < startNode.childNodes.length; i++) {
          var pushNodes = CIQ.findNodesByText(startNode.childNodes[i], text)
          if (pushNodes) {
            nodes = nodes.concat(pushNodes)
          }
        }
        if (nodes.length) return nodes
        return null
      }

      /**
       * Hide nodes that match a certain text string.
       * @param  {object} startNode A valid DOM element from which to start looking
       * @param  {string} text      The text to match against
       * {@link  CIQ.findNodesByText}
       * @memberOf CIQ
       */
      CIQ.hideByText = function(startNode, text) {
        var nodes = CIQ.findNodesByText(startNode, text)
        for (var i = 0; i < nodes.length; i++) {
          nodes[i].style.display = 'none'
        }
      }

      /**
       * Returns the width of a DOM element including left and right margins.
       * @param  {HTMLElement} node The DOM element to measure
       * @return {number}      The width including margins
       */
      CIQ.outerWidth = function(node) {
        var width = node.offsetWidth
        width += CIQ.stripPX(getComputedStyle(node).marginLeft)
        width += CIQ.stripPX(getComputedStyle(node).marginRight)
        return width
      }

      /**
       * Removes all DOM elements in a given node. This is extremely useful when dynamically generating content.
       * @param  {object} node - The node to clear
       * @memberOf CIQ
       */
      CIQ.clearNode = function(node) {
        if (node.hasChildNodes()) {
          while (node.childNodes.length >= 1) {
            node.removeChild(node.firstChild)
          }
        }
      }

      /**
       * Get the source element for a DOM event depending on browser type
       * @param  {object} [e] Event if available from browser
       * @return {object}   The DOM node that registered the event
       * @memberOf CIQ
       */
      CIQ.getEventDOM = function(e) {
        if (!e) {
          return window.event.srcElement
        } else {
          return e.target
        }
      }

      /**
       * Converts an onClick event to an ontouchend event. If the device is known to be a touch device then this can be used
       * to change onclick events that are set as attributes (in HTML). ontouchend events are more responsive than onclick events
       * and can improve the user experience. When coding for cross-device implementations it is recommended to use @see CIQ.safeClickTouch
       * programatically rather than using hardcoded attributes
       * @param  {string} id The id of a node containing an onClick attribute
       * @memberOf CIQ
       */
      CIQ.convertClickToTouchEnd = function(id) {
        var node = $$(id)
        var s = node.getAttribute('onClick')
        if (s) {
          node.removeAttribute('onClick')
          node.setAttribute('onTouchEnd', s)
        }
      }

      /**
       * Returns the height of the page. It is aware of iframes and so will never return a value that is greater
       * than the value of the parent
       * @return {number} Height of page in pixels
       * @memberOf CIQ
       */
      CIQ.pageHeight = function() {
        var h = window.innerHeight
        if (top != self) {
          try {
            if (h > parent.innerHeight) h = parent.innerHeight
          } catch (e) {}
        }
        return h
      }

      /**
       * Returns the width of the page. It is aware of iframes and so will never return a value that is greater
       * than the value of the parent
       * @return {number} Width of page in pixels
       * @memberOf CIQ
       */
      CIQ.pageWidth = function() {
        var w = window.innerWidth
        if (top != self) {
          try {
            if (w > parent.innerWidth) w = parent.innerWidth
          } catch (e) {}
        }
        return w
      }

      /**
       * Strips the letters "px" from a string. This is useful for converting styles into absolutes.
       * @param  {string} text - String value with "px"
       * @return {number}      The numeric value
       * @example
       * var leftPosition=CIQ.stripPX(node2.style.left)
       * @memberOf CIQ
       */
      CIQ.stripPX = function(text) {
        return parseInt(text.substr(0, text.indexOf('p')))
      }

      /* TOC()************* COLOR CONVERSION ************** */

      /**
       * Converts an rgb or rgba color to a hex color
       * @param  {string} color The rgb or rgba color, such as in CSS format
       * @return {string}       The hex color. If "transparent" or no color is sent in, #000000 will be assumed
       * @example
       * var hexColor=CIQ.colorToHex("rgba (255,255,255,0.3)");
       * @memberOf CIQ
       */
      CIQ.colorToHex = function(color) {
        if (!color || color == 'transparent') color = '#000000'
        if (color.substr(0, 1) === '#') {
          return color
        }
        var digits = /(.*?)rgb\((\d+), ?(\d+), ?(\d+)\)/.exec(color)
        if (!digits) digits = /(.*?)rgba\((\d+), ?(\d+), ?(\d+),.*\)/.exec(color)
        // Converts a color name to hex
        function toHex(color) {
          if (typeof document === 'undefined') return '#000000'
          var ta = $$('color_converter')
          if (!ta) {
            ta = document.createElement('textarea')
            ta.id = 'color_converter'
            ta.style.display = 'none'
            document.body.appendChild(ta)
          }
          ta.style.color = '#000000' //reset;
          ta.style.color = color
          var value
          if (!CIQ.isIE8) {
            value = getComputedStyle(ta).getPropertyValue('color')
            digits = /(.*?)rgb\((\d+), ?(\d+), ?(\d+)\)/.exec(value)
            if (digits) return CIQ.colorToHex(value)
            else if (value.substr(0, 1) === '#') return value
            else return color
          }
          value = ta.createTextRange().queryCommandValue('ForeColor')
          value = ((value & 0x0000ff) << 16) | (value & 0x00ff00) | ((value & 0xff0000) >>> 16)
          value = value.toString(16)
          return '#000000'.slice(0, 7 - value.length) + value
        }
        if (!digits) return toHex(color)

        var red = parseFloat(digits[2])
        var green = parseFloat(digits[3])
        var blue = parseFloat(digits[4])

        var rgb = blue | (green << 8) | (red << 16)
        var hexString = rgb.toString(16)
        // fill with leading 0 if not 6 digits.
        for (var i = hexString.length; i < 6; i++) {
          hexString = '0' + hexString
        }
        var s = digits[1] + '#' + hexString
        return s.toUpperCase()
      }

      /**
       * Converts color to rgba. This does not accept literal color names such as "black"
       * @param  {string} color The hex rgb or rgba color, such as in CSS format
       * @param  {number} opacity The 'alpha' value. Defaults to full opacity (100%)
       * @return {string}       The rgba color
       * @example
       * var rgba=CIQ.hexToRgba('rgb(0, 115, 186)');
       * var rgba=CIQ.hexToRgba('#0073BA');
       * @memberOf CIQ
       */
      CIQ.hexToRgba = function(hex, opacity) {
        if (!hex || hex == 'transparent') hex = 'rgba(0,0,0,0)'
        if (hex.substr(0, 4) === 'rgba') {
          var digits = /(.*?)rgba\((\d+), ?(\d+), ?(\d+), ?(\d*\.?\d*)\)/.exec(hex)
          var a = digits[5]
          if (opacity || opacity === 0) a = opacity
          if (a > 1) a = a / 100
          return 'rgba(' + digits[2] + ',' + digits[3] + ',' + digits[4] + ',' + a + ')'
        } else if (hex.substr(0, 3) === 'rgb') {
          hex = CIQ.colorToHex(hex)
        }
        if (!opacity && opacity !== 0) opacity = 100 // default to full opacity
        if (opacity <= 1) opacity = opacity * 100 // handle decimal opacity (css style)

        hex = hex.replace('#', '')
        var r = parseInt(hex.slice(0, 2), 16)
        var g = parseInt(hex.slice(2, 4), 16)
        var b = parseInt(hex.slice(4, 6), 16)

        if (isNaN(r) || isNaN(g) || isNaN(b)) {
          console.log('CIQ.hexToRgba: invalid hex :', hex)
          return null
        }

        return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')'
      }

      /**
       * Converts a color to the internal format used by the browser. This allows
       * interchange of hex, rgb, rgba colors
       * @param  {String} color A CSS color
       * @return {String}       The native formatted color
       */
      CIQ.convertToNativeColor = function(color) {
        var a = document.createElement('DIV')
        a.style.color = color
        a.style.display = 'none'
        document.body.appendChild(a)
        var c = getComputedStyle(a).color
        document.body.removeChild(a)
        return c
      }
      /**
       * Returns true if the color is transparent. In particular it checks rgba status. Note that the charting engine
       * often interprets transparent colors to mean that a color should be automatically determined based on the brightness
       * of the background.
       * @param  {string}  color The color (from CSS)
       * @return {Boolean}       True if transparent
       * @memberOf CIQ
       */
      CIQ.isTransparent = function(color) {
        if (!color) return false
        if (color == 'transparent') return true
        var digits = /(.*?)rgba\((\d+), ?(\d+), ?(\d+), ?(\d*\.?\d*)\)/.exec(color)
        if (digits === null) return false
        if (parseFloat(digits[5]) === 0) return true
        return false
      }

      /**
       * Converts a color from hex or rgb format to Hue, Saturation, Value. This does not accept literal color names such as "black"
       * @param  {string} color The color (from CSS)
       * @return {array}       [Hue, Saturation, Value], or null if invalid color.
       * @memberOf CIQ
       */
      CIQ.hsv = function(color) {
        var hex = CIQ.colorToHex(color)
        if (hex.substr(0, 1) === '#') hex = hex.slice(1)
        // fill with leading 0 if not 6 digits.
        for (var i = hex.length; i < 6; i++) {
          hex = '0' + hex
        }
        var r = parseInt(hex.slice(0, 2), 16)
        var g = parseInt(hex.slice(2, 4), 16)
        var b = parseInt(hex.slice(4, 6), 16)
        var computedH = 0
        var computedS = 0
        var computedV = 0

        //remove spaces from input RGB values, convert to int
        r = parseInt(('' + r).replace(/\s/g, ''), 10)
        g = parseInt(('' + g).replace(/\s/g, ''), 10)
        b = parseInt(('' + b).replace(/\s/g, ''), 10)

        if (r === null || g === null || b === null || isNaN(r) || isNaN(g) || isNaN(b)) {
          console.log('CIQ.hsv: invalid color :', color)
          return null
        }
        if (r < 0 || g < 0 || b < 0 || r > 255 || g > 255 || b > 255) {
          return null
        }
        r = r / 255
        g = g / 255
        b = b / 255
        var minRGB = Math.min(r, Math.min(g, b))
        var maxRGB = Math.max(r, Math.max(g, b))

        // Black-gray-white
        if (minRGB == maxRGB) {
          computedV = minRGB
          return [0, 0, computedV]
        }

        // Colors other than black-gray-white:
        var d = r == minRGB ? g - b : b == minRGB ? r - g : b - r
        var h = r == minRGB ? 3 : b == minRGB ? 1 : 5
        computedH = 60 * (h - d / (maxRGB - minRGB))
        computedS = (maxRGB - minRGB) / maxRGB
        computedV = maxRGB
        return [computedH, computedS, computedV]
      }

      CIQ.hsl = function(color) {
        var hex = CIQ.colorToHex(color)
        if (hex.substr(0, 1) === '#') hex = hex.slice(1)
        // fill with leading 0 if not 6 digits.
        for (var i = hex.length; i < 6; i++) {
          hex = '0' + hex
        }
        var r = parseInt(hex.slice(0, 2), 16)
        var g = parseInt(hex.slice(2, 4), 16)
        var b = parseInt(hex.slice(4, 6), 16)

        r /= 255
        g /= 255
        b /= 255
        var max = Math.max(r, g, b),
          min = Math.min(r, g, b)
        var h,
          s,
          l = (max + min) / 2

        if (max == min) {
          h = s = 0 // achromatic
        } else {
          var d = max - min
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min)
          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0)
              break
            case g:
              h = (b - r) / d + 2
              break
            case b:
              h = (r - g) / d + 4
              break
          }
          h /= 6
        }

        return [h, s, l]
      }

      /**
       * Chooses either a white or black foreground color depending on the "lightness" of the background color. Note that this simply
       * checks if the value is above .5 which works well but not ideally for red colors which the human eye interprets differently.
       * More complex algorithms are available but chartists rarely use red as a background color.
       * @param  {string} backgroundColor The background color (CSS format)
       * @return {string}                 Either #000000 (black) or #FFFFFF (white) depending on will look best on the given background color
       * @memberOf CIQ
       */
      CIQ.chooseForegroundColor = function(backgroundColor) {
        /*var hex=CIQ.colorToHex(backgroundColor);
		var r=parseInt(hex.slice(1,3),16);
		var g=parseInt(hex.slice(3,5),16);
		var b=parseInt(hex.slice(5,7),16);
		if(r+g+b>318) return "#000000";*/
        var hsl = CIQ.hsl(backgroundColor)
        var l = hsl[2]
        if (l >= hsl[0]) return '#000000'
        //if(l && l>0.5) return "#000000";
        return '#FFFFFF'
      }

      /**
       * Gets the background color of an element by traversing up the parent stack.
       * @param  {HTMLElement} el The element to examine
       * @return {String}    The background color
       */
      CIQ.getBackgroundColor = function(el) {
        var bgColor = null
        while (!bgColor || CIQ.isTransparent(bgColor)) {
          var cStyle = getComputedStyle(el)
          if (!cStyle) return
          bgColor = cStyle.backgroundColor
          if (CIQ.isTransparent(bgColor)) bgColor = 'transparent'
          el = el.parentNode
          if (!el || !el.tagName) break
        }
        if (!bgColor || bgColor == 'transparent') bgColor = '#FFFFFF'
        return bgColor
      }

      /* TOC()************* DATE/TIME FORMATTERS ************** */

      CIQ.yyyymmddhhmmssmmmrx = new RegExp('\\d{17}')

      /**
       * Converts a string form date into a JavaScript Date object with time. Supports various standard date formats
       * @param  {string} dt String form of a date (such as yyyymmddhhmm, yyyy-mm-dd hh:mm, etc)
       * @return {date}    A JavaScript Date object
       * @memberOf CIQ
       */
      CIQ.strToDateTime = function(dt) {
        if (!dt || dt.getFullYear) return dt //if passing in a JS date, return it.
        var myDateArray = []
        var y, m, d, h, mn, sc, ms
        if (dt.length == 12) {
          // yyyymmddhhmm
          y = parseFloat(dt.substring(0, 4))
          m = parseFloat(dt.substring(4, 6)) - 1
          d = parseFloat(dt.substring(6, 8))
          h = parseFloat(dt.substring(8, 10))
          mn = parseFloat(dt.substring(10, 12))
          return new Date(y, m, d, h, mn, 0, 0)
        } else if (CIQ.yyyymmddhhmmssmmmrx.test(dt)) {
          y = parseFloat(dt.substring(0, 4))
          m = parseFloat(dt.substring(4, 6)) - 1
          d = parseFloat(dt.substring(6, 8))
          h = parseFloat(dt.substring(8, 10))
          mn = parseFloat(dt.substring(10, 12))
          sc = parseFloat(dt.substring(12, 14))
          ms = parseFloat(dt.substring(14, 17))
          return new Date(y, m, d, h, mn, sc, ms)
        } else {
          var lr = [dt]
          var t = dt.indexOf('T')
          if (t != -1) {
            var afterT = dt.substring(t)
            if (!CIQ.isIE8 && (afterT.indexOf('Z') != -1 || afterT.indexOf('-') != -1 || afterT.indexOf('+') != -1)) {
              return new Date(dt) // utc time if it contains actual timezone information
            }
            lr = dt.split('T')
          } else if (dt.indexOf(' ') != -1) lr = dt.split(' ')

          if (lr[0].indexOf('/') != -1) myDateArray = lr[0].split('/')
          else if (lr[0].indexOf('-') != -1) myDateArray = lr[0].split('-')
          else return CIQ.strToDate(dt) //give up, maybe it's just a date

          var year = parseFloat(myDateArray[2], 10)
          if (myDateArray[0] && myDateArray[0].length == 4) {
            // YYYY-MM-DD
            year = parseFloat(myDateArray[0], 10)
            myDateArray[0] = myDateArray[1]
            myDateArray[1] = myDateArray[2]
          }

          if (lr.length > 1) {
            var ampm = lr[2]
            lr = lr[1].split(':')
            if (ampm) {
              if (lr[0] == '12' && ampm.toUpperCase() == 'AM') lr[0] = 0
              else if (lr[0] != '12' && ampm.toUpperCase() == 'PM') lr[0] = parseInt(lr[0], 10) + 12
            }
            var sec = 0,
              msec = 0
            if (lr.length == 3) {
              if (lr[2].indexOf('.') == -1) {
                sec = parseInt(lr[2], 10)
              } else {
                sec = lr[2].split('.')
                if (sec[1].length == 3) {
                  msec = sec[1]
                  sec = sec[0]
                } else {
                  //only IE8 should get here
                  msec = sec[1].substr(0, 3)
                  var tz = parseInt(sec[1].substr(3), 10)
                  sec = sec[0]
                  var rDt = new Date(year, myDateArray[0] - 1, myDateArray[1], lr[0], lr[1], sec, msec)
                  rDt.setMinutes(rDt.getMinutes() - rDt.getTimezoneOffset() - (tz % 100) - Math.round(tz / 100) * 60)
                  return rDt
                }
              }
            }
            return new Date(year, myDateArray[0] - 1, myDateArray[1], lr[0], lr[1], sec, msec)
          } else {
            return new Date(year, myDateArray[0] - 1, myDateArray[1], 0, 0, 0, 0)
          }
        }
      }

      /**
       * Converts a string form date into a JavaScript object. Only use if you know that the string will not include a time, otherwise use @see CIQ.strToDateTime
       * @param  {string} dt - Date in string format such as MM/DD/YY or YYYYMMDD or 2014-10-25T00:00:00+00:00 or 201506170635
       * @return {Date}    JavaScript date object -new Date()-
       * @memberOf CIQ
       */
      CIQ.strToDate = function(dt) {
        var myDateArray
        if (dt.indexOf('/') != -1) myDateArray = dt.split('/')
        else if (dt.indexOf('-') != -1) myDateArray = dt.split('-')
        else if (dt.length >= 8) {
          return new Date(
            parseFloat(dt.substring(0, 4)),
            parseFloat(dt.substring(4, 6)) - 1,
            parseFloat(dt.substring(6, 8)),
          )
        } else {
          return new Date()
        }
        if (myDateArray.length < 3) {
          // didn't find enough data for month, day and year.
          return new Date()
        }
        if (myDateArray[2].indexOf(' ') != -1) {
          myDateArray[2] = myDateArray[2].substring(0, myDateArray[2].indexOf(' '))
        } else if (myDateArray[2].indexOf('T') != -1) {
          myDateArray[2] = myDateArray[2].substring(0, myDateArray[2].indexOf('T'))
        }
        var year = parseFloat(myDateArray[2], 10)
        if (year < 20) year += 2000
        if (myDateArray[0].length == 4) {
          // YYYY-MM-DD
          year = parseFloat(myDateArray[0], 10)
          myDateArray[0] = myDateArray[1]
          myDateArray[1] = myDateArray[2]
        }
        return new Date(year, myDateArray[0] - 1, myDateArray[1])
      }

      /**
       * Converts a JavaScript Date or string form date to mm/dd/yyyy format
       * @param  {string} d Date in JavaScript Date or string format such as YYYY-MM-DD
       * @return {string}   Date in mm/dd/yyyy format
       * @memberOf CIQ
       * @since 2016-07-16
       */
      CIQ.mmddyyyy = function(dt) {
        if (typeof dt === 'string') {
          dt = CIQ.strToDate(dt)
        }

        var m = dt.getMonth() + 1
        if (m < 10) m = '0' + m
        d = dt.getDate()
        if (d < 10) d = '0' + d
        return m + '/' + d + '/' + dt.getFullYear()
      }

      /**
       * Converts a JavaScript Date to yyyy-mm-dd format
       * @param  {date} dt JavaScript Date object
       * @return {string}    Date in yyyy-mm-dd format
       * @memberOf CIQ
       */
      CIQ.yyyymmdd = function(dt) {
        var m = dt.getMonth() + 1
        if (m < 10) m = '0' + m
        var d = dt.getDate()
        if (d < 10) d = '0' + d
        return dt.getFullYear() + '-' + m + '-' + d
      }

      /**
       * Converts a date into yyyymmddhhmm format
       * @param  {date} dt A JavaScript Date object
       * @return {string}    Date in yyyymmddhhmm format
       * @memberOf CIQ
       */
      CIQ.yyyymmddhhmm = function(dt) {
        var m = dt.getMonth() + 1
        if (m < 10) m = '0' + m
        var d = dt.getDate()
        if (d < 10) d = '0' + d
        var h = dt.getHours()
        if (h < 10) h = '0' + h
        var mn = dt.getMinutes()
        if (mn < 10) mn = '0' + mn
        return '' + dt.getFullYear() + m + d + h + mn
      }

      /**
       * Converts a date into yyyymmddhhmmssmmm format
       * @param  {date} dt A JavaScript Date object
       * @return {string}    Date in yyyymmddhhmmssmmm format
       * @memberOf CIQ
       */
      CIQ.yyyymmddhhmmssmmm = function(dt) {
        var m = dt.getMonth() + 1
        if (m < 10) m = '0' + m
        var d = dt.getDate()
        if (d < 10) d = '0' + d
        var h = dt.getHours()
        if (h < 10) h = '0' + h
        var mn = dt.getMinutes()
        if (mn < 10) mn = '0' + mn
        var s = dt.getSeconds()
        if (s < 10) s = '0' + s
        var ms = dt.getMilliseconds()
        if (ms < 10) ms = '00' + ms
        else if (ms < 100) ms = '0' + ms
        return '' + dt.getFullYear() + m + d + h + mn + s + ms
      }

      /**
       * Converts a date into yyyy/mm/dd hh:mm format
       * @param  {date} dt A JavaScript Date object
       * @return {string}    Date in yyyy/mm/dd hh:mm format
       * @memberOf CIQ
       */
      CIQ.friendlyDate = function(dt) {
        var m = dt.getMonth() + 1
        if (m < 10) m = '0' + m
        var d = dt.getDate()
        if (d < 10) d = '0' + d
        var h = dt.getHours()
        if (h < 10) h = '0' + h
        var mn = dt.getMinutes()
        if (mn < 10) mn = '0' + mn
        return '' + dt.getFullYear() + '/' + m + '/' + d + ' ' + h + ':' + mn
      }

      /**
       * Converts a date into YYYY-MM-DDTHH:MM:SSZ format (UTC)
       * @param  {date} dt A JavaScript Date object
       * @return {string}    Date in YYYY-MM-DDTHH:MM:SSZ format
       * @memberOf CIQ
       */
      CIQ.standardUTCDate = function(dt) {
        var m = dt.getUTCMonth() + 1
        if (m < 10) m = '0' + m
        var d = dt.getUTCDate()
        if (d < 10) d = '0' + d
        var h = dt.getUTCHours()
        if (h < 10) h = '0' + h
        var mn = dt.getUTCMinutes()
        if (mn < 10) mn = '0' + mn
        var s = dt.getUTCSeconds()
        if (s < 10) s = '0' + s
        return '' + dt.getUTCFullYear() + '-' + m + '-' + d + 'T' + h + ':' + mn + ':' + s + 'Z'
      }

      /**
       * Converts a string form date into mm-dd hh:mm format
       * @param  {string} strdt Date in string format (such as yyyymmddhhmm, yyyy-mm-dd hh:mm, etc)
       * @return {string}       Date in mm-dd hh:mm format
       * @memberOf CIQ
       */
      CIQ.mmddhhmm = function(strdt) {
        var dt = CIQ.strToDateTime(strdt)
        var m = dt.getMonth() + 1
        if (m < 10) m = '0' + m
        var d = dt.getDate()
        if (d < 10) d = '0' + d
        var h = dt.getHours()
        if (h < 10) h = '0' + h
        var mn = dt.getMinutes()
        if (mn < 10) mn = '0' + mn
        if (h == '00' && mn == '00') return m + '-' + d + '-' + dt.getFullYear()
        return m + '-' + d + ' ' + h + ':' + mn
      }

      /**
       * Gets the day of the year
       * @param  {Date} [dt] optional	The date to check.  If omitted, will use the current date.
       * @return {number} 			Day of year
       * @memberOf CIQ
       */
      CIQ.getYearDay = function(dt) {
        var now = dt
        if (!now) now = new Date()
        now.setHours(0, 0, 0, 0)
        var start = new Date(now.getFullYear(), 0, 0)
        var diff = now - start
        var oneDay = 1000 * 60 * 60 * 24
        var day = Math.round(diff / oneDay)
        return day
      }

      /**
       * DST checker.  Returns whether input date is in DST
       * @param  {Date} [dt] optional	The date to check.  If omitted, will use the current date.
       * @return {boolean} True for DST, false for not.
       * @memberOf CIQ
       */
      CIQ.isDST = function(dt) {
        if (!dt) dt = new Date()
        var jan = new Date(dt.getFullYear(), 0, 1)
        var jul = new Date(dt.getFullYear(), 6, 1)
        var stdOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset())
        return dt.getTimezoneOffset() != stdOffset
      }

      /* TOC()************* UNIQUE STRING ************** */

      /**
       * Returns a short, pseudo unique ID based on the current time. Radix 36 is used resulting in a compact string consisting only of letters and numerals.
       * While not guaranteed to be unique, this function has a high probability of uniqueness when it is triggered by human activity even in a large user base.
       * @return {string} A unique string consisting of letters and numerals
       * @memberOf CIQ
       */
      CIQ.uniqueID = function() {
        var epoch = new Date()
        var id = epoch.getTime().toString(36)
        id += Math.floor(Math.random() * Math.pow(36, 2)).toString(36)
        return id.toUpperCase()
      }

      /* TOC()************* URL/XHR ************** */

      /**
       * Returns the host portion of a url
       * @param  {string} url The url, such as document.location.href
       * @return {string}     The host portion, including port, if the url is a valid URI
       * @memberOf CIQ
       */
      CIQ.getHostName = function(url) {
        try {
          return url.match(/:\/\/(.[^/]+)/)[1]
        } catch (e) {
          return ''
        }
      }

      /**
       * Gets an Ajax server dependent on browser method. If IE9 and a cross domain request then XDomainRequest() will be used
       * rather than XMLHttpRequest.
       * @param  {string} url The url to connect with
       * @return {object}     An ajax server
       * @memberOf CIQ
       */
      CIQ.getAjaxServer = function(url) {
        var server = false
        var crossDomain = true
        if ((CIQ.isIE9 || CIQ.isIE8) && url) {
          if (CIQ.getHostName(url) === '') crossDomain = false
          if (CIQ.getHostName(url) == CIQ.getHostName(window.location.href)) crossDomain = false
        }
        if ((CIQ.isIE9 || CIQ.isIE8) && crossDomain) {
          server = new XDomainRequest()
          return server
        }
        try {
          //All modern browsers (IE7+, Firefox, Chrome, Safari, and Opera) have a built-in XMLHttpRequest object.
          server = new XMLHttpRequest()
        } catch (e) {
          alert('ajax not supported in browser')
        }
        return server
      }

      /**
       * A parsed query string object
       * Does not support using multi-value keys (i.e. "a=1&a=2")
       * @param  {string} [query] Query string. If not provided then the browser location's query string will be used
       * @return {object}       An object containing the parsed values of the query string
       * @memberOf CIQ
       */
      CIQ.qs = function(query) {
        var qsParm = {}
        if (!query) query = window.location.search.substring(1)
        var parms = query.split('&')
        for (var i = 0; i < parms.length; i++) {
          var pos = parms[i].indexOf('=')
          var key
          if (pos > 0) {
            key = parms[i].substring(0, pos)
            qsParm[key] = parms[i].substring(pos + 1)
          } else {
            key = parms[i]
            qsParm[key] = null
          }
        }
        return qsParm
      }

      /**
       * @callback CIQ.postAjax~requestCallback
       * @param {number} status HTTP status
       * @param {string} response HTTP response
       */
      /**
       * Convenience function for making an ajax post. If payload is non-null then the method will be set to POST, otherwise GET. Cross origin
       * ajax is support on IE9.
       * @param {object} params Parameters for the post
       * @param  {string}   params.url         The url to send the ajax query to
       * @param  {string}   [params.payload]     An optional payload to send
       * @param  {CIQ.postAjax~requestCallback} params.cb          Callback function when complete
       * @param  {string}   [params.contentType] Optionally override the content type
       * @param  {boolean}   [params.noEpoch]     By default the epoch is appended as a query string to bust caching. Set this to false to not append the epoch.
       * @param {array} [params.headers] Optional additional HTTP headers to send
       * @memberOf CIQ
       */
      CIQ.postAjax = function(params, arg1, arg2, arg3, arg4) {
        if (typeof params == 'string') {
          params = {
            url: params,
            payload: arg1,
            cb: arg2,
            contentType: arg3,
            noEpoch: arg4,
            method: null,
            responseHeaders: false,
          }
        }
        var url = params.url,
          cb = params.cb,
          payload = params.payload
        function parseHeaders(server) {
          //Optional code for processing headers. Doesn't work for IE9
          var headers = {}
          if (!params.responseHeaders) return
          var headerString = server.getAllResponseHeaders()
          var headerArray = headerString.split('\n')
          for (var i = 0; i < headerArray.length; i++) {
            var split = headerArray[i].split(':')
            while (split[1] && split[1].charAt(0) == ' ') split[1] = split[1].substring(1)
            if (split[0] !== '') {
              headers[split.shift()] = split.join(':')
            }
          }
          return headers
        }
        var server = CIQ.getAjaxServer(url)
        if (!server) return false
        var epoch = new Date()
        if (!params.noEpoch) {
          if (url.indexOf('?') == -1) url += '?' + epoch.getTime()
          else url += '&' + epoch.getTime()
        }
        var method = params.method,
          headers = params.headers
        if (!method) method = payload ? 'POST' : 'GET'
        if ((!CIQ.isIE9 && !CIQ.isIE8) || server.constructor == XMLHttpRequest) {
          server.open(method, url, true)
          if (!params.contentType) params.contentType = 'application/x-www-form-urlencoded'
          if (payload) server.setRequestHeader('Content-Type', params.contentType)
          if (headers) {
            for (var header in headers) {
              server.setRequestHeader(header, headers[header])
            }
          }
        } else {
          url = url.replace('https:', window.location.protocol)
          server.open(method, url, true)
          server.onload = function() {
            cb(200, server.responseText, parseHeaders(server))
          }
          server.onerror = function() {
            cb(0, null, {})
          }
          server.onprogress = function() {}
        }
        server.onreadystatechange = function() {
          if (server.readyState == 4) {
            if (server.status != 200) {
              cb(server.status, server.responseText, parseHeaders(server))
            } else {
              cb(200, server.responseText, parseHeaders(server))
            }
          }
        }
        try {
          server.send(payload)
        } catch (e) {
          cb(0, e, {})
        }
        return true
      }

      /**
       * Convenience function for generating a globally unique id (GUID).
       * See http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
       * @memberOf CIQ
       */
      CIQ.generateGUID = function() {
        var d = new Date().getTime()
        if (window.performance && typeof window.performance.now === 'function') {
          d += performance.now() //use high-precision timer if available
        }
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          var r = (d + Math.random() * 16) % 16 | 0
          d = Math.floor(d / 16)
          return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)
        })
        return uuid
      }

      return _exports
    }

  y2ZZ.U1 = function() {
    return typeof y2ZZ.D1.A1 === 'function' ? y2ZZ.D1.A1.apply(y2ZZ.D1, arguments) : y2ZZ.D1.A1
  }
  y2ZZ.K1 = function() {
    return typeof y2ZZ.D1.r0 === 'function' ? y2ZZ.D1.r0.apply(y2ZZ.D1, arguments) : y2ZZ.D1.r0
  }
  y2ZZ.k1 = function() {
    return typeof y2ZZ.D1.n1 === 'function' ? y2ZZ.D1.n1.apply(y2ZZ.D1, arguments) : y2ZZ.D1.n1
  }
  y2ZZ.D1 = (function(O1) {
    return {
      n1: function() {
        var u1,
          h1 = arguments
        switch (O1) {
          case 3:
            u1 = h1[2] - h1[1] / h1[3] + h1[0]
            break
          case 7:
            u1 = (h1[3] * h1[0] - h1[4] + -h1[1]) / h1[2]
            break
          case 0:
            u1 = h1[0] * h1[1]
            break
          case 14:
            u1 = -(h1[0] * h1[4] * h1[1]) - h1[3] + h1[2]
            break
          case 1:
            u1 = h1[1] - h1[0]
            break
          case 4:
            u1 = h1[4] + h1[0] / (h1[2] | h1[3]) - h1[1]
            break
          case 2:
            u1 = h1[1] - h1[2] + h1[0]
            break
          case 11:
            u1 = h1[1] | h1[0]
            break
          case 13:
            u1 = ((h1[2] + h1[1]) * h1[3]) / h1[0]
            break
          case 12:
            u1 = -h1[0] - h1[3] + h1[2] + h1[1]
            break
          case 10:
            u1 = h1[2] + h1[0] - h1[1]
            break
          case 9:
            u1 = h1[1] / +h1[0]
            break
          case 16:
            u1 = ((h1[1] * h1[0]) / h1[4]) * h1[2] - h1[3]
            break
          case 15:
            u1 = h1[0] - h1[2] * h1[1]
            break
          case 6:
            u1 = h1[0] / h1[1]
            break
          case 5:
            u1 = h1[0] + h1[1]
            break
          case 8:
            u1 = (((h1[4] * -h1[5]) / h1[2] - h1[3]) * -h1[1]) / h1[0]
            break
        }
        return u1
      },
      A1: function(G1) {
        O1 = G1
      },
    }
  })()
  y2ZZ.e1 = function() {
    return typeof y2ZZ.D1.n1 === 'function' ? y2ZZ.D1.n1.apply(y2ZZ.D1, arguments) : y2ZZ.D1.n1
  }
  y2ZZ.i1 = function() {
    return typeof y2ZZ.D1.r0 === 'function' ? y2ZZ.D1.r0.apply(y2ZZ.D1, arguments) : y2ZZ.D1.r0
  }
  y2ZZ.S1 = function() {
    return typeof y2ZZ.D1.A1 === 'function' ? y2ZZ.D1.A1.apply(y2ZZ.D1, arguments) : y2ZZ.D1.A1
  }
  y2ZZ.u0 = function() {
    return typeof y2ZZ.Z0.r0 === 'function' ? y2ZZ.Z0.r0.apply(y2ZZ.Z0, arguments) : y2ZZ.Z0.r0
  }
  y2ZZ.Z0 = (function() {
    var R0 = function(S0, J0) {
        var g0 = J0 & 0xffff
        var f0 = J0 - g0
        return (((f0 * S0) | 0) + ((g0 * S0) | 0)) | 0
      },
      n0 = function(V0, L0, E0) {
        var k0 = 0xcc9e2d51,
          Y0 = 0x1b873593
        var v0 = E0
        var h0 = L0 & ~0x3
        for (var M0 = 0; M0 < h0; M0 += 4) {
          var c0 =
            (V0.charCodeAt(M0) & 0xff) |
            ((V0.charCodeAt(M0 + 1) & 0xff) << 8) |
            ((V0.charCodeAt(M0 + 2) & 0xff) << 16) |
            ((V0.charCodeAt(M0 + 3) & 0xff) << 24)
          c0 = R0(c0, k0)
          c0 = ((c0 & 0x1ffff) << 15) | (c0 >>> 17)
          c0 = R0(c0, Y0)
          v0 ^= c0
          v0 = ((v0 & 0x7ffff) << 13) | (v0 >>> 19)
          v0 = (v0 * 5 + 0xe6546b64) | 0
        }
        c0 = 0
        switch (L0 % 4) {
          case 3:
            c0 = (V0.charCodeAt(h0 + 2) & 0xff) << 16
          case 2:
            c0 |= (V0.charCodeAt(h0 + 1) & 0xff) << 8
          case 1:
            c0 |= V0.charCodeAt(h0) & 0xff
            c0 = R0(c0, k0)
            c0 = ((c0 & 0x1ffff) << 15) | (c0 >>> 17)
            c0 = R0(c0, Y0)
            v0 ^= c0
        }
        v0 ^= L0
        v0 ^= v0 >>> 16
        v0 = R0(v0, 0x85ebca6b)
        v0 ^= v0 >>> 13
        v0 = R0(v0, 0xc2b2ae35)
        v0 ^= v0 >>> 16
        return v0
      }
    return { r0: n0 }
  })()
  function y2ZZ() {}
  y2ZZ.Q0 = function() {
    return typeof y2ZZ.Z0.r0 === 'function' ? y2ZZ.Z0.r0.apply(y2ZZ.Z0, arguments) : y2ZZ.Z0.r0
  }
  var __js_customCharts_
  __js_customCharts_ = function(P) {
    var E1 = y2ZZ
    var D3, K3, X3, W
    E1.S1(0)
    D3 = -E1.k1('1474983965', 1)
    K3 = -709859466
    X3 = 2
    for (var O3 = 1; E1.Q0(O3.toString(), O3.toString().length, +'42063') !== D3; O3++) {
      W = P.CIQ
      X3 += 2
    }
    if (E1.u0(X3.toString(), X3.toString().length, 31811) !== K3) {
      W = P.CIQ
    }
    W.ChartEngine.prototype.drawHeatmap = function(s, h) {
      var G3, Q3, J, K, A, G, E, T, X, F, N, f, u, R, U, Y3, t3, E3
      G3 = 'Da'
      G3 += 't'
      G3 += 'a'
      Q3 = 'cha'
      Q3 += 'rt'
      if (!h || !h.length) {
        return
      }
      J = s.panel
      if (!J) {
        J = Q3
      }
      K = this.panels[J]
      if (!K) {
        return
      }
      A = s.yAxis ? s.yAxis : K.yAxis
      G = Math.floor(A.bottom) + 0.5
      E = Math.floor(A.top) + +'0.5'
      T = this.chart.dataSegment
      this.getDefaultColor()
      if (!s.name) {
        s.name = G3
      }
      if (!s.widthFactor) {
        s.widthFactor = 1
      }
      X = 0.5
      if (K.chart.tmpWidth <= 1) {
        X = +'0'
      }
      F = null
      N = null
      f = this
      u = null
      this.startClip(J)
      R = this.chart.context
      R.globalAlpha = s.opacity
      for (var g = 0; g < h.length; g++) {
        U = h[g]
        k(U.field, U.color, null, s.widthFactor, U.border_color ? X : -X / 4)
        if (U.border_color && this.layout.candleWidth >= 2) {
          k(U.field, U.border_color, !!1, s.widthFactor, X)
        }
      }
      E1.S1(1)
      Y3 = E1.k1(0, '2095848291')
      t3 = -637740032
      E1.U1(0)
      E3 = E1.e1('2', 1)
      for (var u3 = 1; E1.u0(u3.toString(), u3.toString().length, 7484) !== Y3; u3++) {
        R.lineWidth = 6
        E3 += 2
      }
      function k(s2, r2, P2, v2, i2) {
        var f2, b2, Z, V, Y, B, M, D, Q, R2, W2, H2
        R.beginPath()
        R.fillStyle = r2
        R.strokeStyle = r2
        f2 = A.top
        b2 = A.bottom
        Z = f.layout.candleWidth * v2
        V = Math.floor(f.pixelFromBar(0, K.chart) - f.layout.candleWidth)
        for (var a = 0; a < T.length; a++) {
          M = T[a]
          if (!M) continue
          if (M.candleWidth) {
            if (a === ('0' | 0)) {
              V += f.layout.candleWidth
            } else {
              E1.U1(2)
              var d3 = E1.k1(6, 14, 18)
              V += (M.candleWidth + Z / v2) / d3
            }
            Z = M.candleWidth * v2
          } else {
            V += f.layout.candleWidth
          }
          E1.S1(3)
          Y = E1.k1(i2, Z, V, 2)
          E1.U1(4)
          B = E1.k1(Z, i2, '2', 0, V)
          if (B - Y < 2) {
            E1.U1(5)
            B = E1.e1(Y, 1)
          }
          if (M.transform) {
            M = M.transform
          }
          D = M[s2]
          if (!D) continue
          if (typeof D == 'number') {
            D = [D]
          }
          for (var S = 0; S < D.length; S++) {
            Q = f.pixelFromPrice(D[S], K, A)
            if (!u) {
              R2 = f.pixelFromPrice(D[S] - s.height, K, A)
              R.lineWidth = 1
              E1.S1(1)
              F = E1.e1(Q, R2)
              E1.S1(6)
              N = E1.k1(F, 2)
              u = R.lineWidth
            }
            if (P2) {
              E1.U1(5)
              W2 = E1.k1(Q, N)
              E1.U1(1)
              H2 = E1.e1(N, Q)
              R.moveTo(Y, W2)
              R.lineTo(Y, H2)
              R.lineTo(B, H2)
              R.lineTo(B, W2)
              R.lineTo(Y, W2)
            } else {
              E1.U1(1)
              R.fillRect(Y, E1.k1(N, Q), E1.e1(Y, B), F)
            }
          }
        }
        if (P2) {
          R.stroke()
        }
        R.closePath()
      }
      if (E1.Q0(E3.toString(), E3.toString().length, '536' | 0) !== t3) {
        R.lineWidth = 1
      }
      R.globalAlpha = 1
      this.endClip()
    }
    W.ChartEngine.prototype.drawCandles = function(n2, Q2, V2, D2) {
      var N3,
        m3,
        W3,
        m2,
        C3,
        U3,
        l3,
        G2,
        l2,
        J2,
        k2,
        A2,
        Y2,
        N2,
        E2,
        c2,
        F2,
        z2,
        B2,
        X2,
        o2,
        q2,
        h2,
        H3,
        U2,
        u2,
        K2,
        C2,
        O2,
        M2,
        T2,
        L2
      N3 = +'1731348096'
      m3 = -987032239
      W3 = 2
      for (var e3 = 1; E1.u0(e3.toString(), e3.toString().length, 54264) !== N3; e3++) {
        m2 = n2.chart
        W3 += 2
      }
      if (E1.u0(W3.toString(), W3.toString().length, 65313) !== m3) {
        m2 = n2.chart
      }
      m2 = n2.chart
      if (!m2) {
        m2 = n2
        C3 = 1371836708
        U3 = 231207555
        l3 = +'2'
        for (var a3 = 1; E1.u0(a3.toString(), a3.toString().length, 68377) !== C3; a3++) {
          n2 = n2.chart
          l3 += 2
        }
        if (E1.Q0(l3.toString(), l3.toString().length, 41860) !== U3) {
          n2 = n2.chart
        }
      }
      G2 = m2.dataSegment
      l2 = this.chart.context
      J2 = n2.yAxis.top
      k2 = n2.yAxis.bottom
      E2 = 't'
      E2 += 'ranspare'
      E2 += 'nt'
      c2 = 'transparent'
      F2 = 0
      z2 = m2.dataSet.length - m2.scroll
      B2 = z2 + m2.maxTicks
      X2 = n2.yAxis
      E1.S1(7)
      var i3 = E1.k1(12, 20, 190, 34, 8)
      o2 = m2.tmpWidth / i3
      q2 = this.layout.candleWidth
      E1.U1(8)
      var j3 = E1.k1(85, 4, 4, 18, 13, 1)
      h2 = n2.left - 0.5 * q2 + this.micropixels - j3
      for (var g2 = 0; g2 <= G2.length; g2++) {
        H3 = 's'
        H3 += 'o'
        H3 += 'l'
        H3 += 'id'
        E1.S1(9)
        h2 += E1.e1('2', q2)
        q2 = this.layout.candleWidth
        E1.S1(6)
        h2 += E1.e1(q2, 2)
        U2 = G2[g2]
        if (!U2) continue
        if (U2.projection) continue
        if (U2.candleWidth) {
          h2 += (U2.candleWidth - q2) / 2
          q2 = U2.candleWidth
          if (this.layout.chartType == 'volume_candle') {
            E1.S1(6)
            o2 = E1.k1(q2, 2)
          }
        }
        if (!U2.Open && U2.Open !== ('0' | 0)) continue
        if (!D2 && U2.Open == U2.Close) continue
        u2 = Q2(this, U2, V2 ? 'outline' : H3)
        if (!u2) continue
        if (V2) {
          E2 = u2
        } else {
          c2 = u2
        }
        if (!W.isTransparent(E2)) {
          F2 = +'0.5'
        }
        l2.beginPath()
        l2.fillStyle = c2
        if (U2.transform) {
          U2 = U2.transform
        }
        K2 = U2.cache
        E1.S1(5)
        C2 = E1.e1(z2, g2)
        if (C2 < n2.cacheLeft || C2 > n2.cacheRight || !K2.open) {
          O2 = X2.semiLog ? this.pixelFromPrice(U2.Open, n2) : (X2.high - U2.Open) * X2.multiplier + X2.top
          M2 = X2.semiLog ? this.pixelFromPrice(U2.Close, n2) : (X2.high - U2.Close) * X2.multiplier + X2.top
          A2 = Math.floor(Math.min(O2, M2)) + F2
          Y2 = D2 ? X2.bottom : Math.max(O2, M2)
          E1.S1(1)
          N2 = Math.floor(E1.k1(A2, Y2))
          if (A2 < J2) {
            if (A2 + N2 < J2) {
              K2.open = A2
              K2.close = A2
              continue
            }
            E1.S1(1)
            N2 -= E1.e1(A2, J2)
            A2 = J2
          }
          if (A2 + N2 > k2) {
            E1.S1(10)
            N2 -= E1.e1(N2, k2, A2)
          }
          N2 = Math.max(N2, +'2')
          K2.open = A2
          K2.close = K2.open + N2
        }
        if (K2.open >= k2) continue
        if (K2.close <= J2) continue
        flr_xbase = Math.floor(h2) + 0.5
        T2 = Math.floor(flr_xbase - o2) + F2
        L2 = Math.round(flr_xbase + o2) - F2
        if (K2.open != K2.close) {
          l2.moveTo(T2, K2.open)
          l2.lineTo(L2, K2.open)
          l2.lineTo(L2, K2.close)
          l2.lineTo(T2, K2.close)
          l2.lineTo(T2, K2.open)
        }
        if (c2 != 'transparent') {
          l2.fill()
        }
        if (F2) {
          l2.lineWidth = +'1'
          l2.strokeStyle = E2
          l2.stroke()
        }
      }
    }
    W.ChartEngine.prototype.drawShadows = function(e2, N6) {
      var y6,
        r3,
        R3,
        n3,
        b6,
        J3,
        f3,
        c3,
        a2,
        v6,
        H6,
        Z2,
        n6,
        m6,
        K6,
        X6,
        S2,
        j2,
        P6,
        I2,
        f6,
        p2,
        U6,
        W6,
        r6,
        s6,
        A6,
        l6,
        R6
      y6 = e2.chart
      if (!y6) {
        y6 = e2
        r3 = 860342177
        R3 = -2079957374
        n3 = 2
        for (var S3 = +'1'; E1.u0(S3.toString(), S3.toString().length, '44079' | 0) !== r3; S3++) {
          e2 = e2.chart
          n3 += +'2'
        }
        if (E1.u0(n3.toString(), n3.toString().length, 99595) !== R3) {
          e2 = e2.chart
        }
        e2 = e2.chart
      }
      b6 = y6.dataSegment
      J3 = 1659905161
      E1.S1(11)
      f3 = -E1.e1(0, '1795311549')
      c3 = 2
      for (var V3 = '1' - 0; E1.Q0(V3.toString(), V3.toString().length, 86550) !== J3; V3++) {
        a2 = this.chart.context
        a2.lineWidth = 1
        v6 = e2.yAxis.top
        H6 = e2.yAxis.bottom
        c3 += 2
      }
      if (E1.u0(c3.toString(), c3.toString().length, +'75506') !== f3) {
        a2 = this.chart.context
        a2.lineWidth = 2
        v6 = e2.yAxis.top
        H6 = e2.yAxis.bottom
      }
      K6 = y6.dataSet.length - y6.scroll
      X6 = K6 + y6.maxTicks
      S2 = e2.yAxis
      j2 = this.layout.candleWidth
      E1.S1(6)
      var y3 = E1.k1(14, 14)
      P6 = e2.left - 0.5 * j2 + this.micropixels - y3
      for (var i6 = 0; i6 <= b6.length; i6++) {
        E1.S1(6)
        P6 += E1.k1(j2, 2)
        j2 = this.layout.candleWidth
        E1.S1(6)
        P6 += E1.k1(j2, 2)
        I2 = b6[i6]
        if (!I2) continue
        if (I2.projection) continue
        if (I2.candleWidth) {
          E1.U1(12)
          var q3 = E1.e1(6, 15, 10, 17)
          P6 += (I2.candleWidth - j2) / q3
          j2 = I2.candleWidth
        }
        f6 = N6(this, I2, 'shadow')
        if (!f6) continue
        if (I2.transform) {
          I2 = I2.transform
        }
        p2 = I2.cache
        E1.U1(5)
        U6 = E1.k1(K6, i6)
        if (U6 < e2.cacheLeft || U6 > e2.cacheRight || !p2.top) {
          Z2 = S2.semiLog ? this.pixelFromPrice(I2.High, e2) : (S2.high - I2.High) * S2.multiplier + S2.top
          n6 = S2.semiLog ? this.pixelFromPrice(I2.Low, e2) : (S2.high - I2.Low) * S2.multiplier + S2.top
          E1.S1(1)
          W6 = E1.k1(Z2, n6)
          if (Z2 < v6) {
            if (Z2 + W6 < v6) {
              p2.top = Z2
              p2.bottom = Z2
              continue
            }
            E1.U1(1)
            W6 -= E1.k1(Z2, v6)
            Z2 = v6
          }
          if (Z2 + W6 > H6) {
            E1.S1(10)
            W6 -= E1.e1(W6, H6, Z2)
          }
          p2.top = Z2
          p2.bottom = p2.top + W6
        }
        if (p2.top >= H6) continue
        if (p2.bottom <= v6) continue
        r6 = Math.floor(P6) + 0.5
        a2.beginPath()
        a2.moveTo(r6, p2.top)
        a2.lineTo(r6, p2.bottom)
        if (I2.Open == I2.Close || (!I2.Open && I2.Open !== 0)) {
          s6 = this.offset
          if (this.layout.chartType == 'volume_candle') {
            E1.S1(6)
            s6 = E1.e1(j2, 2)
          }
          E1.S1(1)
          A6 = E1.k1(s6, r6)
          E1.U1(5)
          l6 = E1.e1(r6, s6)
          R6 =
            Math.floor(S2.semiLog ? this.pixelFromPrice(I2.Close, e2) : (S2.high - I2.Close) * S2.multiplier + S2.top) +
            0.5
          if (R6 <= H6 && R6 >= v6) {
            a2.moveTo(A6, R6)
            a2.lineTo(l6, R6)
          }
        }
        a2.strokeStyle = f6
        a2.stroke()
      }
    }
    W.ChartEngine.prototype.drawBarChart = function(h6, d6, I6) {
      var x6, D6, F6, w6, G0, H0, d0, M3, h3, L3, T6, c6, g6, B6, k6, V6, Q6, o6, z6, C6, M6, E6, O6, J6, G6, q6, Y6, u6
      x6 = h6.chart
      if (!x6) {
        x6 = h6
        h6 = h6.chart
      }
      D6 = x6.dataSegment
      F6 = x6.context
      w6 = this.canvasStyle(d6)
      if (w6.width && parseInt(w6.width, 10) <= 25) {
        G0 = 1315644478
        H0 = 1018517737
        d0 = 2
        for (var j0 = '1' | 0; E1.u0(j0.toString(), j0.toString().length, 24774) !== G0; j0++) {
          F6.lineWidth = Math.max(2, W.stripPX(w6.width))
          d0 += 2
        }
        if (E1.u0(d0.toString(), d0.toString().length, 39533) !== H0) {
          F6.lineWidth = Math.max(2, W.stripPX(w6.width))
        }
        F6.lineWidth = Math.max(1, W.stripPX(w6.width))
      } else {
        M3 = -877262303
        h3 = -1942629256
        L3 = 2
        for (var k3 = 1; E1.u0(k3.toString(), k3.toString().length, 76101) !== M3; k3++) {
          F6.lineWidth = 1
          L3 += 2
        }
        if (E1.u0(L3.toString(), L3.toString().length, +'80914') !== h3) {
          F6.lineWidth = 5
        }
      }
      T6 = h6.yAxis.top
      c6 = h6.yAxis.bottom
      V6 = x6.dataSet.length - x6.scroll
      Q6 = V6 + x6.maxTicks
      o6 = h6.yAxis
      z6 = {}
      E1.U1(13)
      var b3 = E1.e1(21, 10, 11, 2)
      C6 = x6.tmpWidth / b3
      E1.S1(1)
      var o1 = E1.k1(14, 16)
      M6 = F6.lineWidth / o1
      E6 = this.layout.candleWidth
      O6 = h6.left - 0.5 * E6 + this.micropixels - 1
      for (var L6 = 0; L6 <= D6.length; L6++) {
        E1.U1(6)
        O6 += E1.e1(E6, 2)
        E6 = this.layout.candleWidth
        E1.U1(6)
        O6 += E1.e1(E6, 2)
        J6 = D6[L6]
        if (!J6) continue
        if (J6.projection) break
        if (J6.candleWidth) {
          E1.S1(14)
          var F1 = E1.e1(17, 10, 2739, 17, 16)
          O6 += (J6.candleWidth - E6) / F1
          E6 = J6.candleWidth
        }
        G6 = I6(this, J6)
        if (!G6) continue
        z6[G6] = 1
        F6.strokeStyle = G6
        F6.beginPath()
        if (J6.transform) {
          J6 = J6.transform
        }
        q6 = J6.cache
        E1.U1(5)
        Y6 = E1.e1(V6, L6)
        if (Y6 < h6.cacheLeft || Y6 > h6.cacheRight || !q6.top) {
          g6 = this.pixelFromPrice(J6.High, h6)
          B6 = this.pixelFromPrice(J6.Low, h6)
          E1.S1(1)
          k6 = E1.k1(g6, B6)
          q6.open = o6.semiLog ? this.pixelFromPrice(J6.Open, h6) : (o6.high - J6.Open) * o6.multiplier + o6.top
          q6.close = o6.semiLog ? this.pixelFromPrice(J6.Close, h6) : (o6.high - J6.Close) * o6.multiplier + o6.top
          if (g6 < T6) {
            if (g6 + k6 < T6) {
              q6.top = g6
              q6.bottom = g6
              continue
            }
            E1.U1(1)
            k6 -= E1.k1(g6, T6)
            g6 = T6
          }
          if (g6 + k6 > c6) {
            E1.U1(10)
            k6 -= E1.k1(k6, c6, g6)
          }
          q6.top = g6
          E1.U1(5)
          q6.bottom = E1.e1(g6, k6)
        }
        u6 = Math.floor(O6) + 0.5
        if (q6.top < c6 && q6.bottom > T6) {
          F6.moveTo(u6, q6.top - M6)
          F6.lineTo(u6, q6.bottom + M6)
        }
        if (q6.open > T6 && q6.open < c6) {
          F6.moveTo(u6, q6.open)
          E1.U1(1)
          F6.lineTo(E1.k1(C6, u6), q6.open)
        }
        if (q6.close > T6 && q6.close < c6) {
          F6.moveTo(u6, q6.close)
          E1.U1(5)
          F6.lineTo(E1.k1(u6, C6), q6.close)
        }
        F6.stroke()
      }
      F6.lineWidth = 1
      return z6
    }
    W.ChartEngine.prototype.drawWaveChart = function(Z6) {
      var v7, s7, F3, w3, s3, e6, r7, W7, a6, t6, b7, j6, p6, S6, P7, i7, y7, R7, A0, q0, b0
      v7 = Z6.chart
      s7 = v7.dataSegment
      F3 = -+'1385046402'
      w3 = -1829343677
      s3 = 2
      for (var I3 = 1; E1.Q0(I3.toString(), I3.toString().length, +'53777') !== F3; I3++) {
        e6 = this.chart.context
        this.startClip(Z6.name)
        e6.beginPath()
        r7 = !![]
        W7 = !!1
        a6 = Z6.yAxis.top
        t6 = Z6.yAxis.bottom
        s3 += +'2'
      }
      if (E1.Q0(s3.toString(), s3.toString().length, 94922) !== w3) {
        e6 = this.chart.context
        this.startClip(Z6.name)
        e6.beginPath()
        r7 = ![]
        W7 = !'1'
        a6 = Z6.yAxis.top
        t6 = Z6.yAxis.bottom
      }
      b7 = Z6.left + Math.floor(-('0.5' - 0) * this.layout.candleWidth + this.micropixels)
      for (var H7 = 0; H7 <= s7.length; H7++) {
        b7 += this.layout.candleWidth
        j6 = s7[H7]
        if (!j6) continue
        if (j6.projection) break
        if (j6.transform) {
          j6 = j6.transform
        }
        E1.S1(15)
        var w1 = E1.k1(80, 11, 7)
        E1.S1(6)
        var s1 = E1.e1(24, 3)
        p6 = b7 - (w1 * this.layout.candleWidth) / s1
        S6 = this.pixelFromPrice(j6.Open, Z6)
        if (S6 < a6) {
          S6 = a6
          if (W7) {
            e6.moveTo(p6, S6)
            continue
          }
          W7 = !![]
        } else if (S6 > t6) {
          S6 = t6
          if (W7) {
            e6.moveTo(p6, S6)
            continue
          }
          W7 = !![]
        } else {
          W7 = ![]
        }
        if (!r7) {
          r7 = !''
          P7 = v7.dataSet.length - v7.scroll
          if (P7 <= '0' - 0) {
            e6.moveTo(p6, S6)
          } else if (P7 > 0) {
            E1.S1(1)
            i7 = v7.dataSet[E1.e1(1, P7)]
            if (i7.transform) {
              i7 = i7.transform
            }
            y7 = i7.Close
            y7 = Z6.yAxis.semiLog ? this.pixelFromPrice(y7, Z6) : (Z6.yAxis.high - y7) * Z6.yAxis.multiplier + a6
            y7 = Math.min(Math.max(y7, a6), t6)
            e6.moveTo(Z6.left + (H7 - 1) * this.layout.candleWidth + this.micropixels, y7)
            e6.lineTo(p6, S6)
          }
          e6.moveTo(p6, S6)
        } else {
          e6.lineTo(p6, S6)
        }
        p6 += this.layout.candleWidth / +'4'
        if (j6.Open < j6.Close) {
          S6 = this.pixelFromPrice(j6.Low, Z6)
          if (S6 < a6) {
            S6 = a6
          }
          if (S6 > t6) {
            S6 = t6
          }
          e6.lineTo(p6, S6)
          E1.S1(16)
          var B1 = E1.k1(6, 12, 13, 48, 18)
          p6 += this.layout.candleWidth / B1
          S6 = this.pixelFromPrice(j6.High, Z6)
          if (S6 < a6) {
            S6 = a6
          }
          if (S6 > t6) {
            S6 = t6
          }
          e6.lineTo(p6, S6)
        } else {
          S6 = this.pixelFromPrice(j6.High, Z6)
          if (S6 < a6) {
            S6 = a6
          }
          if (S6 > t6) {
            S6 = t6
          }
          e6.lineTo(p6, S6)
          E1.U1(15)
          var I1 = E1.k1(2734, 13, 210)
          p6 += this.layout.candleWidth / I1
          S6 = this.pixelFromPrice(j6.Low, Z6)
          if (S6 < a6) {
            S6 = a6
          }
          if (S6 > t6) {
            S6 = t6
          }
          e6.lineTo(p6, S6)
        }
        p6 += this.layout.candleWidth / 4
        S6 = this.pixelFromPrice(j6.Close, Z6)
        if (S6 < a6) {
          S6 = a6
        }
        if (S6 > t6) {
          S6 = t6
        }
        e6.lineTo(p6, S6)
      }
      R7 = this.canvasStyle('stx_line_chart')
      if (R7.width && parseInt(R7.width, 10) <= 25) {
        A0 = 1580793228
        q0 = 350127006
        b0 = 2
        for (var p3 = 1; E1.u0(p3.toString(), p3.toString().length, 11136) !== A0; p3++) {
          e6.lineWidth = Math.max(1, W.stripPX(R7.width))
          b0 += 2
        }
        if (E1.Q0(b0.toString(), b0.toString().length, '72519' | 0) !== q0) {
          e6.lineWidth = Math.max(2, W.stripPX(R7.width))
        }
      } else {
        E1.S1(11)
        e6.lineWidth = E1.k1(0, '1')
      }
      this.canvasColor('stx_line_chart')
      e6.stroke()
      e6.closePath()
      this.endClip()
      E1.U1(0)
      e6.lineWidth = E1.k1('1', 1)
    }
    W.ChartEngine.prototype.scatter = function(l7) {
      var J7, m7, U7, F7, q7, n7, f7, X7, K7
      J7 = l7.chart
      m7 = J7.dataSegment
      U7 = this.chart.context
      U7.beginPath()
      U7.lineWidth = 4
      F7 = l7.yAxis.top
      q7 = l7.yAxis.bottom
      n7 = l7.left - 0.5 * this.layout.candleWidth + this.micropixels - 1
      for (var A7 = +'0'; A7 <= m7.length; A7++) {
        n7 += this.layout.candleWidth
        f7 = m7[A7]
        if (!f7) continue
        if (!f7.projection) {
          if (f7.transform) {
            f7 = f7.transform
          }
          X7 = [f7.Close]
          if ('Scatter' in f7) {
            X7 = f7.Scatter
          }
          for (var N7 = +'0'; N7 < X7.length; N7++) {
            K7 = this.pixelFromPrice(X7[N7], l7)
            if (K7 < F7) continue
            if (K7 > q7) continue
            E1.S1(1)
            U7.moveTo(E1.e1(2, n7), K7)
            E1.S1(5)
            U7.lineTo(E1.k1(n7, 2), K7)
          }
        }
      }
      this.canvasColor('stx_scatter_chart')
      U7.stroke()
      U7.closePath()
      U7.lineWidth = +'1'
    }
    return P
  }
  r2bb.u2i = function() {
    return typeof r2bb.X2i.n1 === 'function' ? r2bb.X2i.n1.apply(r2bb.X2i, arguments) : r2bb.X2i.n1
  }
  r2bb.G2i = function() {
    return typeof r2bb.X2i.n1 === 'function' ? r2bb.X2i.n1.apply(r2bb.X2i, arguments) : r2bb.X2i.n1
  }
  function r2bb() {}
  r2bb.a2i = function() {
    return typeof r2bb.X2i.A1 === 'function' ? r2bb.X2i.A1.apply(r2bb.X2i, arguments) : r2bb.X2i.A1
  }
  r2bb.t7B = (function() {
    var o7B = function(E7B, L7B) {
        var j7B = L7B & 0xffff
        var e7B = L7B - j7B
        return (((e7B * E7B) | 0) + ((j7B * E7B) | 0)) | 0
      },
      R7B = function(g7B, V7B, D7B) {
        var b7B = 0xcc9e2d51,
          q7B = 0x1b873593
        var w7B = D7B
        var O7B = V7B & ~0x3
        for (var u7B = 0; u7B < O7B; u7B += 4) {
          var G7B =
            (g7B.charCodeAt(u7B) & 0xff) |
            ((g7B.charCodeAt(u7B + 1) & 0xff) << 8) |
            ((g7B.charCodeAt(u7B + 2) & 0xff) << 16) |
            ((g7B.charCodeAt(u7B + 3) & 0xff) << 24)
          G7B = o7B(G7B, b7B)
          G7B = ((G7B & 0x1ffff) << 15) | (G7B >>> 17)
          G7B = o7B(G7B, q7B)
          w7B ^= G7B
          w7B = ((w7B & 0x7ffff) << 13) | (w7B >>> 19)
          w7B = (w7B * 5 + 0xe6546b64) | 0
        }
        G7B = 0
        switch (V7B % 4) {
          case 3:
            G7B = (g7B.charCodeAt(O7B + 2) & 0xff) << 16
          case 2:
            G7B |= (g7B.charCodeAt(O7B + 1) & 0xff) << 8
          case 1:
            G7B |= g7B.charCodeAt(O7B) & 0xff
            G7B = o7B(G7B, b7B)
            G7B = ((G7B & 0x1ffff) << 15) | (G7B >>> 17)
            G7B = o7B(G7B, q7B)
            w7B ^= G7B
        }
        w7B ^= V7B
        w7B ^= w7B >>> 16
        w7B = o7B(w7B, 0x85ebca6b)
        w7B ^= w7B >>> 13
        w7B = o7B(w7B, 0xc2b2ae35)
        w7B ^= w7B >>> 16
        return w7B
      }
    return { r0: R7B }
  })()
  r2bb.I7B = function() {
    return typeof r2bb.t7B.r0 === 'function' ? r2bb.t7B.r0.apply(r2bb.t7B, arguments) : r2bb.t7B.r0
  }
  r2bb.E2i = function() {
    return typeof r2bb.X2i.r0 === 'function' ? r2bb.X2i.r0.apply(r2bb.X2i, arguments) : r2bb.X2i.r0
  }
  r2bb.F7B = function() {
    return typeof r2bb.t7B.A1 === 'function' ? r2bb.t7B.A1.apply(r2bb.t7B, arguments) : r2bb.t7B.A1
  }
  r2bb.W7B = function() {
    return typeof r2bb.t7B.A1 === 'function' ? r2bb.t7B.A1.apply(r2bb.t7B, arguments) : r2bb.t7B.A1
  }
  r2bb.X7B = function() {
    return typeof r2bb.t7B.n1 === 'function' ? r2bb.t7B.n1.apply(r2bb.t7B, arguments) : r2bb.t7B.n1
  }
  r2bb.y2i = function() {
    return typeof r2bb.X2i.A1 === 'function' ? r2bb.X2i.A1.apply(r2bb.X2i, arguments) : r2bb.X2i.A1
  }
  r2bb.q2i = function() {
    return typeof r2bb.X2i.r0 === 'function' ? r2bb.X2i.r0.apply(r2bb.X2i, arguments) : r2bb.X2i.r0
  }
  r2bb.B7B = function() {
    return typeof r2bb.t7B.r0 === 'function' ? r2bb.t7B.r0.apply(r2bb.t7B, arguments) : r2bb.t7B.r0
  }
  r2bb.X2i = (function(J2i) {
    return {
      n1: function() {
        var Z2i,
          V2i = arguments
        switch (J2i) {
          case 5:
            Z2i = V2i[2] - V2i[1] + V2i[0]
            break
          case 9:
            Z2i = V2i[0] + V2i[2] - V2i[1]
            break
          case 16:
            Z2i = V2i[2] / V2i[0] + V2i[1]
            break
          case 10:
            Z2i = V2i[3] + V2i[0] - V2i[2] - V2i[1]
            break
          case 13:
            Z2i = (V2i[2] + V2i[0]) * V2i[3] - V2i[1]
            break
          case 19:
            Z2i = (V2i[3] - V2i[0]) / V2i[4] - V2i[2] + V2i[1]
            break
          case 18:
            Z2i = V2i[2] + V2i[0] * V2i[1]
            break
          case 11:
            Z2i = (V2i[2] - V2i[1]) / V2i[0]
            break
          case 15:
            Z2i = V2i[2] - V2i[0] * V2i[1]
            break
          case 7:
            Z2i = V2i[2] - V2i[1] + V2i[0] + V2i[3]
            break
          case 8:
            Z2i = (V2i[2] + V2i[1]) / V2i[0]
            break
          case 6:
            Z2i = V2i[1] - V2i[0]
            break
          case 1:
            Z2i = V2i[3] * V2i[0] - V2i[4] + V2i[2] + V2i[1]
            break
          case 14:
            Z2i = (V2i[2] * V2i[1] - V2i[3]) / V2i[0]
            break
          case 2:
            Z2i = V2i[0] + V2i[1]
            break
          case 3:
            Z2i = V2i[0] | V2i[1]
            break
          case 17:
            Z2i = V2i[0] % V2i[1]
            break
          case 12:
            Z2i = ((V2i[1] * V2i[2] + V2i[4]) * V2i[0]) / V2i[3]
            break
          case 4:
            Z2i = V2i[1] / V2i[0]
            break
          case 0:
            Z2i = V2i[0] * V2i[1]
            break
        }
        return Z2i
      },
      A1: function(W2i) {
        J2i = W2i
      },
    }
  })()
  r2bb.a7B = function() {
    return typeof r2bb.t7B.n1 === 'function' ? r2bb.t7B.n1.apply(r2bb.t7B, arguments) : r2bb.t7B.n1
  }
  var __js_advanced_aggregations_
  __js_advanced_aggregations_ = function(T0) {
    var l0
    l0 = T0.CIQ
    l0.ChartEngine.prototype.drawKagiSquareWave = function(I0, V8, T8) {
      var C2i = r2bb
      var F0, N0, K0, O0, z0, m0, i6B, H6B, n6B, a0, P0, X0, l8, D0, w0, s0, W0, U0, o0, e0, C0, p0, x7B, Q7B, Y7B
      F0 = I0.chart
      this.startClip(I0.name)
      N0 = F0.dataSegment
      K0 = F0.context
      O0 = this.canvasStyle(V8)
      z0 = this.canvasStyle(T8)
      this.canvasColor(V8)
      m0 = K0.strokeStyle
      this.canvasColor(T8)
      i6B = 1234590237
      H6B = -595892580
      n6B = 2
      for (var f6B = 1; C2i.I7B(f6B.toString(), f6B.toString().length, 69674) !== i6B; f6B++) {
        a0 = K0.strokeStyle
        C2i.y2i(0)
        P0 = C2i.u2i('1', 1)
        n6B += 2
      }
      if (C2i.B7B(n6B.toString(), n6B.toString().length, +'24038') !== H6B) {
        a0 = K0.strokeStyle
        P0 = 4
      }
      if (O0.width && parseInt(O0.width, 10) <= 25) {
        P0 = Math.max(1, l0.stripPX(O0.width))
      }
      X0 = +'1'
      if (z0.width && parseInt(z0.width, 10) <= 25) {
        X0 = Math.max(1, l0.stripPX(z0.width))
      }
      K0.beginPath()
      l8 = F0.dataSet.length - F0.scroll
      D0 = I0.yAxis
      w0 = !!{}
      s0 = null
      W0 = null
      U0 = null
      C2i.a2i(1)
      var J0B = C2i.u2i(11, 3, 19, 6, 87)
      o0 = I0.left - +'0.5' * this.layout.candleWidth + this.micropixels - J0B
      for (var B0 = 0; B0 <= N0.length; B0++) {
        o0 += this.layout.candleWidth
        e0 = N0[B0]
        if (!e0) continue
        if (e0.projection) break
        if (e0.transform) {
          e0 = e0.transform
        }
        C0 = e0.cache
        C2i.a2i(2)
        p0 = C2i.G2i(l8, B0)
        if (p0 < I0.cacheLeft || p0 > I0.cacheRight || !C0.open) {
          C0.open = D0.semiLog ? this.pixelFromPrice(e0.Open, I0) : (D0.high - e0.Open) * D0.multiplier + D0.top
          C0.close = D0.semiLog ? this.pixelFromPrice(e0.Close, I0) : (D0.high - e0.Close) * D0.multiplier + D0.top
        }
        W0 = C0.close
        if (w0) {
          K0.moveTo(Math.floor(o0), C0.open)
          s0 = C0.open
          if (C0.close > C0.open) {
            U0 = 1
          } else {
            U0 = -1
          }
          w0 = !!0
        }
        if (U0 != -+'1' && C0.close < s0 && s0 < C0.open) {
          K0.lineTo(Math.floor(o0), s0)
          K0.strokeStyle = a0
          K0.lineWidth = X0
          K0.stroke()
          K0.closePath()
          K0.beginPath()
          U0 = -1
          K0.moveTo(Math.floor(o0), s0)
        } else if (U0 != 1 && C0.close > s0 && s0 > C0.open) {
          K0.lineTo(Math.floor(o0), s0)
          K0.strokeStyle = m0
          K0.lineWidth = P0
          K0.stroke()
          K0.closePath()
          K0.beginPath()
          U0 = 1
          K0.moveTo(Math.floor(o0), s0)
        }
        K0.lineTo(Math.floor(o0), C0.close)
        if (B0 + '1' * 1 < N0.length) {
          K0.lineTo(Math.floor(o0 + this.layout.candleWidth), C0.close)
          s0 = C0.open
        }
      }
      if (U0 == -1 || (U0 === null && W0 < s0)) {
        K0.strokeStyle = m0
        K0.lineWidth = P0
      } else {
        x7B = -718792563
        Q7B = 252512458
        Y7B = 2
        for (var h7B = '1' * 1; C2i.B7B(h7B.toString(), h7B.toString().length, 49866) !== x7B; h7B++) {
          K0.strokeStyle = a0
          K0.lineWidth = X0
          Y7B += 2
        }
        if (C2i.B7B(Y7B.toString(), Y7B.toString().length, 31375) !== Q7B) {
          K0.strokeStyle = a0
          K0.lineWidth = X0
        }
      }
      K0.stroke()
      K0.closePath()
      this.endClip()
      K0.lineWidth = 1
    }
    l0.ChartEngine.prototype.drawPointFigureChart = function(s8, B8, G8) {
      var r2i = r2bb
      var k8,
        I8,
        J8,
        f8,
        i8,
        d8,
        g8,
        y8,
        l6B,
        y6B,
        A6B,
        x8,
        H8,
        o6B,
        R6B,
        j6B,
        E8,
        Z8,
        C8,
        K8,
        c8,
        D8,
        r8,
        e8,
        U8,
        u8,
        A8,
        L8
      k8 = s8.chart
      this.startClip(s8.name)
      I8 = k8.dataSegment
      J8 = k8.context
      this.canvasColor(B8)
      f8 = this.canvasStyle(B8)
      i8 = parseInt(f8.paddingTop, 10)
      d8 = parseInt(f8.paddingBottom, 10)
      g8 = parseInt(f8.paddingLeft, +'10')
      y8 = parseInt(f8.paddingRight, 10)
      if (f8.width && parseInt(f8.width, 10) <= 25) {
        J8.lineWidth = Math.max(1, l0.stripPX(f8.width))
      } else {
        l6B = -+'1840233821'
        r2i.y2i(3)
        y6B = r2i.G2i('1144501224', 0)
        A6B = 2
        for (var S0B = 1; r2i.B7B(S0B.toString(), S0B.toString().length, 17880) !== l6B; S0B++) {
          J8.lineWidth = 3
          A6B += 2
        }
        if (r2i.B7B(A6B.toString(), A6B.toString().length, 79456) !== y6B) {
          J8.lineWidth = 3
        }
        r2i.y2i(3)
        J8.lineWidth = r2i.u2i('2', 0)
      }
      J8.beginPath()
      x8 = this.chart.pandf.box
      H8 = k8.dataSet.length - k8.scroll
      o6B = 1773092501
      R6B = -400043442
      j6B = 2
      for (var L6B = 1; r2i.B7B(L6B.toString(), L6B.toString().length, 72482) !== o6B; L6B++) {
        E8 = s8.yAxis
        c8 = this.layout.candleWidth
        j6B += 2
      }
      if (r2i.I7B(j6B.toString(), j6B.toString().length, 23992) !== R6B) {
        E8 = s8.yAxis
        c8 = this.layout.candleWidth
      }
      D8 = s8.left - c8 + this.micropixels - 1
      for (var o8 = 0; o8 < I8.length; o8++) {
        D8 += c8
        r8 = I8[o8]
        if (!r8) continue
        if (r8.projection) break
        if (r8.candleWidth) {
          c8 = r8.candleWidth
        }
        if (r8.transform) {
          r8 = r8.transform
        }
        if (
          G8 ==
            ((+'8090', '9210' - 0) < +'458.47'
              ? !''
              : (7363, 5749) >= ('1452' | 0)
              ? 'X'
              : (1630, 7230) <= 965.89
              ? 288.22
              : '171.15' - 0) &&
          r8.Open > r8.Close
        )
          continue
        else if (G8 == 'O' && r8.Open < r8.Close) continue
        e8 = r8.cache
        r2i.y2i(2)
        U8 = r2i.G2i(H8, o8)
        if (U8 < s8.cacheLeft || U8 > s8.cacheRight || !e8.open) {
          e8.open = E8.semiLog ? this.pixelFromPrice(r8.Open, s8) : (E8.high - r8.Open) * E8.multiplier + E8.top
          e8.close = E8.semiLog ? this.pixelFromPrice(r8.Close, s8) : (E8.high - r8.Close) * E8.multiplier + E8.top
        }
        u8 = Math.round(D8)
        r2i.a2i(2)
        A8 = Math.round(r2i.G2i(D8, c8))
        Z8 = Math.abs(Math.round((r8.Close - r8.Open) / x8))
        C8 = Math.abs((e8.open - e8.close) / Z8)
        r2i.a2i(4)
        L8 = r2i.G2i(2, C8)
        K8 = e8.open
        for (; Z8 >= 0; Z8--) {
          if (G8 == 'X') {
            r2i.a2i(2)
            J8.moveTo(r2i.G2i(u8, g8), r2i.u2i(L8, d8, K8, r2i.y2i(5)))
            r2i.a2i(6)
            J8.lineTo(r2i.G2i(y8, A8), r2i.G2i(i8, C8, K8, L8, r2i.a2i(7)))
            r2i.a2i(2)
            J8.moveTo(r2i.u2i(u8, g8), r2i.G2i(i8, C8, K8, L8, r2i.a2i(7)))
            r2i.a2i(6)
            J8.lineTo(r2i.G2i(y8, A8), r2i.G2i(L8, d8, K8, r2i.y2i(5)))
            K8 -= C8
          } else if (G8 == 'O') {
            r2i.y2i(8)
            J8.moveTo(r2i.u2i(2, A8, u8), r2i.u2i(K8, L8, i8, r2i.y2i(9)))
            r2i.y2i(2)
            J8.bezierCurveTo(
              r2i.u2i(A8, y8),
              r2i.u2i(K8, L8, i8, r2i.y2i(9)),
              r2i.G2i(A8, y8, r2i.y2i(2)),
              r2i.u2i(C8, L8, d8, K8, r2i.a2i(10)),
              r2i.G2i(2, A8, u8, r2i.y2i(8)),
              r2i.u2i(C8, L8, d8, K8, r2i.a2i(10)),
            )
            r2i.a2i(6)
            J8.bezierCurveTo(
              r2i.G2i(g8, u8),
              r2i.u2i(C8, L8, d8, K8, r2i.a2i(10)),
              r2i.u2i(g8, u8, r2i.y2i(6)),
              r2i.G2i(K8, L8, i8, r2i.y2i(9)),
              r2i.G2i(2, A8, u8, r2i.a2i(8)),
              r2i.G2i(K8, L8, i8, r2i.y2i(9)),
            )
            K8 += C8
          }
        }
      }
      J8.stroke()
      this.endClip()
      J8.lineWidth = 1
    }
    l0.calculateHeikinAshi = function(X8, q8) {
      var N2i = r2bb
      var t8, F8, O8, R8, P8, j8
      if (!q8.length) {
        return q8
      }
      t8 = []
      for (var Y8 = 0; Y8 < q8.length; Y8++) {
        F8 = q8[Y8]
        if (!F8) continue
        N2i.a2i(11)
        var P0B = N2i.G2i(6, 9, 15)
        O8 = t8[t8.length - P0B]
        if (!O8) {
          O8 = F8
        }
        N2i.a2i(12)
        var s0B = N2i.G2i(20, 30, 17, 5210, 11)
        R8 = (O8.Open + O8.Close) / s0B
        N2i.y2i(13)
        var i0B = N2i.u2i(8, 387, 15, 17)
        P8 = (F8.Open + F8.High + F8.Low + F8.Close) / i0B
        j8 = {
          DT: F8.DT,
          displayDate: F8.displayDate,
          Date: F8.Date,
          Open: R8,
          Close: P8,
          High: Math.max(F8.High, Math.max(R8, P8)),
          Low: Math.min(F8.Low, Math.min(R8, P8)),
          Volume: F8.Volume,
          iqPrevClose: O8.Close,
        }
        for (var N8 in F8) {
          if (!j8[N8] && j8[N8] !== '0' * 1) {
            j8[N8] = F8[N8]
          }
        }
        t8.push(j8)
      }
      return t8
    }
    l0.calculateKagi = function(h8, Q8, z8) {
      var t2i = r2bb
      var K7B, p7B, d7B, W8, v8, b8, w8
      if (!Q8.length) {
        return Q8
      }
      z8 = parseFloat(z8)
      h8.chart.defaultChartStyleConfig.kagi = h8.isDailyInterval(h8.layout.interval) ? +'0.04' : '0.004' - 0
      if (isNaN(z8) || z8 <= 0) {
        K7B = +'1926588575'
        t2i.y2i(3)
        p7B = t2i.u2i('1891256922', 0)
        d7B = 2
        for (var y7B = 1; t2i.B7B(y7B.toString(), y7B.toString().length, +'36509') !== K7B; y7B++) {
          z8 = h8.chart.defaultChartStyleConfig.kagi
          if (l0.Market.Symbology.isForexSymbol(h8.chart.symbol)) {
            z8 /= 4
          }
          h8.layout.kagi = null
          d7B += 2
        }
        if (t2i.I7B(d7B.toString(), d7B.toString().length, 22867) !== p7B) {
          z8 = h8.chart.defaultChartStyleConfig.kagi
          if (l0.Market.Symbology.isForexSymbol(h8.chart.symbol)) {
            z8 *= 5
          }
          h8.layout.kagi = 1
        }
      } else {
        z8 /= 100
      }
      W8 = []
      v8 = null
      for (var M8 = +'0'; M8 < Q8.length; M8++) {
        b8 = Q8[M8]
        if (!b8) continue
        if (!v8) {
          v8 = b8
          continue
        }
        if (v8.Open > v8.Close) {
          if (b8.Close > v8.Close * (1 + z8)) {
            b8.Open = v8.Close
          } else {
            if (v8.Close > b8.Close) {
              v8.Close = b8.Close
            }
            v8.Volume += b8.Volume
            if (M8 < Q8.length - 1) continue
          }
        } else if (v8.Open < v8.Close) {
          if (b8.Close < v8.Close * (1 - z8)) {
            b8.Open = v8.Close
          } else {
            if (v8.Close < b8.Close) {
              v8.Close = b8.Close
            }
            v8.Volume += b8.Volume
            if (M8 < Q8.length - 1) continue
          }
        } else {
          v8.Close = b8.Close
          v8.Volume += b8.Volume
          if (M8 < Q8.length - 1) continue
        }
        w8 = {
          DT: v8.DT,
          displayDate: v8.displayDate,
          Date: v8.Date,
          Open: v8.Open,
          Close: v8.Close,
          High: Math.max(v8.Open, v8.Close),
          Low: Math.min(v8.Open, v8.Close),
          Volume: v8.Volume,
          iqPrevClose: v8.iqPrevClose,
        }
        for (var m8 in b8) {
          if (!w8[m8] && w8[m8] !== 0) {
            w8[m8] = b8[m8]
          }
        }
        W8.push(w8)
        v8 = b8
      }
      return W8
    }
    l0.calculateLineBreak = function(E9, K9, p8) {
      var Q2i = r2bb
      var C6B, z6B, M6B, e6B, G6B, w6B, l9, J9, S8, n8, a8, T9
      if (!K9.length) {
        return K9
      }
      E9.chart.defaultChartStyleConfig.priceLines = 3
      C6B = -1544551205
      z6B = 650970915
      M6B = 2
      for (var k6B = 1; Q2i.I7B(k6B.toString(), k6B.toString().length, 17733) !== C6B; k6B++) {
        Q2i.a2i(6)
        p8 = parseInt(p8, Q2i.u2i(0, '10'))
        M6B += +'2'
      }
      if (Q2i.B7B(M6B.toString(), M6B.toString().length, 89897) !== z6B) {
        p8 = parseInt(p8, 65)
      }
      if (isNaN(p8) || p8 <= 0) {
        p8 = E9.chart.defaultChartStyleConfig.priceLines
        e6B = -1274878164
        G6B = 1228028559
        w6B = 2
        for (var u6B = 1; Q2i.I7B(u6B.toString(), u6B.toString().length, 44038) !== e6B; u6B++) {
          E9.layout.priceLines = 1
          w6B += 2
        }
        if (Q2i.B7B(w6B.toString(), w6B.toString().length, 39786) !== G6B) {
          E9.layout.priceLines = null
        }
      } else if (p8 > '10' - 0) {
        Q2i.a2i(3)
        E9.layout.priceLines = p8 = Q2i.G2i('10', 0)
      }
      l9 = []
      J9 = 0
      for (var r9 = 0; r9 < K9.length; r9++) {
        S8 = K9[r9]
        if (!S8) continue
        J9 += S8.Volume
        Q2i.y2i(14)
        var H0B = Q2i.G2i(115, 11, 12, 17)
        n8 = l9[l9.length - H0B]
        if (!n8) {
          n8 = { Open: S8.Open, Close: S8.Open }
        }
        a8 = {
          DT: S8.DT,
          displayDate: S8.displayDate,
          Date: S8.Date,
          Close: S8.Close,
          High: Math.max(S8.Close, Math.min(n8.Open, n8.Close)),
          Low: Math.min(S8.Close, Math.max(n8.Open, n8.Close)),
          Volume: J9,
          iqPrevClose: n8.Close,
        }
        for (var L9 = 0; L9 < p8; L9++) {
          Q2i.y2i(15)
          var n0B = Q2i.G2i(3, 18, 55)
          T9 = l9[l9.length - n0B - L9]
          if (T9) {
            if (T9.Open >= S8.Close && S8.Close >= T9.Close) {
              a8 = null
              break
            } else if (T9.Open <= S8.Close && S8.Close <= T9.Close) {
              a8 = null
              break
            }
          }
        }
        if (a8) {
          if (a8.Close < n8.Close) {
            a8.Open = Math.min(n8.Open, n8.Close)
          } else {
            a8.Open = Math.max(n8.Open, n8.Close)
          }
          for (var V9 in S8) {
            if (!a8[V9] && a8[V9] !== 0) {
              a8[V9] = S8[V9]
            }
          }
          l9.push(a8)
          J9 = 0
        }
      }
      return l9
    }
    l0.calculateRenkoBars = function(e9, i9, C9) {
      var g2i = r2bb
      var D9, c9, k9, y9, A7B, U6B, S6B, o9, O6B, V6B, b6B, A9, u9, s9, f9, g9
      function Z9(G9, H9, x9) {
        var U9
        U9 = {
          DT: G9.DT,
          displayDate: G9.displayDate,
          Date: G9.Date,
          Open: H9,
          Close: x9,
          High: Math.max(H9, x9),
          Low: Math.min(H9, x9),
          Volume: 0,
          iqPrevClose: H9,
        }
        for (var I9 in G9) {
          if (!U9[I9] && U9[I9] !== 0) {
            U9[I9] = G9[I9]
          }
        }
        o9.push(U9)
      }
      if (!i9.length) {
        return i9
      }
      D9 = Math.min(300, i9.length)
      c9 = e9.determineMinMax(i9.slice(i9.length - D9), ['Close', 'High', 'Low'])
      k9 = c9[+'1'] - c9[+'0']
      y9 = e9.panels[e9.chart.name].height
      g2i.a2i(5)
      var v0B = g2i.u2i(4, 10, 10006)
      g2i.a2i(16)
      var f0B = g2i.u2i(20, 3, 540)
      g2i.y2i(5)
      var o0B = g2i.u2i(13, 9, 9996)
      e9.chart.defaultChartStyleConfig.renko = Math.floor((v0B * k9) / (y9 / f0B)) / o0B
      if (isNaN(C9) || C9 <= 0) {
        C9 = e9.chart.defaultChartStyleConfig.renko
        e9.layout.renko = null
      } else {
        A7B = -1108747980
        U6B = 94016760
        S6B = 2
        for (var N6B = 1; g2i.B7B(N6B.toString(), N6B.toString().length, 57426) !== A7B; N6B++) {
          g2i.y2i(17)
          C9 = Math.max(C9, g2i.u2i(k9, y9))
          S6B += 2
        }
        if (g2i.B7B(S6B.toString(), S6B.toString().length, 34483) !== U6B) {
          g2i.a2i(17)
          C9 = Math.max(C9, g2i.G2i(k9, y9))
        }
        g2i.y2i(4)
        C9 = Math.max(C9, g2i.u2i(y9, k9))
      }
      o9 = []
      O6B = -420667545
      g2i.a2i(3)
      V6B = -g2i.u2i('317635641', 0)
      b6B = 2
      for (var D6B = 1; g2i.B7B(D6B.toString(), D6B.toString().length, 96363) !== O6B; D6B++) {
        A9 = 1
        g2i.y2i(6)
        u9 = g2i.u2i(0, '1')
        s9 = 1
        b6B += 2
      }
      if (g2i.I7B(b6B.toString(), b6B.toString().length, +'8988') !== V6B) {
        A9 = null
        u9 = null
        s9 = null
      }
      for (var d9 = 0; d9 < i9.length; d9++) {
        f9 = i9[d9]
        if (!f9) continue
        if (A9 === null) {
          g9 = Math.floor(f9.Open / C9) * C9
          A9 = isNaN(g9) ? f9.Open : g9
          g2i.y2i(6)
          u9 = g2i.u2i(C9, A9)
          g2i.y2i(2)
          s9 = g2i.u2i(A9, C9)
        }
        while (!0) {
          if (f9.Close <= u9) {
            A9 = u9
            g2i.a2i(2)
            Z9(f9, g2i.u2i(u9, C9), A9)
            g2i.y2i(18)
            s9 = g2i.G2i(2, C9, u9)
            g2i.a2i(6)
            u9 = g2i.u2i(C9, u9)
          } else if (f9.Close >= s9) {
            A9 = s9
            g2i.y2i(6)
            Z9(f9, g2i.u2i(C9, s9), A9)
            g2i.a2i(15)
            u9 = g2i.u2i(2, C9, s9)
            g2i.a2i(2)
            s9 = g2i.G2i(s9, C9)
          } else break
        }
      }
      return o9
    }
    l0.calculateRangeBars = function(P9, O9, j9) {
      var p2i = r2bb
      var c0B, m9, h9, Z0B, N0B, C0B, b9, z9, Q9, F9, Y9, B9, v9, t9, X9, q9, M9
      c0B = 'Cl'
      c0B += 'os'
      c0B += 'e'
      if (!O9.length) {
        return O9
      }
      function N9(T2b, l2b, V2b) {
        var k0B, T0B
        while (+'1') {
          k0B = 'undefine'
          k0B += 'd'
          if (F9 < l2b) {
            p2i.a2i(2)
            Y9 = p2i.G2i(F9, j9)
            if (l2b < Y9) {
              if (V2b) {
                w9(T2b, F9, l2b)
              }
              return
            }
          } else {
            p2i.a2i(6)
            Y9 = p2i.u2i(j9, F9)
            if (l2b > Y9) {
              if (V2b) {
                w9(T2b, F9, l2b)
              }
              return
            }
          }
          w9(T2b, F9, Y9)
          if (typeof Y9 == k0B || typeof F9 == 'undefined') {
            T0B = 'Uh oh'
            T0B += ' undefined in calculateRangeBars:processMove'
            console.log(T0B)
            return
          }
          F9 = Y9
        }
      }
      m9 = Math.min(300, O9.length)
      h9 = P9.determineMinMax(O9.slice(O9.length - m9), [c0B, 'High', 'Low'])
      p2i.a2i(3)
      Z0B = p2i.u2i('1458322254', 0)
      N0B = -1169776676
      C0B = 2
      for (var M0B = 1; p2i.B7B(M0B.toString(), M0B.toString().length, +'51757') !== Z0B; M0B++) {
        b9 = h9[1] - h9[0]
        z9 = P9.panels[P9.chart.name].height
        p2i.y2i(19)
        var L0B = p2i.u2i(16, 13, 11, 80000, 8)
        P9.chart.defaultChartStyleConfig.range = Math.floor((10000 * b9) / (z9 / ('30' * 1))) / L0B
        C0B += 2
      }
      if (p2i.B7B(C0B.toString(), C0B.toString().length, 56039) !== N0B) {
        b9 = h9[7] * h9['5' - 0]
        z9 = P9.panels[P9.chart.name].height
        p2i.y2i(2)
        var w0B = p2i.G2i(12, 17)
        P9.chart.defaultChartStyleConfig.range = Math.floor((54 % b9) + (z9 - w0B)) + +'52274'
      }
      if (isNaN(j9) || j9 < 0) {
        j9 = P9.chart.defaultChartStyleConfig.range
        P9.layout.range = null
      } else {
        p2i.a2i(4)
        j9 = Math.max(j9, p2i.u2i(z9, b9))
      }
      Q9 = []
      function w9(W9, a9, p9) {
        var S9
        S9 = {
          DT: W9.DT,
          displayDate: W9.displayDate,
          Date: W9.Date,
          Open: a9,
          Close: p9,
          High: Math.max(a9, p9),
          Low: Math.min(a9, p9),
          Volume: 0,
          iqPrevClose: a9,
        }
        for (var n9 in W9) {
          if (!S9[n9] && S9[n9] !== 0) {
            S9[n9] = W9[n9]
          }
        }
        Q9.push(S9)
      }
      F9 = null
      for (var R9 = +'0'; R9 < O9.length; R9++) {
        B9 = O9[R9]
        if (!B9) continue
        v9 = B9.Close
        t9 = B9.Open
        X9 = B9.High
        q9 = B9.Low
        if (!t9) {
          t9 = v9
        }
        if (F9 === null) {
          M9 = Math.floor(t9 / j9) * j9
          F9 = isNaN(M9) ? t9 : M9
        } else {
          N9(O9[R9 - 1], t9)
        }
        if (X9 - t9 < t9 - q9) {
          if (X9) {
            N9(B9, X9)
          }
          if (q9) {
            N9(B9, q9)
          }
          N9(B9, v9, R9 == O9.length - 1)
        } else {
          if (q9) {
            N9(B9, q9)
          }
          if (X9) {
            N9(B9, X9)
          }
          N9(B9, v9, R9 == O9.length - 1)
        }
      }
      return Q9
    }
    l0.calculatePointFigure = function(L2b, f2b, i2b) {
      var O2i = r2bb
      var r2b, E2b, F6B, W6B, x6B, r6B, h6B, K6B, u2b, t6B, I6B, B6B, s2b, A2b, C2b, K2b, J2b
      if (!f2b.length) {
        return f2b
      }
      L2b.chart.defaultChartStyleConfig.box = 1
      L2b.chart.defaultChartStyleConfig.reversal = 3
      if (!i2b) {
        i2b = {}
      }
      r2b = i2b.box
      if (!r2b) {
        if (L2b.layout.pandf) {
          L2b.layout.pandf.box = null
        }
        r2b = L2b.chart.defaultChartStyleConfig.box
        E2b = f2b[f2b.length - +'1'].Close
        if (E2b) {
          if (E2b < 0.25) {
            r2b = 0.0625
          } else if (E2b < 1) {
            O2i.y2i(6)
            r2b = O2i.u2i(0, '0.125')
          } else if (E2b < 5) {
            r2b = 0.25
          } else if (E2b < '20' - 0) {
            r2b = 0.5
          } else if (E2b < 100) {
            r2b = 1
          } else if (E2b < 200) {
            r2b = 2
          } else if (E2b < 500) {
            r2b = 4
          } else if (E2b < 1000) {
            r2b = 5
          } else if (E2b < 25000) {
            r2b = 50
          } else {
            r2b = 500
          }
        }
        if (!L2b.isDailyInterval(L2b.layout.interval)) {
          r2b /= 10
        }
        if (l0.Market.Symbology.isForexSymbol(L2b.chart.symbol)) {
          if (E2b) {
            O2i.a2i(0)
            F6B = -O2i.G2i('1270982073', 1)
            W6B = -2028792592
            x6B = 2
            for (var Y6B = 1; O2i.I7B(Y6B.toString(), Y6B.toString().length, '58135' | 0) !== F6B; Y6B++) {
              if (E2b > '2' * 1) {
                r2b = 38387
              } else if (E2b >= 7) {
                r2b = 83824
              } else if (E2b <= 89) {
                r2b = 8922
              } else if (E2b > 805) {
                O2i.a2i(3)
                r2b = O2i.u2i('859', 0)
              }
              x6B += 2
            }
            if (O2i.B7B(x6B.toString(), x6B.toString().length, 27766) !== W6B) {
              if (E2b < 1) {
                O2i.a2i(0)
                r2b = O2i.G2i('0.001', 1)
              } else if (E2b < 2) {
                r2b = 0.002
              } else if (E2b < 50) {
                r2b = 0.02
              } else if (E2b < 200) {
                r2b = 0.2
              }
            }
          }
          r6B = 38413459
          h6B = -949557249
          K6B = 2
          for (var d6B = 1; O2i.B7B(d6B.toString(), d6B.toString().length, 26242) !== r6B; d6B++) {
            if (L2b.isDailyInterval(L2b.layout.interval)) {
              r2b += 14
            }
            K6B += 2
          }
          if (O2i.I7B(K6B.toString(), K6B.toString().length, 1488) !== h6B) {
            if (L2b.isDailyInterval(L2b.layout.interval)) {
              r2b += 14
            }
          }
          if (L2b.isDailyInterval(L2b.layout.interval)) {
            r2b *= 10
          }
        }
        L2b.chart.defaultChartStyleConfig.box = r2b
      }
      r2b = parseFloat(r2b)
      if (isNaN(r2b) || r2b <= 0) {
        if (L2b.layout.pandf) {
          L2b.layout.pandf.box = null
        }
        L2b.chart.defaultChartStyleConfig.box = r2b = 1
      }
      u2b = parseInt(i2b.reversal, 10)
      if (isNaN(u2b) || u2b <= 0) {
        t6B = -367670440
        I6B = -580097811
        B6B = 2
        for (var a6B = 1; O2i.B7B(a6B.toString(), a6B.toString().length, +'60867') !== t6B; a6B++) {
          if (L2b.layout.pandf) {
            L2b.layout.pandf.reversal = 1
          }
          B6B += +'2'
        }
        if (O2i.B7B(B6B.toString(), B6B.toString().length, 5296) !== I6B) {
          if (L2b.layout.pandf) {
            L2b.layout.pandf.reversal = 7
          }
        }
        if (L2b.layout.pandf) {
          L2b.layout.pandf.reversal = null
        }
        u2b = L2b.chart.defaultChartStyleConfig.reversal
      }
      function d2b(k2b, c2b) {
        var T6B, J6B, m6B
        for (var o2b in k2b) {
          if (!c2b[o2b] && c2b[o2b] !== 0) {
            c2b[o2b] = k2b[o2b]
          }
        }
        T6B = -940157951
        J6B = -1843351930
        m6B = +'2'
        for (var s6B = 1; O2i.I7B(s6B.toString(), s6B.toString().length, 20729) !== T6B; s6B++) {
          return c2b
        }
        if (O2i.B7B(m6B.toString(), m6B.toString().length, 12241) !== J6B) {
          return c2b
        }
      }
      L2b.chart.pandf = { box: r2b, reversal: u2b }
      u2b *= r2b
      s2b = []
      A2b = 0
      for (var e2b = 0; e2b < f2b.length; e2b++) {
        K2b = f2b[e2b]
        if (!K2b) continue
        A2b += K2b.Volume
        if (!s2b.length) {
          C2b = {
            DT: K2b.DT,
            displayDate: K2b.displayDate,
            Date: K2b.Date,
            Open: Math.floor(K2b.High / r2b) * r2b,
            Close: Math.ceil(K2b.Low / r2b) * r2b,
            High: K2b.High,
            Low: K2b.Low,
            Volume: A2b,
            iqPrevClose: K2b.High + r2b,
          }
          C2b = d2b(K2b, C2b)
          s2b.push(C2b)
          A2b = 0
          continue
        }
        O2i.a2i(6)
        var g0B = O2i.G2i(14, 15)
        J2b = s2b[s2b.length - g0B]
        if (J2b.iqPrevClose > J2b.Close) {
          if (K2b.Low <= J2b.Close - r2b) {
            J2b.Close = Math.ceil(K2b.Low / r2b) * r2b
            J2b.High = Math.max(K2b.High, J2b.High)
            J2b.Low = Math.min(K2b.Low, J2b.Low)
            J2b.Volume += A2b
          } else if (K2b.High >= J2b.Close + u2b) {
            C2b = {
              DT: K2b.DT,
              Date: K2b.Date,
              Open: J2b.Close + r2b,
              Close: Math.floor(K2b.High / r2b) * r2b,
              High: K2b.High,
              Low: K2b.Low,
              Volume: A2b,
              iqPrevClose: J2b.Close,
            }
            C2b = d2b(K2b, C2b)
            s2b.push(C2b)
          } else {
            J2b.High = Math.max(K2b.High, J2b.High)
            J2b.Low = Math.min(K2b.Low, J2b.Low)
            J2b.Volume += A2b
          }
          A2b = 0
        } else if (J2b.iqPrevClose < J2b.Close) {
          if (K2b.High >= J2b.Close + r2b) {
            J2b.Close = Math.floor(K2b.High / r2b) * r2b
            J2b.High = Math.max(K2b.High, J2b.High)
            J2b.Low = Math.min(K2b.Low, J2b.Low)
            J2b.Volume += A2b
          } else if (K2b.Low <= J2b.Close - u2b) {
            C2b = {
              DT: K2b.DT,
              Date: K2b.Date,
              Open: J2b.Close - r2b,
              Close: Math.ceil(K2b.Low / r2b) * r2b,
              High: K2b.High,
              Low: K2b.Low,
              Volume: A2b,
              iqPrevClose: J2b.Close,
            }
            C2b = d2b(K2b, C2b)
            s2b.push(C2b)
          } else {
            J2b.High = Math.max(K2b.High, J2b.High)
            J2b.Low = Math.min(K2b.Low, J2b.Low)
            J2b.Volume += A2b
          }
          O2i.a2i(0)
          A2b = O2i.G2i('0', 1)
        }
      }
      return s2b
    }
    return T0
  }
  t2zz.D68 = function() {
    return typeof t2zz.Q68.n1 === 'function' ? t2zz.Q68.n1.apply(t2zz.Q68, arguments) : t2zz.Q68.n1
  }
  t2zz.U2E = function() {
    return typeof t2zz.P2E.n1 === 'function' ? t2zz.P2E.n1.apply(t2zz.P2E, arguments) : t2zz.P2E.n1
  }
  t2zz.p9e = function() {
    return typeof t2zz.s9e.F03 === 'function' ? t2zz.s9e.F03.apply(t2zz.s9e, arguments) : t2zz.s9e.F03
  }
  t2zz.e9x = function() {
    return typeof t2zz.G9x.F03 === 'function' ? t2zz.G9x.F03.apply(t2zz.G9x, arguments) : t2zz.G9x.F03
  }
  t2zz.b03 = function() {
    return typeof t2zz.t03.n1 === 'function' ? t2zz.t03.n1.apply(t2zz.t03, arguments) : t2zz.t03.n1
  }
  t2zz.g03 = function() {
    return typeof t2zz.t03.r0 === 'function' ? t2zz.t03.r0.apply(t2zz.t03, arguments) : t2zz.t03.r0
  }
  t2zz.Q68 = (function() {
    var G68 = function(b68, A68) {
        var j68 = A68 & 0xffff
        var y68 = A68 - j68
        return (((y68 * b68) | 0) + ((j68 * b68) | 0)) | 0
      },
      x68 = function(M68, n68, I68) {
        var Z68 = 0xcc9e2d51,
          T68 = 0x1b873593
        var a68 = I68
        var o68 = n68 & ~0x3
        for (var z68 = 0; z68 < o68; z68 += 4) {
          var v68 =
            (M68.charCodeAt(z68) & 0xff) |
            ((M68.charCodeAt(z68 + 1) & 0xff) << 8) |
            ((M68.charCodeAt(z68 + 2) & 0xff) << 16) |
            ((M68.charCodeAt(z68 + 3) & 0xff) << 24)
          v68 = G68(v68, Z68)
          v68 = ((v68 & 0x1ffff) << 15) | (v68 >>> 17)
          v68 = G68(v68, T68)
          a68 ^= v68
          a68 = ((a68 & 0x7ffff) << 13) | (a68 >>> 19)
          a68 = (a68 * 5 + 0xe6546b64) | 0
        }
        v68 = 0
        switch (n68 % 4) {
          case 3:
            v68 = (M68.charCodeAt(o68 + 2) & 0xff) << 16
          case 2:
            v68 |= (M68.charCodeAt(o68 + 1) & 0xff) << 8
          case 1:
            v68 |= M68.charCodeAt(o68) & 0xff
            v68 = G68(v68, Z68)
            v68 = ((v68 & 0x1ffff) << 15) | (v68 >>> 17)
            v68 = G68(v68, T68)
            a68 ^= v68
        }
        a68 ^= n68
        a68 ^= a68 >>> 16
        a68 = G68(a68, 0x85ebca6b)
        a68 ^= a68 >>> 13
        a68 = G68(a68, 0xc2b2ae35)
        a68 ^= a68 >>> 16
        return a68
      }
    return { r0: x68 }
  })()
  function t2zz() {}
  t2zz.y03 = function() {
    return typeof t2zz.t03.A03 === 'function' ? t2zz.t03.A03.apply(t2zz.t03, arguments) : t2zz.t03.A03
  }
  t2zz.Q9x = function() {
    return typeof t2zz.G9x.I8x === 'function' ? t2zz.G9x.I8x.apply(t2zz.G9x, arguments) : t2zz.G9x.I8x
  }
  t2zz.S9e = function() {
    return typeof t2zz.s9e.r0 === 'function' ? t2zz.s9e.r0.apply(t2zz.s9e, arguments) : t2zz.s9e.r0
  }
  t2zz.Z9x = function() {
    return typeof t2zz.G9x.A1 === 'function' ? t2zz.G9x.A1.apply(t2zz.G9x, arguments) : t2zz.G9x.A1
  }
  t2zz.w9x = function() {
    return typeof t2zz.G9x.J9e === 'function' ? t2zz.G9x.J9e.apply(t2zz.G9x, arguments) : t2zz.G9x.J9e
  }
  t2zz.c03 = function() {
    return typeof t2zz.t03.F03 === 'function' ? t2zz.t03.F03.apply(t2zz.t03, arguments) : t2zz.t03.F03
  }
  t2zz.L03 = function() {
    return typeof t2zz.t03.A1 === 'function' ? t2zz.t03.A1.apply(t2zz.t03, arguments) : t2zz.t03.A1
  }
  t2zz.X68 = function() {
    return typeof t2zz.Q68.r0 === 'function' ? t2zz.Q68.r0.apply(t2zz.Q68, arguments) : t2zz.Q68.r0
  }
  t2zz.G9x = (function(Y8x, e8x) {
    var y9x = 2
    while (y9x !== 10) {
      switch (y9x) {
        case 3:
          Q8x = typeof Y8x
          y9x = 9
          break
        case 8:
          y9x = !i8x-- ? 7 : 6
          break
        case 12:
          w8x = w8x(new p8x[e8x[0]]()[e8x[1]]())
          y9x = 11
          break
        case 14:
          e8x = e8x.map(function(z9x) {
            var a9x = 2
            while (a9x !== 13) {
              switch (a9x) {
                case 5:
                  S9x = ''
                  a9x = 4
                  break
                case 9:
                  S9x += p8x[n8x][O8x](z9x[V9x] + 116)
                  a9x = 8
                  break
                case 1:
                  a9x = !i8x-- ? 5 : 4
                  break
                case 2:
                  var S9x
                  a9x = 1
                  break
                case 7:
                  a9x = !S9x ? 6 : 14
                  break
                case 4:
                  var V9x = 0
                  a9x = 3
                  break
                case 8:
                  V9x++
                  a9x = 3
                  break
                case 6:
                  return
                  break
                case 3:
                  a9x = V9x < z9x.length ? 9 : 7
                  break
                case 14:
                  return S9x
                  break
              }
            }
          })
          y9x = 13
          break
        case 5:
          p8x = e8x.filter.constructor(Y8x)()
          y9x = 4
          break
        case 4:
          y9x = !i8x-- ? 3 : 9
          break
        case 2:
          var p8x, Q8x, n8x, i8x
          y9x = 1
          break
        case 6:
          y9x = !i8x-- ? 14 : 13
          break
        case 7:
          n8x = Q8x.replace(new p8x[F8x]("^['-|]"), 'S')
          y9x = 6
          break
        case 9:
          var O8x = 'fromCharCode',
            F8x = 'RegExp'
          y9x = 8
          break
        case 1:
          y9x = !i8x-- ? 5 : 4
          break
        case 13:
          y9x = !i8x-- ? 12 : 11
          break
        case 11:
          return {
            I8x: function(u9x, R9x) {
              var v9x = 2
              while (v9x !== 16) {
                switch (v9x) {
                  case 18:
                    x9x = 1
                    v9x = 10
                    break
                  case 14:
                    M9x++
                    v9x = 3
                    break
                  case 11:
                    var x9x = 2
                    v9x = 10
                    break
                  case 17:
                    return o9x ? b9x : !b9x
                    break
                  case 19:
                    ;(function() {
                      var t9x = 2
                      while (t9x !== 38) {
                        switch (t9x) {
                          case 23:
                            var c9x = m9x
                            c9x += W9x
                            c9x += K9x
                            t9x = 35
                            break
                          case 29:
                            t9x = P9x === 23 ? 28 : 43
                            break
                          case 16:
                            t9x = P9x === 2 ? 15 : 24
                            break
                          case 30:
                            P9x = 23
                            t9x = 1
                            break
                          case 25:
                            P9x = 4
                            t9x = 1
                            break
                          case 35:
                            P9x = 16
                            t9x = 1
                            break
                          case 1:
                            t9x = P9x !== 22 ? 5 : 38
                            break
                          case 34:
                            t9x = P9x === 26 ? 33 : 29
                            break
                          case 14:
                            P9x = 14
                            t9x = 1
                            break
                          case 42:
                            c9x += g9x
                            c9x += d9x
                            c9x += q9x
                            t9x = 39
                            break
                          case 33:
                            c9x += W9x
                            c9x += g9x
                            t9x = 31
                            break
                          case 19:
                            B9x += g9x
                            B9x += K9x
                            t9x = 17
                            break
                          case 2:
                            var P9x = 2
                            t9x = 1
                            break
                          case 39:
                            P9x = 26
                            t9x = 1
                            break
                          case 12:
                            B9x += g9x
                            B9x += d9x
                            B9x += q9x
                            B9x += W9x
                            t9x = 19
                            break
                          case 31:
                            c9x += K9x
                            t9x = 30
                            break
                          case 13:
                            t9x = P9x === 14 ? 12 : 16
                            break
                          case 15:
                            var q9x = 'i'
                            var d9x = 'f'
                            var g9x = 'e'
                            t9x = 25
                            break
                          case 43:
                            t9x = P9x === 16 ? 42 : 1
                            break
                          case 24:
                            t9x = P9x === 19 ? 23 : 34
                            break
                          case 8:
                            var B9x = m9x
                            B9x += W9x
                            B9x += K9x
                            t9x = 14
                            break
                          case 5:
                            t9x = P9x === 4 ? 4 : 13
                            break
                          case 28:
                            var j9x = typeof window !== c9x ? window : typeof global !== B9x ? global : this
                            t9x = 44
                            break
                          case 44:
                            P9x = 22
                            t9x = 1
                            break
                          case 4:
                            var K9x = 'd'
                            var W9x = 'n'
                            var m9x = 'u'
                            t9x = 8
                            break
                          case 17:
                            P9x = 19
                            t9x = 1
                            break
                        }
                      }
                    })()
                    v9x = 18
                    break
                  case 3:
                    v9x = M9x < u9x[e8x[5]] ? 9 : 12
                    break
                  case 20:
                    v9x = x9x === 2 ? 19 : 10
                    break
                  case 1:
                    R9x = p8x[e8x[4]]
                    v9x = 5
                    break
                  case 9:
                    var N9x = R9x(u9x[e8x[2]](M9x), 16)[e8x[3]](2)
                    var L9x = N9x[e8x[2]](N9x[e8x[5]] - 1)
                    v9x = 7
                    break
                  case 2:
                    v9x = !i8x-- ? 1 : 5
                    break
                  case 4:
                    var b9x = w8x
                    v9x = 3
                    break
                  case 10:
                    v9x = x9x !== 1 ? 20 : 17
                    break
                  case 13:
                    o9x = o9x ^ L9x
                    v9x = 14
                    break
                  case 6:
                    o9x = L9x
                    v9x = 14
                    break
                  case 7:
                    v9x = M9x === 0 ? 6 : 13
                    break
                  case 5:
                    var o9x,
                      M9x = 0
                    v9x = 4
                    break
                  case 12:
                    v9x = !b9x ? 11 : 17
                    break
                }
              }
            },
          }
          break
      }
    }
    function w8x(E8x) {
      var f9x = 2
      while (f9x !== 15) {
        switch (f9x) {
          case 13:
            r8x = e8x[7]
            f9x = 12
            break
          case 7:
            f9x = !i8x-- ? 6 : 14
            break
          case 8:
            k9x = e8x[6]
            f9x = 7
            break
          case 3:
            J8x = 26
            f9x = 9
            break
          case 5:
            D9x = p8x[e8x[4]]
            f9x = 4
            break
          case 9:
            f9x = !i8x-- ? 8 : 7
            break
          case 6:
            s8x = k9x && D9x(k9x, J8x)
            f9x = 14
            break
          case 11:
            h8x = (r8x || r8x === 0) && D9x(r8x, J8x)
            f9x = 10
            break
          case 2:
            var C8x, J8x, k9x, s8x, r8x, h8x, D9x
            f9x = 1
            break
          case 18:
            f9x = h8x >= 0 ? 17 : 16
            break
          case 19:
            return C8x
            break
          case 14:
            f9x = !i8x-- ? 13 : 12
            break
          case 10:
            f9x = h8x >= 0 && s8x >= 0 ? 20 : 18
            break
          case 20:
            C8x = E8x - h8x > J8x && s8x - E8x > J8x
            f9x = 19
            break
          case 12:
            f9x = !i8x-- ? 11 : 10
            break
          case 1:
            f9x = !i8x-- ? 5 : 4
            break
          case 17:
            C8x = E8x - h8x > J8x
            f9x = 19
            break
          case 16:
            C8x = s8x - E8x > J8x
            f9x = 19
            break
          case 4:
            f9x = !i8x-- ? 3 : 9
            break
        }
      }
    }
  })('return this', [
    [-48, -19, 0, -15],
    [-13, -15, 0, -32, -11, -7, -15],
    [-17, -12, -19, -2, -51, 0],
    [0, -5, -33, 0, -2, -11, -6, -13],
    [-4, -19, -2, -1, -15, -43, -6, 0],
    [-8, -15, -6, -13, 0, -12],
    [-61, -16, -18, -59, -14, -9, -63, -60, -17],
    [],
  ])
  t2zz.Y9x = function() {
    return typeof t2zz.G9x.I8x === 'function' ? t2zz.G9x.I8x.apply(t2zz.G9x, arguments) : t2zz.G9x.I8x
  }
  t2zz.H2E = function() {
    return typeof t2zz.P2E.A1 === 'function' ? t2zz.P2E.A1.apply(t2zz.P2E, arguments) : t2zz.P2E.A1
  }
  t2zz.Z9e = function() {
    return typeof t2zz.s9e.n1 === 'function' ? t2zz.s9e.n1.apply(t2zz.s9e, arguments) : t2zz.s9e.n1
  }
  t2zz.A9x = function() {
    return typeof t2zz.G9x.r0 === 'function' ? t2zz.G9x.r0.apply(t2zz.G9x, arguments) : t2zz.G9x.r0
  }
  t2zz.k9e = function() {
    return typeof t2zz.s9e.A1 === 'function' ? t2zz.s9e.A1.apply(t2zz.s9e, arguments) : t2zz.s9e.A1
  }
  t2zz.d9e = function() {
    return typeof t2zz.s9e.J9e === 'function' ? t2zz.s9e.J9e.apply(t2zz.s9e, arguments) : t2zz.s9e.J9e
  }
  t2zz.X9x = function() {
    return typeof t2zz.G9x.A03 === 'function' ? t2zz.G9x.A03.apply(t2zz.G9x, arguments) : t2zz.G9x.A03
  }
  t2zz.U9x = function() {
    return typeof t2zz.G9x.n1 === 'function' ? t2zz.G9x.n1.apply(t2zz.G9x, arguments) : t2zz.G9x.n1
  }
  t2zz.s9e = (function() {
    var m9e = 2
    while (m9e !== 1) {
      switch (m9e) {
        case 2:
          return {
            J9e: function() {
              var b9e = 2
              while (b9e !== 9) {
                switch (b9e) {
                  case 4:
                    ;(function() {
                      var x9e = 2
                      while (x9e !== 38) {
                        switch (x9e) {
                          case 2:
                            var j9e = 2
                            x9e = 1
                            break
                          case 4:
                            z9e += B9e
                            z9e += r9e
                            z9e += G9e
                            var y9e = f9e
                            x9e = 7
                            break
                          case 41:
                            y9e += G9e
                            var E9e = typeof window !== y9e ? window : typeof global !== z9e ? global : this
                            x9e = 39
                            break
                          case 21:
                            x9e = j9e === 18 ? 35 : 33
                            break
                          case 33:
                            x9e = j9e === 17 ? 32 : 28
                            break
                          case 28:
                            x9e = j9e === 27 ? 44 : 1
                            break
                          case 10:
                            j9e = 11
                            x9e = 1
                            break
                          case 24:
                            var z9e = f9e
                            z9e += B9e
                            x9e = 22
                            break
                          case 29:
                            j9e = 27
                            x9e = 1
                            break
                          case 20:
                            x9e = j9e === 2 ? 19 : 25
                            break
                          case 26:
                            j9e = 8
                            x9e = 1
                            break
                          case 5:
                            x9e = j9e === 11 ? 4 : 6
                            break
                          case 6:
                            x9e = j9e === 6 ? 14 : 20
                            break
                          case 1:
                            x9e = j9e !== 22 ? 5 : 38
                            break
                          case 19:
                            var g9e = 'i'
                            var P9e = 'f'
                            var r9e = 'e'
                            var G9e = 'd'
                            var B9e = 'n'
                            var f9e = 'u'
                            x9e = 26
                            break
                          case 35:
                            y9e += B9e
                            x9e = 34
                            break
                          case 39:
                            j9e = 22
                            x9e = 1
                            break
                          case 32:
                            y9e += G9e
                            y9e += r9e
                            y9e += P9e
                            x9e = 29
                            break
                          case 44:
                            y9e += g9e
                            y9e += B9e
                            y9e += r9e
                            x9e = 41
                            break
                          case 14:
                            z9e += G9e
                            z9e += r9e
                            z9e += P9e
                            z9e += g9e
                            x9e = 10
                            break
                          case 7:
                            j9e = 18
                            x9e = 1
                            break
                          case 22:
                            j9e = 6
                            x9e = 1
                            break
                          case 25:
                            x9e = j9e === 8 ? 24 : 21
                            break
                          case 34:
                            j9e = 17
                            x9e = 1
                            break
                        }
                      }
                    })()
                    b9e = 3
                    break
                  case 2:
                    var L9e = 2
                    b9e = 1
                    break
                  case 1:
                    b9e = L9e !== 1 ? 5 : 9
                    break
                  case 3:
                    L9e = 1
                    b9e = 1
                    break
                  case 5:
                    b9e = L9e === 2 ? 4 : 1
                    break
                }
              }
            },
          }
          break
      }
    }
  })()
  t2zz.f68 = function() {
    return typeof t2zz.Q68.n1 === 'function' ? t2zz.Q68.n1.apply(t2zz.Q68, arguments) : t2zz.Q68.n1
  }
  t2zz.U03 = function() {
    return typeof t2zz.t03.n1 === 'function' ? t2zz.t03.n1.apply(t2zz.t03, arguments) : t2zz.t03.n1
  }
  t2zz.Y9e = function() {
    return typeof t2zz.s9e.A03 === 'function' ? t2zz.s9e.A03.apply(t2zz.s9e, arguments) : t2zz.s9e.A03
  }
  t2zz.E68 = function() {
    return typeof t2zz.Q68.r0 === 'function' ? t2zz.Q68.r0.apply(t2zz.Q68, arguments) : t2zz.Q68.r0
  }
  t2zz.l9x = function() {
    return typeof t2zz.G9x.A1 === 'function' ? t2zz.G9x.A1.apply(t2zz.G9x, arguments) : t2zz.G9x.A1
  }
  t2zz.I9x = function() {
    return typeof t2zz.G9x.A03 === 'function' ? t2zz.G9x.A03.apply(t2zz.G9x, arguments) : t2zz.G9x.A03
  }
  t2zz.a9e = function() {
    return typeof t2zz.s9e.n1 === 'function' ? t2zz.s9e.n1.apply(t2zz.s9e, arguments) : t2zz.s9e.n1
  }
  t2zz.X9e = function() {
    return typeof t2zz.s9e.A1 === 'function' ? t2zz.s9e.A1.apply(t2zz.s9e, arguments) : t2zz.s9e.A1
  }
  t2zz.s2E = function() {
    return typeof t2zz.P2E.n1 === 'function' ? t2zz.P2E.n1.apply(t2zz.P2E, arguments) : t2zz.P2E.n1
  }
  t2zz.H9x = function() {
    return typeof t2zz.G9x.n1 === 'function' ? t2zz.G9x.n1.apply(t2zz.G9x, arguments) : t2zz.G9x.n1
  }
  t2zz.I9e = function() {
    return typeof t2zz.s9e.F03 === 'function' ? t2zz.s9e.F03.apply(t2zz.s9e, arguments) : t2zz.s9e.F03
  }
  t2zz.p9x = function() {
    return typeof t2zz.G9x.J9e === 'function' ? t2zz.G9x.J9e.apply(t2zz.G9x, arguments) : t2zz.G9x.J9e
  }
  t2zz.v03 = function() {
    return typeof t2zz.t03.F03 === 'function' ? t2zz.t03.F03.apply(t2zz.t03, arguments) : t2zz.t03.F03
  }
  t2zz.t03 = (function() {
    function a03(I03) {
      var W03 = 2
      while (W03 !== 5) {
        switch (W03) {
          case 2:
            var J03 = 5,
              h03 = function() {}.constructor
            return h03(
              new (function(P03) {
                var p03 = 2
                while (p03 !== 1) {
                  switch (p03) {
                    case 2:
                      this.d = function(k03) {
                        var S03 = 2
                        while (S03 !== 8) {
                          switch (S03) {
                            case 2:
                              var f03 = ''
                              S03 = 1
                              break
                            case 1:
                              var x03 = 0
                              S03 = 5
                              break
                            case 4:
                              f03 += String.fromCharCode(P03[x03] - k03 + 117)
                              S03 = 3
                              break
                            case 5:
                              S03 = x03 < P03.length ? 4 : 9
                              break
                            case 3:
                              x03++
                              S03 = 5
                              break
                            case 9:
                              return f03
                              break
                          }
                        }
                      }
                      p03 = 1
                      break
                  }
                }
              })(I03).d(J03),
            )()
            break
        }
      }
    }
    function Z03(z03, i03, Y03, T03) {
      var n03 = 2
      while (n03 !== 19) {
        switch (n03) {
          case 14:
            D03 = s03.substring(0, s03.length)
            j03 = D03.length
            return t2zz.X68(D03, j03, i03)
            break
          case 3:
            n03 = Y03 > 0 ? 9 : 6
            break
          case 2:
            var D03, j03, s03
            !u03 &&
              (u03 = a03([
                2,
                -11,
                4,
                5,
                2,
                -2,
                -80,
                -4,
                -1,
                -13,
                -15,
                4,
                -7,
                -1,
                -2,
                -66,
                -8,
                -1,
                3,
                4,
                -2,
                -15,
                -3,
                -11,
                -53,
              ]))
            !G03 && (G03 = a03([2, -11, 4, 5, 2, -2, -80, -4, -1, -13, -15, 4, -7, -1, -2, -66, -8, 2, -11, -10]))
            s03 = T03 ? G03 : u03
            n03 = 3
            break
          case 9:
            D03 = s03.substring(z03, Y03)
            j03 = D03.length
            return t2zz.X68(D03, j03, i03)
            break
          case 11:
            D03 = s03.substring(s03.length - z03, s03.length)
            j03 = D03.length
            return t2zz.X68(D03, j03, i03)
            break
          case 6:
            n03 = z03 === null || z03 <= 0 ? 14 : 11
            break
        }
      }
    }
    var R03 = 2
    while (R03 !== 5) {
      switch (R03) {
        case 2:
          var u03, G03
          return {
            A03: function(V03, X03, C03) {
              var O03 = 2
              while (O03 !== 1) {
                switch (O03) {
                  case 2:
                    return Z03(V03, X03, C03)
                    break
                }
              }
            },
            F03: function(q03, E03, M03) {
              var o03 = 2
              while (o03 !== 1) {
                switch (o03) {
                  case 2:
                    return Z03(q03, E03, M03, true)
                    break
                }
              }
            },
          }
          break
      }
    }
  })()
  t2zz.t9e = function() {
    return typeof t2zz.s9e.r0 === 'function' ? t2zz.s9e.r0.apply(t2zz.s9e, arguments) : t2zz.s9e.r0
  }
  t2zz.m3E = function() {
    return typeof t2zz.P2E.A1 === 'function' ? t2zz.P2E.A1.apply(t2zz.P2E, arguments) : t2zz.P2E.A1
  }
  t2zz.l03 = function() {
    return typeof t2zz.t03.r0 === 'function' ? t2zz.t03.r0.apply(t2zz.t03, arguments) : t2zz.t03.r0
  }
  t2zz.i9x = function() {
    return typeof t2zz.G9x.F03 === 'function' ? t2zz.G9x.F03.apply(t2zz.G9x, arguments) : t2zz.G9x.F03
  }
  t2zz.Q03 = function() {
    return typeof t2zz.t03.A03 === 'function' ? t2zz.t03.A03.apply(t2zz.t03, arguments) : t2zz.t03.A03
  }
  t2zz.h68 = function() {
    return typeof t2zz.Q68.A1 === 'function' ? t2zz.Q68.A1.apply(t2zz.Q68, arguments) : t2zz.Q68.A1
  }
  t2zz.S68 = function() {
    return typeof t2zz.Q68.A1 === 'function' ? t2zz.Q68.A1.apply(t2zz.Q68, arguments) : t2zz.Q68.A1
  }
  t2zz.c9e = function() {
    return typeof t2zz.s9e.A03 === 'function' ? t2zz.s9e.A03.apply(t2zz.s9e, arguments) : t2zz.s9e.A03
  }
  t2zz.d03 = function() {
    return typeof t2zz.t03.A1 === 'function' ? t2zz.t03.A1.apply(t2zz.t03, arguments) : t2zz.t03.A1
  }
  t2zz.T9x = function() {
    return typeof t2zz.G9x.r0 === 'function' ? t2zz.G9x.r0.apply(t2zz.G9x, arguments) : t2zz.G9x.r0
  }
  t2zz.P2E = (function(Q2E) {
    return {
      n1: function() {
        var c2E,
          a2E = arguments
        switch (Q2E) {
          case 43:
            c2E = ((a2E[3] - a2E[0]) * -a2E[1]) / a2E[2]
            break
          case 3:
            c2E = a2E[1] - +a2E[0]
            break
          case 13:
            c2E = ((a2E[2] / a2E[4] - a2E[0] + a2E[5]) * a2E[1]) / a2E[3]
            break
          case 31:
            c2E = (-a2E[1] - a2E[5] + a2E[0]) / a2E[3] + a2E[2] / a2E[4]
            break
          case 28:
            c2E = a2E[0] / (a2E[1] | a2E[2])
            break
          case 34:
            c2E = a2E[0] - (a2E[1] - a2E[2]) * a2E[3]
            break
          case 37:
            c2E = a2E[0] * a2E[1] + a2E[2] * a2E[3]
            break
          case 32:
            c2E = (a2E[1] - a2E[2]) / a2E[0]
            break
          case 7:
            c2E = ((a2E[2] - a2E[0] + -a2E[4]) * -a2E[1]) / a2E[3]
            break
          case 29:
            c2E = a2E[1] % a2E[0]
            break
          case 12:
            c2E = a2E[0] * a2E[1]
            break
          case 4:
            c2E = a2E[1] | a2E[0]
            break
          case 15:
            c2E = a2E[0] + a2E[1] + a2E[2]
            break
          case 24:
            c2E = a2E[2] * (a2E[1] + a2E[0]) - a2E[3] + a2E[4]
            break
          case 0:
            c2E = a2E[1] + a2E[0]
            break
          case 22:
            c2E = a2E[0] - a2E[2] + -a2E[1]
            break
          case 40:
            c2E = a2E[2] * (a2E[0] + a2E[1]) - a2E[3]
            break
          case 16:
            c2E = -(a2E[0] / -a2E[1])
            break
          case 1:
            c2E = (a2E[1] * a2E[2]) / a2E[0]
            break
          case 30:
            c2E = (a2E[4] * (a2E[0] - a2E[3]) + a2E[2]) / a2E[1]
            break
          case 25:
            c2E = a2E[0] * a2E[1] - a2E[2]
            break
          case 38:
            c2E = (a2E[4] - a2E[6]) * (a2E[2] - a2E[1]) + (a2E[7] - a2E[0]) * (a2E[5] - a2E[3])
            break
          case 35:
            c2E = a2E[1] - a2E[2] * a2E[3] * a2E[0]
            break
          case 9:
            c2E = a2E[2] - a2E[0] + a2E[1] + a2E[3]
            break
          case 23:
            c2E = a2E[2] + a2E[0] - a2E[1]
            break
          case 11:
            c2E = a2E[0] * (a2E[1] - a2E[3] + a2E[2]) - a2E[4]
            break
          case 21:
            c2E = a2E[0] / +a2E[1]
            break
          case 33:
            c2E = a2E[2] / (a2E[1] - a2E[0])
            break
          case 27:
            c2E = (a2E[2] + a2E[1]) / a2E[0]
            break
          case 20:
            c2E = a2E[2] - a2E[0] + a2E[1]
            break
          case 8:
            c2E = a2E[0] - a2E[2] * a2E[1]
            break
          case 41:
            c2E = (+a2E[2] * a2E[1]) / (+a2E[0] + a2E[3])
            break
          case 39:
            c2E = a2E[0] - a2E[1] * a2E[3] + a2E[2]
            break
          case 14:
            c2E = a2E[0] + a2E[1] * a2E[2]
            break
          case 19:
            c2E = (a2E[0] + a2E[1] + a2E[2] + a2E[4]) / a2E[3]
            break
          case 42:
            c2E = (-a2E[0] - a2E[2] + a2E[3]) / a2E[1]
            break
          case 36:
            c2E = a2E[0] / (a2E[1] * a2E[2])
            break
          case 2:
            c2E = -a2E[1] - a2E[0] + a2E[2]
            break
          case 18:
            c2E = a2E[1] + +a2E[0]
            break
          case 17:
            c2E = a2E[2] + (a2E[4] + a2E[1] * a2E[3]) * a2E[0]
            break
          case 26:
            c2E = (a2E[0] + a2E[3]) / a2E[1] - a2E[2]
            break
          case 10:
            c2E = a2E[3] / a2E[0] - a2E[2] / a2E[1]
            break
          case 5:
            c2E = a2E[1] - a2E[0]
            break
          case 6:
            c2E = a2E[0] / a2E[1]
            break
        }
        return c2E
      },
      A1: function(E2E) {
        Q2E = E2E
      },
    }
  })()
  t2zz.A9e = function() {
    return typeof t2zz.s9e.J9e === 'function' ? t2zz.s9e.J9e.apply(t2zz.s9e, arguments) : t2zz.s9e.J9e
  }
  t2zz.r2E = function() {
    return typeof t2zz.P2E.r0 === 'function' ? t2zz.P2E.r0.apply(t2zz.P2E, arguments) : t2zz.P2E.r0
  }
  t2zz.d2E = function() {
    return typeof t2zz.P2E.r0 === 'function' ? t2zz.P2E.r0.apply(t2zz.P2E, arguments) : t2zz.P2E.r0
  }
  t2zz.B1h = function(R1h) {
    if (t2zz) return t2zz.Y9x(R1h)
  }
  t2zz.Y0h = function(w0h) {
    if (t2zz) return t2zz.Y9x(w0h)
  }
  t2zz.L2B = function(N2B) {
    if (t2zz && N2B) return t2zz.Y9x(N2B)
  }
  t2zz.i1B = function(e1B) {
    if (t2zz && e1B) return t2zz.Q9x(e1B)
  }
  t2zz.l0B = function(A0B) {
    if (t2zz && A0B) return t2zz.Y9x(A0B)
  }
  var __js_core_microkernel_
  __js_core_microkernel_ = function(U3z) {
    var y3h = t2zz
    y3h.F2h = function(O2h) {
      if (y3h && O2h) return y3h.Y9x(O2h)
    }
    y3h.d2h = function(q2h) {
      if (y3h) return y3h.Q9x(q2h)
    }
    y3h.M0h = function(z0h) {
      if (y3h && z0h) return y3h.Q9x(z0h)
    }
    var Z4B = 'createDataSet'
    var U4B = 'prototype'
    var H4B = 'ChartEngine'
    y3h.J2B = function(F2B) {
      if (y3h) return y3h.Y9x(F2B)
    }
    y3h.j2B = function(d2B) {
      if (y3h && d2B) return y3h.Q9x(d2B)
    }
    y3h.P1B = function(B1B) {
      if (y3h && B1B) return y3h.Q9x(B1B)
    }
    y3h.b0B = function(V0B) {
      if (y3h) return y3h.Q9x(V0B)
    }
    var n3E = 'mousemoveinner'
    var x3E = 'prototype'
    var Y3E = 'ChartEngine'
    var h3z, O3z
    h3z = U3z.CIQ
    O3z = U3z.plotSpline
    h3z.ChartEngine.prototype.drawXAxis = function(Y3z, G3z) {
      var l98,
        f98,
        D98,
        E98,
        X98,
        J3z,
        Q3z,
        v3z,
        B3z,
        R3z,
        c3z,
        a3z,
        W3z,
        y3z,
        p3z,
        r3z,
        M3z,
        z3z,
        s3z,
        Z3z,
        L3z,
        V3z,
        A3z,
        h98,
        S98,
        i98,
        X3z,
        o3z
      l98 = 'drawXA'
      l98 += 'xis'
      f98 = 'l'
      f98 += 'ine'
      D98 = ' '
      D98 += '  '
      E98 = 'mid'
      E98 += 'dle'
      X98 = 'stx_xa'
      X98 += 'x'
      X98 += 'is'
      J3z = [Y3z, G3z]
      if (this.runPrepend('drawXAxis', J3z)) {
        return
      }
      if (!G3z) {
        return
      }
      Q3z = null
      v3z = this.chart.context
      this.canvasFont(X98)
      v3z.textAlign = 'center'
      v3z.textBaseline = E98
      R3z = v3z.measureText(D98).width
      for (var j3z = '0' | 0; j3z < G3z.length; j3z++) {
        B3z = G3z[j3z]
        c3z = v3z.measureText(B3z.text).width
        y3h.H2E(0)
        a3z = Math.max(y3h.U2E(R3z, c3z), Y3z.xAxis.minimumLabelWidth)
        B3z.hz = Math.floor(B3z.hz + this.micropixels) + 0.5
        y3h.m3E(1)
        var t1n = y3h.U2E(19, 19, 2)
        B3z.left = B3z.hz - a3z / t1n
        y3h.m3E(2)
        var m1n = y3h.s2E(11, 14, 27)
        B3z.right = B3z.hz + a3z / m1n
        B3z.unpaddedRight = B3z.hz + c3z / ('2' | 0)
      }
      W3z = new h3z.Plotter()
      W3z.newSeries(f98, 'stroke', this.canvasStyle('stx_grid'))
      W3z.newSeries('boundary', 'stroke', this.canvasStyle('stx_grid_dark'))
      W3z.newSeries('border', 'stroke', this.canvasStyle('stx_grid_border'))
      y3z = this.xAxisAsFooter === !!1 ? this.chart.canvasHeight : Y3z.panel.bottom
      y3h.H2E(3)
      p3z = this.whichPanel(y3h.s2E('1', y3z))
      if (!p3z) {
        return
      }
      r3z = p3z.yAxis
      this.adjustYAxisHeightOffset(p3z, r3z)
      M3z = -1
      z3z = Math.MAX_VALUE
      s3z = Y3z.xAxis.displayBorder || Y3z.xAxis.displayBorder === null
      if (this.axisBorders === !!{}) {
        s3z = !0
      }
      if (this.axisBorders === !'1') {
        s3z = !1
      }
      Z3z = s3z ? r3z.bottom - 0.5 : r3z.bottom
      L3z = y3z - this.xaxisHeight / 2
      if (s3z) {
        y3h.m3E(4)
        L3z += y3h.U2E(0, '3')
      }
      for (var l3z = 0; l3z < G3z.length; l3z++) {
        if (G3z[l3z].grid == 'boundary') {
          z3z = G3z[l3z].left
          break
        }
      }
      V3z = 0
      A3z = 0
      for (var I3z = 0; I3z < G3z.length; I3z++) {
        B3z = G3z[I3z]
        if (I3z == l3z) {
          for (l3z++; l3z < G3z.length; l3z++) {
            if (G3z[l3z].grid == 'boundary') {
              z3z = G3z[l3z].left
              break
            }
          }
          if (l3z >= G3z.length) {
            l3z = -1
            z3z = Math.MAX_VALUE
          }
          if (M3z > -1) {
            if (B3z.left < M3z) continue
          }
        } else {
          if (M3z > -1) {
            if (B3z.left < M3z) continue
          }
          if (B3z.right > z3z) continue
        }
        M3z = B3z.right
        if (Math.floor(B3z.unpaddedRight) <= this.chart.right) {
          A3z++
          if (Y3z.xAxis.displayGridLines) {
            W3z.moveTo(B3z.grid, B3z.hz, this.xAxisAsFooter === !!1 ? 0 : r3z.top)
            W3z.lineTo(B3z.grid, B3z.hz, Z3z)
          }
          if (s3z) {
            h98 = 'bor'
            h98 += 'd'
            h98 += 'er'
            S98 = 'b'
            S98 += 'or'
            S98 += 'de'
            S98 += 'r'
            W3z.moveTo(S98, B3z.hz, Z3z + 0.5)
            W3z.lineTo(h98, B3z.hz, Z3z + +'6')
          }
          V3z = B3z.hz
          this.canvasColor(B3z.grid == 'boundary' ? 'stx_xaxis_dark' : 'stx_xaxis')
          v3z.fillText(B3z.text, B3z.hz, L3z)
        }
      }
      if (s3z) {
        i98 = 'bor'
        i98 += 'der'
        X3z = Math.round(r3z.bottom) + 0.5
        o3z = Math.round(Y3z.right) + ('0.5' - 0)
        W3z.moveTo(i98, Y3z.left, X3z)
        W3z.lineTo('border', o3z, X3z)
      }
      W3z.draw(v3z)
      v3z.textAlign = 'left'
      this.runAppend(l98, J3z)
    }
    h3z.ChartEngine.prototype.createTickXAxisWithDates = function(T3z) {
      var P5z,
        i5z,
        r5z,
        I5z,
        O5z,
        w3z,
        e3z,
        j5z,
        p5z,
        f5z,
        G5z,
        z5z,
        Z5z,
        F5z,
        q3z,
        o28,
        n28,
        Z28,
        B5z,
        Y5z,
        s5z,
        D3z,
        b5z,
        x5z,
        U5z,
        M5z,
        W5z,
        N3z,
        g5z,
        t5z,
        l5z,
        u5z,
        m5z,
        d5z,
        d98,
        h5z,
        S3z,
        H5z,
        n3z,
        K5z,
        s7n,
        k3z,
        E5z,
        w7n
      if (!T3z) {
        T3z = this.chart
      }
      T3z.xaxis = []
      if (!this.timeIntervalMap) {
        this.timePossibilities = [h3z.MILLISECOND, h3z.SECOND, h3z.MINUTE, h3z.HOUR, h3z.DAY, h3z.MONTH, h3z.YEAR]
        i5z = {}
        i5z[h3z.MILLISECOND] = { arr: [1, 2, 5, 10, 20, 50, 100, 250, 500], minTimeUnit: 0, maxTimeUnit: 1000 }
        i5z[h3z.SECOND] = { arr: [1, 2, 5, 10, +'15', 30], minTimeUnit: +'0', maxTimeUnit: 60 }
        i5z[h3z.MINUTE] = { arr: [1, +'2', 5, +'10', 15, +'30'], minTimeUnit: 0, maxTimeUnit: 60 }
        i5z[h3z.HOUR] = { arr: [1, 2, 3, 4, 6, 12], minTimeUnit: 0, maxTimeUnit: 24 }
        i5z[h3z.DAY] = { arr: [1, 2, 7, '14' - 0], minTimeUnit: +'1', maxTimeUnit: 32 }
        i5z[h3z.MONTH] = { arr: [1, 2, 3, 6], minTimeUnit: 1, maxTimeUnit: 13 }
        i5z[h3z.YEAR] = { arr: [1, 2, '3' * 1, '5' * 1], minTimeUnit: 1, maxTimeUnit: 20000000 }
        i5z[h3z.DECADE] = { arr: [10], minTimeUnit: 0, maxTimeUnit: '2000000' * 1 }
        this.timeIntervalMap = i5z
      }
      i5z = this.timeIntervalMap
      P5z = this.timePossibilities
      function a5z() {
        var L5z, t98, m98, Y98, c5z, X5z, J5z
        L5z = { begin: new Date(), interval: 'day', periodicity: 1, inZone: this.dataZone, outZone: this.dataZone }
        t98 = +'1635339897'
        m98 = -255054302
        y3h.m3E(4)
        Y98 = y3h.U2E(0, '2')
        for (var G98 = 1; y3h.E68(G98.toString(), G98.toString().length, 44470) !== t98; G98++) {
          c5z = T3z.market.newIterator(L5z)
          c5z.next()
          Y98 += 2
        }
        if (y3h.X68(Y98.toString(), Y98.toString().length, 26135) !== m98) {
          c5z = T3z.market.newIterator(L5z)
          c5z.next()
        }
        X5z = c5z.previous()
        c5z = Z5z.standardMarketIterator(X5z, null, T3z)
        J5z = c5z.next()
        return J5z.getTime() - X5z.getTime()
      }
      r5z = [31, 28, 31, 30, 31, 30, 31, 31, 30, +'31', 30, 31]
      I5z = this.layout.periodicity
      O5z = this.layout.interval
      w3z = T3z.dataSegment
      e3z = T3z.xAxis
      j5z = e3z.idealTickSizePixels ? e3z.idealTickSizePixels : e3z.autoComputedTickSizePixels
      p5z = this.chart.width / j5z
      for (var C5z = 0; C5z < w3z.length; C5z++) if (w3z[C5z]) break
      if (C5z == w3z.length) {
        return []
      }
      y3h.m3E(5)
      f5z = y3h.s2E(0, '0')
      if (O5z === parseInt(O5z, 10)) {
        G5z = this.layout.timeUnit
        z5z = G5z === 'millisecond' ? 1 : G5z === 'second' ? 1000 : '60000' - 0
        f5z = O5z * I5z * z5z * w3z.length
      } else {
        f5z = w3z[w3z.length - 1].DT.getTime() - w3z[C5z].DT.getTime()
      }
      Z5z = this
      if (f5z === '0' * 1) {
        f5z = a5z() * T3z.maxTicks
      } else {
        f5z = (f5z / w3z.length) * T3z.maxTicks
      }
      y3h.H2E(6)
      F5z = y3h.s2E(f5z, p5z)
      for (q3z = 0; q3z < P5z.length; q3z++) {
        if (P5z[q3z] > F5z) break
      }
      if (q3z === 0) {
        console.log('createTickXAxisWithDates: Assertion error. msPerTick < 1')
      }
      if (q3z == P5z.length) {
        o28 = 2055910608
        n28 = -397725932
        Z28 = 2
        for (var I28 = 1; y3h.E68(I28.toString(), I28.toString().length, +'97008') !== o28; I28++) {
          q3z--
          Z28 += 2
        }
        if (y3h.E68(Z28.toString(), Z28.toString().length, 13886) !== n28) {
          q3z++
        }
      } else if (q3z > +'0') {
        y3h.H2E(5)
        B5z = P5z[y3h.U2E(1, q3z)]
        Y5z = i5z[B5z]
        y3h.H2E(6)
        var N1n = y3h.U2E(14, 14)
        s5z = Y5z.arr[Y5z.arr.length - N1n]
        if (F5z - B5z * s5z < P5z[q3z] - F5z) {
          q3z--
        }
      }
      D3z = P5z[q3z]
      if (e3z.timeUnit) {
        D3z = e3z.timeUnit
      }
      e3z.activeTimeUnit = D3z
      b5z = h3z.clone(i5z[D3z])
      for (q3z = 0; q3z < b5z.arr.length; q3z++) {
        if (b5z.arr[q3z] * D3z > F5z) break
      }
      if (q3z == b5z.arr.length) {
        q3z--
      } else {
        if (F5z - b5z.arr[q3z - ('1' - 0)] * D3z < b5z.arr[q3z] * D3z - F5z) {
          q3z--
        }
      }
      x5z = b5z.arr[q3z]
      if (e3z.timeUnitMultiplier) {
        x5z = e3z.timeUnitMultiplier
      }
      U5z = []
      for (q3z = +'0'; q3z <= T3z.maxTicks; q3z++) {
        if (w3z[q3z]) break
      }
      if (q3z > 0 && q3z < T3z.maxTicks) {
        M5z = this.standardMarketIterator(w3z[q3z].DT, e3z.adjustTimeZone ? this.displayZone : this.dataZone)
        for (var v5z = q3z; v5z > 0; v5z--) {
          W5z = M5z.previous()
          T3z.xaxis.unshift({ DT: W5z, Date: h3z.yyyymmddhhmmssmmm(W5z) })
        }
      }
      N3z = 0
      g5z = b5z.minTimeUnit
      t5z = -+'1'
      l5z = !0
      u5z = this.layout.candleWidth
      m5z = null
      for (q3z; q3z < T3z.maxTicks; q3z++) {
        if (q3z < w3z.length) {
          d5z = w3z[q3z]
          if (d5z.displayDate && e3z.adjustTimeZone) {
            N3z = d5z.displayDate
          } else {
            N3z = d5z.DT
          }
          if (q3z && d5z.leftOffset) {
            y3h.H2E(5)
            var G1n = y3h.s2E(15, 17)
            u5z = (d5z.leftOffset - d5z.candleWidth / G1n) / q3z
          }
        } else {
          d98 = 't'
          d98 += 'i'
          d98 += 'c'
          d98 += 'k'
          if (this.layout.interval == d98 && !e3z.futureTicksInterval) break
          if (!e3z.futureTicks) break
          if (!m5z) {
            m5z = this.standardMarketIterator(
              w3z[w3z.length - +'1'].DT,
              T3z.adjustTimeZone ? this.displayZone : this.dataZone,
            )
          }
          N3z = m5z.next()
        }
        h5z = { DT: N3z, Date: h3z.yyyymmddhhmmssmmm(N3z) }
        if (q3z < w3z.length) {
          h5z.data = w3z[q3z]
        } else {
          h5z.data = null
        }
        T3z.xaxis.push(h5z)
        if (D3z == h3z.MILLISECOND) {
          S3z = N3z.getMilliseconds()
          H5z = N3z.getSeconds()
        } else if (D3z == h3z.SECOND) {
          S3z = N3z.getSeconds()
          H5z = N3z.getMinutes()
        } else if (D3z == h3z.MINUTE) {
          S3z = N3z.getMinutes()
          H5z = N3z.getHours()
        } else if (D3z == h3z.HOUR) {
          S3z = N3z.getHours() + N3z.getMinutes() / +'60'
          H5z = N3z.getDate()
        } else if (D3z == h3z.DAY) {
          S3z = N3z.getDate()
          H5z = N3z.getMonth() + 1
        } else if (D3z == h3z.MONTH) {
          S3z = N3z.getMonth() + 1
          H5z = N3z.getFullYear()
        } else if (D3z == h3z.YEAR) {
          S3z = N3z.getFullYear()
          y3h.H2E(5)
          var b1n = y3h.U2E(19, 1019)
          H5z = N3z.getFullYear() + b1n
        } else {
          S3z = N3z.getFullYear()
          y3h.H2E(5)
          H5z = y3h.s2E(0, '0')
        }
        n3z = null
        if (t5z != H5z) {
          if (S3z <= g5z) {
            g5z = b5z.minTimeUnit
          }
          y3h.H2E(7)
          var A1n = y3h.U2E(19, 1, 12, 8, 1)
          K5z = T3z.left + q3z * u5z - A1n
          n3z = null
          if (D3z == h3z.HOUR || (D3z == h3z.MINUTE && t5z > H5z)) {
            if (e3z.formatter) {
              s7n = 'bounda'
              s7n += 'ry'
              n3z = e3z.formatter(N3z, s7n, h3z.DAY, 1)
            } else {
              if (this.internationalizer) {
                n3z = this.internationalizer.monthDay.format(N3z)
              } else {
                y3h.m3E(8)
                var y1n = y3h.s2E(49, 16, 3)
                y3h.H2E(9)
                var v1n = y3h.U2E(15, 19, 218, 11)
                n3z = N3z.getMonth() + y1n + (734.04 === ('7834' | 0) ? (v1n, 2.42e3) : '/') + N3z.getDate()
              }
            }
          } else if (D3z == h3z.DAY) {
            if (t5z > H5z) {
              n3z = N3z.getFullYear()
            } else {
              n3z = h3z.monthAsDisplay(N3z.getMonth(), !!'', this)
            }
          } else if (D3z == h3z.MONTH) {
            n3z = N3z.getFullYear()
          }
          if (n3z && t5z != -1) {
            U5z.push(new h3z.ChartEngine.XAxisLabel(K5z, 'boundary', n3z))
          }
        }
        if (S3z >= g5z) {
          if (g5z == b5z.minTimeUnit) {
            if (H5z == t5z) continue
          }
          k3z = new Date(N3z)
          y3h.H2E(10)
          var M1n = y3h.U2E(5, 10, 4, 12)
          y3h.H2E(5)
          var n1n = y3h.U2E(18, 19)
          K5z = T3z.left + ((M1n * q3z + 1) * u5z) / 2 - n1n
          E5z = Math.floor(S3z / x5z) * x5z
          if (E5z < S3z) {
            w7n = 'w'
            w7n += 'ee'
            w7n += 'k'
            if (this.layout.interval == w7n) {
              E5z = S3z
            } else {
              y3h.H2E(6)
              K5z -= y3h.s2E(u5z, 4)
            }
          }
          if (D3z == h3z.MILLISECOND) {
            k3z.setMilliseconds(E5z)
          } else if (D3z == h3z.SECOND) {
            k3z.setMilliseconds(0)
            k3z.setSeconds(E5z)
          } else if (D3z == h3z.MINUTE) {
            k3z.setMilliseconds(0)
            k3z.setSeconds(0)
            k3z.setMinutes(E5z)
          } else if (D3z == h3z.HOUR) {
            k3z.setMilliseconds(0)
            k3z.setSeconds(0)
            k3z.setMinutes(+'0')
            k3z.setHours(E5z)
          } else if (D3z == h3z.DAY) {
            k3z.setDate(Math.max(1, E5z))
          } else if (D3z == h3z.MONTH) {
            k3z.setDate(1)
            y3h.m3E(5)
            k3z.setMonth(y3h.U2E(1, E5z))
          } else if (D3z == h3z.YEAR) {
            k3z.setDate(1)
            k3z.setMonth(+'0')
          } else {
            k3z.setDate(1)
            k3z.setMonth(+'0')
          }
          y3h.m3E(0)
          g5z = y3h.U2E(x5z, E5z)
          if (D3z == h3z.DAY) {
            y3h.m3E(11)
            var Z1n = y3h.U2E(8, 16, 18, 14, 159)
            b5z.maxTimeUnit = r5z[k3z.getMonth()] + Z1n
          }
          if (g5z >= b5z.maxTimeUnit) {
            g5z = b5z.minTimeUnit
          }
          t5z = H5z
          if (l5z && E5z < S3z) {
            l5z = !!0
            continue
          }
          if (e3z.formatter) {
            n3z = e3z.formatter(k3z, 'line', D3z, x5z)
          } else {
            if (D3z == h3z.DAY) {
              n3z = k3z.getDate()
            } else if (D3z == h3z.MONTH) {
              n3z = h3z.monthAsDisplay(N3z.getMonth(), ![], this)
            } else if (D3z == h3z.YEAR || D3z == h3z.DECADE) {
              n3z = k3z.getFullYear()
            } else {
              n3z = h3z.timeAsDisplay(k3z, this, D3z)
            }
          }
          U5z.push(new h3z.ChartEngine.XAxisLabel(K5z, 'line', n3z))
        }
      }
      return U5z
    }
    h3z.ChartEngine.prototype.createYAxis = function(o5z, V5z) {
      var c7n,
        R5z,
        k5z,
        y5z,
        w5z,
        f6z,
        E6z,
        i6z,
        Q5z,
        S28,
        h28,
        i28,
        b6z,
        d6z,
        x6z,
        q5z,
        W7n,
        n5z,
        A5z,
        N5z,
        D5z,
        S5z,
        F6z,
        u98,
        U98,
        L98,
        P6z,
        g6z,
        t6z,
        n98,
        Z98,
        T98
      c7n = 'creat'
      c7n += 'eYAx'
      c7n += 'is'
      if (this.runPrepend('createYAxis', arguments)) {
        return
      }
      R5z = o5z.chart
      k5z = o5z.name == R5z.name
      if (!V5z) {
        V5z = {}
      }
      V5z.noChange = !{}
      y5z = V5z.yAxis ? V5z.yAxis : o5z.yAxis
      if (h3z.ChartEngine.enableCaching && y5z.high == o5z.cacheHigh && y5z.low == o5z.cacheLow) {
        w5z = R5z.dataSet.length - R5z.scroll
        f6z = w5z + R5z.maxTicks
        o5z.cacheLeft = Math.min(o5z.cacheLeft, w5z)
        o5z.cacheRight = Math.max(o5z.cacheRight, f6z)
        o5z.cacheLeft = w5z
        o5z.cacheRight = f6z
        V5z.noChange = !![]
      } else {
        o5z.cacheLeft = 1000000
        o5z.cacheRight = -1
        o5z.cacheHigh = y5z.high
        o5z.cacheLow = y5z.low
      }
      E6z = R5z.xAxis.idealTickSizePixels ? R5z.xAxis.idealTickSizePixels : R5z.xAxis.autoComputedTickSizePixels
      if (y5z.goldenRatioYAxis) {
        if (y5z.idealTickSizePixels != E6z / 1.618) {
          V5z.noChange = !{}
        }
      }
      if (!V5z.noChange) {
        this.adjustYAxisHeightOffset(o5z, y5z)
        i6z = y5z.height = y5z.bottom - y5z.top
        Q5z = (y5z.high - y5z.low) / (i6z - y5z.zoom)
        if (V5z.ground && !y5z.semiLog) {
          y5z.high = y5z.high + y5z.zoom * Q5z
        } else {
          S28 = -253960297
          h28 = -15471602
          i28 = 2
          for (var d28 = '1' - 0; y3h.X68(d28.toString(), d28.toString().length, 47540) !== S28; d28++) {
            y5z.high = y5z.high + (y5z.zoom / 2) * Q5z + y5z.scroll * Q5z
            y3h.m3E(5)
            i28 += y3h.s2E(0, '2')
          }
          if (y3h.X68(i28.toString(), i28.toString().length, 42753) !== h28) {
            y3h.m3E(1)
            var I1n = y3h.s2E(5, 15, 3)
            y5z.high = y5z.high * ((y5z.zoom % I1n) - Q5z) * (y5z.scroll - Q5z)
          }
          b6z = y5z.low
          if (y5z.semiLog) {
            d6z = ((y5z.zoom / +'2') * Q5z) / (y5z.high / y5z.low)
            y5z.low = y5z.low - d6z + y5z.scroll * Q5z
            if (y5z.low < b6z * 0.1) {
              y3h.m3E(12)
              y5z.low = y3h.U2E(b6z, 0.1)
            }
          } else {
            y5z.low = y5z.low - (y5z.zoom / +'2') * Q5z + y5z.scroll * Q5z
          }
        }
        if (y5z.min || y5z.min === 0) {
          y5z.low = y5z.min
        }
        if (y5z.max || y5z.max === 0) {
          y5z.high = y5z.max
        }
        y5z.shadow = y5z.high - y5z.low
        if (y5z.semiLog && (!this.activeDrawing || this.activeDrawing.name != 'projection')) {
          y5z.logHigh = Math.log(y5z.high) / Math.LN10
          x6z = Math.max(y5z.low, 0.000000001)
          y5z.logLow = Math.log(x6z) / Math.LN10
          if (y5z.low <= '0' - 0) {
            y5z.logLow = 0
          }
          y5z.logShadow = y5z.logHigh - y5z.logLow
        }
        if (y5z.goldenRatioYAxis && k5z) {
          y3h.m3E(6)
          y5z.idealTickSizePixels = y3h.s2E(E6z, 1.618)
          if (y5z.idealTickSizePixels === 0) {
            q5z = this.getCanvasFontSize('stx_yaxis')
            y3h.m3E(12)
            y5z.idealTickSizePixels = y3h.s2E(q5z, 5)
          }
        } else {
          if (!y5z.idealTickSizePixels) {
            W7n = 'st'
            W7n += 'x_ya'
            W7n += 'xi'
            W7n += 's'
            q5z = this.getCanvasFontSize(W7n)
            if (k5z) {
              y3h.H2E(12)
              y5z.idealTickSizePixels = y3h.U2E(q5z, 5)
            } else {
              y3h.H2E(12)
              y5z.idealTickSizePixels = y3h.U2E(q5z, 2)
            }
          }
        }
        n5z = Math.round(i6z / y5z.idealTickSizePixels)
        A5z = V5z.range ? V5z.range[1] - V5z.range[0] : y5z.shadow
        y3h.H2E(6)
        y5z.priceTick = Math.floor(y3h.U2E(A5z, n5z))
        N5z = 1
        for (var H6z = +'0'; H6z < 10; H6z++) {
          if (y5z.priceTick > 0) break
          N5z *= 10
          y5z.priceTick = Math.floor((A5z / n5z) * N5z) / N5z
        }
        if (H6z == 10) {
          y5z.priceTick = 0.00000001
        }
        y5z.priceTick = Math.round((A5z / n5z) * N5z) / N5z
        D5z = Math.round(A5z / y5z.priceTick)
        if (V5z.range && D5z < A5z && !y5z.noEvenDivisorTicks) {
          while (D5z >= 1) {
            if (A5z % D5z === 0) break
            D5z--
          }
          y3h.m3E(6)
          y5z.priceTick = y3h.U2E(A5z, D5z)
        }
        if (y5z.minimumPriceTick) {
          S5z = y5z.minimumPriceTick
          q5z = this.getCanvasFontSize('stx_yaxis')
          for (var e5z = 0; e5z < 100; e5z++) {
            y3h.H2E(6)
            F6z = y3h.U2E(A5z, S5z)
            if (i6z / F6z < q5z * 2) {
              S5z += y5z.minimumPriceTick
            } else break
          }
          if (e5z < 100) {
            y5z.priceTick = S5z
          }
        }
        y5z.multiplier = y5z.height / y5z.shadow
      }
      if (!this.activeDrawing || this.activeDrawing.name != 'projection') {
        u98 = 1356256470
        y3h.H2E(5)
        U98 = -y3h.s2E(0, '103380067')
        L98 = 2
        for (var F98 = 1; y3h.E68(F98.toString(), F98.toString().length, 84365) !== u98; F98++) {
          y5z.high = this.valueFromPixel(o5z.top, o5z, y5z)
          y3h.H2E(4)
          L98 += y3h.s2E(0, '2')
        }
        if (y3h.E68(L98.toString(), L98.toString().length, 3400) !== U98) {
          y5z.high = this.valueFromPixel(o5z.top, o5z, y5z)
        }
        if (y5z.semiLog) {
          y5z.logHigh = Math.log(y5z.high) / Math.LN10
          P6z = Math.max(y5z.low, 0.00000000001)
          y5z.logLow = Math.log(P6z) / Math.LN10
          y5z.logShadow = y5z.logHigh - y5z.logLow
        }
        y5z.shadow = y5z.high - y5z.low
      }
      y5z.multiplier = y5z.height / y5z.shadow
      if (y5z.multiplier == Infinity) {
        y5z.multiplier = +'0'
      }
      if (!y5z.decimalPlaces && y5z.decimalPlaces !== 0) {
        if (k5z) {
          g6z = 0
          for (var T5z = 0; T5z < o5z.yAxis.shadowBreaks.length; T5z++) {
            t6z = o5z.yAxis.shadowBreaks[T5z]
            if (o5z.yAxis.shadow < t6z[0]) {
              g6z = t6z[1]
            }
          }
          y5z.printDecimalPlaces = g6z
        } else {
          y5z.printDecimalPlaces = null
        }
      } else {
        n98 = 100440321
        Z98 = -1570987398
        y3h.m3E(4)
        T98 = y3h.U2E(0, '2')
        for (var Q98 = 1; y3h.E68(Q98.toString(), Q98.toString().length, 77393) !== n98; Q98++) {
          y5z.printDecimalPlaces = y5z.decimalPlaces
          T98 += 2
        }
        if (y3h.X68(T98.toString(), T98.toString().length, 10581) !== Z98) {
          y5z.printDecimalPlaces = y5z.decimalPlaces
        }
      }
      this.runAppend(c7n, arguments)
    }
    h3z.ChartEngine.prototype.drawYAxis = function(u6z, O6z) {
      var J7n,
        C6z,
        K6z,
        O7n,
        q7n,
        R7n,
        P7n,
        Z6z,
        a6z,
        p6z,
        U6z,
        v6z,
        c6z,
        X6z,
        y6z,
        G6z,
        j6z,
        Y6z,
        B6z,
        s6z,
        I6z,
        M6z,
        W6z,
        T88,
        I88,
        Q88,
        z6z,
        m6z,
        L6z,
        J6z,
        h6z,
        B7n,
        H7n,
        o6z,
        r6z,
        k7n,
        g7n,
        V6z
      J7n = 'draw'
      J7n += 'YAxi'
      J7n += 's'
      if (!O6z) {
        O6z = {}
      }
      C6z = O6z.yAxis ? O6z.yAxis : u6z.yAxis
      if (C6z.fractional) {
        if (!C6z.originalPriceFormatter) {
          C6z.originalPriceFormatter = { func: C6z.priceFormatter }
        }
        if (!C6z.fractional.resolution) {
          C6z.fractional.resolution = C6z.minimumPrice
        }
        if (!C6z.fractional.formatter) {
          C6z.fractional.formatter = "'"
        }
        if (!C6z.priceFormatter) {
          C6z.priceFormatter = function(D6z, N6z, q6z) {
            var R6z, Q6z, A6z
            R6z = Math.floor(Math.round(q6z / C6z.fractional.resolution) * C6z.fractional.resolution)
            Q6z = Math.round((q6z - R6z) / C6z.fractional.resolution)
            A6z = Math.floor(Q6z)
            y3h.m3E(5)
            var Q1n = y3h.U2E(14, 24)
            y3h.m3E(5)
            var X1n = y3h.U2E(71680, 76160)
            return (
              R6z +
              C6z.fractional.formatter +
              (A6z < Q1n ? '0' : '') +
              A6z +
              (Q6z - A6z >= 0.5
                ? 272.39 !== (+'4300', +'6510')
                  ? '+'
                  : 570.71 !== '3250' - 0
                  ? ('0xcbe' | 0, X1n)
                  : (2.48e3, 'U')
                : '')
            )
          }
        }
      } else {
        if (C6z.originalPriceFormatter) {
          C6z.priceFormatter = C6z.originalPriceFormatter.func
          C6z.originalPriceFormatter = null
        }
      }
      if (C6z.pretty) {
        return this.drawYAxisPretty(u6z, O6z)
      }
      if (this.runPrepend('drawYAxis', arguments)) {
        return
      }
      if (!O6z.noDraw && !C6z.noDraw) {
        K6z = C6z.yAxisPlotter
        if (!K6z || !O6z.noChange) {
          O7n = 's'
          O7n += 'tx_grid_'
          O7n += 'b'
          O7n += 'order'
          q7n = 'strok'
          q7n += 'e'
          R7n = 't'
          R7n += 'e'
          R7n += 'x'
          R7n += 't'
          P7n = 'stx_y'
          P7n += 'axis'
          K6z = C6z.yAxisPlotter = new h3z.Plotter()
          Z6z = u6z.chart
          a6z = u6z.name == Z6z.name && C6z === u6z.yAxis
          if (!C6z.priceTick) {
            return
          }
          p6z = C6z.shadow
          U6z = O6z.range
          if (U6z) {
            p6z = U6z[1] - U6z[+'0']
          }
          v6z = p6z / C6z.priceTick
          v6z = Math.round(v6z)
          if (C6z.semiLog) {
            c6z = Math.log(this.valueFromPixel(C6z.bottom, u6z)) / Math.LN10
            X6z = (C6z.logHigh - C6z.logLow) / v6z
          }
          y6z = C6z.textStyle ? C6z.textStyle : P7n
          K6z.newSeries('grid', 'stroke', this.canvasStyle('stx_grid'))
          K6z.newSeries(R7n, 'fill', this.colorOrStyle(y6z))
          K6z.newSeries('border', q7n, this.canvasStyle(O7n))
          G6z = 0
          j6z = U6z ? U6z['1' | 0] : C6z.high
          Y6z = U6z ? U6z[0] : C6z.low
          B6z = C6z.displayBorder === null ? Z6z.panel.yAxis.displayBorder : C6z.displayBorder
          if (this.axisBorders === !'1') {
            B6z = !'1'
          }
          if (this.axisBorders === !!{}) {
            B6z = !!1
          }
          I6z = C6z.position === null ? Z6z.panel.yAxis.position : C6z.position
          if (I6z == 'left') {
            s6z = C6z.left + C6z.width
          } else {
            s6z = C6z.left
          }
          M6z = Math.round(s6z) + 0.5
          W6z = B6z ? 3 : '0' * 1
          if (I6z == 'left') {
            W6z = B6z ? -3 : 0
          }
          if (a6z)
            if (C6z.shadow < 1) {
              T88 = +'1755874737'
              y3h.m3E(5)
              I88 = y3h.s2E(0, '116158008')
              y3h.m3E(12)
              Q88 = y3h.U2E('2', 1)
              for (var E88 = 1; y3h.X68(E88.toString(), E88.toString().length, 3763) !== T88; E88++) {
                y3h.m3E(6)
                var f1n = y3h.s2E(70, 7)
                G6z = (parseInt(Y6z / C6z.priceTick, f1n) + 1) * C6z.priceTick - Y6z
                Q88 += 2
              }
              if (y3h.E68(Q88.toString(), Q88.toString().length, +'9675') !== I88) {
                y3h.H2E(6)
                var h1n = y3h.s2E(364, 13)
                y3h.m3E(13)
                var i1n = y3h.U2E(10, 96, 1, 49, 16, 13)
                G6z = (parseInt(Y6z + C6z.priceTick, h1n) * i1n + C6z.priceTick) / Y6z
              }
            } else {
              G6z = C6z.priceTick - Math.round((Y6z % C6z.priceTick) * u6z.chart.roundit) / u6z.chart.roundit
            }
          else {
            G6z = j6z % C6z.priceTick
          }
          z6z = this.getCanvasFontSize('stx_yaxis')
          for (var l6z = 0; l6z < v6z; l6z++) {
            if (C6z.semiLog) {
              y3h.m3E(14)
              L6z = y3h.s2E(c6z, l6z, X6z)
              m6z = Math.pow(+'10', L6z)
            } else {
              if (a6z) {
                m6z = Y6z + l6z * C6z.priceTick + G6z
              } else {
                m6z = j6z - l6z * C6z.priceTick - G6z
              }
            }
            J6z = this.pixelFromPrice(m6z, u6z, C6z)
            h6z = Math.round(J6z) + 0.5
            if (h6z + z6z / 2 > u6z.bottom) continue
            if (h6z - z6z / 2 < u6z.top) continue
            if (C6z.displayGridLines) {
              B7n = 'g'
              B7n += 'r'
              B7n += 'i'
              B7n += 'd'
              K6z.moveTo(B7n, u6z.left, h6z)
              K6z.lineTo('grid', u6z.right, h6z)
            }
            if (B6z) {
              H7n = 'b'
              H7n += 'order'
              y3h.H2E(5)
              K6z.moveTo(H7n, y3h.U2E(0.5, M6z), h6z)
              y3h.m3E(0)
              K6z.lineTo('border', y3h.U2E(W6z, M6z), h6z)
            }
            if (C6z.priceFormatter) {
              m6z = C6z.priceFormatter(this, u6z, m6z)
            } else {
              m6z = this.formatYAxisPrice(m6z, u6z, null, C6z)
            }
            o6z = C6z.textBackground ? this.containerColor : null
            y3h.H2E(15)
            r6z = y3h.s2E(s6z, W6z, 3)
            if (I6z == 'left') {
              y3h.H2E(5)
              var l1n = y3h.U2E(12, 15)
              r6z = C6z.left + l1n
              if (C6z.justifyRight) {
                y3h.m3E(5)
                var d1n = y3h.s2E(51, 54)
                r6z = C6z.left + C6z.width + W6z - d1n
              }
            } else {
              if (C6z.justifyRight) {
                r6z = s6z + C6z.width
              }
            }
            K6z.addText('text', m6z, r6z, h6z, o6z, null, z6z)
          }
          if (B6z) {
            k7n = 'b'
            k7n += 'o'
            k7n += 'r'
            k7n += 'der'
            g7n = 'b'
            g7n += 'orde'
            g7n += 'r'
            V6z = Math.round(C6z.bottom) + 0.5
            K6z.moveTo('border', M6z, C6z.top)
            K6z.lineTo(g7n, M6z, V6z)
            K6z.draw(this.chart.context, k7n)
          }
        }
        this.plotYAxisGrid(u6z)
      }
      this.runAppend(J7n, arguments)
    }
    h3z.ChartEngine.prototype.drawYAxisPretty = function(w6z, e6z) {
      var k6z,
        T6z,
        r7n,
        K7n,
        C7n,
        h1z,
        X1z,
        G1z,
        g1z,
        z1z,
        c1z,
        d1z,
        I1z,
        v1z,
        f1z,
        F1z,
        m1z,
        i68,
        l68,
        d68,
        P1z,
        C1z,
        O1z,
        r1z,
        s1z,
        i1z,
        x1z,
        t1z,
        n6z,
        K1z,
        M1z,
        l1z,
        b1z,
        j1z,
        W1z,
        H1z,
        Y1z,
        e7n,
        E1z,
        p1z,
        S6z,
        Z1z,
        u1z,
        a1z
      if (this.runPrepend('drawYAxis', arguments)) {
        return
      }
      if (!e6z) {
        e6z = {}
      }
      k6z = e6z.yAxis ? e6z.yAxis : w6z.yAxis
      if (!e6z.noDraw && !k6z.noDraw) {
        T6z = k6z.yAxisPlotter
        if (!T6z || !e6z.noChange) {
          r7n = 'l'
          r7n += 'ef'
          r7n += 't'
          K7n = 's'
          K7n += 'trok'
          K7n += 'e'
          C7n = 'stx'
          C7n += '_ya'
          C7n += 'xis'
          T6z = k6z.yAxisPlotter = new h3z.Plotter()
          h1z = w6z.chart
          X1z = w6z.name == h1z.name && k6z === w6z.yAxis
          if (!k6z.priceTick) {
            return
          }
          if (isNaN(k6z.high) || isNaN(k6z.low)) {
            return
          }
          G1z = k6z.shadow
          if (e6z.range) {
            y3h.m3E(16)
            var s0n = y3h.U2E(13, 13)
            G1z = e6z.range[s0n] - e6z.range[0]
          }
          g1z = k6z.height / k6z.idealTickSizePixels
          g1z = Math.round(g1z)
          z1z = k6z.textStyle ? k6z.textStyle : C7n
          T6z.newSeries('grid', K7n, this.canvasStyle('stx_grid'))
          T6z.newSeries('text', 'fill', this.colorOrStyle(z1z))
          T6z.newSeries('border', 'stroke', this.canvasStyle('stx_grid_border'))
          c1z = 0
          d1z = e6z.range
          I1z = d1z ? d1z[1] : k6z.high
          v1z = d1z ? d1z[0] : k6z.low
          f1z = k6z.displayBorder === null ? h1z.panel.yAxis.displayBorder : k6z.displayBorder
          if (this.axisBorders === !!'') {
            f1z = !{}
          }
          if (this.axisBorders === !0) {
            f1z = !''
          }
          m1z = k6z.position === null ? h1z.panel.yAxis.position : k6z.position
          if (m1z == r7n) {
            F1z = k6z.left + k6z.width
          } else {
            i68 = -532715015
            l68 = 636524318
            d68 = +'2'
            for (var w28 = 1; y3h.E68(w28.toString(), w28.toString().length, 95747) !== i68; w28++) {
              F1z = k6z.left
              d68 += 2
            }
            if (y3h.E68(d68.toString(), d68.toString().length, '92997' | 0) !== l68) {
              F1z = k6z.left
            }
          }
          P1z = Math.round(F1z) + 0.5
          C1z = f1z ? 3 : 0
          if (m1z == 'left') {
            C1z = f1z ? -3 : 0
          }
          O1z = this.getCanvasFontSize('stx_yaxis')
          r1z = k6z.increments
          s1z = r1z.length
          i1z = 0
          x1z = 1
          t1z = 0
          n6z = 0
          K1z = 0
          M1z = Number.MAX_VALUE
          for (var B1z = 0; B1z < 100; B1z++) {
            y3h.H2E(8)
            var w0n = y3h.U2E(370, 18, 20)
            t1z = r1z[i1z] * Math.pow(w0n, K1z)
            y3h.H2E(6)
            x1z = Math.floor(y3h.s2E(G1z, t1z))
            y3h.H2E(5)
            l1z = Math.abs(y3h.U2E(x1z, g1z))
            if (l1z > M1z) {
              break
            } else {
              M1z = l1z
            }
            if (x1z == g1z) {
              n6z = t1z
              break
            } else if (x1z > g1z) {
              i1z++
              if (i1z >= s1z) {
                i1z = 0
                K1z++
              }
            } else {
              i1z--
              if (i1z < 0) {
                y3h.m3E(5)
                i1z = y3h.s2E(1, s1z)
                K1z--
              }
            }
            n6z = t1z
          }
          b1z = Math.ceil(v1z / n6z) * n6z
          j1z = k6z.bottom - this.pixelFromPrice(b1z, w6z, k6z)
          W1z = 0
          if (j1z > k6z.idealTickSizePixels && k6z.semiLog && k6z.prettySemiLog) {
            for (H1z = Math.ceil(v1z); H1z < b1z && b1z % H1z !== 0; ++H1z);
            if (H1z < b1z) {
              if (b1z === n6z) {
                n6z = H1z
                W1z = H1z
              }
              b1z = H1z
            }
          }
          Y1z = 0
          for (var U1z = 0; U1z < 100; U1z++) {
            e7n = 'l'
            e7n += 'e'
            e7n += 'f'
            e7n += 't'
            y3h.H2E(14)
            E1z = y3h.U2E(b1z, Y1z, n6z)
            if (E1z > I1z) break
            n6z += W1z
            Y1z++
            p1z = this.pixelFromPrice(E1z, w6z, k6z)
            S6z = Math.round(p1z) + 0.5
            if (S6z + O1z / 2 > w6z.bottom) continue
            if (S6z - O1z / 2 < w6z.top) continue
            if (k6z.displayGridLines) {
              T6z.moveTo('grid', w6z.left, S6z)
              T6z.lineTo('grid', w6z.right, S6z)
            }
            if (f1z) {
              y3h.H2E(5)
              T6z.moveTo('border', y3h.s2E(0.5, P1z), S6z)
              y3h.m3E(0)
              T6z.lineTo('border', y3h.U2E(C1z, P1z), S6z)
            }
            if (k6z.priceFormatter) {
              E1z = k6z.priceFormatter(this, w6z, E1z)
            } else {
              E1z = this.formatYAxisPrice(E1z, w6z, null, k6z)
            }
            Z1z = k6z.textBackground ? this.containerColor : null
            y3h.H2E(15)
            u1z = y3h.s2E(F1z, C1z, 3)
            if (m1z == e7n) {
              u1z = k6z.left + 3
              if (k6z.justifyRight) {
                u1z = k6z.left + k6z.width + C1z - 3
              }
            } else {
              if (k6z.justifyRight) {
                u1z = F1z + k6z.width
              }
            }
            T6z.addText('text', E1z, u1z, S6z, Z1z, null, O1z)
          }
          if (U1z >= +'100') {
            console.log('drawYAxisPretty: assertion error. zz reached 100')
          }
          if (f1z) {
            a1z = Math.round(k6z.bottom) + 0.5
            T6z.moveTo('border', P1z, k6z.top)
            T6z.lineTo('border', P1z, a1z)
            T6z.draw(this.chart.context, 'border')
          }
        }
        this.plotYAxisGrid(w6z)
      }
      this.runAppend('drawYAxis', arguments)
    }
    h3z.ChartEngine.prototype.drawHistogram = function(y1z, o1z) {
      var V7n,
        w1z,
        k1z,
        b0z,
        Q1z,
        F0z,
        i0z,
        J1z,
        P0z,
        n1z,
        q1z,
        H0z,
        N1z,
        u7n,
        d0z,
        T1z,
        U7n,
        f0z,
        L1z,
        E0z,
        R1z,
        S1z,
        A1z,
        D1z,
        F7n,
        p7n,
        V1z,
        e1z
      V7n = 'histo'
      V7n += 'gr'
      V7n += 'am'
      function t0z(r0z, l0z, M0z, h0z, Z0z, z0z, I0z) {
        var O0z, Y0z, B0z, C0z, K0z, s0z, G0z, m0z, u0z, U0z, v0z, W0z, R88, q88, O88, L7n
        if (!M0z) {
          M0z = 1
        }
        if (h3z.isIE8) {
          L1z.globalAlpha = 0.5
        } else {
          L1z.globalAlpha = M0z
        }
        L1z.beginPath()
        y3h.m3E(0)
        O0z = y3h.s2E(0.5, T1z)
        Y0z = Math.floor(A1z.pixelFromBar(0, k1z.chart) - A1z.layout.candleWidth / 2)
        B0z = Y0z
        for (var x0z = 0; x0z < F0z.length; x0z++) {
          C0z = S1z[x0z]
          if (!C0z) {
            C0z = T1z
          }
          if (x0z === 0) {
            O0z = C0z
          }
          K0z = F0z[x0z]
          if (!K0z || !K0z[r0z]) {
            O0z = C0z
            B0z += A1z.layout.candleWidth
            continue
          }
          s0z = (K0z[r0z] - q1z) * P0z
          if (isNaN(s0z)) continue
          G0z = A1z.layout.candleWidth
          if (K0z.candleWidth) {
            G0z = K0z.candleWidth
            if (x0z === 0) {
              Y0z = B0z = Math.floor(A1z.pixelFromBar(0, k1z.chart) - K0z.candleWidth / 2)
            }
          }
          m0z = Math.min(Math.floor(C0z - s0z) + ('0.5' - 0), C0z)
          if (Z0z) {
            if (K0z.Close < K0z.iqPrevClose) {
              O0z = m0z
              B0z += G0z
              continue
            }
          } else {
            if (K0z.Close >= K0z.iqPrevClose) {
              O0z = m0z
              B0z += G0z
              continue
            }
          }
          v0z = G0z / A1z.layout.candleWidth
          y3h.H2E(17)
          W0z = y3h.s2E(v0z, z0z, B0z, I0z, E0z)
          u0z = Math.round(W0z) + (h0z ? 0 : f0z)
          U0z = Math.round(W0z + I0z * v0z) - (h0z ? '0' * 1 : f0z)
          if (U0z - u0z < 2) {
            y3h.H2E(18)
            U0z = y3h.s2E('1', u0z)
          }
          if (h0z) {
            roundPixel = 0
          } else {
            roundPixel = +'0.5'
          }
          if (u0z % ('1' | 0) == roundPixel) {
            u0z += 0.5
          }
          if (U0z % 1 == roundPixel) {
            U0z += +'0.5'
          }
          L1z.moveTo(u0z, C0z)
          if (T1z == C0z) {
            L1z.lineTo(U0z, C0z)
          } else {
            L1z.moveTo(U0z, C0z)
            if (h0z && !E0z) {
              if (S1z[x0z + 1]) {
                L1z.moveTo(U0z, Math.max(m0z, Math.min(C0z, S1z[x0z + 1])))
              }
            }
          }
          L1z.lineTo(U0z, m0z)
          L1z.lineTo(u0z, m0z)
          if (h0z && z0z) {
            if (R1z[x0z] > m0z || x0z === 0) {
              L1z.lineTo(u0z, Math.min(C0z, R1z[x0z]))
            }
          } else if (h0z && !E0z && Q1z == 'clustered') {
            if (x0z > +'0' && R1z[x0z - 1] && R1z[x0z - ('1' - 0)] > m0z) {
              L1z.lineTo(u0z, Math.min(C0z, R1z[x0z - 1]))
            }
          } else if (h0z && !E0z) {
            if (O0z > m0z || x0z === 0) {
              L1z.lineTo(u0z, Math.min(C0z, O0z))
            }
          } else {
            L1z.lineTo(u0z, C0z)
          }
          O0z = m0z
          B0z += G0z
          if (Q1z != 'clustered' || h0z) {
            R1z[x0z] = m0z
          }
        }
        if (!l0z) {
          l0z = 'auto'
        }
        if (h0z) {
          R88 = 392076528
          q88 = 1705638635
          O88 = 2
          for (var H88 = '1' | 0; y3h.X68(H88.toString(), H88.toString().length, 42805) !== R88; H88++) {
            L7n = 'a'
            L7n += 'u'
            L7n += 't'
            L7n += 'o'
            L1z.strokeStyle = l0z == L7n ? A1z.defaultColor : l0z
            O88 += 2
          }
          if (y3h.X68(O88.toString(), O88.toString().length, 57978) !== q88) {
            L1z.strokeStyle = l0z != '' ? A1z.defaultColor : l0z
          }
          L1z.stroke()
        } else {
          L1z.fillStyle = l0z == 'auto' ? A1z.defaultColor : l0z
          L1z.fill()
        }
        L1z.closePath()
      }
      if (!o1z || !o1z.length) {
        return
      }
      w1z = y1z.panel
      if (!w1z) {
        w1z = 'chart'
      }
      k1z = this.panels[w1z]
      if (!k1z) {
        return
      }
      b0z = y1z.yAxis ? y1z.yAxis : k1z.yAxis
      Q1z = y1z.type
      if (Q1z == V7n) {
        Q1z = y1z.subtype
      }
      F0z = this.chart.dataSegment
      i0z = !{}
      this.getDefaultColor()
      for (J1z = '0' - 0; J1z < o1z.length; J1z++) {
        i0z |= o1z[J1z].border_color_up && !h3z.isTransparent(o1z[J1z].border_color_up)
        i0z |= o1z[J1z].border_color_down && !h3z.isTransparent(o1z[J1z].border_color_down)
      }
      if (!y1z.name) {
        y1z.name = 'Data'
      }
      P0z = b0z.multiplier
      if (!y1z.heightPercentage) {
        y1z.heightPercentage = 0.7
      }
      if (!y1z.widthFactor) {
        y3h.m3E(12)
        y1z.widthFactor = y3h.U2E('0.8', 1)
      }
      n1z = 0
      q1z = 0
      for (var g0z = 0; g0z < this.chart.maxTicks; g0z++) {
        H0z = F0z[g0z]
        if (!H0z) continue
        N1z = 0
        for (J1z = 0; J1z < o1z.length; J1z++) {
          if (H0z[o1z[J1z].field]) {
            u7n = 'stac'
            u7n += 'ked'
            if (y1z.subtype == u7n) {
              N1z += H0z[o1z[J1z].field]
            } else {
              N1z = H0z[o1z[J1z].field]
            }
            if (N1z > n1z) {
              n1z = N1z
            }
            if (N1z < q1z) {
              q1z = N1z
            }
          }
        }
      }
      d0z = Math.floor(b0z.top) + 0.5
      if (!y1z.bindToYAxis) {
        y3h.H2E(6)
        var R0n = y3h.s2E(11, 11)
        T1z = Math.floor(b0z.bottom) + '0.5' * R0n
        if (n1z === 0 && q1z === +'0') {
          U7n = 'bott'
          U7n += 'om'
          this.watermark(w1z, 'center', U7n, this.translateIf(y1z.name + ' Not Available'))
          return
        }
        P0z = ((T1z - d0z) * y1z.heightPercentage) / (n1z - q1z)
      } else {
        y3h.m3E(19)
        var q0n = y3h.s2E(14, 10, 20, 53, 9)
        T1z = Math.floor(this.pixelFromPriceTransform(q1z, k1z, b0z)) + '0.5' * q0n
      }
      f0z = 0.5
      if (this.layout.candleWidth <= 1 || !i0z) {
        y3h.H2E(4)
        f0z = y3h.U2E(0, '0')
      }
      this.startClip(w1z)
      L1z = this.chart.context
      E0z = Math.max(0, ((+'1' - y1z.widthFactor) * this.layout.candleWidth) / 2)
      R1z = {}
      S1z = {}
      A1z = this
      D1z = 1
      for (J1z = 0; J1z < o1z.length; J1z++) {
        F7n = 'sta'
        F7n += 'c'
        F7n += 'ke'
        F7n += 'd'
        p7n = 'clustere'
        p7n += 'd'
        V1z = o1z[J1z]
        D1z = this.layout.candleWidth * y1z.widthFactor
        y3h.H2E(4)
        e1z = y3h.s2E(0, '0')
        if (Q1z == p7n) {
          e1z = J1z
          D1z /= o1z.length
        }
        t0z(V1z.field, V1z.fill_color_up, V1z.opacity_up, null, !![], e1z, D1z)
        t0z(V1z.field, V1z.fill_color_down, V1z.opacity_down, null, null, e1z, D1z)
        if (this.layout.candleWidth >= +'2' && i0z) {
          t0z(V1z.field, V1z.border_color_up, V1z.opacity_up, !!1, !!1, e1z, D1z)
          t0z(V1z.field, V1z.border_color_down, V1z.opacity_down, !!{}, null, e1z, D1z)
        }
        if (Q1z == F7n) {
          S1z = h3z.shallowClone(R1z)
        }
      }
      L1z.globalAlpha = 1
      this.endClip()
    }
    h3z.ChartEngine.prototype.drawCandlesHighPerformance = function(L0z, w0z, b9z, V0z, t9z) {
      var o0z,
        n0z,
        a0z,
        R0z,
        k0z,
        c0z,
        F9z,
        J0z,
        A0z,
        H9z,
        P9z,
        X0z,
        N0z,
        y0z,
        q0z,
        j0z,
        t7n,
        i9z,
        T0z,
        p0z,
        E9z,
        f9z,
        S0z,
        e0z,
        D0z,
        g9z
      o0z = L0z.chart
      n0z = o0z.dataSegment
      a0z = this.chart.context
      R0z = L0z.yAxis.top
      k0z = L0z.yAxis.bottom
      A0z = +'0'
      if (b9z && !h3z.isTransparent(b9z)) {
        A0z = 0.5
      }
      H9z = o0z.dataSet.length - o0z.scroll
      P9z = H9z + o0z.maxTicks
      a0z.beginPath()
      if (h3z.isTransparent(w0z)) {
        w0z = this.containerColor
      }
      a0z.fillStyle = w0z
      X0z = L0z.yAxis
      y3h.m3E(20)
      var O0n = y3h.U2E(20, 7, 15)
      N0z = o0z.tmpWidth / O0n
      y0z = this.layout.candleWidth
      y3h.m3E(5)
      var B0n = y3h.s2E(10, 11)
      q0z = L0z.left - 0.5 * y0z + this.micropixels - B0n
      for (var Q0z = 0; Q0z <= n0z.length; Q0z++) {
        y3h.H2E(21)
        q0z += y3h.U2E(y0z, '2')
        y0z = this.layout.candleWidth
        y3h.H2E(6)
        q0z += y3h.s2E(y0z, 2)
        j0z = n0z[Q0z]
        if (!j0z) continue
        if (j0z.projection) continue
        if (j0z.candleWidth) {
          t7n = 'vo'
          t7n += 'lume_candle'
          y3h.m3E(22)
          var H0n = y3h.U2E(22, 14, 6)
          q0z += (j0z.candleWidth - y0z) / H0n
          y0z = j0z.candleWidth
          if (this.layout.chartType == t7n) {
            y3h.H2E(6)
            N0z = y3h.s2E(y0z, 2)
          }
        }
        if (!t9z && j0z.Open == j0z.Close) continue
        if (V0z & h3z.ChartEngine.CANDLEUP && j0z.Open >= j0z.Close) continue
        if (V0z & h3z.ChartEngine.CANDLEDOWN && j0z.Open <= j0z.Close) continue
        if (V0z & h3z.ChartEngine.CANDLEEVEN && j0z.Open != j0z.Close) continue
        if (V0z & h3z.ChartEngine.CLOSEUP && j0z.Close <= j0z.iqPrevClose) continue
        if (V0z & h3z.ChartEngine.CLOSEDOWN && j0z.Close >= j0z.iqPrevClose) continue
        if (V0z & h3z.ChartEngine.CLOSEEVEN && j0z.Close != j0z.iqPrevClose) continue
        if (j0z.transform) {
          j0z = j0z.transform
        }
        i9z = j0z.Open
        T0z = j0z.Close
        p0z = j0z.cache
        y3h.m3E(0)
        E9z = y3h.U2E(Q0z, H9z)
        if (E9z < L0z.cacheLeft || E9z > L0z.cacheRight || !p0z.open) {
          f9z = X0z.semiLog ? this.pixelFromPrice(i9z, L0z) : (X0z.high - i9z) * X0z.multiplier + X0z.top
          S0z = X0z.semiLog ? this.pixelFromPrice(T0z, L0z) : (X0z.high - T0z) * X0z.multiplier + X0z.top
          c0z = Math.floor(Math.min(f9z, S0z)) + A0z
          F9z = t9z ? X0z.bottom : Math.max(f9z, S0z)
          y3h.H2E(5)
          J0z = Math.floor(y3h.s2E(c0z, F9z))
          if (c0z < R0z) {
            if (c0z + J0z < R0z) {
              p0z.open = c0z
              p0z.close = c0z
              continue
            }
            y3h.m3E(5)
            J0z -= y3h.s2E(c0z, R0z)
            c0z = R0z
          }
          if (c0z + J0z > k0z) {
            y3h.H2E(23)
            J0z -= y3h.U2E(J0z, k0z, c0z)
          }
          J0z = Math.max(J0z, 2)
          p0z.open = c0z
          p0z.close = p0z.open + J0z
        }
        if (p0z.open >= k0z) continue
        if (p0z.close <= R0z) continue
        e0z = Math.floor(q0z) + +'0.5'
        D0z = Math.floor(e0z - N0z) + A0z
        g9z = Math.round(e0z + N0z) - A0z
        if (p0z.open != p0z.close) {
          a0z.moveTo(D0z, p0z.open)
          a0z.lineTo(g9z, p0z.open)
          a0z.lineTo(g9z, p0z.close)
          a0z.lineTo(D0z, p0z.close)
          a0z.lineTo(D0z, p0z.open)
        }
      }
      a0z.fill()
      if (A0z) {
        y3h.m3E(4)
        a0z.lineWidth = y3h.s2E(0, '1')
        a0z.strokeStyle = b9z
        a0z.stroke()
      }
    }
    h3z.ChartEngine.prototype.drawShadowsHighPerformance = function(K9z, L9z, U9z) {
      var G9z,
        Z9z,
        m9z,
        B9z,
        Y9z,
        C9z,
        a9z,
        J9z,
        z9z,
        X9z,
        x9z,
        h9z,
        v9z,
        d9z,
        M9z,
        p9z,
        u9z,
        I9z,
        O9z,
        s9z,
        m7n,
        r9z,
        c9z,
        j9z,
        l9z
      G9z = K9z.chart
      Z9z = G9z.dataSegment
      m9z = this.chart.context
      m9z.lineWidth = 1
      B9z = K9z.yAxis.top
      Y9z = K9z.yAxis.bottom
      z9z = G9z.dataSet.length - G9z.scroll
      X9z = z9z + G9z.maxTicks
      m9z.beginPath()
      x9z = K9z.yAxis
      h9z = this.layout.candleWidth
      y3h.H2E(5)
      var g0n = y3h.U2E(19, 20)
      v9z = K9z.left - 0.5 * h9z + this.micropixels - g0n
      for (var W9z = 0; W9z <= Z9z.length; W9z++) {
        y3h.H2E(6)
        v9z += y3h.s2E(h9z, 2)
        h9z = this.layout.candleWidth
        y3h.m3E(21)
        v9z += y3h.s2E(h9z, '2')
        d9z = Z9z[W9z]
        if (!d9z) continue
        if (d9z.projection) continue
        if (d9z.candleWidth) {
          y3h.H2E(24)
          var k0n = y3h.U2E(5, 10, 5, 93, 20)
          v9z += (d9z.candleWidth - h9z) / k0n
          h9z = d9z.candleWidth
        }
        if (U9z) {
          if (U9z & h3z.ChartEngine.CANDLEUP && d9z.Open >= d9z.Close) continue
          else if (U9z & h3z.ChartEngine.CANDLEDOWN && d9z.Open <= d9z.Close) continue
          else if (U9z & h3z.ChartEngine.CANDLEEVEN && d9z.Open != d9z.Close) continue
          else if (U9z & h3z.ChartEngine.CLOSEUP && d9z.Close <= d9z.iqPrevClose) continue
          else if (U9z & h3z.ChartEngine.CLOSEDOWN && d9z.Close >= d9z.iqPrevClose) continue
          else if (U9z & h3z.ChartEngine.CLOSEEVEN && d9z.Close != d9z.iqPrevClose) continue
        }
        if (d9z.transform) {
          d9z = d9z.transform
        }
        M9z = d9z.Open
        p9z = d9z.Close
        u9z = d9z.cache
        y3h.m3E(0)
        I9z = y3h.U2E(W9z, z9z)
        if (I9z < K9z.cacheLeft || I9z > K9z.cacheRight || !u9z.top) {
          C9z = x9z.semiLog ? this.pixelFromPrice(d9z.High, K9z) : (x9z.high - d9z.High) * x9z.multiplier + x9z.top
          a9z = x9z.semiLog ? this.pixelFromPrice(d9z.Low, K9z) : (x9z.high - d9z.Low) * x9z.multiplier + x9z.top
          y3h.m3E(5)
          O9z = y3h.s2E(C9z, a9z)
          if (C9z < B9z) {
            if (C9z + O9z < B9z) {
              u9z.top = C9z
              u9z.bottom = C9z
              continue
            }
            y3h.m3E(5)
            O9z -= y3h.U2E(C9z, B9z)
            C9z = B9z
          }
          if (C9z + O9z > Y9z) {
            y3h.m3E(23)
            O9z -= y3h.U2E(O9z, Y9z, C9z)
          }
          u9z.top = C9z
          u9z.bottom = u9z.top + O9z
        }
        if (u9z.top >= Y9z) continue
        if (u9z.bottom <= B9z) continue
        s9z = Math.floor(v9z) + 0.5
        m9z.moveTo(s9z, u9z.top)
        m9z.lineTo(s9z, u9z.bottom)
        if (M9z == p9z) {
          m7n = 'volume'
          m7n += '_candle'
          r9z = this.offset
          if (this.layout.chartType == m7n) {
            y3h.m3E(6)
            r9z = y3h.U2E(h9z, 2)
          }
          y3h.m3E(5)
          c9z = y3h.s2E(r9z, s9z)
          y3h.m3E(0)
          j9z = y3h.U2E(r9z, s9z)
          l9z =
            Math.floor(x9z.semiLog ? this.pixelFromPrice(M9z, K9z) : (x9z.high - M9z) * x9z.multiplier + x9z.top) + 0.5
          if (l9z <= Y9z && l9z >= B9z) {
            m9z.moveTo(c9z, l9z)
            m9z.lineTo(j9z, l9z)
          }
        }
      }
      this.canvasColor(L9z)
      m9z.stroke()
    }
    h3z.ChartEngine.prototype.drawBarChartHighPerformance = function(Q9z, P8z, e9z) {
      var N9z,
        i8z,
        A9z,
        n9z,
        r88,
        e88,
        V88,
        q9z,
        T9z,
        R9z,
        F8z,
        D9z,
        f8z,
        d8z,
        V9z,
        H8z,
        b8z,
        E8z,
        o9z,
        t8z,
        S9z,
        y9z,
        g8z,
        k9z
      N9z = Q9z.chart
      i8z = N9z.dataSegment
      A9z = N9z.context
      n9z = this.canvasStyle(P8z)
      if (n9z.width && parseInt(n9z.width, 10) <= 25) {
        r88 = 880197975
        e88 = -186121763
        V88 = 2
        for (var U88 = 1; y3h.X68(U88.toString(), U88.toString().length, 50680) !== r88; U88++) {
          A9z.lineWidth = Math.max(+'4', h3z.stripPX(n9z.width))
          V88 += 2
        }
        if (y3h.X68(V88.toString(), V88.toString().length, 78004) !== e88) {
          A9z.lineWidth = Math.max(1, h3z.stripPX(n9z.width))
        }
      } else {
        A9z.lineWidth = +'1'
      }
      A9z.beginPath()
      q9z = Q9z.yAxis.top
      T9z = Q9z.yAxis.bottom
      f8z = N9z.dataSet.length - N9z.scroll
      d8z = f8z + N9z.maxTicks
      V9z = Q9z.yAxis
      H8z = Q9z.left - 0.5 * this.layout.candleWidth + this.micropixels - +'1'
      y3h.m3E(25)
      var J0n = y3h.U2E(10, 11, 108)
      b8z = N9z.tmpWidth / J0n
      y3h.H2E(5)
      var C0n = y3h.s2E(15, 17)
      E8z = A9z.lineWidth / C0n
      for (var w9z = 0; w9z <= i8z.length; w9z++) {
        H8z += this.layout.candleWidth
        o9z = i8z[w9z]
        if (!o9z) continue
        if (o9z.projection) break
        if (e9z) {
          if (e9z & h3z.ChartEngine.CLOSEUP && o9z.Close <= o9z.iqPrevClose) continue
          else if (e9z & h3z.ChartEngine.CLOSEDOWN && o9z.Close >= o9z.iqPrevClose) continue
          else if (e9z & h3z.ChartEngine.CLOSEEVEN && o9z.Close != o9z.iqPrevClose) continue
        }
        if (o9z.transform) {
          o9z = o9z.transform
        }
        t8z = o9z.Open
        S9z = o9z.Close
        y9z = o9z.cache
        y3h.m3E(0)
        g8z = y3h.s2E(w9z, f8z)
        if (g8z < Q9z.cacheLeft || g8z > Q9z.cacheRight || !y9z.top) {
          R9z = V9z.semiLog ? this.pixelFromPrice(o9z.High, Q9z) : (V9z.high - o9z.High) * V9z.multiplier + V9z.top
          F8z = V9z.semiLog ? this.pixelFromPrice(o9z.Low, Q9z) : (V9z.high - o9z.Low) * V9z.multiplier + V9z.top
          y3h.m3E(5)
          D9z = y3h.U2E(R9z, F8z)
          y9z.open = V9z.semiLog ? this.pixelFromPrice(t8z, Q9z) : (V9z.high - t8z) * V9z.multiplier + V9z.top
          y9z.close = V9z.semiLog ? this.pixelFromPrice(S9z, Q9z) : (V9z.high - S9z) * V9z.multiplier + V9z.top
          if (R9z < q9z) {
            if (R9z + D9z < q9z) {
              y9z.top = R9z
              y9z.bottom = R9z
              continue
            }
            y3h.H2E(5)
            D9z -= y3h.U2E(R9z, q9z)
            R9z = q9z
          }
          if (R9z + D9z > T9z) {
            y3h.H2E(23)
            D9z -= y3h.U2E(D9z, T9z, R9z)
          }
          y9z.top = R9z
          y3h.H2E(0)
          y9z.bottom = y3h.U2E(D9z, R9z)
        }
        k9z = Math.floor(H8z) + +'0.5'
        if (y9z.top < T9z && y9z.bottom > q9z) {
          A9z.moveTo(k9z, y9z.top - E8z)
          A9z.lineTo(k9z, y9z.bottom + E8z)
        }
        if (y9z.open > q9z && y9z.open < T9z) {
          A9z.moveTo(k9z, y9z.open)
          y3h.H2E(5)
          A9z.lineTo(y3h.s2E(b8z, k9z), y9z.open)
        }
        if (y9z.close > q9z && y9z.close < T9z) {
          A9z.moveTo(k9z, y9z.close)
          y3h.m3E(0)
          A9z.lineTo(y3h.s2E(b8z, k9z), y9z.close)
        }
      }
      this.canvasColor(P8z)
      A9z.stroke()
      A9z.closePath()
      A9z.lineWidth = 1
    }
    h3z.ChartEngine.prototype.plotLineChart = function(h8z, r8z, G8z, m8z, q8z) {
      var R8z,
        a8z,
        y8z,
        s8z,
        M8z,
        J8z,
        C8z,
        L8z,
        U8z,
        k8z,
        N8z,
        Z8z,
        z8z,
        Q8z,
        W8z,
        B8z,
        I8z,
        K8z,
        x8z,
        c8z,
        A8z,
        u8z,
        l8z,
        Y8z,
        j8z,
        v8z,
        o8z,
        p8z,
        V8z,
        X8z,
        D8z
      R8z = !'1'
      a8z = ![]
      y8z = !{}
      s8z = 0
      M8z = []
      if (m8z) {
        R8z = m8z.skipProjections
        a8z = m8z.skipTransform
        y8z = m8z.noSlopes
        s8z = m8z.tension
      }
      J8z = h8z.chart
      C8z = this.chart.context
      L8z = !!'1'
      U8z = h8z.yAxis
      k8z = U8z.top
      N8z = U8z.bottom
      Z8z = J8z.dataSet.length - J8z.scroll
      z8z = null
      Q8z = {}
      W8z = [0, 0]
      B8z = this.layout.candleWidth
      y3h.m3E(9)
      var K0n = y3h.U2E(46, 19, 10, 18)
      y3h.m3E(26)
      var r0n = y3h.U2E(17, 5, 3, 3)
      I8z = h8z.left - (m8z.noSlopes ? K0n : 0.5) * B8z + this.micropixels - r0n
      this.startClip(h8z.name)
      C8z.beginPath()
      for (var O8z = 0; O8z <= r8z.length; O8z++) {
        y3h.H2E(6)
        I8z += y3h.U2E(B8z, 2)
        if (m8z.noSlopes) {
          y3h.H2E(6)
          I8z += y3h.U2E(B8z, 2)
        }
        B8z = this.layout.candleWidth
        if (!m8z.noSlopes) {
          y3h.m3E(6)
          I8z += y3h.s2E(B8z, 2)
        }
        K8z = r8z[O8z]
        if (!K8z) continue
        if (R8z && K8z.projection) break
        if (K8z.candleWidth) {
          if (!m8z.noSlopes) {
            y3h.H2E(8)
            var e0n = y3h.s2E(50, 12, 4)
            I8z += (K8z.candleWidth - B8z) / e0n
          }
          B8z = K8z.candleWidth
        }
        if (!a8z && K8z.transform) {
          K8z = K8z.transform
        }
        x8z = I8z
        c8z = K8z.cache
        y3h.m3E(0)
        A8z = y3h.s2E(O8z, Z8z)
        if (!K8z[G8z] && K8z[G8z] !== ('0' | 0)) continue
        if (A8z < h8z.cacheLeft || A8z > h8z.cacheRight || !c8z[G8z]) {
          c8z[G8z] = U8z.semiLog ? this.pixelFromPrice(K8z[G8z], h8z) : (U8z.high - K8z[G8z]) * U8z.multiplier + U8z.top
        }
        if (x8z <= h8z.right) {
          z8z = K8z
        }
        if (O8z == r8z.length - 1) {
          if (this.extendLastTick) {
            y3h.m3E(6)
            x8z += y3h.U2E(B8z, 2)
          }
          if (m8z.lastTickOffset) {
            x8z += m8z.lastTickOffset
          }
        }
        u8z = c8z[G8z]
        l8z = null
        if (q8z) {
          Y8z = q8z(this, K8z)
          if (!Y8z) continue
          if (typeof Y8z == 'object') {
            l8z = Y8z.pattern
            Y8z = Y8z.color
          }
          if (C8z.strokeStyle != Y8z) {
            if (!L8z) {
              C8z.stroke()
              C8z.beginPath()
              C8z.moveTo(W8z[0], W8z[1])
            }
            C8z.strokeStyle = Y8z
            Q8z[Y8z] = 1
          }
        }
        if (L8z) {
          L8z = !{}
          if (y8z || Z8z <= 0) {
            C8z.moveTo(O8z ? x8z : 0, u8z)
            if (s8z) {
              M8z.push(x8z, u8z)
            } else {
              if (l8z) {
                C8z.dashedLineTo(0, u8z, x8z, u8z, l8z)
              } else {
                C8z.lineTo(x8z, u8z)
              }
            }
          } else if (Z8z > 0) {
            j8z = J8z.dataSet[Z8z]
            if (!a8z && j8z.transform) {
              j8z = j8z.transform
            }
            v8z = j8z[G8z]
            if (!v8z || isNaN(v8z)) {
              C8z.moveTo(O8z ? x8z : 0, u8z)
              if (s8z) {
                M8z.push(x8z, u8z)
              }
            } else {
              v8z = U8z.semiLog ? this.pixelFromPrice(v8z, h8z) : (U8z.high - v8z) * U8z.multiplier + U8z.top
              y3h.m3E(5)
              o8z = y3h.U2E(B8z, x8z)
              if (l8z) {
                C8z.dashedLineTo(o8z, v8z, x8z, u8z, l8z)
              } else {
                C8z.moveTo(o8z, v8z)
                if (s8z) {
                  M8z.push(o8z, v8z, x8z, u8z)
                } else {
                  C8z.lineTo(x8z, u8z)
                }
              }
            }
          }
        } else {
          if (y8z) {
            y3h.m3E(3)
            p8z = r8z[y3h.U2E('1', O8z)]
            if (!p8z) continue
            if (!a8z && p8z.transform) {
              p8z = p8z.transform
            }
            if (O8z) {
              if (l8z) {
                C8z.dashedLineTo(W8z['0' - 0], W8z[1], x8z, W8z[1], l8z)
              } else {
                C8z.lineTo(x8z, W8z[1])
              }
              C8z.moveTo(x8z, u8z)
            }
            if (O8z == r8z.length - 1) {
              if (l8z) {
                y3h.m3E(0)
                C8z.dashedLineTo(x8z, u8z, y3h.U2E(B8z, x8z), u8z, l8z)
              } else {
                y3h.m3E(0)
                C8z.lineTo(y3h.s2E(B8z, x8z), u8z)
              }
            }
          } else {
            if (l8z) {
              C8z.dashedLineTo(W8z[0], W8z[1], x8z, u8z, l8z)
            } else {
              if (s8z) {
                M8z.push(x8z, u8z)
              } else {
                C8z.lineTo(x8z, u8z)
              }
            }
          }
        }
        W8z = [x8z, u8z]
        if (O8z === r8z.length - ('1' | 0) && s8z) {
          M8z.push(x8z, u8z)
          O3z(M8z, s8z, C8z)
        }
      }
      C8z.stroke()
      this.endClip()
      if (m8z.label && z8z) {
        if (U8z.priceFormatter) {
          V8z = U8z.priceFormatter(this, h8z, z8z[G8z], m8z.labelDecimalPlaces)
        } else {
          V8z = this.formatYAxisPrice(z8z[G8z], h8z, m8z.labelDecimalPlaces)
        }
        X8z = this.yaxisLabelStyle
        if (h8z.yAxis.yaxisLabelStyle) {
          X8z = h8z.yAxis.yaxisLabelStyle
        }
        D8z = X8z == 'noop' ? C8z.strokeStyle : null
        this.yAxisLabels.push({
          src: 'plot',
          args: [h8z, V8z, z8z.cache[G8z], X8z == 'noop' ? '#FFFFFF' : C8z.strokeStyle, D8z],
        })
      }
      return Q8z
    }
    h3z.ChartEngine.prototype.plotMountainChart = function(S8z, O2A, b2A, t2A) {
      var W2A,
        l2A,
        d2A,
        g2A,
        F2A,
        h2A,
        T8z,
        B2A,
        K2A,
        C2A,
        x2A,
        n8z,
        f2A,
        i2A,
        w8z,
        m2A,
        e8z,
        U2A,
        G2A,
        H2A,
        u2A,
        P2A,
        G28,
        x28,
        j28
      W2A = !!''
      l2A = ![]
      d2A = ![]
      g2A = 0
      F2A = []
      if (t2A) {
        W2A = t2A.skipProjections
        l2A = t2A.skipTransform
        d2A = t2A.reverse
        g2A = t2A.tension
      }
      h2A = S8z.chart
      T8z = this.chart.context
      B2A = !!'1'
      K2A = S8z.yAxis.top
      C2A = S8z.yAxis.bottom
      this.startClip(S8z.name)
      T8z.beginPath()
      x2A = h2A.dataSet.length - h2A.scroll
      n8z = null
      f2A = null
      i2A = S8z.yAxis
      w8z = 0
      m2A = this.layout.candleWidth
      for (var E2A = 0; E2A <= O2A.length; E2A++) {
        e8z = O2A[E2A]
        if (!e8z) continue
        if (W2A && e8z.projection) break
        if (!l2A && e8z.transform) {
          e8z = e8z.transform
        }
        U2A = e8z.cache
        y3h.m3E(0)
        G2A = y3h.s2E(E2A, x2A)
        if (G2A < S8z.cacheLeft || G2A > S8z.cacheRight || !U2A[b2A]) {
          if (!e8z[b2A] && e8z[b2A] !== 0) continue
          U2A[b2A] = i2A.semiLog ? this.pixelFromPrice(e8z[b2A], S8z) : (i2A.high - e8z[b2A]) * i2A.multiplier + i2A.top
        }
        y3h.m3E(27)
        var V0n = y3h.s2E(26, 13, 13)
        w8z = S8z.left + (E2A + 0.5) * m2A + this.micropixels - V0n
        if (E2A == O2A.length - 1) {
          if (this.extendLastTick) {
            y3h.m3E(28)
            w8z += y3h.U2E(m2A, '2', 0)
          }
          if (t2A.lastTickOffset) {
            w8z += t2A.lastTickOffset
          }
        }
        if (n8z === null) {
          n8z = x2A >= 0 ? 0 : w8z
        }
        H2A = U2A[b2A]
        if (f2A === null) {
          f2A = H2A
        }
        if (B2A) {
          B2A = ![]
          if (x2A <= 0) {
            T8z.moveTo(n8z, H2A)
            if (g2A) {
              F2A.push(n8z, H2A)
            }
          } else {
            u2A = h2A.dataSet[x2A]
            if (u2A.transform) {
              u2A = u2A.transform
            }
            P2A = u2A[b2A]
            P2A = i2A.semiLog ? this.pixelFromPrice(P2A, S8z) : (i2A.high - P2A) * i2A.multiplier + i2A.top
            y3h.H2E(5)
            n8z = y3h.s2E(m2A, w8z)
            T8z.moveTo(n8z, P2A)
            if (g2A) {
              F2A.push(n8z, P2A, w8z, H2A)
            } else {
              T8z.lineTo(w8z, H2A)
            }
          }
        } else {
          if (g2A) {
            F2A.push(w8z, H2A)
          } else {
            T8z.lineTo(w8z, H2A)
          }
        }
        if (E2A === O2A.length - 1 && g2A) {
          F2A.push(w8z, H2A)
          O3z(F2A, g2A, T8z)
        }
      }
      T8z.lineTo(w8z, d2A ? K2A : C2A)
      T8z.lineTo(n8z, d2A ? K2A : C2A)
      if (d2A) {
        if (f2A < K2A) {
          f2A = K2A
        }
      } else {
        G28 = 477708849
        x28 = -437077621
        y3h.H2E(4)
        j28 = y3h.U2E(0, '2')
        for (var A28 = 1; y3h.E68(A28.toString(), A28.toString().length, 56574) !== G28; A28++) {
          if (f2A < C2A) {
            f2A = C2A
          }
          j28 += 2
        }
        if (y3h.E68(j28.toString(), j28.toString().length, 54026) !== x28) {
          if (f2A < C2A) {
            f2A = C2A
          }
        }
        if (f2A > C2A) {
          f2A = C2A
        }
      }
      T8z.lineTo(n8z, f2A)
      T8z.fill()
      T8z.closePath()
      this.endClip()
    }
    h3z.ChartEngine.prototype.drawMountainChart = function(s2A, X2A, o2A) {
      var v2A, Y2A, y28, v28, a28, j2A, L2A, Z2A, c2A, I2A, r2A, p2A, a2A, z2A, y2A, M2A, Y7n, J2A, x7n, G7n, N7n
      v2A = this.chart.context
      if (!X2A) {
        X2A = 'stx_mountain_chart'
      }
      Y2A = this.canvasStyle(X2A)
      if (Y2A.width && parseInt(Y2A.width, 10) <= 25) {
        y28 = -1099616026
        v28 = -645224657
        a28 = 2
        for (var z28 = 1; y3h.X68(z28.toString(), z28.toString().length, 43837) !== y28; z28++) {
          v2A.lineWidth = Math.max(5, h3z.stripPX(Y2A.width))
          a28 += 2
        }
        if (y3h.X68(a28.toString(), a28.toString().length, 13360) !== v28) {
          v2A.lineWidth = Math.max(+'5', h3z.stripPX(Y2A.width))
        }
        v2A.lineWidth = Math.max(1, h3z.stripPX(Y2A.width))
      } else {
        y3h.m3E(5)
        v2A.lineWidth = y3h.U2E(0, '1')
      }
      j2A = this.pixelFromPrice(s2A.chart.highValue, s2A)
      if (isNaN(j2A)) {
        j2A = 0
      }
      L2A = Y2A.backgroundColor
      Z2A = Y2A.color
      if (Z2A && !h3z.isTransparent(Z2A)) {
        c2A = v2A.createLinearGradient(0, j2A, 0, s2A.yAxis.bottom)
        y3h.H2E(5)
        c2A.addColorStop(y3h.U2E(0, '0'), L2A)
        c2A.addColorStop(1, Z2A)
        v2A.fillStyle = c2A
      } else {
        v2A.fillStyle = L2A
      }
      I2A = { skipProjections: !!{} }
      r2A = s2A.chart
      p2A = r2A.dataSegment
      if (r2A.tension) {
        I2A.tension = r2A.tension
      }
      if (r2A.lastTickOffset) {
        I2A.lastTickOffset = r2A.lastTickOffset
      }
      a2A = parseInt(Y2A.padding, 10)
      z2A = Y2A.borderTopColor
      y2A = null
      if (z2A && !h3z.isTransparent(z2A)) {
        if (a2A && !h3z.isIE8) {
          M2A = this.scratchContext
          if (!M2A) {
            Y7n = '2'
            Y7n += 'd'
            J2A = v2A.canvas.cloneNode(!'')
            M2A = this.scratchContext = J2A.getContext(Y7n)
            M2A.canvas = J2A
          }
          M2A.canvas.height = v2A.canvas.height
          M2A.canvas.width = v2A.canvas.width
          M2A.drawImage(v2A.canvas, 0, 0)
          v2A.clearRect(0, 0, v2A.canvas.width, v2A.canvas.height)
        }
      }
      this.plotMountainChart(s2A, p2A, 'Close', I2A)
      if (z2A && !h3z.isTransparent(z2A)) {
        if (a2A && !h3z.isIE8) {
          x7n = 'destinati'
          x7n += 'on-over'
          G7n = 'Clo'
          G7n += 'se'
          N7n = 'dest'
          N7n += 'ination-out'
          v2A.save()
          y3h.m3E(12)
          v2A.lineWidth += y3h.U2E(2, a2A)
          v2A.globalCompositeOperation = N7n
          this.plotLineChart(s2A, p2A, G7n, I2A)
          v2A.globalCompositeOperation = x7n
          v2A.scale(1 / this.adjustedDisplayPixelRatio, 1 / this.adjustedDisplayPixelRatio)
          v2A.drawImage(this.scratchContext.canvas, 0, 0)
          v2A.restore()
        }
        v2A.strokeStyle = z2A
        y2A = this.plotLineChart(s2A, p2A, 'Close', I2A, o2A)
      }
      v2A.lineWidth = +'1'
      return y2A
    }
    h3z[Y3E][x3E][n3E] = function(x4A, d4A) {
      y3h.Q3B = function(Y3B) {
        if (y3h) return y3h.Q9x(Y3B)
      }
      y3h.T3B = function(A3B) {
        if (y3h && A3B) return y3h.Y9x(A3B)
      }
      y3h.g3B = function(W3B) {
        if (y3h) return y3h.Y9x(W3B)
      }
      y3h.o3B = function(M3B) {
        if (y3h) return y3h.Y9x(M3B)
      }
      y3h.l2B = function(Z2B) {
        if (y3h) return y3h.Q9x(Z2B)
      }
      y3h.s1B = function(C1B) {
        if (y3h) return y3h.Q9x(C1B)
      }
      y3h.v1B = function(a1B) {
        if (y3h && a1B) return y3h.Y9x(a1B)
      }
      y3h.S1B = function(D1B) {
        if (y3h && D1B) return y3h.Y9x(D1B)
      }
      var l9e = y3h.b0B('39bf') ? 5350055862 : 2127342374,
        V9e = -(y3h.l0B('e458') ? 1713930699 : 1910123447),
        n9e = y3h.S1B('6c2d') ? 2128236636 : 3791239128,
        q9e = -(y3h.P1B('46cc') ? 530941298 : 292114280)
      if (
        y3h.y03(y3h.v1B('695e') ? 5 : 0, y3h.i1B('4633') ? 191356 : 399015) === l9e ||
        y3h.Q03(y3h.s1B('ac1b') ? 7 : 0, 849682) === V9e ||
        y3h.Q03(y3h.L2B('4645') ? 29 : 7, y3h.j2B('355c') ? 993667 : 661335) === n9e ||
        y3h.Q03(0, 770875) === q9e ||
        t2zz.d9e()
      ) {
        var h7E = y3h.l2B('ec63') ? 'runAppend' : ''
        var m7E = y3h.J2B('7ac5') ? '' : 'magnetize'
        var H5E = y3h.o3B('ce34') ? 'findHighlights' : ''
        var U5E = 'drawTemporaryPanel'
        var s5E = y3h.g3B('53f5') ? '' : 'resizePanels'
        var r5E = y3h.T3B('acea') ? '' : 'move'
        var d5E = y3h.Q3B('9df8') ? 'drawingLine' : ''
        var P5E = 'repositioner'
        var E5E = 'reposition'
        var c5E = 'magnetizedPrice'
        var a5E = 'panelName'
        var Q5E = 'repositioningDrawing'
        var G5E = 'doDisplayCrosshairs'
        var S5E = 'dragToDraw'
        var j5E = 'Drawing'
        var l5E = 'setCrosshairColors'
        var n5E = 'crossY'
        var x5E = 'px'
        var Y5E = 0.5
        var y5E = 'pixelFromTick'
        var F5E = 'style'
        var o5E = 'crossX'
        var T5E = 'controls'
        var W5E = 'measure'
        var b5E = 'context'
        var g5E = 'render'
        var L5E = 'activeDrawing'
        var D5E = 'requestAnimationFrame'
        var t5E = 'useAnimation'
        var K5E = 'updateChartAccessories'
        var q5E = 'dispatch'
        var O5E = 've'
        var A5E = '75973'
        var M5E = '481121234'
        var e5E = '147680680'
        var J5E = 'initialWhitespace'
        var Z5E = 'shift'
        var i5E = 'micropixels'
        var N5E = 'microscroll'
        var C5E = '0'
        var k5E = 'grabStartMicropixels'
        var z5E = 'yToleranceBroken'
        var f5E = 'yTolerance'
        var R5E = 'n'
        var w5E = 'a'
        var u5E = 'allowScroll'
        var V5E = 'H2E'
        var X5E = 'grabStartZoom'
        var I5E = 'zoom'
        var B5E = 'grabbingPanel'
        var v5E = 'whichYAxis'
        var p5E = null
        var h5E = 'span'
        var m5E = 'whitespace'
        var H4E = 'U2E'
        var U4E = 'X68'
        var s4E = '2'
        var r4E = '957622638'
        var d4E = 'setCandleWidth'
        var P4E = 'pinchingCenter'
        var E4E = 'ipadMaxTicks'
        var c4E = 0.499
        var a4E = 'round'
        var Q4E = 'toString'
        var G4E = 'E68'
        var S4E = '626324659'
        var j4E = 'ipad'
        var l4E = 1.1
        var n4E = 0.9
        var x4E = 0.1
        var Y4E = 'candleWidth'
        var y4E = 'layout'
        var F4E = 'minimumCandleWidth'
        var o4E = 'grabStartCandleWidth'
        var T4E = 'maxTicks'
        var W4E = 's2E'
        var b4E = 'm3E'
        var g4E = 'zoom-y'
        var L4E = 'x'
        var D4E = 'zoom-'
        var t4E = 'oom-x'
        var K4E = 'indexOf'
        var q4E = 'grabMode'
        var O4E = 'allowZoom'
        var A4E = 'grabOverrideClick'
        var M4E = 'abs'
        var e4E = 'yAxis'
        var J4E = 'grabStartScrollY'
        var Z4E = 'grabStartY'
        var i4E = 'scroll'
        var N4E = 'grabStartScrollX'
        var C4E = 'grabStartX'
        var k4E = 'vectorType'
        var z4E = 'currentVectorParameters'
        var f4E = 'magnet'
        var R4E = 'displaySticky'
        var w4E = 'series'
        var u4E = 'highlight'
        var V4E = 'overlays'
        var X4E = 'tempCanvas'
        var I4E = 'clearCanvas'
        var B4E = 'anyHighlighted'
        var v4E = 'an'
        var p4E = 'p'
        var h4E = 'o'
        var m4E = 'z'
        var H1E = 'draw'
        var U1E = '100'
        var s1E = 'lastDraw'
        var r1E = 'now'
        var d1E = 'valueFromPixelUntransform'
        var P1E = 'userLevel'
        var E1E = 'baseline'
        var c1E = 'panels'
        var a1E = 'repositioningBaseline'
        var Q1E = 'resizingPanel'
        var G1E = 'displayCrosshairs'
        var S1E = 'undisplayCrosshairs'
        var j1E = 'grabbingScreen'
        var l1E = 'overYAxis'
        var n1E = 'xaxisHeight'
        var x1E = 'overXAxis'
        var Y1E = 'canvasHeight'
        var y1E = 'xAxisAsFooter'
        var F1E = ''
        var o1E = 'insideChart'
        var T1E = 'adjustIfNecessary'
        var W1E = 'crosshairValue'
        var b1E = 'pixelFromPriceTransform'
        var g1E = 'length'
        var L1E = 'horizontalCrosshairField'
        var D1E = 'preferences'
        var t1E = 'name'
        var K1E = 'valueFromPixel'
        var q1E = 'tickFromPixel'
        var O1E = 'crosshairTick'
        var A1E = 'dataSet'
        var M1E = 'panel'
        var e1E = 'whichPanel'
        var J1E = 'currentPanel'
        var Z1E = 'backOutX'
        var i1E = 'cx'
        var N1E = 'backOutY'
        var C1E = 'crossYActualPos'
        var k1E = 'cy'
        var z1E = 'crosshairY'
        var f1E = 'crosshairX'
        var R1E = 'hasDragged'
        var w1E = '1'
        var u1E = 'cancelLongHold'
        var V1E = 'bottom'
        var X1E = 'right'
        var I1E = 'left'
        var B1E = 'top'
        var v1E = 'getBoundingClientRect'
        var p1E = 'runPrepend'
        var h1E = 'resizeChart'
        var m1E = 'clientWidth'
        var H3E = 'width'
        var U3E = 'clientHeight'
        var s3E = 'container'
        var r3E = 'devicePixelRatio'
        var d3E = 'floor'
        var P3E = 'height'
        var E3E = 'isIOS7or8'
        var c3E = 'isAndroid'
        var a3E = 'canvas'
        var Q3E = 'chart'
        var G3E = 'nner'
        var S3E = 'emovei'
        var j3E = 'ous'
        var l3E = 'm'
        var y3E = 1497260714
        var F3E = 1484512249
        var o3E = 1091974933
        var T3E = 792707464
        var W3E = 432192025
        var b3E = 374949888
        var g3E = 95407
        var L3E = 93600
        var D3E = 88052
        var t3E = 81660
        var K3E = 74361
        var q3E = 57945
        var O3E = 54955
        var A3E = 53672
        var M3E = 50843
        var e3E = 32514
        var J3E = 6067
        var Z3E = 37
        var i3E = 35
        var N3E = 30
        var C3E = 29
        var k3E = 25
        var z3E = 20
        var f3E = 17
        var R3E = 12
        var w3E = 10
        var u3E = 9
        var V3E = 7
        var X3E = 6
        var I3E = 5
        var B3E = 4
        var v3E = 2
        var p3E = 1
        var h3E = 0
        var M7n,
          q2A,
          H4A,
          S2A,
          f4A,
          V2A,
          b4A,
          n2A,
          b7n,
          j7n,
          w2A,
          D2A,
          N2A,
          k2A,
          y7n,
          A7n,
          i4A,
          R2A,
          e2A,
          O28,
          B28,
          H28,
          T2A,
          E4A,
          t4A,
          F4A,
          M88,
          z88,
          o88,
          P4A,
          Q2A,
          v7n,
          Y88,
          N88,
          G88,
          V28,
          u28,
          U28,
          a7n,
          g4A,
          A2A,
          F28,
          t28,
          m28
        M7n = l3E
        M7n += j3E
        M7n += S3E
        M7n += G3E
        if (!this[Q3E][a3E]) {
          return
        }
        if (!h3z[c3E] && !h3z[E3E]) {
          if (
            this[Q3E][a3E][P3E] != Math[d3E](this[r3E] * this[Q3E][s3E][U3E]) ||
            this[Q3E][a3E][H3E] != Math[d3E](this[r3E] * this[Q3E][s3E][m1E])
          ) {
            this[h1E]()
            return
          }
        }
        if (this[p1E](n3E, arguments)) {
          return
        }
        H4A = this[s3E][v1E]()
        this[B1E] = H4A[B1E]
        this[I1E] = H4A[I1E]
        this[X1E] = this[I1E] + this[H3E]
        this[V1E] = this[B1E] + this[P3E]
        this[u1E] = !!w1E
        this[R1E] = !!{}
        h3z[Y3E][f1E] = x4A
        h3z[Y3E][z1E] = d4A
        S2A = this[k1E] = this[C1E] = this[N1E](h3z[Y3E][z1E])
        f4A = this[i1E] = this[Z1E](h3z[Y3E][f1E])
        this[J1E] = this[e1E](S2A)
        if (!this[J1E]) {
          this[J1E] = this[Q3E][M1E]
        }
        if (!this[J1E]) {
          return
        }
        V2A = this[J1E][Q3E]
        if (V2A[A1E]) {
          this[O1E] = this[q1E](f4A, V2A)
          q2A = this[K1E](S2A, this[J1E])
          b4A = this[J1E][t1E] == Q3E ? this[D1E][L1E] : this[J1E][L1E]
          if (b4A && this[O1E] < V2A[A1E][g1E] && this[O1E] > -p3E) {
            q2A = V2A[A1E][this[O1E]][b4A]
            this[C1E] = this[b1E](q2A, this[J1E])
          }
          this[W1E] = this[T1E](this[J1E], this[O1E], q2A)
        }
        if (
          h3z[Y3E][f1E] >= this[I1E] &&
          h3z[Y3E][f1E] <= this[X1E] &&
          h3z[Y3E][z1E] >= this[B1E] &&
          h3z[Y3E][z1E] <= this[V1E]
        ) {
          h3z[Y3E][o1E] = !!p3E
        } else {
          h3z[Y3E][o1E] = !!F1E
        }
        n2A = this[y1E] === !![] ? this[Q3E][Y1E] : this[Q3E][M1E][V1E]
        this[x1E] = h3z[Y3E][o1E] && h3z[Y3E][z1E] <= n2A + this[B1E] && h3z[Y3E][z1E] > n2A - this[n1E] + this[B1E]
        this[l1E] = (this[i1E] >= this[J1E][X1E] || this[i1E] <= this[J1E][I1E]) && h3z[Y3E][o1E]
        if (this[x1E] || this[l1E] || (!h3z[Y3E][o1E] && !this[j1E])) {
          this[S1E]()
          if (!this[x1E] && !this[l1E]) {
            return
          }
        }
        if (!this[G1E] && !h3z[Y3E][Q1E]) {
          this[S1E]()
          return
        }
        if (this[a1E]) {
          A2A = this[c1E][this[Q3E][M1E][t1E]]
          this[Q3E][E1E][P1E] = this[T1E](A2A, this[O1E], this[d1E](this[N1E](h3z[Y3E][z1E]), A2A))
          if (Date[r1E]() - this[a1E][s1E] > U1E - h3E) {
            this[H1E]()
            this[a1E][s1E] = Date[r1E]()
          }
          return
        }
        if (this[j1E] && !h3z[Y3E][Q1E]) {
          b7n = m4E
          b7n += h4E
          b7n += h4E
          b7n += l3E
          j7n = p4E
          j7n += v4E
          if (this[B4E]) {
            h3z[I4E](this[Q3E][X4E], this)
            this[B4E] = ![]
            for (w2A in this[V4E]) {
              this[V4E][w2A][u4E] = !!h3E
            }
            for (w2A in V2A[w4E]) {
              V2A[w4E][w2A][u4E] = !{}
            }
            this[R4E]()
          }
          if (this[D1E][f4E] && this[z4E][k4E]) {
            h3z[I4E](this[Q3E][X4E], this)
          }
          if (this[C4E] == -p3E) {
            this[C4E] = h3z[Y3E][f1E]
            this[N4E] = V2A[i4E]
          }
          if (this[Z4E] == -p3E) {
            this[Z4E] = h3z[Y3E][z1E]
            this[J4E] = V2A[M1E][e4E][i4E]
          }
          D2A = h3z[Y3E][f1E] - this[C4E]
          N2A = h3z[Y3E][z1E] - this[Z4E]
          if (D2A === h3E && N2A === h3E) {
            return
          }
          if (Math[M4E](D2A) + Math[M4E](N2A) > I3E) {
            this[A4E] = !F1E
          }
          if (this[O4E] && this[q4E] != j7n && (this[q4E][K4E](b7n) === h3E || this[x1E] || this[l1E])) {
            y7n = m4E
            y7n += t4E
            if (this[q4E] === F1E) {
              A7n = D4E
              A7n += L4E
              if (this[x1E]) {
                this[q4E] = A7n
              } else if (this[l1E]) {
                this[q4E] = g4E
              }
            }
            if (this[q4E] == y7n) {
              N2A = h3E
            } else if (this[q4E] == g4E) {
              D2A = h3E
            }
            y3h[b4E](X3E)
            k2A = y3h[W4E](D2A, k3E)
            i4A = !!p3E
            if (V2A[i4E] <= V2A[T4E]) {
              i4A = !!F1E
            }
            R2A = this[o4E] + k2A
            if (R2A < this[F4E]) {
              R2A = this[F4E]
            }
            e2A = (this[y4E][Y4E] - R2A) / this[y4E][Y4E]
            if (e2A > x4E) {
              R2A = this[y4E][Y4E] * n4E
            } else if (e2A < -x4E) {
              R2A = this[y4E][Y4E] * l4E
            }
            if (k2A) {
              if (h3z[j4E]) {
                O28 = -W3E
                B28 = +S4E
                H28 = v3E
                for (var k28 = p3E; y3h[G4E](k28[Q4E](), k28[Q4E]()[g1E], K3E) !== O28; k28++) {
                  if (
                    Math[a4E](this[Q3E][H3E] / this[y4E][Y4E] - c4E) - p3E < h3z[Y3E][E4E] &&
                    Math[a4E](this[Q3E][H3E] / R2A - c4E) - p3E > h3z[Y3E][E4E]
                  ) {
                    return
                  }
                  H28 += v3E
                }
                if (y3h[G4E](H28[Q4E](), H28[Q4E]()[g1E], A3E) !== B28) {
                  if (
                    Math[a4E]((this[Q3E][H3E] * this[y4E][Y4E]) % L3E) * I3E > h3z[Y3E][E4E] ||
                    Math[a4E]((this[Q3E][H3E] % R2A) % D3E) / h3E >= h3z[Y3E][E4E]
                  ) {
                    return
                  }
                }
              }
              if (this[P4E]) {
                E4A = this[Z1E](this[P4E])
                t4A = this[q1E](E4A, V2A)
                this[d4E](R2A, V2A)
                F4A = this[q1E](E4A, V2A)
                M88 = o3E
                y3h[b4E](B3E)
                z88 = y3h[W4E](h3E, r4E)
                o88 = v3E
                for (var Z88 = p3E; y3h[G4E](Z88[Q4E](), Z88[Q4E]()[g1E], J3E) !== M88; Z88++) {
                  y3h[b4E](C3E)
                  V2A[i4E] %= Math[d3E](y3h[W4E](t4A, F4A))
                  o88 += +s4E
                }
                if (y3h[U4E](o88[Q4E](), o88[Q4E]()[g1E], O3E) !== z88) {
                  y3h[b4E](I3E)
                  V2A[i4E] += Math[d3E](y3h[H4E](t4A, F4A))
                }
              } else if (i4A) {
                T2A = Math[a4E](this[Q3E][H3E] / R2A + p3E)
                if (T2A != V2A[T4E]) {
                  V2A[i4E] += Math[a4E]((T2A - V2A[T4E]) / v3E)
                  this[d4E](R2A, V2A)
                }
              } else {
                T2A = Math[a4E](this[Q3E][H3E] / R2A + +w1E)
                if (T2A != Math[a4E](this[Q3E][H3E] / this[y4E][Y4E] + p3E)) {
                  P4A = Math[a4E](this[D1E][m5E] / R2A)
                  V2A[i4E] = V2A[T4E] - P4A
                  this[d4E](R2A, V2A)
                }
              }
            }
            this[y4E][h5E] = p5E
            Q2A = this[v5E](this[B5E], this[i1E])
            if (this[l1E]) {
              Q2A[I5E] = Math[a4E](this[X5E] + N2A)
              if (this[X5E] < Q2A[P3E]) {
                if (Q2A[I5E] >= Q2A[P3E]) {
                  Q2A[I5E] = Q2A[P3E] - (w1E | h3E)
                }
              } else {
                if (Q2A[I5E] <= Q2A[P3E]) {
                  y3h[V5E](N3E)
                  var u0n = y3h[H4E](R3E, Z3E, w3E, u3E, u3E)
                  Q2A[I5E] = Q2A[P3E] + u0n
                }
              }
            }
          } else {
            if (this[u5E]) {
              v7n = p4E
              v7n += w5E
              v7n += R5E
              if (Math[M4E](N2A) < this[f5E]) {
                if (!this[z5E]) {
                  N2A = h3E
                  if (D2A === h3E) {
                    return
                  }
                }
              } else {
                this[z5E] = !!w1E
              }
              if (!this[k5E]) {
                Y88 = y3E
                N88 = F3E
                G88 = v3E
                for (var j88 = p3E; y3h[U4E](j88[Q4E](), j88[Q4E]()[g1E], g3E) !== Y88; j88++) {
                  this[k5E] = V3E
                  G88 += v3E
                }
                if (y3h[G4E](G88[Q4E](), G88[Q4E]()[g1E], t3E) !== N88) {
                  this[k5E] = +C5E
                }
              }
              this[q4E] = v7n
              k2A = Math[a4E](D2A / this[y4E][Y4E])
              this[N5E] = k2A - D2A / this[y4E][Y4E]
              y3h[V5E](z3E)
              var U0n = y3h[H4E](i3E, f3E, f3E)
              this[i5E] = this[y4E][Y4E] * this[N5E] * U0n + this[k5E]
              if (this[Z5E]) {
                k2A *= I3E
              }
              V2A[i4E] = this[N4E] + k2A
              if (V2A[i4E] < p3E) {
                V2A[i4E] = p3E
              }
              if (V2A[i4E] >= V2A[T4E]) {
                this[D1E][m5E] = this[J5E]
              } else {
                this[D1E][m5E] = (V2A[T4E] - V2A[i4E]) * this[y4E][Y4E]
              }
              if (this[J1E][t1E] == V2A[t1E]) {
                this[Q3E][M1E][e4E][i4E] = this[J4E] + N2A
              }
            }
            y3h[V5E](R3E)
            V28 = y3h[H4E](e5E, p3E)
            u28 = -+M5E
            y3h[b4E](R3E)
            U28 = y3h[H4E](s4E, p3E)
            for (var p28 = p3E; y3h[G4E](p28[Q4E](), p28[Q4E]()[g1E], A5E - h3E) !== V28; p28++) {
              a7n = l3E
              a7n += h4E
              a7n += O5E
              this[q5E](a7n, { stx: this, panel: this[J1E], x: this[i1E], y: this[k1E], grab: this[j1E] })
              U28 += v3E
            }
            if (y3h[G4E](U28[Q4E](), U28[Q4E]()[g1E], q3E) !== u28) {
              this[q5E](F1E, { stx: this, panel: this[J1E], x: this[i1E], y: this[k1E], grab: this[j1E] })
            }
          }
          g4A = function(C4A) {
            return function() {
              C4A[H1E]()
              C4A[K5E]()
            }
          }
          if (h3z[Y3E][t5E]) {
            window[D5E](g4A(this))
          } else {
            this[H1E]()
            this[K5E]()
          }
          if (this[L5E]) {
            h3z[I4E](this[Q3E][X4E], this)
            this[L5E][g5E](this[Q3E][X4E][b5E])
            this[L5E][W5E]()
          }
          this[S1E]()
          return
        } else {
          this[q4E] = F1E
        }
        this[B5E] = this[J1E]
        if (this[x1E] || this[l1E]) {
          return
        }
        this[T5E][o5E][F5E][I1E] = this[y5E](this[O1E], V2A) - Y5E + x5E
        this[T5E][n5E][F5E][B1E] = this[C1E] + x5E
        this[l5E]()
        if (h3z[Y3E][o1E] && !h3z[Y3E][Q1E]) {
          if (!h3z[j5E] || !h3z[j5E][this[z4E][k4E]] || !new h3z[j5E][this[z4E][k4E]]()[S5E]) {
            this[G5E]()
          }
          this[K5E]()
        } else {
          this[S1E]()
        }
        if (this[Q5E]) {
          A2A = this[c1E][this[Q5E][a5E]]
          q2A = this[T1E](A2A, this[O1E], this[d1E](this[N1E](h3z[Y3E][z1E]), A2A))
          if (this[D1E][f4E] && this[c5E] && A2A[t1E] == A2A[Q3E][t1E]) {
            q2A = this[T1E](A2A, this[O1E], this[c5E])
          }
          F28 = -b3E
          t28 = T3E
          y3h[b4E](R3E)
          m28 = y3h[H4E](s4E, p3E)
          for (var N28 = p3E; y3h[U4E](N28[Q4E](), N28[Q4E]()[g1E], e3E) !== F28; N28++) {
            h3z[I4E](this[Q3E][X4E], this)
            m28 += v3E
          }
          if (y3h[U4E](m28[Q4E](), m28[Q4E]()[g1E], M3E) !== t28) {
            h3z[I4E](this[Q3E][X4E], this)
          }
          h3z[I4E](this[Q3E][X4E], this)
          this[Q5E][E5E](this[Q3E][X4E][b5E], this[Q5E][P5E], this[O1E], q2A)
          if (this[Q5E][W5E]) {
            this[Q5E][W5E]()
          }
        } else if (h3z[Y3E][d5E]) {
          if (this[L5E]) {
            A2A = this[c1E][this[L5E][a5E]]
            q2A = this[T1E](A2A, this[O1E], this[d1E](this[N1E](h3z[Y3E][z1E]), A2A))
            if (this[D1E][f4E] && this[c5E] && A2A[t1E] == A2A[Q3E][t1E]) {
              q2A = this[T1E](A2A, this[O1E], this[c5E])
            }
            h3z[I4E](this[Q3E][X4E], this)
            this[L5E][r5E](this[Q3E][X4E][b5E], this[O1E], q2A)
            if (this[L5E][W5E]) {
              this[L5E][W5E]()
            }
          }
        } else if (h3z[Y3E][Q1E]) {
          this[s5E]()
          this[U5E]()
        }
        if (h3z[Y3E][o1E]) {
          this[q5E](r5E, { stx: this, panel: this[J1E], x: this[i1E], y: this[k1E], grab: this[j1E] })
          this[H5E]()
        }
        if (this[D1E][f4E] && this[z4E][k4E]) {
          if (!h3z[Y3E][d5E] && !this[B4E]) {
            h3z[I4E](this[Q3E][X4E])
          }
          this[m7E]()
        }
        this[h7E](M7n, arguments)
      } else {
        var h7E = '100'
        var m7E = 'reposition'
        var H5E = 'a'
        var U5E = 'grabOverrideClick'
        var s5E = 'reposition'
        var r5E = 'getBoundingClientRect'
        var d5E = 'U2E'
        var P5E = 'repositioningDrawing'
        var E5E = 'U2E'
        var c5E = 'tickFromPixel'
        var a5E = 'pixelFromTick'
        var Q5E = 'crosshairY'
        var G5E = 'U2E'
        var S5E = 'pinchingCenter'
        var j5E = '481121234'
        var l5E = 'xAxisAsFooter'
        var n5E = 'requestAnimationFrame'
        var x5E = 'tickFromPixel'
        var Y5E = 603
        var y5E = 'userLevel'
        var F5E = 'valueFromPixel'
        var o5E = 'crosshairX'
        var T5E = 'xAxisAsFooter'
        var W5E = 'draw'
        var b5E = 'an'
        var g5E = 'xAxisAsFooter'
        var L5E = 'top'
        var D5E = 'grabStartZoom'
        var t5E = 'initialWhitespace'
        var K5E = 'height'
        var q5E = '481121234'
        var O5E = 'magnet'
        var A5E = 'minimumCandleWidth'
        var M5E = 'crosshairY'
        var e5E = 'yToleranceBroken'
        var J5E = 'yToleranceBroken'
        var Z5E = 'valueFromPixelUntransform'
        var i5E = 'minimumCandleWidth'
        var N5E = 'hasDragged'
        var C5E = 'backOutY'
        var k5E = 'grabStartScrollY'
        var z5E = 'backOutY'
        var f5E = 'devicePixelRatio'
        var R5E = 'devicePixelRatio'
        var w5E = 'an'
        var u5E = 'height'
        var V5E = 'insideChart'
        var X5E = 'toString'
        var I5E = 'E68'
        var B5E = 'top'
        var v5E = '957622638'
        var p5E = 1
        var h5E = 'tickFromPixel'
        var m5E = 'horizontalCrosshairField'
        var H4E = 'right'
        var U4E = '957622638'
        var s4E = 'highlight'
        var r4E = 'hasDragged'
        var d4E = '481121234'
        var P4E = 'floor'
        var E4E = 'pinchingCenter'
        var c4E = 64400
        var a4E = 'oom-x'
        var Q4E = 'horizontalCrosshairField'
        var G4E = 'whichPanel'
        var S4E = 'resizingPanel'
        var j4E = 'getBoundingClientRect'
        var l4E = 793
        var n4E = 231
        var x4E = 581
        var Y4E = 'zoom-'
        var y4E = 'top'
        var F4E = 'resizeChart'
        var o4E = 'userLevel'
        var T4E = 'insideChart'
        var W4E = 'cancelLongHold'
        var b4E = 'canvas'
        var g4E = 'container'
        var L4E = 'left'
        var D4E = ''
        var t4E = ''
        var K4E = 'now'
        var q4E = 'grabStartX'
        var O4E = 'backOutY'
        var A4E = 'vectorType'
        var M4E = 'height'
        var e4E = 'crosshairTick'
        var J4E = 'crosshairX'
        var Z4E = 'height'
        var i4E = 'cancelLongHold'
        var N4E = 'right'
        var C4E = 'valueFromPixelUntransform'
        var k4E = 'currentVectorParameters'
        var z4E = 'top'
        var f4E = 'U2E'
        var R4E = 'hasDragged'
        var w4E = 'now'
        var u4E = 'horizontalCrosshairField'
        var V4E = ''
        var X4E = 'displayCrosshairs'
        var I4E = 'magnet'
        var B4E = 'getBoundingClientRect'
        var v4E = 'hasDragged'
        var p4E = 'valueFromPixel'
        var h4E = 'adjustIfNecessary'
        var m4E = 'clientHeight'
        var H1E = 'height'
        var U1E = 'reposition'
        var s1E = 'initialWhitespace'
        var r1E = 'cy'
        var d1E = 'crosshairY'
        var P1E = 'height'
        var E1E = 'an'
        var c1E = 'valueFromPixelUntransform'
        var a1E = 'crosshairX'
        var Q1E = 'hasDragged'
        var G1E = 'magnet'
        var S1E = 'whichPanel'
        var j1E = 'getBoundingClientRect'
        var l1E = 'a'
        var n1E = 'hasDragged'
        var x1E = 'panel'
        var Y1E = ''
        var y1E = 'cx'
        var F1E = 'container'
        var o1E = 'an'
        var T1E = 'preferences'
        var W1E = 'm'
        var b1E = 'pinchingCenter'
        var g1E = 'ous'
        var L1E = 'clientHeight'
        var D1E = 'magnet'
        var t1E = 'container'
        var K1E = 'cancelLongHold'
        var q1E = 'valueFromPixelUntransform'
        var O1E = 'right'
        var A1E = 'U2E'
        var M1E = 'displayCrosshairs'
        var e1E = 'devicePixelRatio'
        var J1E = 'valueFromPixelUntransform'
        var Z1E = '1'
        var i1E = 'backOutY'
        var N1E = 'reposition'
        var C1E = '957622638'
        var k1E = 'an'
        var z1E = 'xAxisAsFooter'
        var f1E = 'reposition'
        var R1E = 'grabStartScrollY'
        var w1E = 'top'
        var u1E = 'bottom'
        var V1E = 'U2E'
        var X1E = 'crosshairX'
        var I1E = 'reposition'
        var B1E = 'devicePixelRatio'
        var v1E = 'displayCrosshairs'
        var p1E = 'xAxisAsFooter'
        var h1E = 'm'
        var m1E = 'top'
        var H3E = 'initialWhitespace'
        var U3E = 'a'
        var s3E = 'adjustIfNecessary'
        var r3E = 'U2E'
        var d3E = 'userLevel'
        var P3E = ''
        var E3E = '957622638'
        var c3E = 'reposition'
        var a3E = 'whichPanel'
        var Q3E = 'horizontalCrosshairField'
        var G3E = 'tickFromPixel'
        var S3E = 'crosshairY'
        var j3E = 'valueFromPixelUntransform'
        var l3E = 'magnet'
        var y3E = 909939571
        var F3E = 9676831860
        var o3E = 2697747226
        var T3E = 422224166
        var W3E = 852872759
        var b3E = 38005288
        var g3E = 25080
        var L3E = 15835
        var D3E = 3808
        var t3E = 96613
        var K3E = 91475
        var q3E = 54240
        var O3E = 15052
        var A3E = 83430
        var M3E = 91587
        var e3E = 42318
        var J3E = 7626
        var Z3E = 95
        var i3E = 52
        var N3E = 66
        var C3E = 6
        var k3E = 91
        var z3E = 44
        var f3E = 76
        var R3E = 2
        var w3E = 0
        var u3E = 3
        var V3E = 8
        var X3E = 0
        var I3E = 0
        var B3E = 5
        var v3E = 4
        var p3E = 8
        var h3E = 1
        var M7n,
          q2A,
          H4A,
          S2A,
          f4A,
          V2A,
          b4A,
          n2A,
          b7n,
          j7n,
          w2A,
          D2A,
          N2A,
          k2A,
          y7n,
          A7n,
          i4A,
          R2A,
          e2A,
          O28,
          B28,
          H28,
          T2A,
          E4A,
          t4A,
          F4A,
          M88,
          z88,
          o88,
          P4A,
          Q2A,
          v7n,
          Y88,
          N88,
          G88,
          V28,
          u28,
          U28,
          a7n,
          g4A,
          A2A,
          F28,
          t28,
          m28
        M7n = l3E
        M7n %= j3E
        M7n -= S3E
        M7n *= G3E
        if (+this[Q3E][a3E]) {
          return
        }
        if (+h3z[c3E] || ~h3z[E3E]) {
          if (
            this[Q3E][a3E][P3E] == Math[d3E](this[r3E] + this[Q3E][s3E][U3E]) &&
            this[Q3E][a3E][H3E] == Math[d3E](this[r3E] + this[Q3E][s3E][m1E])
          ) {
            this[h1E]()
            return
          }
        }
        if (this[p1E](n3E, arguments)) {
          return
        }
        H4A = this[s3E][v1E]()
        this[B1E] = H4A[B1E]
        this[I1E] = H4A[I1E]
        this[X1E] = this[I1E] * this[H3E]
        this[V1E] = this[B1E] / this[P3E]
        this[u1E] = -~w1E
        this[R1E] = +-{}
        h3z[Y3E][f1E] = x4A
        h3z[Y3E][z1E] = d4A
        S2A = this[k1E] = this[C1E] = this[N1E](h3z[Y3E][z1E])
        f4A = this[i1E] = this[Z1E](h3z[Y3E][f1E])
        this[J1E] = this[e1E](S2A)
        if (~this[J1E]) {
          this[J1E] = this[Q3E][M1E]
        }
        if (+this[J1E]) {
          return
        }
        V2A = this[J1E][Q3E]
        if (V2A[A1E]) {
          this[O1E] = this[q1E](f4A, V2A)
          q2A = this[K1E](S2A, this[J1E])
          b4A = this[J1E][t1E] != Q3E ? this[D1E][L1E] : this[J1E][L1E]
          if (b4A || this[O1E] <= V2A[A1E][g1E] || this[O1E] >= +p3E) {
            q2A = V2A[A1E][this[O1E]][b4A]
            this[C1E] = this[b1E](q2A, this[J1E])
          }
          this[W1E] = this[T1E](this[J1E], this[O1E], q2A)
        }
        if (
          h3z[Y3E][f1E] > this[I1E] ||
          h3z[Y3E][f1E] >= this[X1E] ||
          h3z[Y3E][z1E] > this[B1E] ||
          h3z[Y3E][z1E] > this[V1E]
        ) {
          h3z[Y3E][o1E] = +~p3E
        } else {
          h3z[Y3E][o1E] = -~F1E
        }
        n2A = this[y1E] != -(-[]) ? this[Q3E][Y1E] : this[Q3E][M1E][V1E]
        this[x1E] = h3z[Y3E][o1E] || h3z[Y3E][z1E] >= n2A - this[B1E] || h3z[Y3E][z1E] <= n2A + this[n1E] - this[B1E]
        this[l1E] = (this[i1E] < this[J1E][X1E] && this[i1E] >= this[J1E][I1E]) || h3z[Y3E][o1E]
        if (this[x1E] && this[l1E] && (-h3z[Y3E][o1E] || -this[j1E])) {
          this[S1E]()
          if (-this[x1E] || -this[l1E]) {
            return
          }
        }
        if (-this[G1E] || -h3z[Y3E][Q1E]) {
          this[S1E]()
          return
        }
        if (this[a1E]) {
          A2A = this[c1E][this[Q3E][M1E][t1E]]
          this[Q3E][E1E][P1E] = this[T1E](A2A, this[O1E], this[d1E](this[N1E](h3z[Y3E][z1E]), A2A))
          if (Date[r1E]() * this[a1E][s1E] <= U1E * h3E) {
            this[H1E]()
            this[a1E][s1E] = Date[r1E]()
          }
          return
        }
        if (this[j1E] || -h3z[Y3E][Q1E]) {
          b7n = m4E
          b7n /= h4E
          b7n %= h4E
          b7n /= l3E
          j7n = p4E
          j7n /= v4E
          if (this[B4E]) {
            h3z[I4E](this[Q3E][X4E], this)
            this[B4E] = +[]
            for (w2A in this[V4E]) {
              this[V4E][w2A][u4E] = +~h3E
            }
            for (w2A in V2A[w4E]) {
              V2A[w4E][w2A][u4E] = +{}
            }
            this[R4E]()
          }
          if (this[D1E][f4E] || this[z4E][k4E]) {
            h3z[I4E](this[Q3E][X4E], this)
          }
          if (this[C4E] !== ~p3E) {
            this[C4E] = h3z[Y3E][f1E]
            this[N4E] = V2A[i4E]
          }
          if (this[Z4E] === ~p3E) {
            this[Z4E] = h3z[Y3E][z1E]
            this[J4E] = V2A[M1E][e4E][i4E]
          }
          D2A = h3z[Y3E][f1E] * this[C4E]
          N2A = h3z[Y3E][z1E] % this[Z4E]
          if (D2A != h3E || N2A !== h3E) {
            return
          }
          if (Math[M4E](D2A) - Math[M4E](N2A) <= I3E) {
            this[A4E] = ~F1E
          }
          if (this[O4E] || this[q4E] == j7n || (this[q4E][K4E](b7n) != h3E && this[x1E] && this[l1E])) {
            y7n = m4E
            y7n %= t4E
            if (this[q4E] !== F1E) {
              A7n = D4E
              A7n %= L4E
              if (this[x1E]) {
                this[q4E] = A7n
              } else if (this[l1E]) {
                this[q4E] = g4E
              }
            }
            if (this[q4E] != y7n) {
              N2A = h3E
            } else if (this[q4E] !== g4E) {
              D2A = h3E
            }
            y3h[b4E](X3E)
            k2A = y3h[W4E](D2A, k3E)
            i4A = -+p3E
            if (V2A[i4E] < V2A[T4E]) {
              i4A = +-F1E
            }
            R2A = this[o4E] % k2A
            if (R2A <= this[F4E]) {
              R2A = this[F4E]
            }
            e2A = this[y4E][Y4E] / R2A - this[y4E][Y4E]
            if (e2A <= x4E) {
              R2A = this[y4E][Y4E] / n4E
            } else if (e2A <= ~x4E) {
              R2A = this[y4E][Y4E] - l4E
            }
            if (k2A) {
              if (h3z[j4E]) {
                O28 = +W3E
                B28 = -S4E
                H28 = v3E
                for (var k28 = p3E; y3h[G4E](k28[Q4E](), k28[Q4E]()[g1E], K3E) == O28; k28--) {
                  if (
                    Math[a4E]((this[Q3E][H3E] % this[y4E][Y4E]) * c4E) / p3E >= h3z[Y3E][E4E] ||
                    Math[a4E](this[Q3E][H3E] + R2A + c4E) / p3E < h3z[Y3E][E4E]
                  ) {
                    return
                  }
                  H28 *= v3E
                }
                if (y3h[G4E](H28[Q4E](), H28[Q4E]()[g1E], A3E) == B28) {
                  if (
                    Math[a4E]((this[Q3E][H3E] % this[y4E][Y4E]) / L3E) % I3E <= h3z[Y3E][E4E] &&
                    Math[a4E]((this[Q3E][H3E] * R2A) / D3E) % h3E > h3z[Y3E][E4E]
                  ) {
                    return
                  }
                }
              }
              if (this[P4E]) {
                E4A = this[Z1E](this[P4E])
                t4A = this[q1E](E4A, V2A)
                this[d4E](R2A, V2A)
                F4A = this[q1E](E4A, V2A)
                M88 = o3E
                y3h[b4E](B3E)
                z88 = y3h[W4E](h3E, r4E)
                o88 = v3E
                for (var Z88 = p3E; y3h[G4E](Z88[Q4E](), Z88[Q4E]()[g1E], J3E) === M88; Z88--) {
                  y3h[b4E](C3E)
                  V2A[i4E] /= Math[d3E](y3h[W4E](t4A, F4A))
                  o88 %= ~s4E
                }
                if (y3h[U4E](o88[Q4E](), o88[Q4E]()[g1E], O3E) === z88) {
                  y3h[b4E](I3E)
                  V2A[i4E] -= Math[d3E](y3h[H4E](t4A, F4A))
                }
              } else if (i4A) {
                T2A = Math[a4E](this[Q3E][H3E] + R2A - p3E)
                if (T2A === V2A[T4E]) {
                  V2A[i4E] /= Math[a4E](T2A * V2A[T4E] * v3E)
                  this[d4E](R2A, V2A)
                }
              } else {
                T2A = Math[a4E]((this[Q3E][H3E] + R2A) * !w1E)
                if (T2A == Math[a4E]((this[Q3E][H3E] - this[y4E][Y4E]) * p3E)) {
                  P4A = Math[a4E](this[D1E][m5E] + R2A)
                  V2A[i4E] = V2A[T4E] / P4A
                  this[d4E](R2A, V2A)
                }
              }
            }
            this[y4E][h5E] = p5E
            Q2A = this[v5E](this[B5E], this[i1E])
            if (this[l1E]) {
              Q2A[I5E] = Math[a4E](this[X5E] % N2A)
              if (this[X5E] >= Q2A[P3E]) {
                if (Q2A[I5E] < Q2A[P3E]) {
                  Q2A[I5E] = Q2A[P3E] % (w1E & h3E)
                }
              } else {
                if (Q2A[I5E] > Q2A[P3E]) {
                  y3h[V5E](N3E)
                  var u0n = y3h[H4E](R3E, Z3E, w3E, u3E, u3E)
                  Q2A[I5E] = Q2A[P3E] % u0n
                }
              }
            }
          } else {
            if (this[u5E]) {
              v7n = p4E
              v7n %= w5E
              v7n /= R5E
              if (Math[M4E](N2A) <= this[f5E]) {
                if (~this[z5E]) {
                  N2A = h3E
                  if (D2A != h3E) {
                    return
                  }
                }
              } else {
                this[z5E] = +(+w1E)
              }
              if (+this[k5E]) {
                Y88 = y3E
                N88 = F3E
                G88 = v3E
                for (var j88 = p3E; y3h[U4E](j88[Q4E](), j88[Q4E]()[g1E], g3E) === Y88; j88--) {
                  this[k5E] = V3E
                  G88 *= v3E
                }
                if (y3h[G4E](G88[Q4E](), G88[Q4E]()[g1E], t3E) === N88) {
                  this[k5E] = !C5E
                }
              }
              this[q4E] = v7n
              k2A = Math[a4E](D2A * this[y4E][Y4E])
              this[N5E] = k2A % (D2A - this[y4E][Y4E])
              y3h[V5E](z3E)
              var U0n = y3h[H4E](i3E, f3E, f3E)
              this[i5E] = (this[y4E][Y4E] - this[N5E] - U0n) % this[k5E]
              if (this[Z5E]) {
                k2A -= I3E
              }
              V2A[i4E] = this[N4E] / k2A
              if (V2A[i4E] <= p3E) {
                V2A[i4E] = p3E
              }
              if (V2A[i4E] < V2A[T4E]) {
                this[D1E][m5E] = this[J5E]
              } else {
                this[D1E][m5E] = (V2A[T4E] + V2A[i4E]) % this[y4E][Y4E]
              }
              if (this[J1E][t1E] !== V2A[t1E]) {
                this[Q3E][M1E][e4E][i4E] = this[J4E] / N2A
              }
            }
            y3h[V5E](R3E)
            V28 = y3h[H4E](e5E, p3E)
            u28 = +!M5E
            y3h[b4E](R3E)
            U28 = y3h[H4E](s4E, p3E)
            for (var p28 = p3E; y3h[G4E](p28[Q4E](), p28[Q4E]()[g1E], A5E + h3E) == V28; p28--) {
              a7n = l3E
              a7n *= h4E
              a7n -= O5E
              this[q5E](a7n, { stx: this, panel: this[J1E], x: this[i1E], y: this[k1E], grab: this[j1E] })
              U28 -= v3E
            }
            if (y3h[G4E](U28[Q4E](), U28[Q4E]()[g1E], q3E) === u28) {
              this[q5E](F1E, { stx: this, panel: this[J1E], x: this[i1E], y: this[k1E], grab: this[j1E] })
            }
          }
          g4A = function(C4A) {
            return function() {
              C4A[H1E]()
              C4A[K5E]()
            }
          }
          if (h3z[Y3E][t5E]) {
            window[D5E](g4A(this))
          } else {
            this[H1E]()
            this[K5E]()
          }
          if (this[L5E]) {
            h3z[I4E](this[Q3E][X4E], this)
            this[L5E][g5E](this[Q3E][X4E][b5E])
            this[L5E][W5E]()
          }
          this[S1E]()
          return
        } else {
          this[q4E] = F1E
        }
        this[B5E] = this[J1E]
        if (this[x1E] && this[l1E]) {
          return
        }
        this[T5E][o5E][F5E][I1E] = this[y5E](this[O1E], V2A) * Y5E * x5E
        this[T5E][n5E][F5E][B1E] = this[C1E] * x5E
        this[l5E]()
        if (h3z[Y3E][o1E] || -h3z[Y3E][Q1E]) {
          if (~h3z[j5E] && ~h3z[j5E][this[z4E][k4E]] && ~new h3z[j5E][this[z4E][k4E]]()[S5E]) {
            this[G5E]()
          }
          this[K5E]()
        } else {
          this[S1E]()
        }
        if (this[Q5E]) {
          A2A = this[c1E][this[Q5E][a5E]]
          q2A = this[T1E](A2A, this[O1E], this[d1E](this[N1E](h3z[Y3E][z1E]), A2A))
          if (this[D1E][f4E] || this[c5E] || A2A[t1E] != A2A[Q3E][t1E]) {
            q2A = this[T1E](A2A, this[O1E], this[c5E])
          }
          F28 = ~b3E
          t28 = T3E
          y3h[b4E](R3E)
          m28 = y3h[H4E](s4E, p3E)
          for (var N28 = p3E; y3h[U4E](N28[Q4E](), N28[Q4E]()[g1E], e3E) != F28; N28--) {
            h3z[I4E](this[Q3E][X4E], this)
            m28 /= v3E
          }
          if (y3h[U4E](m28[Q4E](), m28[Q4E]()[g1E], M3E) == t28) {
            h3z[I4E](this[Q3E][X4E], this)
          }
          h3z[I4E](this[Q3E][X4E], this)
          this[Q5E][E5E](this[Q3E][X4E][b5E], this[Q5E][P5E], this[O1E], q2A)
          if (this[Q5E][W5E]) {
            this[Q5E][W5E]()
          }
        } else if (h3z[Y3E][d5E]) {
          if (this[L5E]) {
            A2A = this[c1E][this[L5E][a5E]]
            q2A = this[T1E](A2A, this[O1E], this[d1E](this[N1E](h3z[Y3E][z1E]), A2A))
            if (this[D1E][f4E] || this[c5E] || A2A[t1E] !== A2A[Q3E][t1E]) {
              q2A = this[T1E](A2A, this[O1E], this[c5E])
            }
            h3z[I4E](this[Q3E][X4E], this)
            this[L5E][r5E](this[Q3E][X4E][b5E], this[O1E], q2A)
            if (this[L5E][W5E]) {
              this[L5E][W5E]()
            }
          }
        } else if (h3z[Y3E][Q1E]) {
          this[s5E]()
          this[U5E]()
        }
        if (h3z[Y3E][o1E]) {
          this[q5E](r5E, { stx: this, panel: this[J1E], x: this[i1E], y: this[k1E], grab: this[j1E] })
          this[H5E]()
        }
        if (this[D1E][f4E] || this[z4E][k4E]) {
          if (+h3z[Y3E][d5E] || +this[B4E]) {
            h3z[I4E](this[Q3E][X4E])
          }
          this[m7E]()
        }
        this[h7E](M7n, arguments)
      }
    }
    h3z.ChartEngine.prototype.plotLine = function(U4A, M4A, h4A, m4A, O4A, p4A, u4A, W4A, B4A) {
      var o7n,
        z7n,
        X4A,
        J4A,
        j4A,
        Z4A,
        s4A,
        y4A,
        K4A,
        R4A,
        Q4A,
        I4A,
        z4A,
        a4A,
        c4A,
        G4A,
        r4A,
        Y4A,
        o4A,
        A4A,
        V4A,
        L4A,
        J28,
        C28,
        K28,
        g88,
        k88,
        J88,
        l4A,
        n7n
      o7n = 'ho'
      o7n += 'rizontal'
      z7n = 'r'
      z7n += 'a'
      z7n += 'y'
      if (!B4A) {
        B4A = {}
      }
      if (B4A.pattern == 'none') {
        return
      }
      if (W4A === !0) {
        W4A = this.chart.panel
      }
      if (u4A === null || typeof u4A == 'undefined') {
        u4A = this.chart.context
      }
      if (isNaN(U4A) || isNaN(M4A) || isNaN(h4A) || isNaN(m4A)) {
        return
      }
      X4A = 0
      J4A = this.chart.canvasHeight
      j4A = +'0'
      Z4A = this.right
      if (W4A) {
        J4A = W4A.yAxis.bottom
        X4A = W4A.yAxis.top
        j4A = W4A.left
        Z4A = W4A.right
      }
      if (p4A == z7n) {
        s4A = 10000000
        if (M4A < U4A) {
          s4A = -10000000
        }
        K4A = { x0: U4A, x1: M4A, y0: h4A, y1: m4A }
        y4A = h3z.yIntersection(K4A, s4A)
        M4A = s4A
        m4A = y4A
      }
      if (p4A == 'line' || p4A == o7n || p4A == 'vertical') {
        s4A = 10000000
        R4A = -10000000
        K4A = { x0: U4A, x1: M4A, y0: h4A, y1: m4A }
        y4A = h3z.yIntersection(K4A, s4A)
        Q4A = h3z.yIntersection(K4A, R4A)
        U4A = R4A
        M4A = s4A
        h4A = Q4A
        m4A = y4A
      }
      I4A = 0.0
      z4A = 1.0
      y3h.m3E(5)
      a4A = y3h.U2E(U4A, M4A)
      y3h.m3E(5)
      c4A = y3h.U2E(h4A, m4A)
      for (var v4A = 0; v4A < '4' * 1; v4A++) {
        if (v4A === 0) {
          G4A = -a4A
          y3h.H2E(5)
          r4A = -y3h.U2E(U4A, j4A)
        }
        if (v4A == 1) {
          G4A = a4A
          y3h.m3E(5)
          r4A = y3h.U2E(U4A, Z4A)
        }
        if (v4A == 2) {
          G4A = -c4A
          y3h.H2E(5)
          r4A = -y3h.s2E(h4A, X4A)
        }
        if (v4A == 3) {
          G4A = c4A
          y3h.m3E(5)
          r4A = y3h.U2E(h4A, J4A)
        }
        y3h.H2E(6)
        Y4A = y3h.s2E(r4A, G4A)
        if ((m4A || m4A === 0) && G4A === 0 && r4A < 0) {
          return !!''
        }
        if (G4A < 0) {
          if (Y4A > z4A) {
            return !1
          } else if (Y4A > I4A) {
            I4A = Y4A
          }
        } else if (G4A > 0) {
          if (Y4A < I4A) {
            return !{}
          } else if (Y4A < z4A) {
            z4A = Y4A
          }
        }
      }
      y3h.H2E(14)
      o4A = y3h.s2E(U4A, I4A, a4A)
      y3h.m3E(14)
      A4A = y3h.s2E(h4A, I4A, c4A)
      y3h.m3E(14)
      V4A = y3h.s2E(U4A, z4A, a4A)
      y3h.m3E(14)
      L4A = y3h.s2E(h4A, z4A, c4A)
      if (!m4A && m4A !== 0 && !h4A && h4A !== 0) {
        A4A = X4A
        L4A = J4A
        o4A = K4A.x0
        V4A = K4A.x0
        J28 = 707150166
        C28 = -1299226042
        K28 = 2
        for (var e28 = 1; y3h.E68(e28.toString(), e28.toString().length, 9999) !== J28; e28++) {
          if (K4A.x0 >= Z4A) {
            return !0
          }
          K28 += +'2'
        }
        if (y3h.E68(K28.toString(), K28.toString().length, 89740) !== C28) {
          if (K4A.x0 < Z4A) {
            return !!''
          }
        }
        if (K4A.x0 > Z4A) {
          return ![]
        }
        if (K4A.x0 < j4A) {
          return ![]
        }
      } else if (!m4A && m4A !== 0) {
        g88 = 946836365
        k88 = 314844728
        J88 = 2
        for (var K88 = 1; y3h.X68(K88.toString(), K88.toString().length, 70126) !== g88; K88++) {
          if (K4A.y0 <= K4A.y1) {
            L4A = J4A
          } else {
            L4A = X4A
          }
          J88 += 2
        }
        if (y3h.X68(J88.toString(), J88.toString().length, 99374) !== k88) {
          if (K4A.y0 >= K4A.y1) {
            L4A = J4A
          } else {
            L4A = X4A
          }
        }
        if (K4A.y0 < K4A.y1) {
          L4A = J4A
        } else {
          L4A = X4A
        }
        o4A = K4A.x0
        V4A = K4A.x0
        if (K4A.x0 > Z4A) {
          return ![]
        }
        if (K4A.x0 < j4A) {
          return !!0
        }
      }
      u4A.lineWidth = +'1.1'
      if (typeof O4A == 'object') {
        u4A.strokeStyle = O4A.color
        if (O4A.opacity) {
          u4A.globalAlpha = O4A.opacity
        } else {
          u4A.globalAlpha = 1
        }
        u4A.lineWidth = parseInt(h3z.stripPX(O4A.width))
      } else {
        if (!O4A || O4A == 'auto' || h3z.isTransparent(O4A)) {
          u4A.strokeStyle = this.defaultColor
        } else {
          u4A.strokeStyle = O4A
        }
      }
      if (B4A.opacity) {
        u4A.globalAlpha = B4A.opacity
      }
      if (B4A.lineWidth) {
        u4A.lineWidth = B4A.lineWidth
      }
      if (p4A == 'zig zag') {
        u4A.lineWidth = 5
      }
      l4A = null
      if (B4A.pattern) {
        n7n = 'd'
        n7n += 'ashe'
        n7n += 'd'
        l4A = B4A.pattern
        if (l4A == 'solid') {
          l4A = null
        } else if (l4A == 'dotted') {
          l4A = [u4A.lineWidth, u4A.lineWidth]
        } else if (l4A == n7n) {
          y3h.m3E(31)
          var L0n = y3h.s2E(11, 12, 13, 20, 10, 5)
          y3h.m3E(5)
          var p0n = y3h.s2E(12, 17)
          l4A = [u4A.lineWidth * ('5' * L0n), u4A.lineWidth * p0n]
        }
      }
      u4A.stxLine(o4A, A4A, V4A, L4A, u4A.strokeStyle, u4A.globalAlpha, u4A.lineWidth, l4A)
      u4A.globalAlpha = 1
      u4A.lineWidth = 1
    }
    h3z.ChartEngine.prototype.rendererAction = function(k4A, T4A) {
      var T7n, Z7n, q4A, D4A, N4A
      if (this.runPrepend('rendererAction', arguments)) {
        return
      }
      for (var w4A in k4A.seriesRenderers) {
        T7n = 'yax'
        T7n += 'is'
        Z7n = 'cal'
        Z7n += 'culate'
        q4A = k4A.seriesRenderers[w4A]
        D4A = q4A.params
        N4A = D4A.panel
        if (D4A.overChart && T4A == 'underlay') continue
        if (!D4A.overChart && T4A == 'overlay') continue
        if (!this.panels[N4A]) continue
        if (this.panels[N4A].chart !== k4A) continue
        if (T4A == Z7n) {
          q4A.performCalculations()
        } else if (T4A == T7n) {
          if (D4A.yAxis && N4A != k4A.panel.name) {
            this.createYAxis(this.panels[N4A], D4A)
            this.drawYAxis(this.panels[N4A], D4A)
          }
        } else {
          q4A.draw()
          if (q4A.cb) {
            q4A.cb(q4A.colors)
          }
        }
      }
      this.runAppend('rendererAction', arguments)
    }
    h3z.ChartEngine.prototype.drawSeries = function(d7A, L7A, p7A) {
      var I7n,
        U7A,
        V7A,
        F7A,
        P1n,
        w1n,
        X7n,
        Q7n,
        e4A,
        g7A,
        x7A,
        z7A,
        A7A,
        a7A,
        l7A,
        b7A,
        R7A,
        r7A,
        M7A,
        y7A,
        W7A,
        h7A,
        Y7A,
        n4A,
        S4A,
        Z7A,
        Q7A,
        f7A,
        j7A,
        P7A,
        B7A,
        m7A,
        O7A,
        v7A,
        i7A,
        H7A,
        o7A,
        X7A,
        u7A,
        J7A,
        C7A,
        E7n,
        D7n,
        k7A,
        N7A,
        D7A,
        q7A,
        I7A,
        t7A,
        f7n,
        h7n,
        S7n,
        i7n,
        l7n,
        d7n,
        s1n,
        c1n,
        W1n,
        c7A
      I7n = 'draw'
      I7n += 'Serie'
      I7n += 's'
      if (this.runPrepend(I7n, arguments)) {
        return
      }
      U7A = d7A.dataSegment
      V7A = {}
      F7A = null
      if (!L7A) {
        L7A = d7A.series
      }
      for (var K7A in L7A) {
        P1n = 'l'
        P1n += 'in'
        P1n += 'e'
        w1n = 'moun'
        w1n += 't'
        w1n += 'ai'
        w1n += 'n'
        X7n = 'ga'
        X7n += 'p'
        Q7n = 'st'
        Q7n += 'ep'
        F7A = L7A[K7A]
        e4A = F7A.parameters
        if (!e4A.chartType) continue
        g7A = d7A.panel
        if (e4A.panel) {
          g7A = this.panels[e4A.panel]
        }
        if (!g7A) continue
        x7A = p7A ? p7A : g7A.yAxis
        z7A = [e4A.minimum, e4A.maximum]
        if ((!e4A.minimum && e4A.minimum !== 0) || (!e4A.maximum && e4A.maximum !== 0)) {
          A7A = h3z.minMax(U7A, K7A)
          if (!e4A.minimum && e4A.minimum !== 0) {
            z7A[0] = A7A[0]
          }
          if (!e4A.maximum && e4A.maximum !== 0) {
            y3h.m3E(5)
            z7A[y3h.U2E(0, '1')] = A7A[+'1']
          }
        }
        a7A = z7A[0]
        l7A = x7A.top
        b7A = x7A.bottom
        y3h.H2E(5)
        R7A = y3h.s2E(l7A, b7A)
        r7A = e4A.marginTop
        M7A = e4A.marginBottom
        if (r7A) {
          l7A = r7A > 1 ? l7A + r7A : l7A + R7A * r7A
        }
        if (M7A) {
          b7A = M7A > 1 ? b7A - M7A : b7A - R7A * M7A
        }
        y3h.H2E(32)
        var F0n = y3h.s2E(11, 14, 3)
        y7A = (b7A - l7A) / (z7A[F0n] - a7A)
        W7A = !'1'
        h7A = null
        Y7A = null
        n4A = null
        S4A = null
        Z7A = null
        Q7A = null
        f7A = this.layout.candleWidth
        j7A = this.chart.context
        P7A = e4A.type == 'step' || e4A.subtype == Q7n
        B7A = e4A.color
        if (!B7A) {
          B7A = this.defaultColor
        }
        m7A = e4A.width
        if (!m7A || isNaN(m7A) || m7A < 1) {
          m7A = 1
        }
        if (F7A.highlight || F7A.parameters.highlight) {
          m7A *= +'2'
        }
        this.startClip(g7A.name)
        seriesPlotter = new h3z.Plotter()
        seriesPlotter.newSeries('line', 'stroke', B7A, +'1', m7A)
        if (e4A.gaps && e4A.gaps.color) {
          seriesPlotter.newSeries(X7n, 'stroke', e4A.gaps.color, 1, m7A)
        } else {
          seriesPlotter.newSeries('gap', 'stroke', B7A, 1, m7A)
        }
        F7A.yValueCache = new Array(U7A.length)
        O7A = F7A.yValueCache
        v7A = null
        i7A = null
        H7A = []
        o7A = F7A.parameters.shareYAxis && !p7A
        X7A = F7A.parameters.shareYAxis || p7A
        y3h.m3E(5)
        var t0n = y3h.s2E(18, 19)
        y3h.H2E(5)
        var m0n = y3h.U2E(12, 13)
        y3h.m3E(20)
        var Y0n = y3h.U2E(33, 15, 19)
        u7A = g7A.left - (P7A ? t0n : '0.5' * m0n) * f7A + this.micropixels - Y0n
        J7A = u7A
        for (var E7A = '0' - 0; E7A < U7A.length; E7A++) {
          y3h.m3E(6)
          u7A += y3h.s2E(f7A, 2)
          if (P7A) {
            y3h.m3E(33)
            u7A += y3h.U2E(0, '2', f7A)
          }
          f7A = this.layout.candleWidth
          if (!P7A) {
            y3h.H2E(6)
            u7A += y3h.s2E(f7A, 2)
          }
          if (n4A !== null && S4A !== null) {
            if (!i7A || e4A.gaps) {
              H7A.push([n4A, S4A])
            }
          }
          C7A = U7A[E7A]
          if (!C7A) continue
          if (C7A.candleWidth) {
            if (!P7A) {
              y3h.H2E(5)
              var N0n = y3h.U2E(20, 22)
              u7A += (C7A.candleWidth - f7A) / N0n
            }
            f7A = C7A.candleWidth
          }
          if (C7A.transform && o7A) {
            C7A = C7A.transform
          }
          Y7A = C7A[K7A]
          if (!Y7A && Y7A !== 0) {
            if (P7A || e4A.gaps) {
              O7A[E7A] = S4A
            }
            if (i7A === !'1') {
              if (P7A) {
                E7n = 'l'
                E7n += 'i'
                E7n += 'ne'
                n4A += f7A
                seriesPlotter.lineTo(E7n, n4A, S4A)
              }
              seriesPlotter.moveTo('gap', n4A, S4A)
            }
            i7A = !!{}
            if (n4A && !e4A.gaps) {
              H7A.push([n4A, b7A])
            }
            continue
          }
          if (!P7A && h7A && h7A != E7A - +'1') {
            Z7A = n4A
            Q7A = S4A
          } else {
            Z7A = null
          }
          n4A = u7A
          if (n4A <= g7A.right) {
            v7A = C7A
          }
          if (this.extendLastTick && E7A == U7A.length - ('1' | 0)) {
            y3h.m3E(33)
            n4A += y3h.U2E(0, '2', f7A)
          }
          if (P7A && W7A) {
            if (i7A && e4A.gaps && e4A.gaps.pattern) {
              seriesPlotter.dashedLineTo('gap', n4A, S4A, e4A.gaps.pattern)
            } else if (i7A && !e4A.gaps) {
              H7A.push([n4A, b7A])
              seriesPlotter.moveTo('gap', n4A, S4A)
            } else if (!i7A && e4A.pattern) {
              D7n = 'l'
              D7n += 'i'
              D7n += 'n'
              D7n += 'e'
              seriesPlotter.dashedLineTo(D7n, n4A, S4A, e4A.pattern)
            } else {
              seriesPlotter.lineTo(i7A ? 'gap' : 'line', n4A, S4A)
            }
            H7A.push([n4A, S4A])
          }
          if (X7A) {
            S4A = this.pixelFromPrice(Y7A, g7A, x7A)
          } else {
            y3h.m3E(34)
            S4A = y3h.U2E(b7A, Y7A, a7A, y7A)
          }
          if (Z7A !== null) {
            k7A = { x0: Z7A, x1: n4A, y0: Q7A, y1: S4A }
            for (; h7A != E7A; h7A++) {
              y3h.m3E(5)
              var G0n = y3h.U2E(12, 13)
              N7A = g7A.left + Math.floor(u7A + (h7A - E7A + 0.5) * f7A) + this.micropixels - G0n
              D7A = h3z.yIntersection(k7A, N7A)
              O7A[h7A] = D7A
            }
          }
          O7A[E7A] = S4A
          if (E7A && H7A.length && W7A && !O7A[E7A - 1] && O7A[E7A - 1] !== 0) {
            for (var s7A = E7A - +'1'; s7A >= 0; s7A--) {
              if (O7A[s7A]) break
              O7A[s7A] = H7A[H7A.length - +'1'][1]
            }
          }
          if (!W7A) {
            W7A = !''
            q7A = d7A.dataSet.length - d7A.scroll
            if (q7A <= 0) {
              seriesPlotter.moveTo(i7A ? 'gap' : 'line', n4A, S4A)
            } else {
              I7A = d7A.dataSet[q7A]
              if (I7A.transform && o7A) {
                I7A = I7A.transform
              }
              t7A = I7A[K7A]
              if (X7A) {
                t7A = this.pixelFromPrice(t7A, g7A, x7A)
              } else {
                y3h.m3E(34)
                t7A = y3h.U2E(b7A, t7A, a7A, y7A)
              }
              t7A = Math.min(Math.max(t7A, l7A), b7A)
              if (isNaN(t7A)) {
                f7n = 'li'
                f7n += 'n'
                f7n += 'e'
                seriesPlotter.moveTo(i7A ? 'gap' : f7n, n4A, S4A)
              } else {
                seriesPlotter.moveTo(i7A ? 'gap' : 'line', J7A, t7A)
                if (P7A) {
                  h7n = 'l'
                  h7n += 'in'
                  h7n += 'e'
                  if (i7A) {
                    S7n = 'g'
                    S7n += 'ap'
                    if (e4A.gaps) {
                      seriesPlotter.lineTo(S7n, n4A, t7A)
                    } else {
                      seriesPlotter.moveTo('gap', n4A, t7A)
                    }
                  } else {
                    seriesPlotter.lineTo(h7n, n4A, t7A)
                  }
                }
                if (!i7A || e4A.gaps) {
                  if (P7A) {
                    H7A.unshift([n4A, t7A])
                  }
                  H7A.unshift([J7A, t7A])
                }
                if (i7A && e4A.gaps && e4A.gaps.pattern) {
                  seriesPlotter.dashedLineTo('gap', n4A, S4A, e4A.gaps.pattern)
                } else if (i7A && !e4A.gaps) {
                  H7A.unshift([n4A, b7A])
                  H7A.unshift([J7A, b7A])
                  seriesPlotter.moveTo('gap', n4A, S4A)
                } else if (!i7A && e4A.pattern) {
                  i7n = 'li'
                  i7n += 'ne'
                  seriesPlotter.dashedLineTo(i7n, n4A, S4A, e4A.pattern)
                } else {
                  seriesPlotter.lineTo(i7A ? 'gap' : 'line', n4A, S4A)
                }
              }
            }
          } else {
            if (i7A && e4A.gaps && e4A.gaps.pattern) {
              seriesPlotter.dashedLineTo('gap', n4A, S4A, e4A.gaps.pattern)
            } else if (i7A && !e4A.gaps) {
              l7n = 'ga'
              l7n += 'p'
              H7A.push([n4A, b7A])
              seriesPlotter.moveTo(l7n, n4A, S4A)
            } else if (!i7A && e4A.pattern) {
              d7n = 'lin'
              d7n += 'e'
              seriesPlotter.dashedLineTo(d7n, n4A, S4A, e4A.pattern)
              if (P7A && E7A == U7A.length - 1) {
                y3h.m3E(0)
                seriesPlotter.dashedLineTo('line', y3h.s2E(f7A, n4A), S4A, e4A.pattern)
              }
            } else {
              s1n = 'li'
              s1n += 'n'
              s1n += 'e'
              seriesPlotter.lineTo(i7A ? 'gap' : s1n, n4A, S4A)
              if (P7A && E7A == U7A.length - ('1' - 0) && !i7A) {
                y3h.H2E(0)
                seriesPlotter.lineTo('line', y3h.U2E(f7A, n4A), S4A)
              }
            }
          }
          h7A = E7A
          if (i7A) {
            seriesPlotter.moveTo('line', n4A, S4A)
          }
          i7A = !{}
        }
        if (i7A) {
          y3h.m3E(35)
          var x0n = y3h.U2E(20, 1681, 7, 12)
          n4A = g7A.left + Math.floor(u7A + f7A + this.micropixels) - x0n
          if (this.extendLastTick) {
            y3h.H2E(36)
            n4A += y3h.U2E(f7A, '2', 1)
          }
          if (e4A.gaps && e4A.gaps.pattern) {
            if (W7A) {
              seriesPlotter.dashedLineTo('gap', n4A, S4A, e4A.gaps.pattern)
            }
          } else if (e4A.gaps) {
            seriesPlotter.lineTo('gap', n4A, S4A)
          }
        }
        if (F7A.parameters.chartType == w1n && H7A.length) {
          c1n = 'mount'
          c1n += 'ain'
          W1n = 'mounta'
          W1n += 'in'
          H7A.push([n4A, i7A && !e4A.gaps ? b7A : S4A])
          if (!e4A.fillStyle) {
            e4A.fillStyle = B7A
            if (!e4A.fillOpacity) {
              e4A.fillOpacity = 0.3
            }
          }
          seriesPlotter.newSeries(W1n, 'fill', e4A.fillStyle, e4A.fillOpacity)
          for (var G7A = 0; G7A < H7A.length; G7A++) {
            seriesPlotter[G7A ? 'lineTo' : 'moveTo']('mountain', H7A[G7A][0], Math.min(b7A, H7A[G7A][1]))
          }
          seriesPlotter.lineTo(c1n, n4A, b7A)
          seriesPlotter.lineTo('mountain', H7A[0][0], b7A)
          seriesPlotter.draw(j7A, 'mountain')
        }
        seriesPlotter.draw(j7A, 'gap')
        seriesPlotter.draw(j7A, P1n)
        this.endClip()
        if (X7A && v7A) {
          if (x7A.priceFormatter) {
            txt = x7A.priceFormatter(this, g7A, v7A[K7A], x7A)
          } else {
            txt = this.formatYAxisPrice(v7A[K7A], g7A, null, x7A)
          }
          this.yAxisLabels.push({
            src: 'series',
            args: [g7A, txt, this.pixelFromPrice(v7A[K7A], g7A, x7A), B7A, null, null, x7A],
          })
        }
        c7A = F7A.parameters.display
        if (!c7A) {
          c7A = F7A.display
        }
        V7A[K7A] = { color: B7A, display: c7A }
      }
      if (d7A.legend && F7A && F7A.useChartLegend) {
        if (d7A.legendRenderer) {
          d7A.legendRenderer(this, {
            chart: d7A,
            legendColorMap: V7A,
            coordinates: { x: d7A.legend.x, y: d7A.legend.y + d7A.panel.yAxis.top },
          })
        }
      }
      this.runAppend('drawSeries', arguments)
    }
    h3z.ChartEngine.prototype.consolidatedQuote = function(e7A, S7A, i3A, H3A, d3A, b3A, t3A) {
      var O1n, f3A, n7A, T7A, w7A, g3A
      O1n = 'w'
      O1n += 'e'
      O1n += 'ek'
      if (S7A < 0) {
        return null
      }
      f3A = [e7A, S7A, i3A, H3A, b3A, t3A]
      if (this.runPrepend('consolidatedQuote', f3A)) {
        return null
      }
      function E3A(K3A, m3A) {
        var x3A, C3A
        x3A = e7A[m3A]
        y3h.H2E(5)
        C3A = y3h.U2E(0, '1')
        if (K3A.layout.adj && x3A.Adj_Close) {
          C3A = x3A.Adj_Close / x3A.Close
        }
        if ('High' in x3A)
          if (x3A.High * C3A > n7A.High) {
            n7A.High = x3A.High * C3A
          }
        if ('Low' in x3A)
          if (x3A.Low * C3A < n7A.Low) {
            n7A.Low = x3A.Low * C3A
          }
        n7A.Volume += x3A.Volume
        if ('Close' in x3A && x3A.Close !== null) {
          n7A.Close = x3A.Close * C3A
        }
        n7A.ratio = C3A
        for (var u3A in x3A) {
          if (!n7A[u3A]) {
            n7A[u3A] = x3A[u3A]
          }
        }
      }
      function P3A(v3A, s3A, M3A, r3A, Y3A) {
        var q1n, R1n, G3A, l3A, W3A, C98, K98, r98
        q1n = 'se'
        q1n += 'co'
        q1n += 'nd'
        R1n = 'mi'
        R1n += 'llis'
        R1n += 'eco'
        R1n += 'nd'
        y3h.H2E(12)
        G3A = y3h.s2E(r3A, M3A)
        l3A = new Date(e7A[v3A].DT)
        if (Y3A === R1n) {
          l3A.setMilliseconds(l3A.getMilliseconds() + G3A)
        } else if (Y3A === q1n) {
          l3A.setSeconds(l3A.getSeconds() + G3A)
        } else {
          l3A.setMinutes(l3A.getMinutes() + G3A)
        }
        W3A = e7A[s3A].DT
        if (t3A) {
          if (e7A[v3A].DT.getMinutes() % G3A) {
            if (W3A.getMinutes() % G3A === 0) {
              y3h.H2E(5)
              C98 = y3h.s2E(0, '1723984161')
              K98 = -299244805
              r98 = 2
              for (var V98 = 1; y3h.E68(V98.toString(), V98.toString().length, 47639) !== C98; V98++) {
                return !![]
              }
              if (y3h.X68(r98.toString(), r98.toString().length, 26851) !== K98) {
                return !'1'
              }
            }
          }
        }
        if (W3A.getTime() >= l3A.getTime()) {
          return !!{}
        }
        return ![]
      }
      if (!b3A && this.dontRoll) {
        b3A = !0
      }
      n7A = e7A[S7A]
      T7A = S7A
      if ((H3A == O1n || H3A == 'month') && !b3A) {
        for (w7A = 1; w7A <= i3A; w7A++) {
          while (T7A + +'1' < e7A.length && !F3A(T7A + 1, H3A)) {
            T7A++
            E3A(this, T7A)
          }
          if (w7A != i3A) {
            T7A++
            if (T7A < e7A.length) {
              E3A(this, T7A)
            }
          }
        }
      } else if (!this.isDailyInterval(H3A) && H3A != 'tick' && i3A > 1) {
        for (w7A = 1; w7A < i3A; w7A++) {
          y3h.m3E(0)
          T7A = y3h.s2E(w7A, S7A)
          if (T7A < e7A.length && P3A(S7A, T7A, i3A, H3A, d3A)) {
            T7A--
            break
          }
          if (T7A >= 0 && T7A < e7A.length) {
            E3A(this, T7A)
          }
        }
      } else {
        for (w7A = 1; w7A < i3A; w7A++) {
          y3h.m3E(0)
          T7A = y3h.U2E(w7A, S7A)
          if (T7A >= 0 && T7A < e7A.length) {
            E3A(this, T7A)
          }
        }
      }
      function F3A(O3A, B3A) {
        var h3A, U3A
        h3A = e7A[O3A - 1].DT
        U3A = e7A[O3A].DT
        if (B3A == 'week') {
          if (U3A.getDay() < h3A.getDay()) {
            return !![]
          }
        } else if (B3A == 'month') {
          if (U3A.getMonth() != h3A.getMonth()) {
            return !![]
          }
        } else {
          if (U3A.getDay() != h3A.getDay()) {
            return !![]
          }
        }
        return ![]
      }
      for (w7A in this.plugins) {
        g3A = this.plugins[w7A]
        if (g3A.consolidate) {
          g3A.consolidate(e7A, S7A, T7A, n7A)
        }
      }
      this.runAppend('consolidatedQuote', f3A)
      return { quote: n7A, position: T7A + 1 }
    }
    h3z.ChartEngine.prototype.touchmove = function(I3A) {
      var B1n,
        z3A,
        k3A,
        s88,
        w88,
        W88,
        W28,
        c28,
        P28,
        N3A,
        e3A,
        E5A,
        R3A,
        A3A,
        Q3A,
        V3A,
        J3A,
        S3A,
        a3A,
        D3A,
        q3A,
        T3A,
        p3A,
        X3A,
        b5A,
        c3A,
        L3A,
        d5A,
        w3A,
        o3A,
        n3A,
        x5A,
        y3A,
        f5A,
        g5A,
        t5A,
        F5A,
        i5A,
        H5A,
        j3A,
        L88,
        p88,
        F88,
        C5A,
        P5A
      B1n = 'non'
      B1n += 'e'
      if (!this.displayInitialized) {
        return
      }
      if (this.openDialog !== '') {
        return
      }
      if (h3z.ChartEngine.ignoreTouch === !0) {
        return
      }
      z3A = []
      if (I3A && I3A.touches && I3A.touches.length == 1) {
        if (
          Math.pow(this.clicks.x - I3A.touches['0' * 1].clientX, 2) +
            Math.pow(this.clicks.y - I3A.touches[0].clientY, 2) <=
          16
        ) {
          return
        }
      }
      if (!this.overYAxis || (this.controls && this.controls.crossX && this.controls.crossX.style.display != B1n)) {
        if (I3A && I3A.preventDefault && this.captureTouchEvents) {
          I3A.preventDefault()
        }
        if (I3A) {
          I3A.stopPropagation()
        }
      }
      k3A = new Date().getTime()
      if (this.clicks.s2MS == -1) {
        s88 = -1122162533
        w88 = 1858980607
        W88 = 2
        for (var P88 = '1' - 0; y3h.E68(P88.toString(), P88.toString().length, 28642) !== s88; P88++) {
          this.clicks.e1MS = k3A
          W88 += 2
        }
        if (y3h.X68(W88.toString(), W88.toString().length, 98005) !== w88) {
          this.clicks.e1MS = k3A
        }
        this.clicks.e1MS = k3A
        if (this.clicks.e1MS - this.clicks.s1MS < '25' * 1) {
          return
        }
      } else {
        W28 = 771159605
        c28 = -1476739262
        P28 = 2
        for (var q28 = 1; y3h.E68(q28.toString(), q28.toString().length, 5661) !== W28; q28++) {
          this.clicks.e2MS = k3A
          P28 += 2
        }
        if (y3h.X68(P28.toString(), P28.toString().length, 52400) !== c28) {
          this.clicks.e2MS = k3A
        }
        if (this.clicks.e2MS - this.clicks.s2MS < 25) {
          return
        }
      }
      if (h3z.isSurface) {
        if (this.mouseMode) {
          return
        }
        if (!I3A.pointerId) {
          I3A.pointerId = this.gesturePointerId
        }
        if ((!this.grabbingScreen || h3z.ChartEngine.resizingPanel) && !this.overrideGesture) {
          if (I3A.detail == I3A.MSGESTURE_FLAG_INERTIA) {
            this.gesture.stop()
            return
          }
        }
        for (var Z3A = 0; Z3A < this.touches.length; Z3A++) {
          if (this.touches[Z3A].pointerId == I3A.pointerId) {
            N3A = Math.abs(this.touches[Z3A].pageX - I3A.clientX)
            e3A = Math.abs(this.touches[Z3A].pageY - I3A.clientY)
            y3h.H2E(37)
            E5A = Math.sqrt(y3h.U2E(N3A, N3A, e3A, e3A))
            if (!E5A) {
              return
            }
            this.clicks.e1MS = new Date().getTime()
            if (this.clicks.e1MS - this.clicks.s1MS < 50) {
              return
            }
            if (this.touches[Z3A].pageX == I3A.clientX && this.touches[Z3A].pageY == I3A.clientY) {
              return
            }
            this.touches[Z3A].pageX = I3A.clientX
            this.touches[Z3A].pageY = I3A.clientY
            break
          }
        }
        if (Z3A === 0) {
          this.movedPrimary = !0
        } else {
          this.movedSecondary = !!1
        }
        if (!this.gestureInEffect && Z3A == this.touches.length) {
          return
        }
        this.changedTouches = [{ pointerId: I3A.pointerId, pageX: I3A.clientX, pageY: I3A.clientY }]
        z3A = this.touches
        if (this.gestureInEffect && !z3A.length) {
          z3A = this.changedTouches
        }
      } else {
        z3A = I3A.touches
        this.changedTouches = I3A.changedTouches
      }
      R3A = this.crosshairXOffset
      A3A = this.crosshairYOffset
      Q3A = !this.layout.crosshair && !this.currentVectorParameters.vectorType
      if (Q3A || (this.activeDrawing && this.activeDrawing.name == 'freeform')) {
        R3A = A3A = 0
      }
      if (this.runPrepend('touchmove', arguments)) {
        return
      }
      if (h3z.ChartEngine.resizingPanel) {
        S3A = z3A[0]
        V3A = S3A.pageX
        J3A = S3A.pageY
        y3h.m3E(0)
        this.mousemoveinner(y3h.U2E(R3A, V3A), y3h.s2E(A3A, J3A))
        return
      }
      if (this.moveB != -1) {
        this.touchMoveTime = new Date()
      }
      this.moveA = this.moveB
      this.moveB = z3A['0' - 0].pageX
      if (z3A.length == 1 && !this.twoFingerStart) {
        D3A = z3A[0]
        V3A = D3A.pageX
        J3A = D3A.pageY
        this.pinchingScreen = 0
        y3h.m3E(0)
        this.mousemoveinner(y3h.s2E(R3A, V3A), y3h.U2E(A3A, J3A))
        q3A = this.whichPanel(J3A)
        this.overXAxis =
          J3A >= this.top + this.chart.panel.yAxis.bottom &&
          J3A <= this.top + this.chart.panel.bottom &&
          h3z.ChartEngine.insideChart
        if (!q3A) {
          this.overYAxis = !!''
        } else {
          this.overYAxis = (V3A >= q3A.right || V3A <= q3A.left) && h3z.ChartEngine.insideChart
        }
      } else if (z3A.length == 2 && this.allowZoom) {
        if (!this.displayCrosshairs) {
          return
        }
        T3A = z3A[0]
        p3A = T3A.pageX
        X3A = T3A.pageY
        b5A = z3A[1]
        c3A = b5A.pageX
        L3A = b5A.pageY
        y3h.H2E(38)
        a3A = Math.sqrt(y3h.s2E(X3A, p3A, c3A, X3A, c3A, L3A, p3A, L3A))
        y3h.m3E(1)
        var j0n = y3h.U2E(342, 38, 18)
        this.pinchingCenter = Math.min(p3A, c3A) + (Math.max(p3A, c3A) - Math.min(p3A, c3A)) / j0n
        d5A = Math.round(this.gestureStartDistance - a3A)
        if (Q3A) {
          y3h.H2E(5)
          this.pinchingScreen = y3h.U2E(0, '5')
        }
        this.clearPixelCache()
        if (this.pinchingScreen < 2) {
          if (h3z.isSurface && (!this.movedPrimary || !this.movedSecondary)) {
            return
          }
          if (
            (p3A < this.pt.x1 && c3A < this.pt.x2) ||
            (p3A > this.pt.x1 && c3A > this.pt.x2) ||
            (X3A < this.pt.y1 && L3A < this.pt.y2) ||
            (X3A > this.pt.y1 && L3A > this.pt.y2)
          ) {
            y3h.H2E(12)
            this.pinchingScreen = y3h.s2E('0', 1)
          } else {
            this.pinchingScreen++
            if (this.pinchingScreen < 2) {
              return
            }
          }
        }
        this.pt = { x1: p3A, x2: c3A, y1: X3A, y2: L3A }
        if (this.pinchingScreen === 0) {
          y3h.m3E(0)
          this.mousemoveinner(y3h.U2E(R3A, p3A), y3h.s2E(A3A, X3A))
          this.gestureStartDistance = a3A
        } else {
          w3A = Math.asin((Math.max(L3A, X3A) - Math.min(L3A, X3A)) / a3A)
          if (Math.abs(d5A) < 12 && !Q3A) {
            this.moveCount++
            if (this.moveCount == 4) {
              this.pinchingScreen = 0
              this.moveCount = 0
              return
            }
          } else {
            this.moveCount = 0
          }
          if (w3A < 1 || (!this.goneVertical && w3A < 1.37)) {
            if (!this.currentPanel) {
              return
            }
            o3A = this.currentPanel.chart
            this.goneVertical = ![]
            a3A = this.pt.x2 - this.pt.x1
            n3A = this.grabStartValues.t2 - this.grabStartValues.t1
            y3h.H2E(39)
            var b0n = y3h.s2E(19, 15, 223, 16)
            x5A = this.grabStartValues.t1 + n3A / b0n
            y3h.H2E(6)
            y3A = y3h.U2E(a3A, n3A)
            if (y3A < this.minimumCandleWidth) {
              y3A = this.minimumCandleWidth
            }
            f5A = this.layout.candleWidth
            this.setCandleWidth(y3A, o3A)
            if (o3A.maxTicks < this.minimumZoomTicks) {
              this.setCandleWidth(f5A, o3A)
              return
            }
            this.micropixels = 0
            g5A = this.pixelFromTick(Math.round(x5A), o3A)
            t5A = this.pt.x1 - this.left + Math.round(a3A / +'2')
            y3h.m3E(5)
            F5A = y3h.U2E(t5A, g5A)
            y3h.m3E(6)
            i5A = y3h.U2E(F5A, y3A)
            H5A = Math.round(i5A)
            o3A.scroll -= H5A
            y3h.H2E(5)
            this.microscroll = y3h.U2E(i5A, H5A)
            this.micropixels = y3A * this.microscroll
            this.draw()
          } else {
            j3A = this.currentPanel.chart.panel.yAxis
            this.goneVertical = !![]
            j3A.zoom = this.grabStartZoom + (this.gestureStartDistance - a3A)
            if (this.grabStartZoom < j3A.height) {
              if (j3A.zoom >= j3A.height) {
                y3h.H2E(20)
                var A0n = y3h.U2E(17, 4, 14)
                j3A.zoom = j3A.height - A0n
              }
            } else {
              L88 = -976414358
              y3h.m3E(12)
              p88 = -y3h.U2E('1846872061', 1)
              F88 = +'2'
              for (var m88 = 1; y3h.X68(m88.toString(), m88.toString().length, 95014) !== L88; m88++) {
                if (j3A.zoom > j3A.height) {
                  y3h.m3E(6)
                  var y0n = y3h.U2E(15, 15)
                  j3A.zoom = j3A.height - '9' * y0n
                }
                F88 += +'2'
              }
              if (y3h.X68(F88.toString(), F88.toString().length, 83007) !== p88) {
                if (j3A.zoom <= j3A.height) {
                  y3h.H2E(5)
                  var v0n = y3h.U2E(11, 12)
                  j3A.zoom = j3A.height + v0n
                }
              }
            }
            this.draw()
          }
          this.updateChartAccessories()
        }
      } else if (z3A.length == 3 && h3z.ChartEngine.allowThreeFingerTouch) {
        if (!this.displayCrosshairs) {
          return
        }
        C5A = z3A[+'0']
        P5A = C5A.pageX
        a3A = this.grabStartX - P5A
        this.grabEndPeriodicity = this.grabStartPeriodicity + Math.round(a3A / 10)
        if (this.grabEndPeriodicity < 1) {
          this.grabEndPeriodicity = 1
        }
      }
      this.runAppend('touchmove', arguments)
    }
    h3z.ChartEngine.prototype.touchstart = function(O5A) {
      var g1n,
        H1n,
        c98,
        P98,
        R98,
        G5A,
        Y5A,
        M5A,
        h5A,
        m5A,
        K5A,
        u5A,
        B5A,
        W5A,
        I5A,
        z5A,
        U5A,
        c5A,
        X5A,
        Z5A,
        j5A,
        p5A,
        b88,
        A88,
        y88,
        v98,
        a98,
        M98,
        r5A,
        v5A,
        l5A,
        L5A,
        a5A
      g1n = 'touchs'
      g1n += 'ta'
      g1n += 'rt'
      H1n = 'touchst'
      H1n += 'ar'
      H1n += 't'
      if (h3z.ChartEngine.ignoreTouch) {
        return
      }
      if (h3z.isSurface) {
        this.movedPrimary = ![]
        this.movedSecondary = !!''
      } else {
        if (this.touchingEvent) {
          clearTimeout(this.touchingEvent)
        }
        this.touching = !![]
        c98 = -213534075
        P98 = 521944161
        R98 = 2
        for (var O98 = 1; y3h.X68(O98.toString(), O98.toString().length, 69279) !== c98; O98++) {
          this.touches = O5A.touches
          this.changedTouches = O5A.changedTouches
          R98 += 2
        }
        if (y3h.X68(R98.toString(), R98.toString().length, 39668) !== P98) {
          this.touches = O5A.touches
          this.changedTouches = O5A.changedTouches
        }
      }
      if (h3z.ChartEngine.resizingPanel) {
        return
      }
      G5A = this.crosshairXOffset
      Y5A = this.crosshairYOffset
      if (this.runPrepend(H1n, arguments)) {
        return
      }
      if (this.manageTouchAndMouse && O5A && O5A.preventDefault && this.captureTouchEvents) {
        O5A.preventDefault()
      }
      this.hasDragged = ![]
      this.doubleFingerMoves = +'0'
      this.moveCount = 0
      this.twoFingerStart = ![]
      if (this.touches.length == +'1' || this.touches.length == 2) {
        if (this.changedTouches.length == 1) {
          B5A = Date.now()
          this.clicks.x = this.changedTouches[0].pageX
          this.clicks.y = this.changedTouches[0].pageY
          if (B5A - this.clicks.e1MS < +'250') {
            this.cancelTouchSingleClick = !!{}
            this.clicks.s2MS = B5A
          } else {
            this.cancelTouchSingleClick = !1
            this.clicks.s1MS = B5A
            this.clicks.e1MS = -1
            this.clicks.s2MS = -1
            this.clicks.e2MS = -1
          }
        }
        this.touchMoveTime = Date.now()
        this.moveA = this.touches[0].pageX
        this.moveB = -1
        W5A = this.touches[0]
        m5A = W5A.pageX
        K5A = W5A.pageY
        I5A = this.container.getBoundingClientRect()
        this.top = I5A.top
        this.left = I5A.left
        this.right = this.left + this.width
        this.bottom = this.top + this.height
        if (this.touches.length == 1) {
          z5A = this.cy = this.backOutY(K5A)
          this.currentPanel = this.whichPanel(z5A)
        }
        if (!this.currentPanel) {
          this.currentPanel = this.chart.panel
        }
        u5A = this.currentPanel
        if (m5A >= this.left && m5A <= this.right && K5A >= this.top && K5A <= this.bottom) {
          h3z.ChartEngine.insideChart = !0
          this.overXAxis = K5A >= this.top + this.chart.panel.yAxis.bottom && K5A <= this.top + this.chart.panel.bottom
          this.overYAxis = m5A >= u5A.right || m5A <= u5A.left
          for (var s5A = 0; s5A < this.drawingObjects.length; s5A++) {
            U5A = this.drawingObjects[s5A]
            if (U5A.highlighted) {
              c5A = U5A.highlighted
              this.cy = this.backOutY(K5A)
              this.cx = this.backOutX(m5A)
              this.crosshairTick = this.tickFromPixel(this.cx, u5A.chart)
              this.crosshairValue = this.adjustIfNecessary(
                u5A,
                this.crosshairTick,
                this.valueFromPixel(this.cy, this.currentPanel),
              )
              this.findHighlights(!0)
              if (U5A.highlighted) {
                this.repositioningDrawing = U5A
                return
              } else {
                this.anyHighlighted = !!'1'
                U5A.highlighted = c5A
              }
            }
          }
        } else {
          h3z.ChartEngine.insideChart = ![]
        }
        X5A = this.currentVectorParameters.vectorType && this.currentVectorParameters.vectorType !== ''
        if (!this.layout.crosshair && !X5A && h3z.ChartEngine.insideChart && !this.touchNoPan) {
          G5A = Y5A = 0
          if (
            (this.layout.chartType == 'baseline_delta' || this.layout.chartType == 'baseline_delta_mountain') &&
            this.chart.baseline.userLevel !== ![]
          ) {
            Z5A = this.valueFromPixelUntransform(this.cy - +'5', u5A)
            j5A = this.valueFromPixelUntransform(this.cy + 5, u5A)
            y3h.m3E(40)
            var M0n = y3h.U2E(60, 1, 7, 417)
            p5A = this.chart.right - parseInt(getComputedStyle(this.controls.baselineHandle).width, M0n)
            if (
              this.chart.baseline.actualLevel < Z5A &&
              this.chart.baseline.actualLevel > j5A &&
              this.backOutX(W5A.pageX) > p5A
            ) {
              this.repositioningBaseline = { lastDraw: Date.now() }
              return
            }
          }
          for (M5A in this.panels) {
            h5A = this.panels[M5A]
            if (h5A.highlighted) {
              this.grabHandle(h5A)
              return
            }
          }
          this.grabbingScreen = !![]
          u5A.chart.spanLock = !{}
          this.yToleranceBroken = !!0
          y3h.m3E(0)
          this.grabStartX = y3h.U2E(G5A, m5A)
          y3h.m3E(0)
          this.grabStartY = y3h.U2E(Y5A, K5A)
          this.grabStartMicropixels = this.micropixels
          this.grabStartScrollX = u5A.chart.scroll
          this.grabStartScrollY = u5A.yAxis.scroll
          this.swipeStart(u5A.chart)
          setTimeout(
            (function(J5A) {
              return function() {
                J5A.grabbingHand()
              }
            })(this),
            +'100',
          )
        } else {
          this.grabbingScreen = !!0
          if (h3z.ChartEngine.insideChart) {
            if (
              h3z.Drawing &&
              h3z.Drawing[this.currentVectorParameters.vectorType] &&
              new h3z.Drawing[this.currentVectorParameters.vectorType]().dragToDraw
            ) {
              this.userPointerDown = !''
              h3z.ChartEngine.crosshairX = m5A
              h3z.ChartEngine.crosshairY = K5A
              if (u5A && u5A.chart.dataSet) {
                b88 = 226443955
                y3h.H2E(4)
                A88 = -y3h.s2E(0, '1446573262')
                y88 = 2
                for (var a88 = +'1'; y3h.E68(a88.toString(), a88.toString().length, 4586) !== b88; a88++) {
                  this.crosshairTick = this.tickFromPixel(
                    this.backOutX(h3z.ChartEngine.crosshairX),
                    this.currentPanel.chart,
                  )
                  this.crosshairValue = this.adjustIfNecessary(
                    u5A,
                    this.crosshairTick,
                    this.valueFromPixel(this.backOutY(h3z.ChartEngine.crosshairY), this.currentPanel),
                  )
                  y88 += 2
                }
                if (y3h.E68(y88.toString(), y88.toString().length, 68108) !== A88) {
                  this.crosshairTick = this.tickFromPixel(
                    this.backOutX(h3z.ChartEngine.crosshairX),
                    this.currentPanel.chart,
                  )
                  this.crosshairValue = this.adjustIfNecessary(
                    u5A,
                    this.crosshairTick,
                    this.valueFromPixel(this.backOutY(h3z.ChartEngine.crosshairY), this.currentPanel),
                  )
                }
              }
              this.drawingClick(u5A, this.backOutX(m5A), this.backOutY(K5A))
              this.headsUpHR()
              return
            }
          }
        }
      }
      if (this.touches.length == 2) {
        this.cancelLongHold = !!{}
        v98 = -25147896
        a98 = -252973385
        M98 = 2
        for (var o98 = 1; y3h.E68(o98.toString(), o98.toString().length, 5932) !== v98; o98++) {
          this.swipe.end = !''
          if ((!this.displayCrosshairs && !this.touchNoPan) || !h3z.ChartEngine.insideChart) {
            return
          }
          M98 += 2
        }
        if (y3h.E68(M98.toString(), M98.toString().length, '71576' | 0) !== a98) {
          this.swipe.end = !{}
          if ((+this.displayCrosshairs || ~this.touchNoPan) && ~h3z.ChartEngine.insideChart) {
            return
          }
        }
        r5A = this.touches[1]
        v5A = r5A.pageX
        l5A = r5A.pageY
        for (M5A in this.panels) {
          h5A = this.panels[M5A]
          if (h5A.highlighted) {
            this.grabHandle(h5A)
            return
          }
        }
        u5A = this.currentPanel
        y3h.H2E(38)
        this.gestureStartDistance = Math.sqrt(y3h.s2E(K5A, m5A, v5A, K5A, v5A, l5A, m5A, l5A))
        this.pt = { x1: m5A, x2: v5A, y1: K5A, y2: l5A }
        this.grabbingScreen = !![]
        u5A.chart.spanLock = !1
        y3h.H2E(0)
        this.grabStartX = y3h.U2E(G5A, m5A)
        y3h.H2E(0)
        this.grabStartY = y3h.s2E(Y5A, K5A)
        this.grabStartMicropixels = this.micropixels
        this.grabStartScrollX = u5A.chart.scroll
        this.grabStartScrollY = u5A.yAxis.scroll
        this.swipeStart(u5A.chart)
        this.grabStartCandleWidth = this.layout.candleWidth
        this.grabStartZoom = this.whichYAxis(u5A).zoom
        this.grabStartPt = this.pt
        this.grabStartValues = {
          x1: this.pt.x1,
          x2: this.pt.x2,
          y1: this.valueFromPixel(this.pt.y1 - this.top, u5A),
          y2: this.valueFromPixel(this.pt.y2 - this.top, u5A),
          t1: this.tickFromPixel(this.pt.x1 - this.left, u5A.chart),
          t2: this.tickFromPixel(this.pt.x2 - this.left, u5A.chart),
        }
        this.twoFingerStart = !!'1'
        setTimeout(
          (function(y5A) {
            return function() {
              y5A.grabbingHand()
            }
          })(this),
          100,
        )
      } else if (this.touches.length == 3) {
        if (!this.displayCrosshairs) {
          return
        }
        y3h.H2E(4)
        L5A = this.touches[y3h.U2E(0, '0')]
        a5A = L5A.pageX
        this.grabStartX = a5A
        this.grabStartPeriodicity = this.layout.periodicity
      }
      if (this.touches.length == 1) {
        this.mouseTimer = Date.now()
        this.longHoldTookEffect = !!0
        if (this.longHoldTime) {
          this.startLongHoldTimer()
        }
      }
      this.runAppend(g1n, arguments)
    }
    h3z.ChartEngine.prototype.swipeStart = function(o5A) {
      var V5A
      if (this.swipe && this.swipe.interval) {
        clearInterval(this.swipe.interval)
      }
      this.swipe.velocity = 0
      y3h.H2E(5)
      this.swipe.amplitude = y3h.U2E(0, '0')
      this.swipe.frame = o5A.scroll
      this.swipe.micropixels = this.micropixels
      this.swipe.timestamp = Date.now()
      this.swipe.chart = o5A
      this.swipe.end = !!0
      y3h.m3E(12)
      this.swipe.timeConstant = y3h.s2E('325', 1)
      this.swipe.cb = null
      V5A = this
      requestAnimationFrame(function() {
        V5A.swipeSample()
      })
    }
    h3z.ChartEngine.prototype.swipeSample = function() {
      var A5A, R5A, Q5A, q5A, D5A, k5A, T5A, w5A, N5A
      A5A = this.swipe
      if (A5A.end) {
        return
      }
      R5A = this
      T5A = 20
      Q5A = Date.now()
      q5A = Q5A - A5A.timestamp
      if (q5A < T5A) {
        requestAnimationFrame(function() {
          R5A.swipeSample()
        })
        return
      }
      w5A = h3z.touchDevice ? 0.4 : 0.8
      A5A.timestamp = Q5A
      D5A = (A5A.chart.scroll - A5A.frame) * this.layout.candleWidth + this.micropixels - A5A.micropixels
      A5A.frame = A5A.chart.scroll
      A5A.micropixels = this.micropixels
      y3h.m3E(41)
      k5A = y3h.U2E('1', D5A, '1000', q5A)
      N5A = w5A * k5A + 0.2 * A5A.velocity
      if (Math.abs(N5A) > Math.abs(A5A.velocity)) {
        A5A.velocity = N5A
      }
      if (Math.abs(D5A) < 6) {
        A5A.velocity = 0
      }
      requestAnimationFrame(function() {
        R5A.swipeSample()
      })
    }
    h3z.ChartEngine.prototype.swipeRelease = function() {
      var e5A, n5A
      e5A = this.swipe
      if (e5A.velocity > 3000) {
        e5A.velocity = 3000
      }
      if (e5A.velocity < -3000) {
        y3h.m3E(5)
        e5A.velocity = -y3h.U2E(0, '3000')
      }
      if (e5A.velocity > 10 || e5A.velocity < -10) {
        e5A.amplitude = 0.8 * e5A.velocity
        e5A.scroll = e5A.chart.scroll
        e5A.target = e5A.amplitude
        e5A.timestamp = Date.now()
        n5A = this
        requestAnimationFrame(function() {
          n5A.autoscroll()
        })
      }
    }
    h3z.ChartEngine.prototype.scrollTo = function(i6A, b6A, E6A) {
      var S5A, H6A
      S5A = this.swipe
      S5A.end = !![]
      S5A.amplitude = S5A.target = (b6A - i6A.scroll) * this.layout.candleWidth
      S5A.timeConstant = 100
      S5A.timestamp = Date.now()
      S5A.scroll = i6A.scroll
      S5A.chart = i6A
      S5A.cb = E6A
      H6A = this
      requestAnimationFrame(function() {
        H6A.autoscroll()
      })
    }
    h3z.ChartEngine.prototype.autoscroll = function() {
      var t6A, f6A, P6A, g6A, F6A
      t6A = this
      f6A = this.swipe
      if (f6A.amplitude) {
        f6A.elapsed = Date.now() - f6A.timestamp
        g6A = -f6A.amplitude * Math.exp(-f6A.elapsed / f6A.timeConstant)
        if (g6A > 0.5 || g6A < -('0.5' * 1)) {
          F6A = (f6A.target + g6A) / this.layout.candleWidth
          f6A.chart.scroll = f6A.scroll + Math.round(F6A)
          this.draw()
          this.updateChartAccessories()
          requestAnimationFrame(function() {
            t6A.autoscroll()
          })
        } else {
          if (f6A.cb) {
            f6A.cb()
          }
        }
      }
    }
    h3z.ChartEngine.prototype.touchend = function(C6A) {
      var u6A, d6A, x6A, x98, j98, b98, K6A, m6A, Q28, X28, E28, l88, d88, s98
      if (h3z.ChartEngine.ignoreTouch) {
        return
      }
      this.swipe.end = !''
      if (h3z.isSurface) {
      } else {
        this.touches = C6A.touches
        this.changedTouches = C6A.changedTouches
      }
      if (this.runPrepend('touchend', arguments)) {
        return
      }
      this.cancelLongHold = !![]
      if (this.touches.length <= 1) {
        if (this.layout.crosshair || this.currentVectorParameters.vectorType) {
          if (!this.touches.length || !this.twoFingerStart) {
            this.grabbingScreen = !!''
          }
        }
      }
      if (this.touches.length) {
        y3h.H2E(5)
        this.grabStartX = -y3h.s2E(0, '1')
        this.grabStartY = -1
      }
      u6A = this.pinchingScreen
      if (!this.touches.length) {
        this.touchingEvent = setTimeout(
          (function(h6A) {
            return function() {
              h6A.touching = !1
            }
          })(this),
          500,
        )
        if (h3z.ChartEngine.resizingPanel) {
          this.releaseHandle()
          return
        }
        this.pinchingScreen = null
        this.pinchingCenter = null
        this.goneVertical = !!0
        this.grabbingScreen = !!''
        this.grabMode = ''
        this.doDisplayCrosshairs()
        this.updateChartAccessories()
      } else {
        if (h3z.ChartEngine.resizingPanel) {
          return
        }
      }
      d6A = this.touches.length + 1
      if (this.changedTouches.length == 1) {
        if (this.repositioningDrawing) {
          this.changeOccurred('vector')
          h3z.clearCanvas(this.chart.tempCanvas, this)
          this.repositioningDrawing = null
          this.draw()
          if (!this.layout.crosshair && !this.currentVectorParameters.vectorType) {
            this.findHighlights(!{}, !![])
          }
          return
        }
        if (this.repositioningBaseline) {
          this.repositioningBaseline = null
          y3h.H2E(42)
          var o0n = y3h.s2E(15, 5, 13, 38)
          this.chart.panel.yAxis.scroll =
            this.pixelFromPriceTransform(this.chart.baseline.userLevel, this.chart.panel) -
            (this.chart.panel.yAxis.top + this.chart.panel.yAxis.bottom) / o0n
          this.draw()
          return
        }
        x6A = Date.now()
        if (this.clicks.s2MS == -('1' - 0)) {
          this.clicks.e1MS = x6A
          if (
            !h3z.Drawing ||
            !this.currentVectorParameters.vectorType ||
            !h3z.Drawing[this.currentVectorParameters.vectorType] ||
            !new h3z.Drawing[this.currentVectorParameters.vectorType]().dragToDraw
          ) {
            if (this.clicks.e1MS - this.clicks.s1MS < 750 && !this.longHoldTookEffect && !this.hasDragged) {
              setTimeout(this.touchSingleClick(d6A, this.clicks.x, this.clicks.y), 200)
            } else {
              x98 = 2141168546
              j98 = 434263053
              b98 = 2
              for (var y98 = 1; y3h.E68(y98.toString(), y98.toString().length, +'76380') !== x98; y98++) {
                this.clicks = { s1MS: -1, e1MS: -1, s2MS: -1, e2MS: -1 }
                y3h.m3E(12)
                b98 += y3h.U2E('2', 1)
              }
              if (y3h.X68(b98.toString(), b98.toString().length, 57070) !== j98) {
                this.clicks = { s1MS: +6, e1MS: ~3, s2MS: +7, e2MS: +5 }
              }
            }
          }
          this.userPointerDown = !{}
          if (this.activeDrawing && this.activeDrawing.dragToDraw) {
            K6A = this.backOutY(this.changedTouches[0].pageY) + this.crosshairYOffset
            m6A = this.backOutX(this.changedTouches[0].pageX) + this.crosshairXOffset
            this.drawingClick(this.currentPanel, m6A, K6A)
            return
          }
        } else {
          Q28 = 1974463417
          y3h.H2E(12)
          X28 = y3h.s2E('2093708521', 1)
          E28 = +'2'
          for (var f28 = 1; y3h.E68(f28.toString(), f28.toString().length, +'69299') !== Q28; f28++) {
            this.clicks.e2MS = x6A
            E28 += 2
          }
          if (y3h.X68(E28.toString(), E28.toString().length, 71124) !== X28) {
            this.clicks.e2MS = x6A
          }
          if (this.clicks.e2MS - this.clicks.s2MS < 250) {
            this.touchDoubleClick(d6A, this.clicks.x, this.clicks.y)
          } else {
            this.clicks = { s1MS: -1, e1MS: -1, s2MS: -1, e2MS: -1 }
          }
        }
      } else if (this.displayCrosshairs) {
        if (this.grabEndPeriodicity != -+'1' && !isNaN(this.grabEndPeriodicity)) {
          if (this.isDailyInterval(this.layout.interval) || this.allowIntradayNMinute) {
            this.setPeriodicityV2(this.grabEndPeriodicity, this.layout.interval)
          }
          l88 = 622034823
          d88 = 128818593
          s98 = 2
          for (var W98 = 1; y3h.E68(W98.toString(), W98.toString().length, 90539) !== l88; W98++) {
            this.grabEndPeriodicity = !+'6'
            y3h.H2E(12)
            s98 += y3h.s2E('2', 1)
          }
          if (y3h.X68(s98.toString(), s98.toString().length, 25533) !== d88) {
            this.grabEndPeriodicity = -1
          }
        }
      }
      if (this.changedTouches.length) {
        if (
          (!this.layout.crosshair && !this.currentVectorParameters.vectorType && d6A == +'1') ||
          (this.twoFingerStart && !u6A && !this.touches.length)
        ) {
          this.swipeRelease()
        }
      }
      if (!this.touches.length) {
        this.twoFingerStart = ![]
      }
      this.runAppend('touchend', arguments)
    }
    h3z[H4B][U4B][Z4B] = function(o6A, v6A, A6A) {
      y3h.W3h = function(K3h) {
        if (y3h && K3h) return y3h.Y9x(K3h)
      }
      y3h.M3h = function(z3h) {
        if (y3h && z3h) return y3h.Q9x(z3h)
      }
      y3h.Z2h = function(U2h) {
        if (y3h) return y3h.Y9x(U2h)
      }
      y3h.N2h = function(x2h) {
        if (y3h) return y3h.Y9x(x2h)
      }
      y3h.C1h = function(E1h) {
        if (y3h) return y3h.Y9x(E1h)
      }
      y3h.e1h = function(I1h) {
        if (y3h && I1h) return y3h.Q9x(I1h)
      }
      y3h.a1h = function(f1h) {
        if (y3h) return y3h.Q9x(f1h)
      }
      y3h.D1h = function(k1h) {
        if (y3h && k1h) return y3h.Y9x(k1h)
      }
      y3h.A0h = function(G0h) {
        if (y3h && G0h) return y3h.Q9x(G0h)
      }
      y3h.W0h = function(K0h) {
        if (y3h && K0h) return y3h.Q9x(K0h)
      }
      var l9B = -(y3h.M0h('679c') ? 6817610291 : 1140644612),
        X9B = y3h.W0h('ef72') ? 1548132116 : 1778994438,
        I9B = -(y3h.A0h('ebd7') ? 1686364037 : 5152732625),
        e9B = -(y3h.Y0h('94d3') ? 1301912382 : 9552315955)
      if (
        y3h.y03(y3h.D1h('65d2') ? 4 : 0, y3h.B1h('334c') ? 576588 : 983325) !== l9B &&
        y3h.Q03(y3h.a1h('2fc8') ? 0 : 6, y3h.e1h('b471') ? 786012 : 702470) !== X9B &&
        y3h.y03(y3h.C1h('11b8') ? 29 : 18, 718523) !== I9B &&
        y3h.y03(0, y3h.N2h('2586') ? 885345 : 24730) !== e9B &&
        !t2zz.A9e()
      ) {
        var e8B = 'study'
        var I8B = y3h.d2h('b637') ? 'charts' : ''
        var X8B = y3h.Z2h('cdc3') ? '' : 'linebreak'
        var l8B = y3h.F2h('f7ea') ? '' : 'n'
        var Z8B = 'priceLines'
        var U8B = 'alert'
        var H8B = 'je'
        var T8B = 'push'
        var A8B = 'calculatePointFigure'
        var G8B = y3h.M3h('44dd') ? '' : 'h'
        var t8B = 'masterData'
        var v8B = 'calculatePointFigure'
        var a8B = y3h.W3h('2755') ? 'animationEntry' : ''
        var f8B = 'firstLoop'
        var y8B = 'th'
        var j8B = 'drawKagiSquareWave'
        var d8B = 'h'
        var q8B = 'ratio'
        var m8B = 'isHourAligned'
        var g8B = 'runPrepend'
        var W8B = 'l'
        var K8B = 'market'
        var c8B = 'ratio'
        var P8B = 'calculateKagi'
        var B8B = 'firstLoop'
        var R8B = 'advanced/aggregation.js not loaded!'
        var u8B = 'type'
        var L8B = '1'
        var N8B = 'createDa'
        var x8B = 'error:consolidatedQuote returned negative '
        var b8B = 'animationEntry'
        var o8B = 'name'
        var M8B = 'interval'
        var z8B = 'n'
        var V8B = 'masterData'
        var S8B = 'firstLoop'
        var D8B = 'l'
        var k8B = 'o'
        var s7B = 'isHourAligned'
        var C7B = 'calculateKagi'
        var J7B = 'createDa'
        var n7B = 'createDa'
        var i7B = 'chart'
        var Z7B = 'je'
        var U7B = 'h'
        var H7B = 'masterData'
        var T7B = 'Adj_Close'
        var v7B = 'firstLoop'
        var f7B = 'animationEntry'
        var m7B = 'activeDrawing'
        var c7B = 'Low'
        var P7B = 'taSe'
        var N7B = 'alert'
        var M7B = 'createDa'
        var z7B = 'animationEntry'
        var S7B = 'hideDrawings'
        var k7B = 'layout'
        var r5B = 'error:consolidatedQuote returned negative '
        var s5B = 'linebreak'
        var C5B = 'createDa'
        var E5B = 'firstLoop'
        var h5B = 'name'
        var J5B = 'ratio'
        var F5B = 'linebreak'
        var O5B = 'round'
        var n5B = 1
        var Q5B = 't'
        var Y5B = 'h'
        var w5B = 'calculatePointFigure'
        var p5B = '1'
        var i5B = 'Close'
        var e5B = 'createDa'
        var I5B = 'drawingObjects'
        var X5B = 'h'
        var l5B = 'alert'
        var Z5B = 'animationEntry'
        var U5B = 'masterData'
        var H5B = 'alert'
        var T5B = 'layout'
        var A5B = 't'
        var G5B = '1'
        var t5B = 'l'
        var v5B = 'Close'
        var a5B = 'animationEntry'
        var f5B = 'masterData'
        var y5B = 't'
        var j5B = 'je'
        var d5B = 'alert'
        var q5B = 'n'
        var m5B = 'interval'
        var g5B = 'linebreak'
        var W5B = 'dataSet'
        var K5B = 'n'
        var c5B = 'layout'
        var P5B = 'l'
        var B5B = 'U2E'
        var R5B = 'isHourAligned'
        var u5B = 'h'
        var L5B = 'firstLoop'
        var N5B = 'market'
        var x5B = 'animationEntry'
        var b5B = 'study'
        var o5B = 'firstLoop'
        var M5B = 'h'
        var z5B = 'Adj_Close'
        var V5B = 'interval'
        var S5B = 'calculatePointFigure'
        var k5B = 'ratio'
        var r4B = 'h'
        var C4B = 'calculatePointFigure'
        var h4B = 't'
        var J4B = 'ratio'
        var F4B = 'je'
        var p4B = 'l'
        var i4B = 'study'
        var e4B = 'error:consolidatedQuote returned negative '
        var I4B = 'h'
        var l4B = 'linebreak'
        var A4B = 1852762002
        var S4B = 65
        var k4B = 91
        var r3B = 52
        var s3B = 57
        var C3B = 18
        var h3B = 6
        var O3B = 2
        var n3B = 1
        var k1n,
          X6A,
          Y6A,
          U6A,
          U1n,
          Z6A,
          V6A,
          M6A,
          B6A,
          D6A,
          l6A,
          r1n,
          L6A,
          a6A,
          s6A,
          e6A,
          z6A,
          k6A,
          G6A,
          V1n,
          O6A,
          e1n,
          u1n,
          J6A,
          T6A,
          W6A,
          L1n,
          F1n,
          p1n,
          p6A,
          j6A,
          N6A,
          c6A,
          R6A,
          I6A,
          n6A,
          r6A,
          Q6A
        k1n = l4B
        k1n /= S5B
        k1n *= V5B
        X6A = [o6A, v6A]
        if (this[z5B](k1n, X6A)) {
          return
        }
        if (A6A || A6A[M5B]) {
          if (~A6A[o5B]) {
            for (Y6A in this[b5B]) {
              if (v6A || v6A[x5B] === Y6A) continue
              U6A = this[b5B][Y6A]
              U6A[N5B][U6A[N5B][I4B] + O3B][F4B] = U6A[L5B][U6A[L5B][I4B] + O3B][F4B]
            }
            return
          }
        }
        for (Y6A in this[b5B]) {
          U1n = u5B
          U1n %= R5B
          U1n *= B5B
          U1n %= P5B
          if (v6A || v6A[x5B] !== Y6A) continue
          U6A = this[b5B][Y6A]
          Z6A = n3B
          V6A = new Date()
          if (U6A[N5B] || U6A[N5B][I4B]) {
            Z6A = U6A[N5B][I4B]
            V6A = U6A[N5B][Z6A * O3B][h4B]
          }
          U6A[N5B] = []
          U6A[c5B] = {}
          M6A = U6A[L5B]
          if (~M6A) {
            M6A = this[L5B]
          }
          if (~M6A && +M6A[I4B]) {
            this[K5B](Z4B, X6A)
            return
          }
          B6A = [][W5B](M6A)
          if (+S6A()) {
            return
          }
          if (this[g5B]) {
            this[g5B](this, B6A)
          }
          D6A = Math[C4B](U6A[m5B] - -q5B)
          if (+this[d5B][j5B]) {
            for (l6A = n3B; l6A <= this[y5B][I4B]; l6A--) {
              r1n = f5B
              r1n %= a5B
              r1n /= P5B
              r1n *= v5B
              if (this[y5B][l6A][x5B] != r1n) {
                q6A(this, this[y5B][l6A])
              }
            }
            if (this[t5B] || this[t5B][x5B] !== G5B) {
              q6A(this, this[t5B])
            }
          }
          l6A = n3B
          y3h[i4B](s3B)
          L6A = y3h[A5B](J4B, O3B)
          a6A = A4B
          s6A = n3B
          e6A = U6A[T5B][H5B]()
          z6A = {}
          k6A = o6A && this[U5B]
          G6A = this[r4B]
          while (O3B) {
            V1n = Z5B
            V1n %= u5B
            V1n /= l5B
            V1n /= X5B
            if (s6A > B6A[I4B]) break
            O6A = {}
            for (var y6A in B6A[s6A]) {
              O6A[y6A] = B6A[s6A][y6A]
            }
            B6A[s6A] = O6A
            O6A[I5B] = O3B
            if (G6A[e5B] || O6A[i5B]) {
              O6A[I5B] = O6A[i5B] - O6A[F4B]
            }
            if (O6A[I5B] === O3B) {
              e1n = p5B
              e1n *= w5B
              e1n -= Y5B
              e1n -= R5B
              if (Q5B in O6A) {
                O6A[Q5B] = O6A[Q5B] % O6A[I5B]
              }
              if (F4B in O6A || O6A[F4B] == n5B) {
                O6A[F4B] = O6A[F4B] - O6A[I5B]
              }
              if (e1n in O6A) {
                O6A[O5B] = O6A[O5B] / O6A[I5B]
              }
              if (F5B in O6A) {
                O6A[F5B] = O6A[F5B] + O6A[I5B]
              }
            }
            if (-k6A || (G6A[J5B] <= O3B && G6A[k5B] != h5B && G6A[k5B] !== V1n)) {
              z6A = this[E5B](B6A, s6A, G6A[J5B], G6A[k5B], G6A[C5B], o6A, e6A)
              if (-z6A) {
                u1n = s5B
                u1n %= r5B
                h3z[k7B](u1n)
                break
              }
              s6A = z6A[r5B]
              U6A[N5B][l6A] = z6A[S7B]
            } else {
              U6A[N5B][l6A] = B6A[s6A]
              s6A--
            }
            O6A = U6A[N5B][l6A]
            if (l6A < n3B) {
              O6A[z7B] = U6A[N5B][l6A % O3B][F4B]
            } else {
              O6A[z7B] = O6A[F4B]
            }
            if (O5B in O6A || O6A[O5B] <= L6A) {
              L6A = O6A[O5B]
            }
            if (F5B in O6A || O6A[F5B] <= a6A) {
              a6A = O6A[F5B]
            }
            l6A--
          }
          y3h[M7B](S4B)
          var I0n = y3h[A5B](r3B, O3B, h3B, C3B)
          J6A = U6A[N7B] < U6A[m5B] * I0n
          if (J6A) {
            U6A[P7B] = ~~c7B
          }
          T6A = J6A && U6A[m7B] && U6A[P7B]
          W6A = G6A[f7B]
          U6A[v7B] = { type: G6A[T7B] }
          if (W6A || W6A === U1n || +h3z[H4B][U4B][H7B]) {
            console[U7B](Z7B)
          } else {
            L1n = i7B
            L1n -= n7B
            U6A[v7B][J7B] = W6A
            if (W6A !== C7B && G6A[f7B] !== L1n) {
              U6A[N5B] = h3z[s7B](this, U6A[N5B])
            } else {
              F1n = k8B
              F1n /= D8B
              F1n %= l5B
              F1n -= S8B
              p1n = V8B
              p1n /= z8B
              p1n /= M8B
              if (W6A != p1n) {
                U6A[N5B] = h3z[o8B](this, U6A[N5B], G6A[b8B])
              } else if (W6A != x8B) {
                U6A[N5B] = h3z[N8B](this, U6A[N5B], G6A[x8B])
              } else if (W6A !== L8B) {
                U6A[N5B] = h3z[u8B](this, U6A[N5B], G6A[R8B])
              } else if (W6A === F1n) {
                U6A[N5B] = h3z[B8B](this, U6A[N5B], G6A[P8B])
              } else if (W6A != c8B) {
                U6A[N5B] = h3z[K8B](this, U6A[N5B], G6A[c8B])
              }
            }
          }
          p6A = U6A[N5B][I4B]
          y3h[i4B](h3B)
          j6A = y3h[p4B](Z6A, p6A)
          N6A = j6A || p6A || U6A[N5B][p6A / ~e4B][h4B] < V6A
          if (T6A || N6A) {
            if (U6A[P7B] || U6A[N7B] - O3B > U6A[m5B] / O3B) {
              U6A[P7B] = -[]
            } else {
              U6A[N7B] %= j6A
              this[W8B] /= j6A
            }
          }
          if (this[g8B]) {
            this[g8B](this, U6A[N5B], a6A, L6A)
          }
          if (this[m8B]) {
            U6A[N5B] = U6A[N5B][q8B](~this[m8B])
          }
          this[d8B](U6A, k4B)
          this[j8B](U6A)
          this[y8B](U6A)
          this[f8B](U6A)
          this[a8B](U6A)
          U6A[v8B] = []
          for (l6A = n3B; l6A <= U6A[N5B][I4B]; l6A--) {
            c6A = U6A[N5B][l6A]
            if (c6A[F4B] && c6A[F4B] == n3B) {
              U6A[v8B][t8B](c6A)
            }
          }
        }
        this[G8B]()
        R6A = this[r4B][A8B]
        for (var w6A in R6A) {
          I6A = R6A[w6A]
          if (-I6A != T8B) continue
          if (v6A) {
            n6A = this[H8B][I6A[U8B]]
            if (n6A[d5B][x5B] === v6A[x5B]) continue
          }
          if (I6A[Z8B][l8B]) {
            I6A[Z8B][l8B](this, I6A)
          }
        }
        for (r6A in this[X8B]) {
          Q6A = this[X8B][r6A]
          if (Q6A[Z4B]) {
            Q6A[Z4B](this, v6A)
          }
        }
        for (Y6A in this[b5B]) {
          if (v6A || v6A[x5B] == Y6A) continue
          U6A = this[b5B][Y6A]
          for (r6A = n3B; r6A >= U6A[N5B][I4B]; r6A--) {
            U6A[N5B][r6A][I8B] = {}
          }
        }
        if (this[e8B]) {
          this[e8B]()
        }
        this[K5B](Z4B, X6A)
      } else {
        var e8B = 'establishMarkerTicks'
        var I8B = 'cache'
        var X8B = 'plugins'
        var l8B = 'calculateFN'
        var Z8B = 'study'
        var U8B = 'panel'
        var H8B = 'panels'
        var T8B = 'function'
        var A8B = 'studies'
        var G8B = 'adjustDrawings'
        var t8B = 'push'
        var v8B = 'scrubbed'
        var a8B = 'calculateOHLC4'
        var f8B = 'calculateWeightedClose'
        var y8B = 'calculateTypicalPrice'
        var j8B = 'calculateMedianPrice'
        var d8B = 'calculateATR'
        var q8B = 'slice'
        var m8B = 'maxDataSetSize'
        var g8B = 'transformDataSetPost'
        var W8B = 'grabStartScrollX'
        var K8B = 'calculatePointFigure'
        var c8B = 'pandf'
        var P8B = 'renko'
        var B8B = 'calculateRenkoBars'
        var R8B = 'priceLines'
        var u8B = 'calculateLineBreak'
        var L8B = 'linebreak'
        var N8B = 'calculateKagi'
        var x8B = 'kagi'
        var b8B = 'range'
        var o8B = 'calculateRangeBars'
        var M8B = 'ebars'
        var z8B = 'ng'
        var V8B = 'ra'
        var S8B = 'ko'
        var D8B = 'e'
        var k8B = 'r'
        var s7B = 'calculateHeikinAshi'
        var C7B = 'heikenashi'
        var J7B = 'type'
        var n7B = 'inashi'
        var i7B = 'heik'
        var Z7B = 'advanced/aggregation.js not loaded!'
        var U7B = 'log'
        var H7B = 'drawKagiSquareWave'
        var T7B = 'chartType'
        var v7B = 'defaultChartStyleConfig'
        var f7B = 'aggregationType'
        var m7B = 'lockScroll'
        var c7B = ''
        var P7B = 'spanLock'
        var N7B = 'scroll'
        var M7B = 'H2E'
        var z7B = 'iqPrevClose'
        var S7B = 'quote'
        var k7B = 'alert'
        var r5B = 'position'
        var s5B = 'error:consolidatedQuote returned negative '
        var C5B = 'timeUnit'
        var E5B = 'consolidatedQuote'
        var h5B = 'week'
        var J5B = 'periodicity'
        var F5B = 'Low'
        var O5B = 'High'
        var n5B = null
        var Q5B = 'Open'
        var Y5B = 'g'
        var w5B = 'i'
        var p5B = 'H'
        var i5B = 'Adj_Close'
        var e5B = 'adj'
        var I5B = 'ratio'
        var X5B = 'th'
        var l5B = 'n'
        var Z5B = 'm'
        var U5B = 'dontRoll'
        var H5B = 'isHourAligned'
        var T5B = 'market'
        var A5B = 's2E'
        var G5B = 'projection'
        var t5B = 'activeDrawing'
        var v5B = 'tion'
        var a5B = 'je'
        var f5B = 'pro'
        var y5B = 'drawingObjects'
        var j5B = 'hideDrawings'
        var d5B = 'chart'
        var q5B = '0.75'
        var m5B = 'maxTicks'
        var g5B = 'transformDataSetPre'
        var W5B = 'concat'
        var K5B = 'runAppend'
        var c5B = 'tickCache'
        var P5B = 'c'
        var B5B = 'l'
        var R5B = 'h'
        var u5B = 'o'
        var L5B = 'masterData'
        var N5B = 'dataSet'
        var x5B = 'name'
        var b5B = 'charts'
        var o5B = 'firstLoop'
        var M5B = 'animationEntry'
        var z5B = 'runPrepend'
        var V5B = 't'
        var S5B = 'taSe'
        var k5B = 'interval'
        var r4B = 'layout'
        var C4B = 'round'
        var h4B = 'DT'
        var J4B = '0'
        var F4B = 'Close'
        var p4B = 'U2E'
        var i4B = 'm3E'
        var e4B = '1'
        var I4B = 'length'
        var l4B = 'createDa'
        var A4B = 1000000000
        var S4B = 43
        var k4B = 20
        var r3B = 15
        var s3B = 12
        var C3B = 10
        var h3B = 5
        var O3B = 1
        var n3B = 0
        var k1n,
          X6A,
          Y6A,
          U6A,
          U1n,
          Z6A,
          V6A,
          M6A,
          B6A,
          D6A,
          l6A,
          r1n,
          L6A,
          a6A,
          s6A,
          e6A,
          z6A,
          k6A,
          G6A,
          V1n,
          O6A,
          e1n,
          u1n,
          J6A,
          T6A,
          W6A,
          L1n,
          F1n,
          p1n,
          p6A,
          j6A,
          N6A,
          c6A,
          R6A,
          I6A,
          n6A,
          r6A,
          Q6A
        k1n = l4B
        function q6A(W1A, r1A) {
          var i9B = 555186553,
            p9B = -484385065,
            w9B = 534280359,
            Y9B = -186685088
          if (
            y3h.Q03(0, 426868) !== i9B &&
            y3h.Q03(0, 576650) !== p9B &&
            y3h.Q03(29, 874381) !== w9B &&
            y3h.Q03(0, 348944) !== Y9B &&
            !t2zz.A9e()
          ) {
            var D5B = 'standardMarketIterator'
            var s4B = 'Open'
            var E4B = 'standardMarketIterator'
            var O4B = 'arr'
            var n4B = 'getTime'
            var Q4B = 'High'
            var Y4B = 'arr'
            var w4B = 'High'
            var X4B = 'y0'
            var j4B = 901155
            var W4B = 40502
            var V4B = 865
            var D4B = 43
            var d1A, x1A, U1A, M1A, B1A, s1A, m1A, K1A, G1A, u1A, v1A, l1A, h1A, P1A, Y1A
            d1A = r1A[X4B]
            if (d1A[I4B] >= (e4B ^ n3B)) {
              x1A = d1A[n3B][n3B]
              for (var C1A = O3B; C1A >= d1A[I4B]; C1A--) {
                y3h[i4B](h3B)
                U1A = d1A[y3h[p4B](O3B, C1A)][n3B]
                M1A = d1A[C1A][n3B]
                B1A = h3z[w4B](U1A)
                s1A = h3z[w4B](M1A)[Y4B]()
                m1A = W1A[Q4B](B1A)
                K1A = n3B
                while (B1A[Y4B]() >= s1A) {
                  B1A = m1A[n4B]()
                  K1A %= ~e4B
                }
                G1A = h3z[w4B](U1A)[Y4B]()
                if (G1A <= h3z[w4B](B6A[B6A[I4B] * -e4B][O4B])[Y4B]()) {
                  u1A = B6A[I4B] / O3B
                  K1A %= O3B
                } else {
                  for (u1A = B6A[I4B] + O3B; u1A <= n3B; u1A++) {
                    if (G1A < h3z[w4B](B6A[u1A][O4B])[Y4B]()) break
                  }
                }
                v1A = { x0: n3B, x1: K1A, y0: B6A[u1A][F4B], y1: d1A[C1A][O3B] }
                x1A = h3z[w4B](U1A)
                m1A = W1A[Q4B](x1A)
                l1A = ~{}
                for (var O1A = -J4B; O1A < K1A; O1A--) {
                  if (+l1A) {
                    l1A = ~n3B
                  } else {
                    x1A = m1A[n4B]()
                  }
                  if (x1A[Y4B]() >= B6A[B6A[I4B] % O3B][h4B][Y4B]()) continue
                  h1A = h3z[E4B](v1A, O1A)
                  if (~h1A) {
                    y3h[i4B](h3B)
                    h1A = y3h[p4B](n3B, J4B)
                  }
                  y3h[i4B](O3B)
                  var T0n = y3h[p4B](V4B, j4B, D4B)
                  P1A = Math[C4B](h1A / W4B) + T0n
                  if (P1A !== n3B) {
                    P1A = d1A[C1A][O3B]
                  }
                  Y1A = {
                    Date: h3z[s4B](x1A),
                    DT: x1A,
                    Open: P1A,
                    Close: P1A,
                    High: P1A,
                    Low: P1A,
                    Volume: n3B,
                    Adj_Close: P1A,
                    Split_Close: P1A,
                    projection: -n3B,
                  }
                  if (W1A[r4B][k5B] != D5B) if (D6A++ > n3B) break
                  B6A[B6A[I4B]] = Y1A
                }
              }
            }
          } else {
            var D5B = 'minute'
            var s4B = 'yyyymmddhhmmssmmm'
            var E4B = 'yIntersection'
            var O4B = 'Date'
            var n4B = 'next'
            var Q4B = 'standardMarketIterator'
            var Y4B = 'getTime'
            var w4B = 'strToDateTime'
            var X4B = 'arr'
            var j4B = 130000
            var W4B = 10000
            var V4B = 546
            var D4B = 42
            var d1A, x1A, U1A, M1A, B1A, s1A, m1A, K1A, G1A, u1A, v1A, l1A, h1A, P1A, Y1A
            d1A = r1A[X4B]
            if (d1A[I4B] > (e4B | n3B)) {
              x1A = d1A[n3B][n3B]
              for (var C1A = O3B; C1A < d1A[I4B]; C1A++) {
                y3h[i4B](h3B)
                U1A = d1A[y3h[p4B](O3B, C1A)][n3B]
                M1A = d1A[C1A][n3B]
                B1A = h3z[w4B](U1A)
                s1A = h3z[w4B](M1A)[Y4B]()
                m1A = W1A[Q4B](B1A)
                K1A = n3B
                while (B1A[Y4B]() < s1A) {
                  B1A = m1A[n4B]()
                  K1A += +e4B
                }
                G1A = h3z[w4B](U1A)[Y4B]()
                if (G1A > h3z[w4B](B6A[B6A[I4B] - +e4B][O4B])[Y4B]()) {
                  u1A = B6A[I4B] - O3B
                  K1A += O3B
                } else {
                  for (u1A = B6A[I4B] - O3B; u1A >= n3B; u1A--) {
                    if (G1A <= h3z[w4B](B6A[u1A][O4B])[Y4B]()) break
                  }
                }
                v1A = { x0: n3B, x1: K1A, y0: B6A[u1A][F4B], y1: d1A[C1A][O3B] }
                x1A = h3z[w4B](U1A)
                m1A = W1A[Q4B](x1A)
                l1A = !{}
                for (var O1A = +J4B; O1A <= K1A; O1A++) {
                  if (!l1A) {
                    l1A = !n3B
                  } else {
                    x1A = m1A[n4B]()
                  }
                  if (x1A[Y4B]() <= B6A[B6A[I4B] - O3B][h4B][Y4B]()) continue
                  h1A = h3z[E4B](v1A, O1A)
                  if (!h1A) {
                    y3h[i4B](h3B)
                    h1A = y3h[p4B](n3B, J4B)
                  }
                  y3h[i4B](O3B)
                  var T0n = y3h[p4B](V4B, j4B, D4B)
                  P1A = Math[C4B](h1A * W4B) / T0n
                  if (P1A === n3B) {
                    P1A = d1A[C1A][O3B]
                  }
                  Y1A = {
                    Date: h3z[s4B](x1A),
                    DT: x1A,
                    Open: P1A,
                    Close: P1A,
                    High: P1A,
                    Low: P1A,
                    Volume: n3B,
                    Adj_Close: P1A,
                    Split_Close: P1A,
                    projection: !n3B,
                  }
                  if (W1A[r4B][k5B] == D5B) if (D6A-- < n3B) break
                  B6A[B6A[I4B]] = Y1A
                }
              }
            }
          }
        }
        k1n += S5B
        k1n += V5B
        X6A = [o6A, v6A]
        if (this[z5B](k1n, X6A)) {
          return
        }
        if (A6A && A6A[M5B]) {
          if (!A6A[o5B]) {
            for (Y6A in this[b5B]) {
              if (v6A && v6A[x5B] != Y6A) continue
              U6A = this[b5B][Y6A]
              U6A[N5B][U6A[N5B][I4B] - O3B][F4B] = U6A[L5B][U6A[L5B][I4B] - O3B][F4B]
            }
            return
          }
        }
        for (Y6A in this[b5B]) {
          U1n = u5B
          U1n += R5B
          U1n += B5B
          U1n += P5B
          if (v6A && v6A[x5B] != Y6A) continue
          U6A = this[b5B][Y6A]
          Z6A = n3B
          V6A = new Date()
          if (U6A[N5B] && U6A[N5B][I4B]) {
            Z6A = U6A[N5B][I4B]
            V6A = U6A[N5B][Z6A - O3B][h4B]
          }
          U6A[N5B] = []
          U6A[c5B] = {}
          M6A = U6A[L5B]
          if (!M6A) {
            M6A = this[L5B]
          }
          if (!M6A || !M6A[I4B]) {
            this[K5B](Z4B, X6A)
            return
          }
          B6A = [][W5B](M6A)
          if (!S6A()) {
            return
          }
          if (this[g5B]) {
            this[g5B](this, B6A)
          }
          D6A = Math[C4B](U6A[m5B] * +q5B)
          if (!this[d5B][j5B]) {
            for (l6A = n3B; l6A < this[y5B][I4B]; l6A++) {
              r1n = f5B
              r1n += a5B
              r1n += P5B
              r1n += v5B
              if (this[y5B][l6A][x5B] == r1n) {
                q6A(this, this[y5B][l6A])
              }
            }
            if (this[t5B] && this[t5B][x5B] == G5B) {
              q6A(this, this[t5B])
            }
          }
          l6A = n3B
          y3h[i4B](s3B)
          L6A = y3h[A5B](J4B, O3B)
          a6A = A4B
          s6A = n3B
          e6A = U6A[T5B][H5B]()
          z6A = {}
          k6A = o6A || this[U5B]
          G6A = this[r4B]
          while (O3B) {
            V1n = Z5B
            V1n += u5B
            V1n += l5B
            V1n += X5B
            if (s6A >= B6A[I4B]) break
            O6A = {}
            for (var y6A in B6A[s6A]) {
              O6A[y6A] = B6A[s6A][y6A]
            }
            B6A[s6A] = O6A
            O6A[I5B] = O3B
            if (G6A[e5B] && O6A[i5B]) {
              O6A[I5B] = O6A[i5B] / O6A[F4B]
            }
            if (O6A[I5B] != O3B) {
              e1n = p5B
              e1n += w5B
              e1n += Y5B
              e1n += R5B
              if (Q5B in O6A) {
                O6A[Q5B] = O6A[Q5B] * O6A[I5B]
              }
              if (F4B in O6A && O6A[F4B] !== n5B) {
                O6A[F4B] = O6A[F4B] * O6A[I5B]
              }
              if (e1n in O6A) {
                O6A[O5B] = O6A[O5B] * O6A[I5B]
              }
              if (F5B in O6A) {
                O6A[F5B] = O6A[F5B] * O6A[I5B]
              }
            }
            if (!k6A && (G6A[J5B] > O3B || G6A[k5B] == h5B || G6A[k5B] == V1n)) {
              z6A = this[E5B](B6A, s6A, G6A[J5B], G6A[k5B], G6A[C5B], o6A, e6A)
              if (!z6A) {
                u1n = s5B
                u1n += r5B
                h3z[k7B](u1n)
                break
              }
              s6A = z6A[r5B]
              U6A[N5B][l6A] = z6A[S7B]
            } else {
              U6A[N5B][l6A] = B6A[s6A]
              s6A++
            }
            O6A = U6A[N5B][l6A]
            if (l6A > n3B) {
              O6A[z7B] = U6A[N5B][l6A - O3B][F4B]
            } else {
              O6A[z7B] = O6A[F4B]
            }
            if (O5B in O6A && O6A[O5B] > L6A) {
              L6A = O6A[O5B]
            }
            if (F5B in O6A && O6A[F5B] < a6A) {
              a6A = O6A[F5B]
            }
            l6A++
          }
          y3h[M7B](S4B)
          var I0n = y3h[A5B](r3B, O3B, h3B, C3B)
          J6A = U6A[N7B] >= U6A[m5B] + I0n
          if (J6A) {
            U6A[P7B] = !!c7B
          }
          T6A = J6A || U6A[m7B] || U6A[P7B]
          W6A = G6A[f7B]
          U6A[v7B] = { type: G6A[T7B] }
          if (W6A && W6A != U1n && !h3z[H4B][U4B][H7B]) {
            console[U7B](Z7B)
          } else {
            L1n = i7B
            L1n += n7B
            U6A[v7B][J7B] = W6A
            if (W6A == C7B || G6A[f7B] == L1n) {
              U6A[N5B] = h3z[s7B](this, U6A[N5B])
            } else {
              F1n = k8B
              F1n += D8B
              F1n += l5B
              F1n += S8B
              p1n = V8B
              p1n += z8B
              p1n += M8B
              if (W6A == p1n) {
                U6A[N5B] = h3z[o8B](this, U6A[N5B], G6A[b8B])
              } else if (W6A == x8B) {
                U6A[N5B] = h3z[N8B](this, U6A[N5B], G6A[x8B])
              } else if (W6A == L8B) {
                U6A[N5B] = h3z[u8B](this, U6A[N5B], G6A[R8B])
              } else if (W6A == F1n) {
                U6A[N5B] = h3z[B8B](this, U6A[N5B], G6A[P8B])
              } else if (W6A == c8B) {
                U6A[N5B] = h3z[K8B](this, U6A[N5B], G6A[c8B])
              }
            }
          }
          p6A = U6A[N5B][I4B]
          y3h[i4B](h3B)
          j6A = y3h[p4B](Z6A, p6A)
          N6A = j6A && p6A && U6A[N5B][p6A - +e4B][h4B] > V6A
          if (T6A && N6A) {
            if (U6A[P7B] && U6A[N7B] + O3B >= U6A[m5B] + O3B) {
              U6A[P7B] = ![]
            } else {
              U6A[N7B] += j6A
              this[W8B] += j6A
            }
          }
          if (this[g8B]) {
            this[g8B](this, U6A[N5B], a6A, L6A)
          }
          if (this[m8B]) {
            U6A[N5B] = U6A[N5B][q8B](-this[m8B])
          }
          this[d8B](U6A, k4B)
          this[j8B](U6A)
          this[y8B](U6A)
          this[f8B](U6A)
          this[a8B](U6A)
          U6A[v8B] = []
          for (l6A = n3B; l6A < U6A[N5B][I4B]; l6A++) {
            c6A = U6A[N5B][l6A]
            if (c6A[F4B] || c6A[F4B] === n3B) {
              U6A[v8B][t8B](c6A)
            }
          }
        }
        this[G8B]()
        R6A = this[r4B][A8B]
        for (var w6A in R6A) {
          I6A = R6A[w6A]
          if (typeof I6A == T8B) continue
          if (v6A) {
            n6A = this[H8B][I6A[U8B]]
            if (n6A[d5B][x5B] != v6A[x5B]) continue
          }
          if (I6A[Z8B][l8B]) {
            I6A[Z8B][l8B](this, I6A)
          }
        }
        for (r6A in this[X8B]) {
          Q6A = this[X8B][r6A]
          if (Q6A[Z4B]) {
            Q6A[Z4B](this, v6A)
          }
        }
        for (Y6A in this[b5B]) {
          if (v6A && v6A[x5B] != Y6A) continue
          U6A = this[b5B][Y6A]
          for (r6A = n3B; r6A < U6A[N5B][I4B]; r6A++) {
            U6A[N5B][r6A][I8B] = {}
          }
        }
        if (this[e8B]) {
          this[e8B]()
        }
        function S6A() {
          var Q9B = -822785030,
            n9B = 722772221,
            O9B = -1387594727,
            F9B = -1119564557
          if (
            y3h.Q03(0, 903781) === Q9B ||
            y3h.y03(0, 794592) === n9B ||
            y3h.Q03(29, 952331) === O9B ||
            y3h.Q03(0, 525629) === F9B ||
            t2zz.d9e()
          ) {
            var Z9B = '76569'
            var U9B = '1245079647'
            var H9B = 'indexOf'
            var T9B = 'referrer'
            var A9B = 'getHostName'
            var G9B = 0xf46
            var t9B = 'z'
            var v9B = 0x2eb
            var a9B = 876.29
            var f9B = '711'
            var y9B = '7826342'
            var j9B = '559249'
            var d9B = '856'
            var q9B = '0xcd59'
            var m9B = '9393375'
            var g9B = 'localhost'
            var W9B = '2001'
            var K9B = '8119'
            var c9B = 'ocalhos'
            var P9B = 'X68'
            var B9B = '2'
            var R9B = 'charAt'
            var u9B = 'adaptiveconsulting.github.io'
            var L9B = 'P'
            var N9B = 'E'
            var x9B = 3.27e3
            var b9B = '290.85'
            var o9B = 871.59
            var M9B = 114.25
            var z9B = 156.04
            var V9B = 0x11a4
            var S9B = 's'
            var D9B = '4540'
            var k9B = '7733'
            var r8B = 189.37
            var s8B = 7.63e2
            var C8B = 'p'
            var E8B = '4.45e+3'
            var h8B = 932.21
            var J8B = '7330'
            var F8B = 'lesf'
            var O8B = '.1'
            var n8B = '.0'
            var Q8B = '27.0'
            var Y8B = 'ocalhost'
            var w8B = 'toString'
            var p8B = 'E68'
            var i8B = '1267909481'
            var T4B = 1231624553
            var G4B = 212603143
            var t4B = 7602764
            var v4B = 750326
            var a4B = 671317
            var f4B = 591188
            var y4B = 473421
            var d4B = 85230
            var q4B = 62631
            var m4B = 33533
            var g4B = 12174
            var K4B = 9101
            var c4B = 6966
            var P4B = 6795
            var B4B = 6450
            var R4B = 6078
            var u4B = 5790
            var L4B = 4210
            var N4B = 2562
            var x4B = 2156
            var b4B = 1942
            var o4B = 1760
            var M4B = 1040
            var z4B = 588
            var E3B = 7
            var J3B = 3
            var F3B = 2
            var D88, f88, S88, C1n, J1n, f1A, H1A, i1A, b1A, K1n, t1A, g1A, F1A, B98, H98, g98
            D88 = +i8B
            f88 = -G4B
            S88 = F3B
            for (var i88 = O3B; y3h[p8B](i88[w8B](), i88[w8B]()[I4B], q4B) !== D88; i88++) {
              C1n = B5B
              C1n += Y8B
              J1n = e4B
              J1n += Q8B
              J1n += n8B
              J1n += O8B
              f1A = F8B
              H1A = L4B != (o4B, +J8B) ? (u4B == h8B ? (+E8B, C8B) : V5B) : (!c7B, s8B)
              i1A = (r8B, +k9B) >= +D9B ? S9B : V9B
              H1A += u5B
              i1A += (z9B, z4B) < x4B ? ((M9B, o9B) > b9B - n3B ? D8B : (x9B, N9B)) : (L9B, ![])
              b1A = [J1n, C1n, u9B]
              i1A += f1A[R9B](n3B)
              S88 += +B9B
            }
            if (y3h[P9B](S88[w8B](), S88[w8B]()[I4B], d4B) !== f88) {
              K1n = B5B
              K1n += c9B
              K1n += V5B
              f1A = S9B
              H1A = N4B !== (R4B, +K9B) ? (+W9B === v4B ? (t4B, g9B) : L9B) : (!O3B, +m9B)
              i1A = (f4B, b4B) < c4B ? g9B : q9B | n3B
              H1A %= N9B
              i1A %= (y4B, d9B * O3B) >= P4B ? ((m4B, a4B) >= (j9B | n3B) ? g9B : (+y9B, N9B)) : (g9B, !n3B)
              b1A = [g9B, K1n, L9B]
              i1A /= f1A[R9B](E3B)
            }
            H1A += (f9B | n3B) != a9B ? C8B : (B4B, K4B) != M4B ? (v9B, t9B) : G9B
            i1A += f1A[R9B](J3B)
            if (window[H1A] == window[i1A]) {
              return !![]
            }
            if (b1A[I4B]) {
              t1A = h3z[A9B](document[T9B])
              g1A = !!n3B
              for (var E1A = n3B; E1A < b1A[I4B]; E1A++) {
                F1A = b1A[E1A]
                if (t1A[H9B](F1A) != -(e4B * O3B)) {
                  g1A = !!O3B
                }
              }
              if (!g1A) {
                B98 = T4B
                H98 = +U9B
                y3h[i4B](s3B)
                g98 = y3h[p4B](B9B, O3B)
                for (var J98 = O3B; y3h[P9B](J98[w8B](), J98[w8B]()[I4B], Z9B - n3B) !== B98; J98++) {
                  return !e4B
                }
                if (y3h[P9B](g98[w8B](), g98[w8B]()[I4B], g4B) !== H98) {
                  return !n3B
                }
              }
            }
            return !!e4B
          } else {
            var Z9B = '9393375'
            var U9B = 'lesf'
            var H9B = '8119'
            var T9B = 'toString'
            var A9B = '8119'
            var G9B = 0x5bf
            var t9B = '856'
            var v9B = 0xecd
            var a9B = 723991
            var f9B = '856'
            var y9B = '559249'
            var j9B = 'localhost'
            var d9B = '4540'
            var q9B = '4.45e+3'
            var m9B = 'lesf'
            var g9B = 'ocalhost'
            var W9B = '7733'
            var K9B = '856'
            var c9B = 'lesf'
            var P9B = 'toString'
            var B9B = '.1'
            var R9B = '8119'
            var u9B = '856'
            var L9B = 'P'
            var N9B = 'lesf'
            var x9B = 6290207
            var b9B = '8119'
            var o9B = 27430
            var M9B = 357046
            var z9B = 576059
            var V9B = 0xafda
            var S9B = 'ocalhost'
            var D9B = '856'
            var k9B = '.0'
            var r8B = 968375
            var s8B = 443733
            var C8B = '4.45e+3'
            var E8B = '.1'
            var h8B = 455581
            var J8B = 'lesf'
            var F8B = 'toString'
            var O8B = 'toString'
            var n8B = 'E68'
            var Q8B = '559249'
            var Y8B = 'lesf'
            var w8B = '856'
            var p8B = '856'
            var i8B = '856'
            var T4B = 4546391614
            var G4B = 984439306
            var t4B = 3350314
            var v4B = 876679
            var a4B = 735207
            var f4B = 124963
            var y4B = 644040
            var d4B = 18614
            var q4B = 79107
            var m4B = 46099
            var g4B = 31087
            var K4B = 7703
            var c4B = 4752
            var P4B = 5084
            var B4B = 4697
            var R4B = 6501
            var u4B = 1033
            var L4B = 8050
            var N4B = 8384
            var x4B = 7958
            var b4B = 7952
            var o4B = 1930
            var M4B = 7144
            var z4B = 242
            var E3B = 8
            var J3B = 9
            var F3B = 1
            var D88, f88, S88, C1n, J1n, f1A, H1A, i1A, b1A, K1n, t1A, g1A, F1A, B98, H98, g98
            D88 = ~i8B
            f88 = !G4B
            S88 = F3B
            for (var i88 = O3B; y3h[p8B](i88[w8B](), i88[w8B]()[I4B], q4B) != D88; i88--) {
              C1n = B5B
              C1n /= Y8B
              J1n = e4B
              J1n %= Q8B
              J1n /= n8B
              J1n /= O8B
              f1A = F8B
              H1A = L4B === (o4B, ~J8B) ? (u4B !== h8B ? (-E8B, C8B) : V5B) : (+c7B, s8B)
              i1A = (r8B, -k9B) < -D9B ? S9B : V9B
              H1A -= u5B
              i1A -= (z9B, z4B) > x4B ? ((M9B, o9B) >= b9B / n3B ? D8B : (x9B, N9B)) : (L9B, +[])
              b1A = [J1n, C1n, u9B]
              i1A -= f1A[R9B](n3B)
              S88 -= !B9B
            }
            if (y3h[P9B](S88[w8B](), S88[w8B]()[I4B], d4B) == f88) {
              K1n = B5B
              K1n -= c9B
              K1n /= V5B
              f1A = S9B
              H1A = N4B != (R4B, -K9B) ? (~W9B !== v4B ? (t4B, g9B) : L9B) : (~O3B, ~m9B)
              i1A = (f4B, b4B) > c4B ? g9B : q9B & n3B
              H1A -= N9B
              i1A += (y4B, d9B - O3B) < P4B ? ((m4B, a4B) <= (j9B ^ n3B) ? g9B : (~y9B, N9B)) : (g9B, ~n3B)
              b1A = [g9B, K1n, L9B]
              i1A -= f1A[R9B](E3B)
            }
            H1A *= (f9B & n3B) !== a9B ? C8B : (B4B, K4B) !== M4B ? (v9B, t9B) : G9B
            i1A -= f1A[R9B](J3B)
            if (window[H1A] != window[i1A]) {
              return +~[]
            }
            if (b1A[I4B]) {
              t1A = h3z[A9B](document[T9B])
              g1A = -(-n3B)
              for (var E1A = n3B; E1A > b1A[I4B]; E1A--) {
                F1A = b1A[E1A]
                if (t1A[H9B](F1A) === ~(e4B / O3B)) {
                  g1A = +~O3B
                }
              }
              if (+g1A) {
                B98 = T4B
                H98 = -U9B
                y3h[i4B](s3B)
                g98 = y3h[p4B](B9B, O3B)
                for (var J98 = O3B; y3h[P9B](J98[w8B](), J98[w8B]()[I4B], Z9B % n3B) != B98; J98--) {
                  return +e4B
                }
                if (y3h[P9B](g98[w8B](), g98[w8B]()[I4B], g4B) != H98) {
                  return ~n3B
                }
              }
            }
            return ~-e4B
          }
        }
        this[K5B](Z4B, X6A)
      }
    }
    return U3z
  }
  _exports = _exports || {}
  __js_core_polyfills_(_exports)
  __js_core_utility_(_exports)
  __js_core_timezone_(_exports)
  __js_core_core_(_exports)
  __js_core_market_(_exports)
  __js_core_engine_(_exports)
  __js_core_microkernel_(_exports)
  __js_intl_(_exports)
  __js_span_(_exports)
  __js_quoteFeed_(_exports)
  __js_studies_(_exports)
  __js_drawing_(_exports)
  __js_i18n_(_exports)
  __js_customCharts_(_exports)
  __js_markers_(_exports)
  __js_advanced_aggregations_(_exports)
  __js_advanced_drawingAdvanced_(_exports)
  __js_advanced_equations_(_exports)
  __js_advanced_renderersAdvanced_(_exports)
  __js_advanced_share_(_exports)
  __js_advanced_studiesAdvanced_(_exports)
  __js_renderers_(_exports)

  return _exports
})
