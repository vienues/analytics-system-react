type Company {
  id: ID!
  name: String
  symbol: String!
  exchange: String
  industry: String
  website: String
  description: String
  CEO: String
  issueType: String
  sector: String
}

type Crypto {
  symbol: ID!
  name: String!
  quote: Quote!
}

"""
Date in ISO 8601 format, i.e. YYYY-MM-DD
"""
scalar Date

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FxCurrencies {
  code: ID!
  name: String!
}

type FxPairs {
  from: String!
  to: String!
}

type FxPricing {
  Pair: FxPairs!
  ask: Float!
  bid: Float!
  creationTimestamp: ISODateTime
  mid: Float!
  valueDate: Date!
}

type FxRate {
  date: DateTime!
  fromCurrency: String!
  toCurrency: String!
  rate: Float!
}

type FxSymbols {
  currencies: [FxCurrencies!]!
  pairs: [FxPairs!]!
}

type Intraday {
  date: Date
  minute: Time
  datetime: ISODateTime
  high: Float
  low: Float
  average: Float
  open: Float
  close: Float
  volume: Float
  notional: Float
  numberOfTrades: Int
}

"""
Date and time in ISO 8601 format, i.e. YYYY-MM-DDTHH:mm:ss.sssZ
"""
scalar ISODateTime

"""
The type of market
"""
enum MarketSegment {
  FX
  STOCK
  INDEX
  FUTURE
  BOND
  CRYPTO
}

type News {
  id: ID!
  datetime: ISODateTime!
  headline: String!
  source: String!
  url: String!
  summary: String!
  related: String!
}

type OLHC {
  symbol: ID!
  open: Float
  close: Float
  openTime: ISODateTime
  closeTime: ISODateTime
  high: Float
  low: Float
}

type Previous {
  symbol: ID!
  date: Date!
  open: Float!
  high: Float!
  low: Float!
  close: Float!
  volume: Int!
  unadjustedVolume: Int!
  change: Float!
  changePercent: Float!
  vwap: Float!
}

type Query {
  company(id: String!): Company!
  quote(id: ID = ""): Quote!
  markets: [Quote!]!
  crypto(symbol: String!): Crypto!
  cryptoSymbols(text: String!): [SearchResult!]!
  getPriceHistory(from: String!, to: String!): [FxPricing!]!
  news(id: ID = "", last: Int = 0): [News!]!
  symbol(market: String!, id: String!): SearchResult!
  symbols(text: String!, marketSegment: MarketSegment!): [SearchResult!]!
  stats(id: String!): Stats!
  intradayPrices(symbol: String!, lastN: Int!): [Intraday!]!
  stock(id: ID = ""): Stock!
  OLHC(id: ID = ""): OLHC!
  search(text: String!): [SearchResult!]!
}

type Quote {
  id: ID!
  symbol: String!
  company: Company
  companyName: String
  calculationPrice: String
  open: Float
  openTime: ISODateTime
  close: Float
  closeTime: ISODateTime
  high: Float
  low: Float
  latestPrice: Float
  latestSource: String
  latestTime: Time
  latestUpdate: ISODateTime
  latestVolume: Float
  iexRealtimePrice: Float
  iexRealtimeSize: Int
  iexLastUpdated: ISODateTime
  delayedPrice: Float
  delayedPriceTime: ISODateTime
  previousClose: Float
  change: Float
  changePercent: Float
  iexMarketPercent: Float
  iexVolume: Int
  avgTotalVolume: Int
  iexBidPrice: Float
  iexBidSize: Int
  iexAskPrice: Float
  iexAskSize: Int
  marketCap: Float
  peRatio: Float
  week52High: Float
  week52Low: Float
  ytdChange: Float
}

type SearchResult {
  id: ID!
  name: String!
}

type Stats {
  id: ID!
  symbol: String!
  company: Company
  companyName: String
  marketcap: Float
  week52high: Float
  week52low: Float
  week52change: Float
  sharesOutstanding: Float
  float: Float
  avg10Volume: Int
  avg30Volume: Int
  day200MovingAvg: Float
  day50MovingAvg: Float
  employees: Int
  ttmEPS: Float
  ttmDividendRate: Float
  dividendYield: Float
  nextDividendDate: Date
  exDividendDate: Date
  nextEarningsDate: Date
  peRatio: Float
  beta: Float
  maxChangePercent: Float
  year5ChangePercent: Float
  year2ChangePercent: Float
  year1ChangePercent: Float
  ytdChangePercent: Float
  month6ChangePercent: Float
  month3ChangePercent: Float
  month1ChangePercent: Float
  day30ChangePercent: Float
  day5ChangePercent: Float
}

type Stock {
  id: ID!
  symbol: String!
  price: Float!
  stats: Stats!
  peers: [String!]!
  chart: [Tick!]!
  company: Company!
  quote: Quote!
  news(last: Float!): [News!]!
  previous: Previous!
}

type Subscription {
  getQuotes(symbols: [String!]!): Quote!
  getIntradayPrices(symbol: String!): [Intraday!]!
}

type Tick {
  date: Date!
  minute: Time!
  datetime: ISODateTime!
  label: String!
  high: Float
  low: Float
  average: Float
  open: Float
  close: Float
  volume: Float!
  notional: Float!
  numberOfTrades: Float!
  changeOverTime: Float!
  marketHigh: Float!
  marketLow: Float!
  marketAverage: Float!
  marketVolume: Float!
  marketNotional: Float!
  marketNumberOfTrades: Float!
  marketChangeOverTime: Float!
}

"""
Hours and minutes in ISO 8601 format HH:mm
"""
scalar Time
