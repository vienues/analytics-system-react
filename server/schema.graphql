# Date in ISO 8601 format, i.e. YYYY-MM-DD
scalar Date

# Date and time in ISO 8601 format, i.e. YYYY-MM-DDTHH:mm:ss.sssZ
scalar DateTime

# Hours and minutes in ISO 8601 format HH:mm
scalar Time

interface Symbol {
  id: ID!
  symbol: String
}

type Stock implements Symbol {
  id: ID!
  symbol: String
  price: Float
  stats: StockStats
  peers: [String]
  chart(tenor: String = "1d", date: Date): [Tick]
  company: Company
  quote: Quote
  news(last: Int = 5): [News]
  previous: Tick
}

type StockStats {
  company: Company
  companyName: String
  marketcap: Float
  beta: Float
  week52high: Float
  week52low: Float
  week52change: Float
  shortInterest: Float
  shortDate: Date
  dividendRate: Float
  dividendYield: Float
  exDividendDate: Date
  latestEPS: Float
  latestEPSDate: String
  sharesOutstanding: Float
  float: Float
  returnOnEquity: Float
  consensusEPS: Float
  numberOfEstimates: Float
  symbol: String
  EBITDA: Float
  revenue: Float
  grossProfit: Float
  cash: Float
  debt: Float
  ttmEPS: Float
  revenuePerShare: Float
  revenuePerEmployee: Float
  peRatioHigh: Float
  peRatioLow: Float
  EPSSurpriseDollar: String
  EPSSurprisePercent: Float
  returnOnAssets: Float
  returnOnCapital: String
  profitMargin: Float
  priceToSales: Float
  priceToBook: Float
  day200MovingAvg: Float
  day50MovingAvg: Float
  institutionPercent: Float
  insiderPercent: String
  shortRatio: Float
  year5ChangePercent: Float
  year2ChangePercent: Float
  year1ChangePercent: Float
  ytdChangePercent: Float
  month6ChangePercent: Float
  month3ChangePercent: Float
  month1ChangePercent: Float
  day5ChangePercent: Float
}

type Tick {
  date: Date
  minute: Time
  datetime: DateTime
  label: String
  high: Float
  low: Float
  average: Float
  volume: Float
  notional: Float
  numberOfTrades: Float
  changeOverTime: Float
  marktHigh: Float
  marketLow: Float
  marketAverage: Float
  marketVolume: Float
  marketNotional: Float
  marketNumberOfTrades: Float
  marketChangeOverTime: Float
}

type Quote {
  id: ID
  symbol: String
  company: Company
  companyName: String
  primaryExchange: String
  sector: String
  calculationPrice: String
  open: Float
  openTime: DateTime
  close: Float
  closeTime: DateTime
  high: Float
  low: Float
  latestPrice: Float
  latestSource: String
  latestTime: DateTime
  latestUpdate: DateTime
  latestVolume: Int
  iexRealtimePrice: Float
  iexRealtimeSize: Int
  iexLastUpdated: DateTime
  delayedPrice: Float
  delayedPriceTime: DateTime
  previousClose: Float
  change: Float
  changePercent: Float
  iexMarketPercent: Float
  iexVolume: Int
  avgTotalVolume: Int
  iexBidPrice: Float
  iexBidSize: Int
  iexAskPrice: Float
  iexAskSize: Int
  marketCap: Float
  peRatio: Float
  week52High: Float
  week52Low: Float
  ytdChange: Float
}

type Company {
  id: ID!
  symbol: String
  name: String
  exchange: String
  industry: String
  website: String
  description: String
  CEO: String
  issueType: String
  sector: String
  peers: [String]
}

type News {
  id: ID!
  datetime: String
  headline: String
  source: String
  url: String
  summary: String
  related: String
}

type Index {
  id: String
  name: String
  change: String
  volume: Float
}

type PeerPrice {
  id: ID!
  symbol: String
  marketPercent: Float
  bidSize: Int
  bidPrice: Float
  askSize: Int
  askPrice: Float
  volume: Int
  lastSalePrice: Float
  lastSaleSize: Int
  lastSaleTime: DateTime
  lastUpdated: Int
  sector: String
  securityType: String
}

type Earnings {
  actualEPS: Float
  consensusEPS: Float
  estimatedEPS: Float
  announceTime: String
  numberOfEstimates: Int
  EPSSurpriseDollar: Float
  EPSReportDate: Date
  fiscalPeriod: String
  fiscalEndDate: Date
}

type TOP {
  id: ID!
  symbol: String
  marketPercent: Float
  bidSize: Float
  bidPrice: Float
  askSize: Float
  askPrice: Float
  volume: Float
  lastSalePrice: Float
  lastSaleSize: Float
  lastSaleTime: Float
  lastUpdated: Float
  sector: String
  securityType: String
}

type ReferenceQuery {
  symbols: [ReferenceSymbol!]!
}

type ReferenceSymbol implements Symbol {
  id: ID!
  symbol: String
  name: String
  type: String
}

type SearchResult {
  id: String!
  name: String!
}

type Query {
  search(text: String): [SearchResult!]!
  company(id: ID!): Company
  stock(id: ID!): Stock
  reference: ReferenceQuery
  markets: [Quote!]!
  TOPS: [TOP!]!
}

type Subscription {
  symbols(ids: [ID]): [Symbol!]
  getQuotes(symbols: [String!]!): Quote!
}

schema {
  query: Query
  subscription: Subscription
}
